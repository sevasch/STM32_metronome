
LCD_Basis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a40  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  08005c10  08005c10  00015c10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006238  08006238  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006238  08006238  00016238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006240  08006240  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006240  08006240  00016240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006244  08006244  00016244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  200001dc  08006424  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e0  08006424  000207e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4ef  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d6c  00000000  00000000  0002c6fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a10  00000000  00000000  0002e468  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000928  00000000  00000000  0002ee78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000212af  00000000  00000000  0002f7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a0ad  00000000  00000000  00050a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9b1c  00000000  00000000  0005aafc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124618  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003274  00000000  00000000  00124694  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005bf8 	.word	0x08005bf8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08005bf8 	.word	0x08005bf8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 f92f 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f808 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f002 fcca 	bl	8003954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f939 	bl	8001262 <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001008:	f000 f90f 	bl	800122a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000008 	.word	0x20000008
 8001024:	20000004 	.word	0x20000004
 8001028:	20000000 	.word	0x20000000

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000004 	.word	0x20000004
 8001050:	20000408 	.word	0x20000408

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000408 	.word	0x20000408

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_Delay+0x40>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffde 	bl	8001054 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000004 	.word	0x20000004

080010b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e2:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	60d3      	str	r3, [r2, #12]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <__NVIC_GetPriorityGrouping+0x18>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	f003 0307 	and.w	r3, r3, #7
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	; (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	; (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e0:	d301      	bcc.n	80011e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00f      	b.n	8001206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <SysTick_Config+0x40>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ee:	210f      	movs	r1, #15
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f4:	f7ff ff8e 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <SysTick_Config+0x40>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <SysTick_Config+0x40>)
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff47 	bl	80010b0 <__NVIC_SetPriorityGrouping>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800123c:	f7ff ff5c 	bl	80010f8 <__NVIC_GetPriorityGrouping>
 8001240:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	6978      	ldr	r0, [r7, #20]
 8001248:	f7ff ff8e 	bl	8001168 <NVIC_EncodePriority>
 800124c:	4602      	mov	r2, r0
 800124e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff5d 	bl	8001114 <__NVIC_SetPriority>
}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ffb0 	bl	80011d0 <SysTick_Config>
 8001270:	4603      	mov	r3, r0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	e165      	b.n	8001564 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001298:	2201      	movs	r2, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	f040 8154 	bne.w	800155e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x4a>
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b12      	cmp	r3, #18
 80012c4:	d123      	bne.n	800130e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	220f      	movs	r2, #15
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	691a      	ldr	r2, [r3, #16]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	08da      	lsrs	r2, r3, #3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3208      	adds	r2, #8
 8001308:	69b9      	ldr	r1, [r7, #24]
 800130a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	2203      	movs	r2, #3
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0203 	and.w	r2, r3, #3
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d00b      	beq.n	8001362 <HAL_GPIO_Init+0xe6>
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d007      	beq.n	8001362 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001356:	2b11      	cmp	r3, #17
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b12      	cmp	r3, #18
 8001360:	d130      	bne.n	80013c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	2203      	movs	r2, #3
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	68da      	ldr	r2, [r3, #12]
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001398:	2201      	movs	r2, #1
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	f003 0201 	and.w	r2, r3, #1
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80ae 	beq.w	800155e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b5c      	ldr	r3, [pc, #368]	; (8001578 <HAL_GPIO_Init+0x2fc>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a5b      	ldr	r2, [pc, #364]	; (8001578 <HAL_GPIO_Init+0x2fc>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b59      	ldr	r3, [pc, #356]	; (8001578 <HAL_GPIO_Init+0x2fc>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800141e:	4a57      	ldr	r2, [pc, #348]	; (800157c <HAL_GPIO_Init+0x300>)
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3302      	adds	r3, #2
 8001426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	220f      	movs	r2, #15
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4e      	ldr	r2, [pc, #312]	; (8001580 <HAL_GPIO_Init+0x304>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d025      	beq.n	8001496 <HAL_GPIO_Init+0x21a>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4d      	ldr	r2, [pc, #308]	; (8001584 <HAL_GPIO_Init+0x308>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d01f      	beq.n	8001492 <HAL_GPIO_Init+0x216>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4c      	ldr	r2, [pc, #304]	; (8001588 <HAL_GPIO_Init+0x30c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d019      	beq.n	800148e <HAL_GPIO_Init+0x212>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4b      	ldr	r2, [pc, #300]	; (800158c <HAL_GPIO_Init+0x310>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d013      	beq.n	800148a <HAL_GPIO_Init+0x20e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4a      	ldr	r2, [pc, #296]	; (8001590 <HAL_GPIO_Init+0x314>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d00d      	beq.n	8001486 <HAL_GPIO_Init+0x20a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a49      	ldr	r2, [pc, #292]	; (8001594 <HAL_GPIO_Init+0x318>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d007      	beq.n	8001482 <HAL_GPIO_Init+0x206>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a48      	ldr	r2, [pc, #288]	; (8001598 <HAL_GPIO_Init+0x31c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d101      	bne.n	800147e <HAL_GPIO_Init+0x202>
 800147a:	2306      	movs	r3, #6
 800147c:	e00c      	b.n	8001498 <HAL_GPIO_Init+0x21c>
 800147e:	2307      	movs	r3, #7
 8001480:	e00a      	b.n	8001498 <HAL_GPIO_Init+0x21c>
 8001482:	2305      	movs	r3, #5
 8001484:	e008      	b.n	8001498 <HAL_GPIO_Init+0x21c>
 8001486:	2304      	movs	r3, #4
 8001488:	e006      	b.n	8001498 <HAL_GPIO_Init+0x21c>
 800148a:	2303      	movs	r3, #3
 800148c:	e004      	b.n	8001498 <HAL_GPIO_Init+0x21c>
 800148e:	2302      	movs	r3, #2
 8001490:	e002      	b.n	8001498 <HAL_GPIO_Init+0x21c>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <HAL_GPIO_Init+0x21c>
 8001496:	2300      	movs	r3, #0
 8001498:	69fa      	ldr	r2, [r7, #28]
 800149a:	f002 0203 	and.w	r2, r2, #3
 800149e:	0092      	lsls	r2, r2, #2
 80014a0:	4093      	lsls	r3, r2
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014a8:	4934      	ldr	r1, [pc, #208]	; (800157c <HAL_GPIO_Init+0x300>)
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	089b      	lsrs	r3, r3, #2
 80014ae:	3302      	adds	r3, #2
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b6:	4b39      	ldr	r3, [pc, #228]	; (800159c <HAL_GPIO_Init+0x320>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014da:	4a30      	ldr	r2, [pc, #192]	; (800159c <HAL_GPIO_Init+0x320>)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014e0:	4b2e      	ldr	r3, [pc, #184]	; (800159c <HAL_GPIO_Init+0x320>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001504:	4a25      	ldr	r2, [pc, #148]	; (800159c <HAL_GPIO_Init+0x320>)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800150a:	4b24      	ldr	r3, [pc, #144]	; (800159c <HAL_GPIO_Init+0x320>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800152e:	4a1b      	ldr	r2, [pc, #108]	; (800159c <HAL_GPIO_Init+0x320>)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001534:	4b19      	ldr	r3, [pc, #100]	; (800159c <HAL_GPIO_Init+0x320>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001558:	4a10      	ldr	r2, [pc, #64]	; (800159c <HAL_GPIO_Init+0x320>)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3301      	adds	r3, #1
 8001562:	61fb      	str	r3, [r7, #28]
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	2b0f      	cmp	r3, #15
 8001568:	f67f ae96 	bls.w	8001298 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800156c:	bf00      	nop
 800156e:	3724      	adds	r7, #36	; 0x24
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	40023800 	.word	0x40023800
 800157c:	40013800 	.word	0x40013800
 8001580:	40020000 	.word	0x40020000
 8001584:	40020400 	.word	0x40020400
 8001588:	40020800 	.word	0x40020800
 800158c:	40020c00 	.word	0x40020c00
 8001590:	40021000 	.word	0x40021000
 8001594:	40021400 	.word	0x40021400
 8001598:	40021800 	.word	0x40021800
 800159c:	40013c00 	.word	0x40013c00

080015a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
 80015ac:	4613      	mov	r3, r2
 80015ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b0:	787b      	ldrb	r3, [r7, #1]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015bc:	e003      	b.n	80015c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015be:	887b      	ldrh	r3, [r7, #2]
 80015c0:	041a      	lsls	r2, r3, #16
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	619a      	str	r2, [r3, #24]
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	887b      	ldrh	r3, [r7, #2]
 80015e4:	401a      	ands	r2, r3
 80015e6:	887b      	ldrh	r3, [r7, #2]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d104      	bne.n	80015f6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	041a      	lsls	r2, r3, #16
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e10f      	b.n	800183a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d106      	bne.n	8001634 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f001 fcc0 	bl	8002fb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2224      	movs	r2, #36	; 0x24
 8001638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0201 	bic.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800164c:	f000 fdfa 	bl	8002244 <HAL_RCC_GetPCLK1Freq>
 8001650:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4a7b      	ldr	r2, [pc, #492]	; (8001844 <HAL_I2C_Init+0x23c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d807      	bhi.n	800166c <HAL_I2C_Init+0x64>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4a7a      	ldr	r2, [pc, #488]	; (8001848 <HAL_I2C_Init+0x240>)
 8001660:	4293      	cmp	r3, r2
 8001662:	bf94      	ite	ls
 8001664:	2301      	movls	r3, #1
 8001666:	2300      	movhi	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	e006      	b.n	800167a <HAL_I2C_Init+0x72>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4a77      	ldr	r2, [pc, #476]	; (800184c <HAL_I2C_Init+0x244>)
 8001670:	4293      	cmp	r3, r2
 8001672:	bf94      	ite	ls
 8001674:	2301      	movls	r3, #1
 8001676:	2300      	movhi	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e0db      	b.n	800183a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4a72      	ldr	r2, [pc, #456]	; (8001850 <HAL_I2C_Init+0x248>)
 8001686:	fba2 2303 	umull	r2, r3, r2, r3
 800168a:	0c9b      	lsrs	r3, r3, #18
 800168c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68ba      	ldr	r2, [r7, #8]
 800169e:	430a      	orrs	r2, r1
 80016a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4a64      	ldr	r2, [pc, #400]	; (8001844 <HAL_I2C_Init+0x23c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d802      	bhi.n	80016bc <HAL_I2C_Init+0xb4>
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	3301      	adds	r3, #1
 80016ba:	e009      	b.n	80016d0 <HAL_I2C_Init+0xc8>
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016c2:	fb02 f303 	mul.w	r3, r2, r3
 80016c6:	4a63      	ldr	r2, [pc, #396]	; (8001854 <HAL_I2C_Init+0x24c>)
 80016c8:	fba2 2303 	umull	r2, r3, r2, r3
 80016cc:	099b      	lsrs	r3, r3, #6
 80016ce:	3301      	adds	r3, #1
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6812      	ldr	r2, [r2, #0]
 80016d4:	430b      	orrs	r3, r1
 80016d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	4956      	ldr	r1, [pc, #344]	; (8001844 <HAL_I2C_Init+0x23c>)
 80016ec:	428b      	cmp	r3, r1
 80016ee:	d80d      	bhi.n	800170c <HAL_I2C_Init+0x104>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	1e59      	subs	r1, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80016fe:	3301      	adds	r3, #1
 8001700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001704:	2b04      	cmp	r3, #4
 8001706:	bf38      	it	cc
 8001708:	2304      	movcc	r3, #4
 800170a:	e04f      	b.n	80017ac <HAL_I2C_Init+0x1a4>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d111      	bne.n	8001738 <HAL_I2C_Init+0x130>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	1e58      	subs	r0, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6859      	ldr	r1, [r3, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	440b      	add	r3, r1
 8001722:	fbb0 f3f3 	udiv	r3, r0, r3
 8001726:	3301      	adds	r3, #1
 8001728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800172c:	2b00      	cmp	r3, #0
 800172e:	bf0c      	ite	eq
 8001730:	2301      	moveq	r3, #1
 8001732:	2300      	movne	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	e012      	b.n	800175e <HAL_I2C_Init+0x156>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	1e58      	subs	r0, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6859      	ldr	r1, [r3, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	0099      	lsls	r1, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	fbb0 f3f3 	udiv	r3, r0, r3
 800174e:	3301      	adds	r3, #1
 8001750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf0c      	ite	eq
 8001758:	2301      	moveq	r3, #1
 800175a:	2300      	movne	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_I2C_Init+0x15e>
 8001762:	2301      	movs	r3, #1
 8001764:	e022      	b.n	80017ac <HAL_I2C_Init+0x1a4>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10e      	bne.n	800178c <HAL_I2C_Init+0x184>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	1e58      	subs	r0, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6859      	ldr	r1, [r3, #4]
 8001776:	460b      	mov	r3, r1
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	440b      	add	r3, r1
 800177c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001780:	3301      	adds	r3, #1
 8001782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800178a:	e00f      	b.n	80017ac <HAL_I2C_Init+0x1a4>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1e58      	subs	r0, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6859      	ldr	r1, [r3, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	0099      	lsls	r1, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a2:	3301      	adds	r3, #1
 80017a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	6809      	ldr	r1, [r1, #0]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69da      	ldr	r2, [r3, #28]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6911      	ldr	r1, [r2, #16]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68d2      	ldr	r2, [r2, #12]
 80017e6:	4311      	orrs	r1, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	430b      	orrs	r3, r1
 80017ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0201 	orr.w	r2, r2, #1
 800181a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2220      	movs	r2, #32
 8001826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	000186a0 	.word	0x000186a0
 8001848:	001e847f 	.word	0x001e847f
 800184c:	003d08ff 	.word	0x003d08ff
 8001850:	431bde83 	.word	0x431bde83
 8001854:	10624dd3 	.word	0x10624dd3

08001858 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08c      	sub	sp, #48	; 0x30
 800185c:	af02      	add	r7, sp, #8
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	461a      	mov	r2, r3
 8001864:	460b      	mov	r3, r1
 8001866:	817b      	strh	r3, [r7, #10]
 8001868:	4613      	mov	r3, r2
 800186a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800186c:	f7ff fbf2 	bl	8001054 <HAL_GetTick>
 8001870:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b20      	cmp	r3, #32
 800187c:	f040 820b 	bne.w	8001c96 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2319      	movs	r3, #25
 8001886:	2201      	movs	r2, #1
 8001888:	497c      	ldr	r1, [pc, #496]	; (8001a7c <HAL_I2C_Master_Receive+0x224>)
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 fac0 	bl	8001e10 <I2C_WaitOnFlagUntilTimeout>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001896:	2302      	movs	r3, #2
 8001898:	e1fe      	b.n	8001c98 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d101      	bne.n	80018a8 <HAL_I2C_Master_Receive+0x50>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e1f7      	b.n	8001c98 <HAL_I2C_Master_Receive+0x440>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d007      	beq.n	80018ce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f042 0201 	orr.w	r2, r2, #1
 80018cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2222      	movs	r2, #34	; 0x22
 80018e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2210      	movs	r2, #16
 80018ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	893a      	ldrh	r2, [r7, #8]
 80018fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001904:	b29a      	uxth	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4a5c      	ldr	r2, [pc, #368]	; (8001a80 <HAL_I2C_Master_Receive+0x228>)
 800190e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001910:	8979      	ldrh	r1, [r7, #10]
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 f9c4 	bl	8001ca4 <I2C_MasterRequestRead>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e1b8      	b.n	8001c98 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192a:	2b00      	cmp	r3, #0
 800192c:	d113      	bne.n	8001956 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800192e:	2300      	movs	r3, #0
 8001930:	623b      	str	r3, [r7, #32]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	623b      	str	r3, [r7, #32]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	623b      	str	r3, [r7, #32]
 8001942:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	e18c      	b.n	8001c70 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195a:	2b01      	cmp	r3, #1
 800195c:	d11b      	bne.n	8001996 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800196c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	61fb      	str	r3, [r7, #28]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	e16c      	b.n	8001c70 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199a:	2b02      	cmp	r3, #2
 800199c:	d11b      	bne.n	80019d6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	e14c      	b.n	8001c70 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80019fc:	e138      	b.n	8001c70 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	f200 80f1 	bhi.w	8001bea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d123      	bne.n	8001a58 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 fad1 	bl	8001fbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e139      	b.n	8001c98 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691a      	ldr	r2, [r3, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a56:	e10b      	b.n	8001c70 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d14e      	bne.n	8001afe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a66:	2200      	movs	r2, #0
 8001a68:	4906      	ldr	r1, [pc, #24]	; (8001a84 <HAL_I2C_Master_Receive+0x22c>)
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f000 f9d0 	bl	8001e10 <I2C_WaitOnFlagUntilTimeout>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d008      	beq.n	8001a88 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e10e      	b.n	8001c98 <HAL_I2C_Master_Receive+0x440>
 8001a7a:	bf00      	nop
 8001a7c:	00100002 	.word	0x00100002
 8001a80:	ffff0000 	.word	0xffff0000
 8001a84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	691a      	ldr	r2, [r3, #16]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001afc:	e0b8      	b.n	8001c70 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b04:	2200      	movs	r2, #0
 8001b06:	4966      	ldr	r1, [pc, #408]	; (8001ca0 <HAL_I2C_Master_Receive+0x448>)
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 f981 	bl	8001e10 <I2C_WaitOnFlagUntilTimeout>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0bf      	b.n	8001c98 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b60:	2200      	movs	r2, #0
 8001b62:	494f      	ldr	r1, [pc, #316]	; (8001ca0 <HAL_I2C_Master_Receive+0x448>)
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 f953 	bl	8001e10 <I2C_WaitOnFlagUntilTimeout>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e091      	b.n	8001c98 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691a      	ldr	r2, [r3, #16]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001be8:	e042      	b.n	8001c70 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 f9e4 	bl	8001fbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e04c      	b.n	8001c98 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d118      	bne.n	8001c70 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f47f aec2 	bne.w	80019fe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	e000      	b.n	8001c98 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c96:	2302      	movs	r3, #2
  }
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3728      	adds	r7, #40	; 0x28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	00010004 	.word	0x00010004

08001ca4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af02      	add	r7, sp, #8
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cc8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d006      	beq.n	8001cde <I2C_MasterRequestRead+0x3a>
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d003      	beq.n	8001cde <I2C_MasterRequestRead+0x3a>
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cdc:	d108      	bne.n	8001cf0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	e00b      	b.n	8001d08 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	2b11      	cmp	r3, #17
 8001cf6:	d107      	bne.n	8001d08 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 f87b 	bl	8001e10 <I2C_WaitOnFlagUntilTimeout>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e06d      	b.n	8001e00 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d2c:	d108      	bne.n	8001d40 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001d2e:	897b      	ldrh	r3, [r7, #10]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	611a      	str	r2, [r3, #16]
 8001d3e:	e053      	b.n	8001de8 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d40:	897b      	ldrh	r3, [r7, #10]
 8001d42:	11db      	asrs	r3, r3, #7
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	f003 0306 	and.w	r3, r3, #6
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	f063 030f 	orn	r3, r3, #15
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	492a      	ldr	r1, [pc, #168]	; (8001e08 <I2C_MasterRequestRead+0x164>)
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 f8ad 	bl	8001ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e048      	b.n	8001e00 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d6e:	897b      	ldrh	r3, [r7, #10]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	4923      	ldr	r1, [pc, #140]	; (8001e0c <I2C_MasterRequestRead+0x168>)
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 f89d 	bl	8001ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e038      	b.n	8001e00 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001db2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 f825 	bl	8001e10 <I2C_WaitOnFlagUntilTimeout>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e017      	b.n	8001e00 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001dd0:	897b      	ldrh	r3, [r7, #10]
 8001dd2:	11db      	asrs	r3, r3, #7
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	f003 0306 	and.w	r3, r3, #6
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f063 030e 	orn	r3, r3, #14
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4907      	ldr	r1, [pc, #28]	; (8001e0c <I2C_MasterRequestRead+0x168>)
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 f865 	bl	8001ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	00010008 	.word	0x00010008
 8001e0c:	00010002 	.word	0x00010002

08001e10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e20:	e025      	b.n	8001e6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e28:	d021      	beq.n	8001e6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e2a:	f7ff f913 	bl	8001054 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d302      	bcc.n	8001e40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d116      	bne.n	8001e6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f043 0220 	orr.w	r2, r3, #32
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e023      	b.n	8001eb6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	0c1b      	lsrs	r3, r3, #16
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d10d      	bne.n	8001e94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	4013      	ands	r3, r2
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bf0c      	ite	eq
 8001e8a:	2301      	moveq	r3, #1
 8001e8c:	2300      	movne	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	e00c      	b.n	8001eae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	bf0c      	ite	eq
 8001ea6:	2301      	moveq	r3, #1
 8001ea8:	2300      	movne	r3, #0
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d0b6      	beq.n	8001e22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ecc:	e051      	b.n	8001f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001edc:	d123      	bne.n	8001f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ef6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2220      	movs	r2, #32
 8001f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f043 0204 	orr.w	r2, r3, #4
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e046      	b.n	8001fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f2c:	d021      	beq.n	8001f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f2e:	f7ff f891 	bl	8001054 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d302      	bcc.n	8001f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d116      	bne.n	8001f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f043 0220 	orr.w	r2, r3, #32
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e020      	b.n	8001fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	0c1b      	lsrs	r3, r3, #16
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d10c      	bne.n	8001f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	43da      	mvns	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4013      	ands	r3, r2
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	bf14      	ite	ne
 8001f8e:	2301      	movne	r3, #1
 8001f90:	2300      	moveq	r3, #0
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	e00b      	b.n	8001fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	43da      	mvns	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf14      	ite	ne
 8001fa8:	2301      	movne	r3, #1
 8001faa:	2300      	moveq	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d18d      	bne.n	8001ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fc8:	e042      	b.n	8002050 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	2b10      	cmp	r3, #16
 8001fd6:	d119      	bne.n	800200c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0210 	mvn.w	r2, #16
 8001fe0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2220      	movs	r2, #32
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e029      	b.n	8002060 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200c:	f7ff f822 	bl	8001054 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	429a      	cmp	r2, r3
 800201a:	d302      	bcc.n	8002022 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d116      	bne.n	8002050 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f043 0220 	orr.w	r2, r3, #32
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e007      	b.n	8002060 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205a:	2b40      	cmp	r3, #64	; 0x40
 800205c:	d1b5      	bne.n	8001fca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0ca      	b.n	8002212 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b67      	ldr	r3, [pc, #412]	; (800221c <HAL_RCC_ClockConfig+0x1b4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d90c      	bls.n	80020a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b64      	ldr	r3, [pc, #400]	; (800221c <HAL_RCC_ClockConfig+0x1b4>)
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b62      	ldr	r3, [pc, #392]	; (800221c <HAL_RCC_ClockConfig+0x1b4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0b6      	b.n	8002212 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d020      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020bc:	4b58      	ldr	r3, [pc, #352]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	4a57      	ldr	r2, [pc, #348]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 80020c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d4:	4b52      	ldr	r3, [pc, #328]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	4a51      	ldr	r2, [pc, #324]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 80020da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e0:	4b4f      	ldr	r3, [pc, #316]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	494c      	ldr	r1, [pc, #304]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d044      	beq.n	8002188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	4b46      	ldr	r3, [pc, #280]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d119      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e07d      	b.n	8002212 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d003      	beq.n	8002126 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002122:	2b03      	cmp	r3, #3
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002126:	4b3e      	ldr	r3, [pc, #248]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e06d      	b.n	8002212 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002136:	4b3a      	ldr	r3, [pc, #232]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e065      	b.n	8002212 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002146:	4b36      	ldr	r3, [pc, #216]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f023 0203 	bic.w	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4933      	ldr	r1, [pc, #204]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 8002154:	4313      	orrs	r3, r2
 8002156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002158:	f7fe ff7c 	bl	8001054 <HAL_GetTick>
 800215c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	e00a      	b.n	8002176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002160:	f7fe ff78 	bl	8001054 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	; 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e04d      	b.n	8002212 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 020c 	and.w	r2, r3, #12
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	429a      	cmp	r2, r3
 8002186:	d1eb      	bne.n	8002160 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002188:	4b24      	ldr	r3, [pc, #144]	; (800221c <HAL_RCC_ClockConfig+0x1b4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d20c      	bcs.n	80021b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b21      	ldr	r3, [pc, #132]	; (800221c <HAL_RCC_ClockConfig+0x1b4>)
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b1f      	ldr	r3, [pc, #124]	; (800221c <HAL_RCC_ClockConfig+0x1b4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e030      	b.n	8002212 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021bc:	4b18      	ldr	r3, [pc, #96]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4915      	ldr	r1, [pc, #84]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d009      	beq.n	80021ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	490d      	ldr	r1, [pc, #52]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ee:	f000 f83d 	bl	800226c <HAL_RCC_GetSysClockFreq>
 80021f2:	4601      	mov	r1, r0
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	4a09      	ldr	r2, [pc, #36]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	5cd3      	ldrb	r3, [r2, r3]
 8002202:	fa21 f303 	lsr.w	r3, r1, r3
 8002206:	4a08      	ldr	r2, [pc, #32]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800220a:	2000      	movs	r0, #0
 800220c:	f7fe fede 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023c00 	.word	0x40023c00
 8002220:	40023800 	.word	0x40023800
 8002224:	08005fc4 	.word	0x08005fc4
 8002228:	20000008 	.word	0x20000008

0800222c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <HAL_RCC_GetHCLKFreq+0x14>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000008 	.word	0x20000008

08002244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002248:	f7ff fff0 	bl	800222c <HAL_RCC_GetHCLKFreq>
 800224c:	4601      	mov	r1, r0
 800224e:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	0a9b      	lsrs	r3, r3, #10
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	4a03      	ldr	r2, [pc, #12]	; (8002268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800225a:	5cd3      	ldrb	r3, [r2, r3]
 800225c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002260:	4618      	mov	r0, r3
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40023800 	.word	0x40023800
 8002268:	08005fd4 	.word	0x08005fd4

0800226c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002286:	4b9f      	ldr	r3, [pc, #636]	; (8002504 <HAL_RCC_GetSysClockFreq+0x298>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b0c      	cmp	r3, #12
 8002290:	f200 8130 	bhi.w	80024f4 <HAL_RCC_GetSysClockFreq+0x288>
 8002294:	a201      	add	r2, pc, #4	; (adr r2, 800229c <HAL_RCC_GetSysClockFreq+0x30>)
 8002296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229a:	bf00      	nop
 800229c:	080022d1 	.word	0x080022d1
 80022a0:	080024f5 	.word	0x080024f5
 80022a4:	080024f5 	.word	0x080024f5
 80022a8:	080024f5 	.word	0x080024f5
 80022ac:	080022d7 	.word	0x080022d7
 80022b0:	080024f5 	.word	0x080024f5
 80022b4:	080024f5 	.word	0x080024f5
 80022b8:	080024f5 	.word	0x080024f5
 80022bc:	080022dd 	.word	0x080022dd
 80022c0:	080024f5 	.word	0x080024f5
 80022c4:	080024f5 	.word	0x080024f5
 80022c8:	080024f5 	.word	0x080024f5
 80022cc:	080023eb 	.word	0x080023eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022d0:	4b8d      	ldr	r3, [pc, #564]	; (8002508 <HAL_RCC_GetSysClockFreq+0x29c>)
 80022d2:	613b      	str	r3, [r7, #16]
       break;
 80022d4:	e111      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022d6:	4b8d      	ldr	r3, [pc, #564]	; (800250c <HAL_RCC_GetSysClockFreq+0x2a0>)
 80022d8:	613b      	str	r3, [r7, #16]
      break;
 80022da:	e10e      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022dc:	4b89      	ldr	r3, [pc, #548]	; (8002504 <HAL_RCC_GetSysClockFreq+0x298>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022e4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022e6:	4b87      	ldr	r3, [pc, #540]	; (8002504 <HAL_RCC_GetSysClockFreq+0x298>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d023      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f2:	4b84      	ldr	r3, [pc, #528]	; (8002504 <HAL_RCC_GetSysClockFreq+0x298>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	099b      	lsrs	r3, r3, #6
 80022f8:	f04f 0400 	mov.w	r4, #0
 80022fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	ea03 0501 	and.w	r5, r3, r1
 8002308:	ea04 0602 	and.w	r6, r4, r2
 800230c:	4a7f      	ldr	r2, [pc, #508]	; (800250c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800230e:	fb02 f106 	mul.w	r1, r2, r6
 8002312:	2200      	movs	r2, #0
 8002314:	fb02 f205 	mul.w	r2, r2, r5
 8002318:	440a      	add	r2, r1
 800231a:	497c      	ldr	r1, [pc, #496]	; (800250c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800231c:	fba5 0101 	umull	r0, r1, r5, r1
 8002320:	1853      	adds	r3, r2, r1
 8002322:	4619      	mov	r1, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f04f 0400 	mov.w	r4, #0
 800232a:	461a      	mov	r2, r3
 800232c:	4623      	mov	r3, r4
 800232e:	f7fe fcab 	bl	8000c88 <__aeabi_uldivmod>
 8002332:	4603      	mov	r3, r0
 8002334:	460c      	mov	r4, r1
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	e049      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800233a:	4b72      	ldr	r3, [pc, #456]	; (8002504 <HAL_RCC_GetSysClockFreq+0x298>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	099b      	lsrs	r3, r3, #6
 8002340:	f04f 0400 	mov.w	r4, #0
 8002344:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	ea03 0501 	and.w	r5, r3, r1
 8002350:	ea04 0602 	and.w	r6, r4, r2
 8002354:	4629      	mov	r1, r5
 8002356:	4632      	mov	r2, r6
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	f04f 0400 	mov.w	r4, #0
 8002360:	0154      	lsls	r4, r2, #5
 8002362:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002366:	014b      	lsls	r3, r1, #5
 8002368:	4619      	mov	r1, r3
 800236a:	4622      	mov	r2, r4
 800236c:	1b49      	subs	r1, r1, r5
 800236e:	eb62 0206 	sbc.w	r2, r2, r6
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	f04f 0400 	mov.w	r4, #0
 800237a:	0194      	lsls	r4, r2, #6
 800237c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002380:	018b      	lsls	r3, r1, #6
 8002382:	1a5b      	subs	r3, r3, r1
 8002384:	eb64 0402 	sbc.w	r4, r4, r2
 8002388:	f04f 0100 	mov.w	r1, #0
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	00e2      	lsls	r2, r4, #3
 8002392:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002396:	00d9      	lsls	r1, r3, #3
 8002398:	460b      	mov	r3, r1
 800239a:	4614      	mov	r4, r2
 800239c:	195b      	adds	r3, r3, r5
 800239e:	eb44 0406 	adc.w	r4, r4, r6
 80023a2:	f04f 0100 	mov.w	r1, #0
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	02a2      	lsls	r2, r4, #10
 80023ac:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80023b0:	0299      	lsls	r1, r3, #10
 80023b2:	460b      	mov	r3, r1
 80023b4:	4614      	mov	r4, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	4621      	mov	r1, r4
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f04f 0400 	mov.w	r4, #0
 80023c0:	461a      	mov	r2, r3
 80023c2:	4623      	mov	r3, r4
 80023c4:	f7fe fc60 	bl	8000c88 <__aeabi_uldivmod>
 80023c8:	4603      	mov	r3, r0
 80023ca:	460c      	mov	r4, r1
 80023cc:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023ce:	4b4d      	ldr	r3, [pc, #308]	; (8002504 <HAL_RCC_GetSysClockFreq+0x298>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	0c1b      	lsrs	r3, r3, #16
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	3301      	adds	r3, #1
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e6:	613b      	str	r3, [r7, #16]
      break;
 80023e8:	e087      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023ea:	4b46      	ldr	r3, [pc, #280]	; (8002504 <HAL_RCC_GetSysClockFreq+0x298>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023f2:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023f4:	4b43      	ldr	r3, [pc, #268]	; (8002504 <HAL_RCC_GetSysClockFreq+0x298>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d023      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002400:	4b40      	ldr	r3, [pc, #256]	; (8002504 <HAL_RCC_GetSysClockFreq+0x298>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	099b      	lsrs	r3, r3, #6
 8002406:	f04f 0400 	mov.w	r4, #0
 800240a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	ea03 0501 	and.w	r5, r3, r1
 8002416:	ea04 0602 	and.w	r6, r4, r2
 800241a:	4a3c      	ldr	r2, [pc, #240]	; (800250c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800241c:	fb02 f106 	mul.w	r1, r2, r6
 8002420:	2200      	movs	r2, #0
 8002422:	fb02 f205 	mul.w	r2, r2, r5
 8002426:	440a      	add	r2, r1
 8002428:	4938      	ldr	r1, [pc, #224]	; (800250c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800242a:	fba5 0101 	umull	r0, r1, r5, r1
 800242e:	1853      	adds	r3, r2, r1
 8002430:	4619      	mov	r1, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f04f 0400 	mov.w	r4, #0
 8002438:	461a      	mov	r2, r3
 800243a:	4623      	mov	r3, r4
 800243c:	f7fe fc24 	bl	8000c88 <__aeabi_uldivmod>
 8002440:	4603      	mov	r3, r0
 8002442:	460c      	mov	r4, r1
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	e049      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002448:	4b2e      	ldr	r3, [pc, #184]	; (8002504 <HAL_RCC_GetSysClockFreq+0x298>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	099b      	lsrs	r3, r3, #6
 800244e:	f04f 0400 	mov.w	r4, #0
 8002452:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	ea03 0501 	and.w	r5, r3, r1
 800245e:	ea04 0602 	and.w	r6, r4, r2
 8002462:	4629      	mov	r1, r5
 8002464:	4632      	mov	r2, r6
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	f04f 0400 	mov.w	r4, #0
 800246e:	0154      	lsls	r4, r2, #5
 8002470:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002474:	014b      	lsls	r3, r1, #5
 8002476:	4619      	mov	r1, r3
 8002478:	4622      	mov	r2, r4
 800247a:	1b49      	subs	r1, r1, r5
 800247c:	eb62 0206 	sbc.w	r2, r2, r6
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	f04f 0400 	mov.w	r4, #0
 8002488:	0194      	lsls	r4, r2, #6
 800248a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800248e:	018b      	lsls	r3, r1, #6
 8002490:	1a5b      	subs	r3, r3, r1
 8002492:	eb64 0402 	sbc.w	r4, r4, r2
 8002496:	f04f 0100 	mov.w	r1, #0
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	00e2      	lsls	r2, r4, #3
 80024a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024a4:	00d9      	lsls	r1, r3, #3
 80024a6:	460b      	mov	r3, r1
 80024a8:	4614      	mov	r4, r2
 80024aa:	195b      	adds	r3, r3, r5
 80024ac:	eb44 0406 	adc.w	r4, r4, r6
 80024b0:	f04f 0100 	mov.w	r1, #0
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	02a2      	lsls	r2, r4, #10
 80024ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80024be:	0299      	lsls	r1, r3, #10
 80024c0:	460b      	mov	r3, r1
 80024c2:	4614      	mov	r4, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	4621      	mov	r1, r4
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f04f 0400 	mov.w	r4, #0
 80024ce:	461a      	mov	r2, r3
 80024d0:	4623      	mov	r3, r4
 80024d2:	f7fe fbd9 	bl	8000c88 <__aeabi_uldivmod>
 80024d6:	4603      	mov	r3, r0
 80024d8:	460c      	mov	r4, r1
 80024da:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80024dc:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_RCC_GetSysClockFreq+0x298>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	0f1b      	lsrs	r3, r3, #28
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f0:	613b      	str	r3, [r7, #16]
      break;
 80024f2:	e002      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024f4:	4b04      	ldr	r3, [pc, #16]	; (8002508 <HAL_RCC_GetSysClockFreq+0x29c>)
 80024f6:	613b      	str	r3, [r7, #16]
      break;
 80024f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024fa:	693b      	ldr	r3, [r7, #16]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	371c      	adds	r7, #28
 8002500:	46bd      	mov	sp, r7
 8002502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002504:	40023800 	.word	0x40023800
 8002508:	00f42400 	.word	0x00f42400
 800250c:	017d7840 	.word	0x017d7840

08002510 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 8083 	beq.w	8002630 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800252a:	4b95      	ldr	r3, [pc, #596]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b04      	cmp	r3, #4
 8002534:	d019      	beq.n	800256a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002536:	4b92      	ldr	r3, [pc, #584]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800253e:	2b08      	cmp	r3, #8
 8002540:	d106      	bne.n	8002550 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002542:	4b8f      	ldr	r3, [pc, #572]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800254e:	d00c      	beq.n	800256a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002550:	4b8b      	ldr	r3, [pc, #556]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002558:	2b0c      	cmp	r3, #12
 800255a:	d112      	bne.n	8002582 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800255c:	4b88      	ldr	r3, [pc, #544]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002568:	d10b      	bne.n	8002582 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256a:	4b85      	ldr	r3, [pc, #532]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d05b      	beq.n	800262e <HAL_RCC_OscConfig+0x11e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d157      	bne.n	800262e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e216      	b.n	80029b0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x8a>
 800258c:	4b7c      	ldr	r3, [pc, #496]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a7b      	ldr	r2, [pc, #492]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 8002592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	e01d      	b.n	80025d6 <HAL_RCC_OscConfig+0xc6>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025a2:	d10c      	bne.n	80025be <HAL_RCC_OscConfig+0xae>
 80025a4:	4b76      	ldr	r3, [pc, #472]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a75      	ldr	r2, [pc, #468]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 80025aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b73      	ldr	r3, [pc, #460]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a72      	ldr	r2, [pc, #456]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 80025b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	e00b      	b.n	80025d6 <HAL_RCC_OscConfig+0xc6>
 80025be:	4b70      	ldr	r3, [pc, #448]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a6f      	ldr	r2, [pc, #444]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 80025c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	4b6d      	ldr	r3, [pc, #436]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a6c      	ldr	r2, [pc, #432]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 80025d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d013      	beq.n	8002606 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025de:	f7fe fd39 	bl	8001054 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e6:	f7fe fd35 	bl	8001054 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b64      	cmp	r3, #100	; 0x64
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e1db      	b.n	80029b0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f8:	4b61      	ldr	r3, [pc, #388]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0xd6>
 8002604:	e014      	b.n	8002630 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002606:	f7fe fd25 	bl	8001054 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800260e:	f7fe fd21 	bl	8001054 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b64      	cmp	r3, #100	; 0x64
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e1c7      	b.n	80029b0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002620:	4b57      	ldr	r3, [pc, #348]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f0      	bne.n	800260e <HAL_RCC_OscConfig+0xfe>
 800262c:	e000      	b.n	8002630 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d06f      	beq.n	800271c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800263c:	4b50      	ldr	r3, [pc, #320]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 030c 	and.w	r3, r3, #12
 8002644:	2b00      	cmp	r3, #0
 8002646:	d017      	beq.n	8002678 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002648:	4b4d      	ldr	r3, [pc, #308]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002650:	2b08      	cmp	r3, #8
 8002652:	d105      	bne.n	8002660 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002654:	4b4a      	ldr	r3, [pc, #296]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00b      	beq.n	8002678 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002660:	4b47      	ldr	r3, [pc, #284]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002668:	2b0c      	cmp	r3, #12
 800266a:	d11c      	bne.n	80026a6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800266c:	4b44      	ldr	r3, [pc, #272]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d116      	bne.n	80026a6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002678:	4b41      	ldr	r3, [pc, #260]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <HAL_RCC_OscConfig+0x180>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d001      	beq.n	8002690 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e18f      	b.n	80029b0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002690:	4b3b      	ldr	r3, [pc, #236]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4938      	ldr	r1, [pc, #224]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a4:	e03a      	b.n	800271c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d020      	beq.n	80026f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ae:	4b35      	ldr	r3, [pc, #212]	; (8002784 <HAL_RCC_OscConfig+0x274>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe fcce 	bl	8001054 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026bc:	f7fe fcca 	bl	8001054 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e170      	b.n	80029b0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ce:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026da:	4b29      	ldr	r3, [pc, #164]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4925      	ldr	r1, [pc, #148]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]
 80026ee:	e015      	b.n	800271c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026f0:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_RCC_OscConfig+0x274>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f6:	f7fe fcad 	bl	8001054 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026fe:	f7fe fca9 	bl	8001054 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e14f      	b.n	80029b0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002710:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f0      	bne.n	80026fe <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d037      	beq.n	8002798 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d016      	beq.n	800275e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002730:	4b15      	ldr	r3, [pc, #84]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002732:	2201      	movs	r2, #1
 8002734:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002736:	f7fe fc8d 	bl	8001054 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273e:	f7fe fc89 	bl	8001054 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e12f      	b.n	80029b0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 8002752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x22e>
 800275c:	e01c      	b.n	8002798 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002764:	f7fe fc76 	bl	8001054 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276a:	e00f      	b.n	800278c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800276c:	f7fe fc72 	bl	8001054 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d908      	bls.n	800278c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e118      	b.n	80029b0 <HAL_RCC_OscConfig+0x4a0>
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800
 8002784:	42470000 	.word	0x42470000
 8002788:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800278c:	4b8a      	ldr	r3, [pc, #552]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 800278e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1e9      	bne.n	800276c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8097 	beq.w	80028d4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a6:	2300      	movs	r3, #0
 80027a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027aa:	4b83      	ldr	r3, [pc, #524]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10f      	bne.n	80027d6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	4b7f      	ldr	r3, [pc, #508]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	4a7e      	ldr	r2, [pc, #504]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 80027c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c4:	6413      	str	r3, [r2, #64]	; 0x40
 80027c6:	4b7c      	ldr	r3, [pc, #496]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027d2:	2301      	movs	r3, #1
 80027d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d6:	4b79      	ldr	r3, [pc, #484]	; (80029bc <HAL_RCC_OscConfig+0x4ac>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d118      	bne.n	8002814 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e2:	4b76      	ldr	r3, [pc, #472]	; (80029bc <HAL_RCC_OscConfig+0x4ac>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a75      	ldr	r2, [pc, #468]	; (80029bc <HAL_RCC_OscConfig+0x4ac>)
 80027e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ee:	f7fe fc31 	bl	8001054 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f6:	f7fe fc2d 	bl	8001054 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e0d3      	b.n	80029b0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002808:	4b6c      	ldr	r3, [pc, #432]	; (80029bc <HAL_RCC_OscConfig+0x4ac>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d106      	bne.n	800282a <HAL_RCC_OscConfig+0x31a>
 800281c:	4b66      	ldr	r3, [pc, #408]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	4a65      	ldr	r2, [pc, #404]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6713      	str	r3, [r2, #112]	; 0x70
 8002828:	e01c      	b.n	8002864 <HAL_RCC_OscConfig+0x354>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b05      	cmp	r3, #5
 8002830:	d10c      	bne.n	800284c <HAL_RCC_OscConfig+0x33c>
 8002832:	4b61      	ldr	r3, [pc, #388]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002836:	4a60      	ldr	r2, [pc, #384]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 8002838:	f043 0304 	orr.w	r3, r3, #4
 800283c:	6713      	str	r3, [r2, #112]	; 0x70
 800283e:	4b5e      	ldr	r3, [pc, #376]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	4a5d      	ldr	r2, [pc, #372]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	6713      	str	r3, [r2, #112]	; 0x70
 800284a:	e00b      	b.n	8002864 <HAL_RCC_OscConfig+0x354>
 800284c:	4b5a      	ldr	r3, [pc, #360]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002850:	4a59      	ldr	r2, [pc, #356]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	6713      	str	r3, [r2, #112]	; 0x70
 8002858:	4b57      	ldr	r3, [pc, #348]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285c:	4a56      	ldr	r2, [pc, #344]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 800285e:	f023 0304 	bic.w	r3, r3, #4
 8002862:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d015      	beq.n	8002898 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286c:	f7fe fbf2 	bl	8001054 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002872:	e00a      	b.n	800288a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002874:	f7fe fbee 	bl	8001054 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002882:	4293      	cmp	r3, r2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e092      	b.n	80029b0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288a:	4b4b      	ldr	r3, [pc, #300]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0ee      	beq.n	8002874 <HAL_RCC_OscConfig+0x364>
 8002896:	e014      	b.n	80028c2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002898:	f7fe fbdc 	bl	8001054 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289e:	e00a      	b.n	80028b6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a0:	f7fe fbd8 	bl	8001054 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e07c      	b.n	80029b0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b6:	4b40      	ldr	r3, [pc, #256]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 80028b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1ee      	bne.n	80028a0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028c2:	7dfb      	ldrb	r3, [r7, #23]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d105      	bne.n	80028d4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c8:	4b3b      	ldr	r3, [pc, #236]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	4a3a      	ldr	r2, [pc, #232]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 80028ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d068      	beq.n	80029ae <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028dc:	4b36      	ldr	r3, [pc, #216]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d060      	beq.n	80029aa <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d145      	bne.n	800297c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f0:	4b33      	ldr	r3, [pc, #204]	; (80029c0 <HAL_RCC_OscConfig+0x4b0>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7fe fbad 	bl	8001054 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fe:	f7fe fba9 	bl	8001054 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e04f      	b.n	80029b0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002910:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f0      	bne.n	80028fe <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69da      	ldr	r2, [r3, #28]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	019b      	lsls	r3, r3, #6
 800292c:	431a      	orrs	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	085b      	lsrs	r3, r3, #1
 8002934:	3b01      	subs	r3, #1
 8002936:	041b      	lsls	r3, r3, #16
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	061b      	lsls	r3, r3, #24
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	071b      	lsls	r3, r3, #28
 8002948:	491b      	ldr	r1, [pc, #108]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800294e:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <HAL_RCC_OscConfig+0x4b0>)
 8002950:	2201      	movs	r2, #1
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002954:	f7fe fb7e 	bl	8001054 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295c:	f7fe fb7a 	bl	8001054 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e020      	b.n	80029b0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x44c>
 800297a:	e018      	b.n	80029ae <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297c:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <HAL_RCC_OscConfig+0x4b0>)
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002982:	f7fe fb67 	bl	8001054 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800298a:	f7fe fb63 	bl	8001054 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e009      	b.n	80029b0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f0      	bne.n	800298a <HAL_RCC_OscConfig+0x47a>
 80029a8:	e001      	b.n	80029ae <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40007000 	.word	0x40007000
 80029c0:	42470060 	.word	0x42470060

080029c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e056      	b.n	8002a84 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d106      	bne.n	80029f6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 ff67 	bl	80038c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2202      	movs	r2, #2
 80029fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a0c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	ea42 0103 	orr.w	r1, r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	0c1b      	lsrs	r3, r3, #16
 8002a54:	f003 0104 	and.w	r1, r3, #4
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	69da      	ldr	r2, [r3, #28]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_SPI_Transmit+0x22>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e11e      	b.n	8002cec <HAL_SPI_Transmit+0x260>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ab6:	f7fe facd 	bl	8001054 <HAL_GetTick>
 8002aba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d002      	beq.n	8002ad2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
 8002ace:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ad0:	e103      	b.n	8002cda <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <HAL_SPI_Transmit+0x52>
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d102      	bne.n	8002ae4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ae2:	e0fa      	b.n	8002cda <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	88fa      	ldrh	r2, [r7, #6]
 8002afc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	88fa      	ldrh	r2, [r7, #6]
 8002b02:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b2a:	d107      	bne.n	8002b3c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b46:	2b40      	cmp	r3, #64	; 0x40
 8002b48:	d007      	beq.n	8002b5a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b62:	d14b      	bne.n	8002bfc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <HAL_SPI_Transmit+0xe6>
 8002b6c:	8afb      	ldrh	r3, [r7, #22]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d13e      	bne.n	8002bf0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	881a      	ldrh	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	1c9a      	adds	r2, r3, #2
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b96:	e02b      	b.n	8002bf0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d112      	bne.n	8002bcc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	881a      	ldrh	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	1c9a      	adds	r2, r3, #2
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002bca:	e011      	b.n	8002bf0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bcc:	f7fe fa42 	bl	8001054 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d803      	bhi.n	8002be4 <HAL_SPI_Transmit+0x158>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002be2:	d102      	bne.n	8002bea <HAL_SPI_Transmit+0x15e>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d102      	bne.n	8002bf0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bee:	e074      	b.n	8002cda <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ce      	bne.n	8002b98 <HAL_SPI_Transmit+0x10c>
 8002bfa:	e04c      	b.n	8002c96 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <HAL_SPI_Transmit+0x17e>
 8002c04:	8afb      	ldrh	r3, [r7, #22]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d140      	bne.n	8002c8c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	330c      	adds	r3, #12
 8002c14:	7812      	ldrb	r2, [r2, #0]
 8002c16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c30:	e02c      	b.n	8002c8c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d113      	bne.n	8002c68 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	7812      	ldrb	r2, [r2, #0]
 8002c4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c66:	e011      	b.n	8002c8c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c68:	f7fe f9f4 	bl	8001054 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d803      	bhi.n	8002c80 <HAL_SPI_Transmit+0x1f4>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c7e:	d102      	bne.n	8002c86 <HAL_SPI_Transmit+0x1fa>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c8a:	e026      	b.n	8002cda <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1cd      	bne.n	8002c32 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	6839      	ldr	r1, [r7, #0]
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f894 	bl	8002dc8 <SPI_EndRxTxTransaction>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10a      	bne.n	8002cca <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	77fb      	strb	r3, [r7, #31]
 8002cd6:	e000      	b.n	8002cda <HAL_SPI_Transmit+0x24e>
  }

error:
 8002cd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cea:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3720      	adds	r7, #32
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	4613      	mov	r3, r2
 8002d02:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d04:	e04c      	b.n	8002da0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d0c:	d048      	beq.n	8002da0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002d0e:	f7fe f9a1 	bl	8001054 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d902      	bls.n	8002d24 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d13d      	bne.n	8002da0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d32:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d3c:	d111      	bne.n	8002d62 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d46:	d004      	beq.n	8002d52 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d50:	d107      	bne.n	8002d62 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d60:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d6a:	d10f      	bne.n	8002d8c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e00f      	b.n	8002dc0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	4013      	ands	r3, r2
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	bf0c      	ite	eq
 8002db0:	2301      	moveq	r3, #1
 8002db2:	2300      	movne	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d1a3      	bne.n	8002d06 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002dd4:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <SPI_EndRxTxTransaction+0x7c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1b      	ldr	r2, [pc, #108]	; (8002e48 <SPI_EndRxTxTransaction+0x80>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	0d5b      	lsrs	r3, r3, #21
 8002de0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002de4:	fb02 f303 	mul.w	r3, r2, r3
 8002de8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002df2:	d112      	bne.n	8002e1a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2180      	movs	r1, #128	; 0x80
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f7ff ff78 	bl	8002cf4 <SPI_WaitFlagStateUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d016      	beq.n	8002e38 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0e:	f043 0220 	orr.w	r2, r3, #32
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e00f      	b.n	8002e3a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e30:	2b80      	cmp	r3, #128	; 0x80
 8002e32:	d0f2      	beq.n	8002e1a <SPI_EndRxTxTransaction+0x52>
 8002e34:	e000      	b.n	8002e38 <SPI_EndRxTxTransaction+0x70>
        break;
 8002e36:	bf00      	nop
  }

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000008 	.word	0x20000008
 8002e48:	165e9f81 	.word	0x165e9f81

08002e4c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e52:	f107 030c 	add.w	r3, r7, #12
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	609a      	str	r2, [r3, #8]
 8002e5e:	60da      	str	r2, [r3, #12]
 8002e60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	4b38      	ldr	r3, [pc, #224]	; (8002f48 <MX_GPIO_Init+0xfc>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a37      	ldr	r2, [pc, #220]	; (8002f48 <MX_GPIO_Init+0xfc>)
 8002e6c:	f043 0304 	orr.w	r3, r3, #4
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b35      	ldr	r3, [pc, #212]	; (8002f48 <MX_GPIO_Init+0xfc>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	4b31      	ldr	r3, [pc, #196]	; (8002f48 <MX_GPIO_Init+0xfc>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a30      	ldr	r2, [pc, #192]	; (8002f48 <MX_GPIO_Init+0xfc>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b2e      	ldr	r3, [pc, #184]	; (8002f48 <MX_GPIO_Init+0xfc>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	607b      	str	r3, [r7, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <MX_GPIO_Init+0xfc>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a29      	ldr	r2, [pc, #164]	; (8002f48 <MX_GPIO_Init+0xfc>)
 8002ea4:	f043 0302 	orr.w	r3, r3, #2
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <MX_GPIO_Init+0xfc>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_Pin|LCD_RESET_Pin|LCD_A0_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f240 3141 	movw	r1, #833	; 0x341
 8002ebc:	4823      	ldr	r0, [pc, #140]	; (8002f4c <MX_GPIO_Init+0x100>)
 8002ebe:	f7fe fb6f 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, GPIO_PIN_RESET);
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2140      	movs	r1, #64	; 0x40
 8002ec6:	4822      	ldr	r0, [pc, #136]	; (8002f50 <MX_GPIO_Init+0x104>)
 8002ec8:	f7fe fb6a 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8002ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ed0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8002eda:	f107 030c 	add.w	r3, r7, #12
 8002ede:	4619      	mov	r1, r3
 8002ee0:	481c      	ldr	r0, [pc, #112]	; (8002f54 <MX_GPIO_Init+0x108>)
 8002ee2:	f7fe f9cb 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_RESET_Pin|LCD_A0_Pin;
 8002ee6:	f240 1341 	movw	r3, #321	; 0x141
 8002eea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eec:	2301      	movs	r3, #1
 8002eee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef8:	f107 030c 	add.w	r3, r7, #12
 8002efc:	4619      	mov	r1, r3
 8002efe:	4813      	ldr	r0, [pc, #76]	; (8002f4c <MX_GPIO_Init+0x100>)
 8002f00:	f7fe f9bc 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8002f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f12:	2302      	movs	r3, #2
 8002f14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8002f16:	f107 030c 	add.w	r3, r7, #12
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	480b      	ldr	r0, [pc, #44]	; (8002f4c <MX_GPIO_Init+0x100>)
 8002f1e:	f7fe f9ad 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_N_Pin;
 8002f22:	2340      	movs	r3, #64	; 0x40
 8002f24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f26:	2301      	movs	r3, #1
 8002f28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_N_GPIO_Port, &GPIO_InitStruct);
 8002f32:	f107 030c 	add.w	r3, r7, #12
 8002f36:	4619      	mov	r1, r3
 8002f38:	4805      	ldr	r0, [pc, #20]	; (8002f50 <MX_GPIO_Init+0x104>)
 8002f3a:	f7fe f99f 	bl	800127c <HAL_GPIO_Init>

}
 8002f3e:	bf00      	nop
 8002f40:	3720      	adds	r7, #32
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40020000 	.word	0x40020000
 8002f50:	40020400 	.word	0x40020400
 8002f54:	40020800 	.word	0x40020800

08002f58 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002f5c:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f5e:	4a13      	ldr	r2, [pc, #76]	; (8002fac <MX_I2C1_Init+0x54>)
 8002f60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002f62:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f64:	4a12      	ldr	r2, [pc, #72]	; (8002fb0 <MX_I2C1_Init+0x58>)
 8002f66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f68:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f88:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f94:	4804      	ldr	r0, [pc, #16]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f96:	f7fe fb37 	bl	8001608 <HAL_I2C_Init>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002fa0:	f000 fc48 	bl	8003834 <Error_Handler>
  }

}
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	2000040c 	.word	0x2000040c
 8002fac:	40005400 	.word	0x40005400
 8002fb0:	00061a80 	.word	0x00061a80

08002fb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	; 0x28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a19      	ldr	r2, [pc, #100]	; (8003038 <HAL_I2C_MspInit+0x84>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d12c      	bne.n	8003030 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	4b18      	ldr	r3, [pc, #96]	; (800303c <HAL_I2C_MspInit+0x88>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	4a17      	ldr	r2, [pc, #92]	; (800303c <HAL_I2C_MspInit+0x88>)
 8002fe0:	f043 0302 	orr.w	r3, r3, #2
 8002fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <HAL_I2C_MspInit+0x88>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ff2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ff8:	2312      	movs	r3, #18
 8002ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003000:	2303      	movs	r3, #3
 8003002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003004:	2304      	movs	r3, #4
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003008:	f107 0314 	add.w	r3, r7, #20
 800300c:	4619      	mov	r1, r3
 800300e:	480c      	ldr	r0, [pc, #48]	; (8003040 <HAL_I2C_MspInit+0x8c>)
 8003010:	f7fe f934 	bl	800127c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	4b08      	ldr	r3, [pc, #32]	; (800303c <HAL_I2C_MspInit+0x88>)
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	4a07      	ldr	r2, [pc, #28]	; (800303c <HAL_I2C_MspInit+0x88>)
 800301e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003022:	6413      	str	r3, [r2, #64]	; 0x40
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_I2C_MspInit+0x88>)
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003030:	bf00      	nop
 8003032:	3728      	adds	r7, #40	; 0x28
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40005400 	.word	0x40005400
 800303c:	40023800 	.word	0x40023800
 8003040:	40020400 	.word	0x40020400

08003044 <chipSelect>:
static ColumnBuffer displayBuffer[NUMBER_OF_ROWS];



static void chipSelect(bool isSelected)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, (GPIO_PinState) !isSelected); /* low active */
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	f083 0301 	eor.w	r3, r3, #1
 8003054:	b2db      	uxtb	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	2140      	movs	r1, #64	; 0x40
 800305a:	4803      	ldr	r0, [pc, #12]	; (8003068 <chipSelect+0x24>)
 800305c:	f7fe faa0 	bl	80015a0 <HAL_GPIO_WritePin>
}
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40020400 	.word	0x40020400

0800306c <registerSelect>:

static void registerSelect(lcdRegister selectedRegister)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, (GPIO_PinState) selectedRegister);
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	461a      	mov	r2, r3
 800307a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800307e:	4803      	ldr	r0, [pc, #12]	; (800308c <registerSelect+0x20>)
 8003080:	f7fe fa8e 	bl	80015a0 <HAL_GPIO_WritePin>
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40020000 	.word	0x40020000

08003090 <displayReset>:

static void displayReset(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
    chipSelect(INSTRUCTION_REGISTER);
 8003094:	2000      	movs	r0, #0
 8003096:	f7ff ffd5 	bl	8003044 <chipSelect>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800309a:	2200      	movs	r2, #0
 800309c:	2140      	movs	r1, #64	; 0x40
 800309e:	4808      	ldr	r0, [pc, #32]	; (80030c0 <displayReset+0x30>)
 80030a0:	f7fe fa7e 	bl	80015a0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80030a4:	2001      	movs	r0, #1
 80030a6:	f7fd ffe1 	bl	800106c <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 80030aa:	2201      	movs	r2, #1
 80030ac:	2140      	movs	r1, #64	; 0x40
 80030ae:	4804      	ldr	r0, [pc, #16]	; (80030c0 <displayReset+0x30>)
 80030b0:	f7fe fa76 	bl	80015a0 <HAL_GPIO_WritePin>
    chipSelect(DATA_REGISTER);
 80030b4:	2001      	movs	r0, #1
 80030b6:	f7ff ffc5 	bl	8003044 <chipSelect>
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40020000 	.word	0x40020000

080030c4 <sendInstruction>:

static void sendInstruction(instruction command)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	71fb      	strb	r3, [r7, #7]
    registerSelect(INSTRUCTION_REGISTER);
 80030ce:	2000      	movs	r0, #0
 80030d0:	f7ff ffcc 	bl	800306c <registerSelect>
    chipSelect(true);
 80030d4:	2001      	movs	r0, #1
 80030d6:	f7ff ffb5 	bl	8003044 <chipSelect>
	  //$dnd (uint8_t) added
    HAL_SPI_Transmit(&hspi1, (uint8_t *) &command, 1, 1);
 80030da:	1df9      	adds	r1, r7, #7
 80030dc:	2301      	movs	r3, #1
 80030de:	2201      	movs	r2, #1
 80030e0:	4804      	ldr	r0, [pc, #16]	; (80030f4 <sendInstruction+0x30>)
 80030e2:	f7ff fcd3 	bl	8002a8c <HAL_SPI_Transmit>
    chipSelect(false);
 80030e6:	2000      	movs	r0, #0
 80030e8:	f7ff ffac 	bl	8003044 <chipSelect>
}
 80030ec:	bf00      	nop
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20000784 	.word	0x20000784

080030f8 <sendData>:


/*static*/ void sendData(uint8_t data)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	71fb      	strb	r3, [r7, #7]
    registerSelect(DATA_REGISTER);
 8003102:	2001      	movs	r0, #1
 8003104:	f7ff ffb2 	bl	800306c <registerSelect>
    chipSelect(true);
 8003108:	2001      	movs	r0, #1
 800310a:	f7ff ff9b 	bl	8003044 <chipSelect>
    HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 800310e:	1df9      	adds	r1, r7, #7
 8003110:	2301      	movs	r3, #1
 8003112:	2201      	movs	r2, #1
 8003114:	4804      	ldr	r0, [pc, #16]	; (8003128 <sendData+0x30>)
 8003116:	f7ff fcb9 	bl	8002a8c <HAL_SPI_Transmit>
    chipSelect(false);
 800311a:	2000      	movs	r0, #0
 800311c:	f7ff ff92 	bl	8003044 <chipSelect>
}
 8003120:	bf00      	nop
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20000784 	.word	0x20000784

0800312c <lcd_setContrast>:

void lcd_setContrast(uint8_t electronicVolume)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	71fb      	strb	r3, [r7, #7]
#define ELECTRONIC_VOLUME_MAXIMUM_RAITING ((uint8_t) 63)

    if (electronicVolume <= ELECTRONIC_VOLUME_MAXIMUM_RAITING) {
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	2b3f      	cmp	r3, #63	; 0x3f
 800313a:	d806      	bhi.n	800314a <lcd_setContrast+0x1e>
        sendInstruction(ELECTRONIC_VOLUME_MODE_SET);
 800313c:	2081      	movs	r0, #129	; 0x81
 800313e:	f7ff ffc1 	bl	80030c4 <sendInstruction>
			//$dnd1 added (instruction)
        sendInstruction((instruction) electronicVolume);
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ffbd 	bl	80030c4 <sendInstruction>
    }
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <lcd_init>:

void lcd_init(void)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	af00      	add	r7, sp, #0
    lcd_clear();
 8003156:	f000 f857 	bl	8003208 <lcd_clear>
    displayReset();
 800315a:	f7ff ff99 	bl	8003090 <displayReset>

    sendInstruction(ADC_NORMAL);
 800315e:	20a0      	movs	r0, #160	; 0xa0
 8003160:	f7ff ffb0 	bl	80030c4 <sendInstruction>
    sendInstruction(DISPLAY_OFF);
 8003164:	20ae      	movs	r0, #174	; 0xae
 8003166:	f7ff ffad 	bl	80030c4 <sendInstruction>
    sendInstruction(COMMON_OUTPUT_MODE_REVERSE);
 800316a:	20c8      	movs	r0, #200	; 0xc8
 800316c:	f7ff ffaa 	bl	80030c4 <sendInstruction>
    sendInstruction(BIAS_ONE_NINTH);
 8003170:	20a2      	movs	r0, #162	; 0xa2
 8003172:	f7ff ffa7 	bl	80030c4 <sendInstruction>
    sendInstruction(POWER_CONTROL_SET_7);
 8003176:	202f      	movs	r0, #47	; 0x2f
 8003178:	f7ff ffa4 	bl	80030c4 <sendInstruction>
    sendInstruction(INTERNAL_RESISTOR_RATIO_1);
 800317c:	2021      	movs	r0, #33	; 0x21
 800317e:	f7ff ffa1 	bl	80030c4 <sendInstruction>
    lcd_setContrast(40);
 8003182:	2028      	movs	r0, #40	; 0x28
 8003184:	f7ff ffd2 	bl	800312c <lcd_setContrast>
    sendInstruction(DISPLAY_ON);
 8003188:	20af      	movs	r0, #175	; 0xaf
 800318a:	f7ff ff9b 	bl	80030c4 <sendInstruction>
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <lcd_setPixel>:

void lcd_setPixel(uint8_t xPosition, uint8_t yPosition, bool pixelIsSet)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
 800319e:	460b      	mov	r3, r1
 80031a0:	71bb      	strb	r3, [r7, #6]
 80031a2:	4613      	mov	r3, r2
 80031a4:	717b      	strb	r3, [r7, #5]
    if ((xPosition < NUMBER_OF_ROWS) && (yPosition < NUMBER_OF_COLUMNS)) {
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	db23      	blt.n	80031f6 <lcd_setPixel+0x62>
 80031ae:	79bb      	ldrb	r3, [r7, #6]
 80031b0:	2b1f      	cmp	r3, #31
 80031b2:	d820      	bhi.n	80031f6 <lcd_setPixel+0x62>
        if (pixelIsSet)
 80031b4:	797b      	ldrb	r3, [r7, #5]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00e      	beq.n	80031d8 <lcd_setPixel+0x44>
            displayBuffer[xPosition].rawData |= (1 << yPosition);
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	4a11      	ldr	r2, [pc, #68]	; (8003204 <lcd_setPixel+0x70>)
 80031be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80031c2:	79bb      	ldrb	r3, [r7, #6]
 80031c4:	2101      	movs	r1, #1
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	4619      	mov	r1, r3
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	490c      	ldr	r1, [pc, #48]	; (8003204 <lcd_setPixel+0x70>)
 80031d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        else
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
    }
}
 80031d6:	e00e      	b.n	80031f6 <lcd_setPixel+0x62>
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <lcd_setPixel+0x70>)
 80031dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80031e0:	79bb      	ldrb	r3, [r7, #6]
 80031e2:	2101      	movs	r1, #1
 80031e4:	fa01 f303 	lsl.w	r3, r1, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	4619      	mov	r1, r3
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	400a      	ands	r2, r1
 80031f0:	4904      	ldr	r1, [pc, #16]	; (8003204 <lcd_setPixel+0x70>)
 80031f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	200001f8 	.word	0x200001f8

08003208 <lcd_clear>:

void lcd_clear(void)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 800320e:	2300      	movs	r3, #0
 8003210:	71fb      	strb	r3, [r7, #7]
 8003212:	e007      	b.n	8003224 <lcd_clear+0x1c>
        displayBuffer[rowIndex].rawData = false;
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	4a08      	ldr	r2, [pc, #32]	; (8003238 <lcd_clear+0x30>)
 8003218:	2100      	movs	r1, #0
 800321a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	3301      	adds	r3, #1
 8003222:	71fb      	strb	r3, [r7, #7]
 8003224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003228:	2b00      	cmp	r3, #0
 800322a:	daf3      	bge.n	8003214 <lcd_clear+0xc>
    }
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	200001f8 	.word	0x200001f8

0800323c <lcd_setChar>:


void lcd_setChar(uint8_t xPosition, uint8_t yPosition, unsigned char charToSet, lcd_fontSize size, bool contrastIsInverted)
{
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	4604      	mov	r4, r0
 8003244:	4608      	mov	r0, r1
 8003246:	4611      	mov	r1, r2
 8003248:	461a      	mov	r2, r3
 800324a:	4623      	mov	r3, r4
 800324c:	71fb      	strb	r3, [r7, #7]
 800324e:	4603      	mov	r3, r0
 8003250:	71bb      	strb	r3, [r7, #6]
 8003252:	460b      	mov	r3, r1
 8003254:	717b      	strb	r3, [r7, #5]
 8003256:	4613      	mov	r3, r2
 8003258:	713b      	strb	r3, [r7, #4]
#define ASCII_TABLE_OFFSET ((uint8_t) 32)

    charToSet -= ASCII_TABLE_OFFSET;
 800325a:	797b      	ldrb	r3, [r7, #5]
 800325c:	3b20      	subs	r3, #32
 800325e:	717b      	strb	r3, [r7, #5]

    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 8003260:	2300      	movs	r3, #0
 8003262:	73fb      	strb	r3, [r7, #15]
 8003264:	e049      	b.n	80032fa <lcd_setChar+0xbe>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 8003266:	2300      	movs	r3, #0
 8003268:	73bb      	strb	r3, [r7, #14]
 800326a:	e03b      	b.n	80032e4 <lcd_setChar+0xa8>
            if (Font_6x8_h[charToSet * fontSizes[size].height + columnCounter] & (1 << rowCounter))
 800326c:	797b      	ldrb	r3, [r7, #5]
 800326e:	793a      	ldrb	r2, [r7, #4]
 8003270:	4927      	ldr	r1, [pc, #156]	; (8003310 <lcd_setChar+0xd4>)
 8003272:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 8003276:	fb02 f203 	mul.w	r2, r2, r3
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	4413      	add	r3, r2
 800327e:	4a25      	ldr	r2, [pc, #148]	; (8003314 <lcd_setChar+0xd8>)
 8003280:	5cd3      	ldrb	r3, [r2, r3]
 8003282:	461a      	mov	r2, r3
 8003284:	7bbb      	ldrb	r3, [r7, #14]
 8003286:	fa42 f303 	asr.w	r3, r2, r3
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d018      	beq.n	80032c4 <lcd_setChar+0x88>
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, !contrastIsInverted);
 8003292:	79fa      	ldrb	r2, [r7, #7]
 8003294:	7bbb      	ldrb	r3, [r7, #14]
 8003296:	4413      	add	r3, r2
 8003298:	b2d8      	uxtb	r0, r3
 800329a:	79ba      	ldrb	r2, [r7, #6]
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	4413      	add	r3, r2
 80032a0:	b2d9      	uxtb	r1, r3
 80032a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bf14      	ite	ne
 80032aa:	2301      	movne	r3, #1
 80032ac:	2300      	moveq	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	f083 0301 	eor.w	r3, r3, #1
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	f7ff ff69 	bl	8003194 <lcd_setPixel>
 80032c2:	e00c      	b.n	80032de <lcd_setChar+0xa2>
            else
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, contrastIsInverted);
 80032c4:	79fa      	ldrb	r2, [r7, #7]
 80032c6:	7bbb      	ldrb	r3, [r7, #14]
 80032c8:	4413      	add	r3, r2
 80032ca:	b2d8      	uxtb	r0, r3
 80032cc:	79ba      	ldrb	r2, [r7, #6]
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	4413      	add	r3, r2
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80032d8:	4619      	mov	r1, r3
 80032da:	f7ff ff5b 	bl	8003194 <lcd_setPixel>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 80032de:	7bbb      	ldrb	r3, [r7, #14]
 80032e0:	3301      	adds	r3, #1
 80032e2:	73bb      	strb	r3, [r7, #14]
 80032e4:	793b      	ldrb	r3, [r7, #4]
 80032e6:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <lcd_setChar+0xd4>)
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	785b      	ldrb	r3, [r3, #1]
 80032ee:	7bba      	ldrb	r2, [r7, #14]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d3bb      	bcc.n	800326c <lcd_setChar+0x30>
    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	3301      	adds	r3, #1
 80032f8:	73fb      	strb	r3, [r7, #15]
 80032fa:	793b      	ldrb	r3, [r7, #4]
 80032fc:	4a04      	ldr	r2, [pc, #16]	; (8003310 <lcd_setChar+0xd4>)
 80032fe:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	429a      	cmp	r2, r3
 8003306:	d3ae      	bcc.n	8003266 <lcd_setChar+0x2a>
        }
}
 8003308:	bf00      	nop
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	bd90      	pop	{r4, r7, pc}
 8003310:	08005fc0 	.word	0x08005fc0
 8003314:	08005c40 	.word	0x08005c40

08003318 <lcd_setString>:




void lcd_setString(uint8_t xPosition, uint8_t yPosition, char const * string, lcd_fontSize size, bool contrastIsInverted )
{
 8003318:	b590      	push	{r4, r7, lr}
 800331a:	b085      	sub	sp, #20
 800331c:	af02      	add	r7, sp, #8
 800331e:	603a      	str	r2, [r7, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
 8003326:	460b      	mov	r3, r1
 8003328:	71bb      	strb	r3, [r7, #6]
 800332a:	4613      	mov	r3, r2
 800332c:	717b      	strb	r3, [r7, #5]
 if ((size <= LCD_FONT_8) && (size < LCD_NUMBER_OF_FONTS))
 800332e:	797b      	ldrb	r3, [r7, #5]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d11c      	bne.n	800336e <lcd_setString+0x56>
 8003334:	797b      	ldrb	r3, [r7, #5]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d819      	bhi.n	800336e <lcd_setString+0x56>
 //$dnd1 bug this works only for font enum = 0. No large fonts!
        for(; *string != '\0'; string++){
 800333a:	e014      	b.n	8003366 <lcd_setString+0x4e>
            lcd_setChar(xPosition, yPosition, *string, size, contrastIsInverted);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	781a      	ldrb	r2, [r3, #0]
 8003340:	797c      	ldrb	r4, [r7, #5]
 8003342:	79b9      	ldrb	r1, [r7, #6]
 8003344:	79f8      	ldrb	r0, [r7, #7]
 8003346:	7e3b      	ldrb	r3, [r7, #24]
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	4623      	mov	r3, r4
 800334c:	f7ff ff76 	bl	800323c <lcd_setChar>
            xPosition += fontSizes[size].width;
 8003350:	797b      	ldrb	r3, [r7, #5]
 8003352:	4a09      	ldr	r2, [pc, #36]	; (8003378 <lcd_setString+0x60>)
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4413      	add	r3, r2
 8003358:	785a      	ldrb	r2, [r3, #1]
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	4413      	add	r3, r2
 800335e:	71fb      	strb	r3, [r7, #7]
        for(; *string != '\0'; string++){
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	3301      	adds	r3, #1
 8003364:	603b      	str	r3, [r7, #0]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1e6      	bne.n	800333c <lcd_setString+0x24>
        }
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	bd90      	pop	{r4, r7, pc}
 8003376:	bf00      	nop
 8003378:	08005fc0 	.word	0x08005fc0

0800337c <lcd_setLine>:

// V0.4;dnd1;add;drawLine() function

void lcd_setLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t state)
{
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b08b      	sub	sp, #44	; 0x2c
 8003380:	af00      	add	r7, sp, #0
 8003382:	4604      	mov	r4, r0
 8003384:	4608      	mov	r0, r1
 8003386:	4611      	mov	r1, r2
 8003388:	461a      	mov	r2, r3
 800338a:	4623      	mov	r3, r4
 800338c:	81fb      	strh	r3, [r7, #14]
 800338e:	4603      	mov	r3, r0
 8003390:	81bb      	strh	r3, [r7, #12]
 8003392:	460b      	mov	r3, r1
 8003394:	817b      	strh	r3, [r7, #10]
 8003396:	4613      	mov	r3, r2
 8003398:	813b      	strh	r3, [r7, #8]
	int16_t i, x[2], y[2];
	float xF, yF;

	xF = x1, x[1] = 0;
 800339a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800339e:	ee07 3a90 	vmov	s15, r3
 80033a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033a6:	edc7 7a08 	vstr	s15, [r7, #32]
 80033aa:	2300      	movs	r3, #0
 80033ac:	837b      	strh	r3, [r7, #26]
	yF = y1, y[1] = 0;
 80033ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80033b2:	ee07 3a90 	vmov	s15, r3
 80033b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033ba:	edc7 7a07 	vstr	s15, [r7, #28]
 80033be:	2300      	movs	r3, #0
 80033c0:	82fb      	strh	r3, [r7, #22]

	x[0] = abs(x2-x1);
 80033c2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80033c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bfb8      	it	lt
 80033d0:	425b      	neglt	r3, r3
 80033d2:	b21b      	sxth	r3, r3
 80033d4:	833b      	strh	r3, [r7, #24]
	y[0] = abs(y2-y1);
 80033d6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80033da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bfb8      	it	lt
 80033e4:	425b      	neglt	r3, r3
 80033e6:	b21b      	sxth	r3, r3
 80033e8:	82bb      	strh	r3, [r7, #20]

	if(x[0]) x[1] = (x2-x1)/x[0];
 80033ea:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <lcd_setLine+0x8c>
 80033f2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80033f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003400:	fb93 f3f2 	sdiv	r3, r3, r2
 8003404:	b21b      	sxth	r3, r3
 8003406:	837b      	strh	r3, [r7, #26]
	if(y[0]) y[1] = (y2-y1)/y[0];
 8003408:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <lcd_setLine+0xaa>
 8003410:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003414:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800341e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003422:	b21b      	sxth	r3, r3
 8003424:	82fb      	strh	r3, [r7, #22]

	if(x[0] >= y[0]) {
 8003426:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800342a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800342e:	429a      	cmp	r2, r3
 8003430:	db5f      	blt.n	80034f2 <lcd_setLine+0x176>
		for(i = 0; i<x[0]; i++) {
 8003432:	2300      	movs	r3, #0
 8003434:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003436:	e055      	b.n	80034e4 <lcd_setLine+0x168>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 8003438:	edd7 7a08 	vldr	s15, [r7, #32]
 800343c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003444:	db20      	blt.n	8003488 <lcd_setLine+0x10c>
 8003446:	edd7 7a07 	vldr	s15, [r7, #28]
 800344a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800344e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003452:	db19      	blt.n	8003488 <lcd_setLine+0x10c>
 8003454:	edd7 7a08 	vldr	s15, [r7, #32]
 8003458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800345c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003460:	793b      	ldrb	r3, [r7, #4]
 8003462:	b2d8      	uxtb	r0, r3
 8003464:	edd7 7a07 	vldr	s15, [r7, #28]
 8003468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800346c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003470:	793b      	ldrb	r3, [r7, #4]
 8003472:	b2d9      	uxtb	r1, r3
 8003474:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003478:	2b00      	cmp	r3, #0
 800347a:	bf14      	ite	ne
 800347c:	2301      	movne	r3, #1
 800347e:	2300      	moveq	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	f7ff fe86 	bl	8003194 <lcd_setPixel>
			xF += x[1];
 8003488:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800348c:	ee07 3a90 	vmov	s15, r3
 8003490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003494:	ed97 7a08 	vldr	s14, [r7, #32]
 8003498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800349c:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += ((float)y[0]/x[0])*y[1];
 80034a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80034a4:	ee07 3a90 	vmov	s15, r3
 80034a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80034ac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80034b0:	ee07 3a90 	vmov	s15, r3
 80034b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80034c0:	ee07 3a90 	vmov	s15, r3
 80034c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80034d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d4:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<x[0]; i++) {
 80034d8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3301      	adds	r3, #1
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80034e4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80034e8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80034ec:	429a      	cmp	r2, r3
 80034ee:	dba3      	blt.n	8003438 <lcd_setLine+0xbc>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
			xF += ((float)x[0]/y[0])*x[1];
			yF += y[1];
		}
	}
}
 80034f0:	e05e      	b.n	80035b0 <lcd_setLine+0x234>
		for(i = 0; i<y[0]; i++) {
 80034f2:	2300      	movs	r3, #0
 80034f4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80034f6:	e055      	b.n	80035a4 <lcd_setLine+0x228>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 80034f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80034fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003504:	db20      	blt.n	8003548 <lcd_setLine+0x1cc>
 8003506:	edd7 7a07 	vldr	s15, [r7, #28]
 800350a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800350e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003512:	db19      	blt.n	8003548 <lcd_setLine+0x1cc>
 8003514:	edd7 7a08 	vldr	s15, [r7, #32]
 8003518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800351c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003520:	793b      	ldrb	r3, [r7, #4]
 8003522:	b2d8      	uxtb	r0, r3
 8003524:	edd7 7a07 	vldr	s15, [r7, #28]
 8003528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800352c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003530:	793b      	ldrb	r3, [r7, #4]
 8003532:	b2d9      	uxtb	r1, r3
 8003534:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003538:	2b00      	cmp	r3, #0
 800353a:	bf14      	ite	ne
 800353c:	2301      	movne	r3, #1
 800353e:	2300      	moveq	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	f7ff fe26 	bl	8003194 <lcd_setPixel>
			xF += ((float)x[0]/y[0])*x[1];
 8003548:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800354c:	ee07 3a90 	vmov	s15, r3
 8003550:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003554:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003558:	ee07 3a90 	vmov	s15, r3
 800355c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003564:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003568:	ee07 3a90 	vmov	s15, r3
 800356c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003574:	ed97 7a08 	vldr	s14, [r7, #32]
 8003578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800357c:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += y[1];
 8003580:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003584:	ee07 3a90 	vmov	s15, r3
 8003588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800358c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003594:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<y[0]; i++) {
 8003598:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800359c:	b29b      	uxth	r3, r3
 800359e:	3301      	adds	r3, #1
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80035a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80035a8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80035ac:	429a      	cmp	r2, r3
 80035ae:	dba3      	blt.n	80034f8 <lcd_setLine+0x17c>
}
 80035b0:	bf00      	nop
 80035b2:	372c      	adds	r7, #44	; 0x2c
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd90      	pop	{r4, r7, pc}

080035b8 <lcd_show>:

void lcd_show(void){
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 80035be:	2300      	movs	r3, #0
 80035c0:	71fb      	strb	r3, [r7, #7]
 80035c2:	e022      	b.n	800360a <lcd_show+0x52>
			  //$dnd added (instruction)
        sendInstruction((instruction) (PAGE_ADDRESS_SET_0 + pageIndex));
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	3b50      	subs	r3, #80	; 0x50
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fd7a 	bl	80030c4 <sendInstruction>
        sendInstruction(COLUMN_ADDRESS_SET_BIT);
 80035d0:	2010      	movs	r0, #16
 80035d2:	f7ff fd77 	bl	80030c4 <sendInstruction>
        sendInstruction(BOOSTER_RATIO_SET);
 80035d6:	2000      	movs	r0, #0
 80035d8:	f7ff fd74 	bl	80030c4 <sendInstruction>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 80035dc:	2300      	movs	r3, #0
 80035de:	71bb      	strb	r3, [r7, #6]
 80035e0:	e00c      	b.n	80035fc <lcd_show+0x44>
            sendData(displayBuffer[rowIndex].pageSet[pageIndex]);
 80035e2:	79ba      	ldrb	r2, [r7, #6]
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	490c      	ldr	r1, [pc, #48]	; (8003618 <lcd_show+0x60>)
 80035e8:	0092      	lsls	r2, r2, #2
 80035ea:	440a      	add	r2, r1
 80035ec:	4413      	add	r3, r2
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fd81 	bl	80030f8 <sendData>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 80035f6:	79bb      	ldrb	r3, [r7, #6]
 80035f8:	3301      	adds	r3, #1
 80035fa:	71bb      	strb	r3, [r7, #6]
 80035fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003600:	2b00      	cmp	r3, #0
 8003602:	daee      	bge.n	80035e2 <lcd_show+0x2a>
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	3301      	adds	r3, #1
 8003608:	71fb      	strb	r3, [r7, #7]
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d9d9      	bls.n	80035c4 <lcd_show+0xc>
    }
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	200001f8 	.word	0x200001f8

0800361c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800361c:	b5b0      	push	{r4, r5, r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af02      	add	r7, sp, #8


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003622:	f7fd fcb1 	bl	8000f88 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003626:	f000 f8a5 	bl	8003774 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800362a:	f7ff fc0f 	bl	8002e4c <MX_GPIO_Init>
	MX_SPI1_Init();
 800362e:	f000 f913 	bl	8003858 <MX_SPI1_Init>
	MX_I2C1_Init();
 8003632:	f7ff fc91 	bl	8002f58 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	sendData(0xA5);
 8003636:	20a5      	movs	r0, #165	; 0xa5
 8003638:	f7ff fd5e 	bl	80030f8 <sendData>

	// Initialise LCD and show "Welcome" top/left justified
	lcd_init();
 800363c:	f7ff fd89 	bl	8003152 <lcd_init>
	lcd_clear();
 8003640:	f7ff fde2 	bl	8003208 <lcd_clear>

	lcd_setLine(127,0,127,31,1);
 8003644:	2301      	movs	r3, #1
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	231f      	movs	r3, #31
 800364a:	227f      	movs	r2, #127	; 0x7f
 800364c:	2100      	movs	r1, #0
 800364e:	207f      	movs	r0, #127	; 0x7f
 8003650:	f7ff fe94 	bl	800337c <lcd_setLine>
	lcd_setString(4,4,"Init",LCD_FONT_8,false);
 8003654:	2300      	movs	r3, #0
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	2300      	movs	r3, #0
 800365a:	4a3c      	ldr	r2, [pc, #240]	; (800374c <main+0x130>)
 800365c:	2104      	movs	r1, #4
 800365e:	2004      	movs	r0, #4
 8003660:	f7ff fe5a 	bl	8003318 <lcd_setString>
	//lcd_setString(4,16,"Line 2",LCD_FONT_8,false);
	lcd_setLine(0,0,0,31,1);
 8003664:	2301      	movs	r3, #1
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	231f      	movs	r3, #31
 800366a:	2200      	movs	r2, #0
 800366c:	2100      	movs	r1, #0
 800366e:	2000      	movs	r0, #0
 8003670:	f7ff fe84 	bl	800337c <lcd_setLine>
	lcd_setString(4,16,"",LCD_FONT_8,false);
 8003674:	2300      	movs	r3, #0
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	2300      	movs	r3, #0
 800367a:	4a35      	ldr	r2, [pc, #212]	; (8003750 <main+0x134>)
 800367c:	2110      	movs	r1, #16
 800367e:	2004      	movs	r0, #4
 8003680:	f7ff fe4a 	bl	8003318 <lcd_setString>
	//lcd_setString(4,4,"LCD TEST",LCD_FONT_8,false);
	//  lcd_setString(0,0,"BIG ",LCD_FONT_24,false);	$bug no big font
	lcd_show();
 8003684:	f7ff ff98 	bl	80035b8 <lcd_show>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		volatile float temp = 0.0;
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	607b      	str	r3, [r7, #4]
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port,LED_BLUE_Pin);
 800368e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003692:	4830      	ldr	r0, [pc, #192]	; (8003754 <main+0x138>)
 8003694:	f7fd ff9d 	bl	80015d2 <HAL_GPIO_TogglePin>
		//uint32_t StartTime = HAL_GetTick();
		HAL_Delay(200);
 8003698:	20c8      	movs	r0, #200	; 0xc8
 800369a:	f7fd fce7 	bl	800106c <HAL_Delay>
//		count++;

// 		// Access register with Master_Receive
		if(HAL_I2C_Master_Receive(&hi2c1, LM75Address|tempRegPointer, &tempData[0], 2,HAL_MAX_DELAY)!= HAL_OK)
 800369e:	4b2e      	ldr	r3, [pc, #184]	; (8003758 <main+0x13c>)
 80036a0:	881a      	ldrh	r2, [r3, #0]
 80036a2:	4b2e      	ldr	r3, [pc, #184]	; (800375c <main+0x140>)
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	b299      	uxth	r1, r3
 80036aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	2302      	movs	r3, #2
 80036b2:	4a2b      	ldr	r2, [pc, #172]	; (8003760 <main+0x144>)
 80036b4:	482b      	ldr	r0, [pc, #172]	; (8003764 <main+0x148>)
 80036b6:	f7fe f8cf 	bl	8001858 <HAL_I2C_Master_Receive>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <main+0xa8>
		{
			 Error_Handler();
 80036c0:	f000 f8b8 	bl	8003834 <Error_Handler>
//				&tempData[0], 2,HAL_MAX_DELAY)!= HAL_OK)
//		{
//			 Error_Handler();
//		}
		//tempData[0] XXXX XXXX and tempData[1] XXX0 0000
		temp = 0.125*(tempData[0]*8.0 + (tempData[1]>>5));
 80036c4:	4b26      	ldr	r3, [pc, #152]	; (8003760 <main+0x144>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fc ff4b 	bl	8000564 <__aeabi_i2d>
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	4b25      	ldr	r3, [pc, #148]	; (8003768 <main+0x14c>)
 80036d4:	f7fc ffb0 	bl	8000638 <__aeabi_dmul>
 80036d8:	4603      	mov	r3, r0
 80036da:	460c      	mov	r4, r1
 80036dc:	4625      	mov	r5, r4
 80036de:	461c      	mov	r4, r3
 80036e0:	4b1f      	ldr	r3, [pc, #124]	; (8003760 <main+0x144>)
 80036e2:	785b      	ldrb	r3, [r3, #1]
 80036e4:	095b      	lsrs	r3, r3, #5
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fc ff3b 	bl	8000564 <__aeabi_i2d>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	4620      	mov	r0, r4
 80036f4:	4629      	mov	r1, r5
 80036f6:	f7fc fde9 	bl	80002cc <__adddf3>
 80036fa:	4603      	mov	r3, r0
 80036fc:	460c      	mov	r4, r1
 80036fe:	4618      	mov	r0, r3
 8003700:	4621      	mov	r1, r4
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800370a:	f7fc ff95 	bl	8000638 <__aeabi_dmul>
 800370e:	4603      	mov	r3, r0
 8003710:	460c      	mov	r4, r1
 8003712:	4618      	mov	r0, r3
 8003714:	4621      	mov	r1, r4
 8003716:	f7fd fa67 	bl	8000be8 <__aeabi_d2f>
 800371a:	4603      	mov	r3, r0
 800371c:	607b      	str	r3, [r7, #4]
		sprintf((char*)buff2,"Temperature = %f", temp);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4618      	mov	r0, r3
 8003722:	f7fc ff31 	bl	8000588 <__aeabi_f2d>
 8003726:	4603      	mov	r3, r0
 8003728:	460c      	mov	r4, r1
 800372a:	461a      	mov	r2, r3
 800372c:	4623      	mov	r3, r4
 800372e:	490f      	ldr	r1, [pc, #60]	; (800376c <main+0x150>)
 8003730:	480f      	ldr	r0, [pc, #60]	; (8003770 <main+0x154>)
 8003732:	f000 fe7f 	bl	8004434 <siprintf>


		lcd_setString(4,4,(const char*)buff2,LCD_FONT_8,false);
 8003736:	2300      	movs	r3, #0
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	2300      	movs	r3, #0
 800373c:	4a0c      	ldr	r2, [pc, #48]	; (8003770 <main+0x154>)
 800373e:	2104      	movs	r1, #4
 8003740:	2004      	movs	r0, #4
 8003742:	f7ff fde9 	bl	8003318 <lcd_setString>
		lcd_show();
 8003746:	f7ff ff37 	bl	80035b8 <lcd_show>
	{
 800374a:	e79d      	b.n	8003688 <main+0x6c>
 800374c:	08005c10 	.word	0x08005c10
 8003750:	08005c18 	.word	0x08005c18
 8003754:	40020000 	.word	0x40020000
 8003758:	20000006 	.word	0x20000006
 800375c:	200003f8 	.word	0x200003f8
 8003760:	20000780 	.word	0x20000780
 8003764:	2000040c 	.word	0x2000040c
 8003768:	40200000 	.word	0x40200000
 800376c:	08005c1c 	.word	0x08005c1c
 8003770:	200005f0 	.word	0x200005f0

08003774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b094      	sub	sp, #80	; 0x50
 8003778:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800377a:	f107 031c 	add.w	r3, r7, #28
 800377e:	2234      	movs	r2, #52	; 0x34
 8003780:	2100      	movs	r1, #0
 8003782:	4618      	mov	r0, r3
 8003784:	f000 f9f2 	bl	8003b6c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003788:	f107 0308 	add.w	r3, r7, #8
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8003798:	2300      	movs	r3, #0
 800379a:	607b      	str	r3, [r7, #4]
 800379c:	4b23      	ldr	r3, [pc, #140]	; (800382c <SystemClock_Config+0xb8>)
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	4a22      	ldr	r2, [pc, #136]	; (800382c <SystemClock_Config+0xb8>)
 80037a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a6:	6413      	str	r3, [r2, #64]	; 0x40
 80037a8:	4b20      	ldr	r3, [pc, #128]	; (800382c <SystemClock_Config+0xb8>)
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	607b      	str	r3, [r7, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80037b4:	2300      	movs	r3, #0
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <SystemClock_Config+0xbc>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80037c0:	4a1b      	ldr	r2, [pc, #108]	; (8003830 <SystemClock_Config+0xbc>)
 80037c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	4b19      	ldr	r3, [pc, #100]	; (8003830 <SystemClock_Config+0xbc>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037d0:	603b      	str	r3, [r7, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80037d4:	2302      	movs	r3, #2
 80037d6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037d8:	2301      	movs	r3, #1
 80037da:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037dc:	2310      	movs	r3, #16
 80037de:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80037e0:	2300      	movs	r3, #0
 80037e2:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037e4:	f107 031c 	add.w	r3, r7, #28
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fe fe91 	bl	8002510 <HAL_RCC_OscConfig>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <SystemClock_Config+0x84>
	{
	Error_Handler();
 80037f4:	f000 f81e 	bl	8003834 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037f8:	230f      	movs	r3, #15
 80037fa:	60bb      	str	r3, [r7, #8]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003800:	2300      	movs	r3, #0
 8003802:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003808:	2300      	movs	r3, #0
 800380a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800380c:	f107 0308 	add.w	r3, r7, #8
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f7fe fc28 	bl	8002068 <HAL_RCC_ClockConfig>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <SystemClock_Config+0xae>
	{
	Error_Handler();
 800381e:	f000 f809 	bl	8003834 <Error_Handler>
	}
}
 8003822:	bf00      	nop
 8003824:	3750      	adds	r7, #80	; 0x50
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800
 8003830:	40007000 	.word	0x40007000

08003834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	lcd_setString(4,16,"	ERROR OCCURED	",LCD_FONT_8,false);
 800383a:	2300      	movs	r3, #0
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	2300      	movs	r3, #0
 8003840:	4a04      	ldr	r2, [pc, #16]	; (8003854 <Error_Handler+0x20>)
 8003842:	2110      	movs	r1, #16
 8003844:	2004      	movs	r0, #4
 8003846:	f7ff fd67 	bl	8003318 <lcd_setString>
	lcd_show();
 800384a:	f7ff feb5 	bl	80035b8 <lcd_show>
	/* USER CODE END Error_Handler_Debug */
}
 800384e:	bf00      	nop
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	08005c30 	.word	0x08005c30

08003858 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800385c:	4b17      	ldr	r3, [pc, #92]	; (80038bc <MX_SPI1_Init+0x64>)
 800385e:	4a18      	ldr	r2, [pc, #96]	; (80038c0 <MX_SPI1_Init+0x68>)
 8003860:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003862:	4b16      	ldr	r3, [pc, #88]	; (80038bc <MX_SPI1_Init+0x64>)
 8003864:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003868:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800386a:	4b14      	ldr	r3, [pc, #80]	; (80038bc <MX_SPI1_Init+0x64>)
 800386c:	2200      	movs	r2, #0
 800386e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003870:	4b12      	ldr	r3, [pc, #72]	; (80038bc <MX_SPI1_Init+0x64>)
 8003872:	2200      	movs	r2, #0
 8003874:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003876:	4b11      	ldr	r3, [pc, #68]	; (80038bc <MX_SPI1_Init+0x64>)
 8003878:	2200      	movs	r2, #0
 800387a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800387c:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <MX_SPI1_Init+0x64>)
 800387e:	2200      	movs	r2, #0
 8003880:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003882:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <MX_SPI1_Init+0x64>)
 8003884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003888:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800388a:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <MX_SPI1_Init+0x64>)
 800388c:	2210      	movs	r2, #16
 800388e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <MX_SPI1_Init+0x64>)
 8003892:	2200      	movs	r2, #0
 8003894:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003896:	4b09      	ldr	r3, [pc, #36]	; (80038bc <MX_SPI1_Init+0x64>)
 8003898:	2200      	movs	r2, #0
 800389a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800389c:	4b07      	ldr	r3, [pc, #28]	; (80038bc <MX_SPI1_Init+0x64>)
 800389e:	2200      	movs	r2, #0
 80038a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80038a2:	4b06      	ldr	r3, [pc, #24]	; (80038bc <MX_SPI1_Init+0x64>)
 80038a4:	220a      	movs	r2, #10
 80038a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038a8:	4804      	ldr	r0, [pc, #16]	; (80038bc <MX_SPI1_Init+0x64>)
 80038aa:	f7ff f88b 	bl	80029c4 <HAL_SPI_Init>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80038b4:	f7ff ffbe 	bl	8003834 <Error_Handler>
  }

}
 80038b8:	bf00      	nop
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20000784 	.word	0x20000784
 80038c0:	40013000 	.word	0x40013000

080038c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08a      	sub	sp, #40	; 0x28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038cc:	f107 0314 	add.w	r3, r7, #20
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	60da      	str	r2, [r3, #12]
 80038da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a19      	ldr	r2, [pc, #100]	; (8003948 <HAL_SPI_MspInit+0x84>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d12b      	bne.n	800393e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	4b18      	ldr	r3, [pc, #96]	; (800394c <HAL_SPI_MspInit+0x88>)
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	4a17      	ldr	r2, [pc, #92]	; (800394c <HAL_SPI_MspInit+0x88>)
 80038f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038f4:	6453      	str	r3, [r2, #68]	; 0x44
 80038f6:	4b15      	ldr	r3, [pc, #84]	; (800394c <HAL_SPI_MspInit+0x88>)
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	4b11      	ldr	r3, [pc, #68]	; (800394c <HAL_SPI_MspInit+0x88>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	4a10      	ldr	r2, [pc, #64]	; (800394c <HAL_SPI_MspInit+0x88>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	6313      	str	r3, [r2, #48]	; 0x30
 8003912:	4b0e      	ldr	r3, [pc, #56]	; (800394c <HAL_SPI_MspInit+0x88>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 800391e:	23a0      	movs	r3, #160	; 0xa0
 8003920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003922:	2302      	movs	r3, #2
 8003924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800392a:	2303      	movs	r3, #3
 800392c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800392e:	2305      	movs	r3, #5
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003932:	f107 0314 	add.w	r3, r7, #20
 8003936:	4619      	mov	r1, r3
 8003938:	4805      	ldr	r0, [pc, #20]	; (8003950 <HAL_SPI_MspInit+0x8c>)
 800393a:	f7fd fc9f 	bl	800127c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800393e:	bf00      	nop
 8003940:	3728      	adds	r7, #40	; 0x28
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40013000 	.word	0x40013000
 800394c:	40023800 	.word	0x40023800
 8003950:	40020000 	.word	0x40020000

08003954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	607b      	str	r3, [r7, #4]
 800395e:	4b10      	ldr	r3, [pc, #64]	; (80039a0 <HAL_MspInit+0x4c>)
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	4a0f      	ldr	r2, [pc, #60]	; (80039a0 <HAL_MspInit+0x4c>)
 8003964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003968:	6453      	str	r3, [r2, #68]	; 0x44
 800396a:	4b0d      	ldr	r3, [pc, #52]	; (80039a0 <HAL_MspInit+0x4c>)
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003972:	607b      	str	r3, [r7, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	603b      	str	r3, [r7, #0]
 800397a:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <HAL_MspInit+0x4c>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	4a08      	ldr	r2, [pc, #32]	; (80039a0 <HAL_MspInit+0x4c>)
 8003980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003984:	6413      	str	r3, [r2, #64]	; 0x40
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HAL_MspInit+0x4c>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40023800 	.word	0x40023800

080039a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039b2:	b480      	push	{r7}
 80039b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039b6:	e7fe      	b.n	80039b6 <HardFault_Handler+0x4>

080039b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039bc:	e7fe      	b.n	80039bc <MemManage_Handler+0x4>

080039be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039be:	b480      	push	{r7}
 80039c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039c2:	e7fe      	b.n	80039c2 <BusFault_Handler+0x4>

080039c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039c8:	e7fe      	b.n	80039c8 <UsageFault_Handler+0x4>

080039ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039ca:	b480      	push	{r7}
 80039cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039ce:	bf00      	nop
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039e6:	b480      	push	{r7}
 80039e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039ea:	bf00      	nop
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039f8:	f7fd fb18 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039fc:	bf00      	nop
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003a08:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <_sbrk+0x50>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d102      	bne.n	8003a16 <_sbrk+0x16>
		heap_end = &end;
 8003a10:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <_sbrk+0x50>)
 8003a12:	4a10      	ldr	r2, [pc, #64]	; (8003a54 <_sbrk+0x54>)
 8003a14:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003a16:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <_sbrk+0x50>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <_sbrk+0x50>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4413      	add	r3, r2
 8003a24:	466a      	mov	r2, sp
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d907      	bls.n	8003a3a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003a2a:	f000 f875 	bl	8003b18 <__errno>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	230c      	movs	r3, #12
 8003a32:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a38:	e006      	b.n	8003a48 <_sbrk+0x48>
	}

	heap_end += incr;
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <_sbrk+0x50>)
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	4a03      	ldr	r2, [pc, #12]	; (8003a50 <_sbrk+0x50>)
 8003a44:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003a46:	68fb      	ldr	r3, [r7, #12]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	200003fc 	.word	0x200003fc
 8003a54:	200007e0 	.word	0x200007e0

08003a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a5c:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <SystemInit+0x60>)
 8003a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a62:	4a15      	ldr	r2, [pc, #84]	; (8003ab8 <SystemInit+0x60>)
 8003a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003a6c:	4b13      	ldr	r3, [pc, #76]	; (8003abc <SystemInit+0x64>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a12      	ldr	r2, [pc, #72]	; (8003abc <SystemInit+0x64>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003a78:	4b10      	ldr	r3, [pc, #64]	; (8003abc <SystemInit+0x64>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003a7e:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <SystemInit+0x64>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <SystemInit+0x64>)
 8003a84:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <SystemInit+0x64>)
 8003a90:	4a0b      	ldr	r2, [pc, #44]	; (8003ac0 <SystemInit+0x68>)
 8003a92:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003a94:	4b09      	ldr	r3, [pc, #36]	; (8003abc <SystemInit+0x64>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a08      	ldr	r2, [pc, #32]	; (8003abc <SystemInit+0x64>)
 8003a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <SystemInit+0x64>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003aa6:	4b04      	ldr	r3, [pc, #16]	; (8003ab8 <SystemInit+0x60>)
 8003aa8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003aac:	609a      	str	r2, [r3, #8]
#endif
}
 8003aae:	bf00      	nop
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	e000ed00 	.word	0xe000ed00
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	24003010 	.word	0x24003010

08003ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003afc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003ac8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003aca:	e003      	b.n	8003ad4 <LoopCopyDataInit>

08003acc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003ace:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ad0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ad2:	3104      	adds	r1, #4

08003ad4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ad4:	480b      	ldr	r0, [pc, #44]	; (8003b04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ad6:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ad8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ada:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003adc:	d3f6      	bcc.n	8003acc <CopyDataInit>
  ldr  r2, =_sbss
 8003ade:	4a0b      	ldr	r2, [pc, #44]	; (8003b0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ae0:	e002      	b.n	8003ae8 <LoopFillZerobss>

08003ae2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ae2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ae4:	f842 3b04 	str.w	r3, [r2], #4

08003ae8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003aea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003aec:	d3f9      	bcc.n	8003ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003aee:	f7ff ffb3 	bl	8003a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003af2:	f000 f817 	bl	8003b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003af6:	f7ff fd91 	bl	800361c <main>
  bx  lr    
 8003afa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003afc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003b00:	08006248 	.word	0x08006248
  ldr  r0, =_sdata
 8003b04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b08:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8003b0c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8003b10:	200007e0 	.word	0x200007e0

08003b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b14:	e7fe      	b.n	8003b14 <ADC_IRQHandler>
	...

08003b18 <__errno>:
 8003b18:	4b01      	ldr	r3, [pc, #4]	; (8003b20 <__errno+0x8>)
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	2000000c 	.word	0x2000000c

08003b24 <__libc_init_array>:
 8003b24:	b570      	push	{r4, r5, r6, lr}
 8003b26:	4e0d      	ldr	r6, [pc, #52]	; (8003b5c <__libc_init_array+0x38>)
 8003b28:	4c0d      	ldr	r4, [pc, #52]	; (8003b60 <__libc_init_array+0x3c>)
 8003b2a:	1ba4      	subs	r4, r4, r6
 8003b2c:	10a4      	asrs	r4, r4, #2
 8003b2e:	2500      	movs	r5, #0
 8003b30:	42a5      	cmp	r5, r4
 8003b32:	d109      	bne.n	8003b48 <__libc_init_array+0x24>
 8003b34:	4e0b      	ldr	r6, [pc, #44]	; (8003b64 <__libc_init_array+0x40>)
 8003b36:	4c0c      	ldr	r4, [pc, #48]	; (8003b68 <__libc_init_array+0x44>)
 8003b38:	f002 f85e 	bl	8005bf8 <_init>
 8003b3c:	1ba4      	subs	r4, r4, r6
 8003b3e:	10a4      	asrs	r4, r4, #2
 8003b40:	2500      	movs	r5, #0
 8003b42:	42a5      	cmp	r5, r4
 8003b44:	d105      	bne.n	8003b52 <__libc_init_array+0x2e>
 8003b46:	bd70      	pop	{r4, r5, r6, pc}
 8003b48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b4c:	4798      	blx	r3
 8003b4e:	3501      	adds	r5, #1
 8003b50:	e7ee      	b.n	8003b30 <__libc_init_array+0xc>
 8003b52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b56:	4798      	blx	r3
 8003b58:	3501      	adds	r5, #1
 8003b5a:	e7f2      	b.n	8003b42 <__libc_init_array+0x1e>
 8003b5c:	08006240 	.word	0x08006240
 8003b60:	08006240 	.word	0x08006240
 8003b64:	08006240 	.word	0x08006240
 8003b68:	08006244 	.word	0x08006244

08003b6c <memset>:
 8003b6c:	4402      	add	r2, r0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d100      	bne.n	8003b76 <memset+0xa>
 8003b74:	4770      	bx	lr
 8003b76:	f803 1b01 	strb.w	r1, [r3], #1
 8003b7a:	e7f9      	b.n	8003b70 <memset+0x4>

08003b7c <__cvt>:
 8003b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b80:	ec55 4b10 	vmov	r4, r5, d0
 8003b84:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003b86:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003b8a:	2d00      	cmp	r5, #0
 8003b8c:	460e      	mov	r6, r1
 8003b8e:	4691      	mov	r9, r2
 8003b90:	4619      	mov	r1, r3
 8003b92:	bfb8      	it	lt
 8003b94:	4622      	movlt	r2, r4
 8003b96:	462b      	mov	r3, r5
 8003b98:	f027 0720 	bic.w	r7, r7, #32
 8003b9c:	bfbb      	ittet	lt
 8003b9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003ba2:	461d      	movlt	r5, r3
 8003ba4:	2300      	movge	r3, #0
 8003ba6:	232d      	movlt	r3, #45	; 0x2d
 8003ba8:	bfb8      	it	lt
 8003baa:	4614      	movlt	r4, r2
 8003bac:	2f46      	cmp	r7, #70	; 0x46
 8003bae:	700b      	strb	r3, [r1, #0]
 8003bb0:	d004      	beq.n	8003bbc <__cvt+0x40>
 8003bb2:	2f45      	cmp	r7, #69	; 0x45
 8003bb4:	d100      	bne.n	8003bb8 <__cvt+0x3c>
 8003bb6:	3601      	adds	r6, #1
 8003bb8:	2102      	movs	r1, #2
 8003bba:	e000      	b.n	8003bbe <__cvt+0x42>
 8003bbc:	2103      	movs	r1, #3
 8003bbe:	ab03      	add	r3, sp, #12
 8003bc0:	9301      	str	r3, [sp, #4]
 8003bc2:	ab02      	add	r3, sp, #8
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	4632      	mov	r2, r6
 8003bc8:	4653      	mov	r3, sl
 8003bca:	ec45 4b10 	vmov	d0, r4, r5
 8003bce:	f000 fcdf 	bl	8004590 <_dtoa_r>
 8003bd2:	2f47      	cmp	r7, #71	; 0x47
 8003bd4:	4680      	mov	r8, r0
 8003bd6:	d102      	bne.n	8003bde <__cvt+0x62>
 8003bd8:	f019 0f01 	tst.w	r9, #1
 8003bdc:	d026      	beq.n	8003c2c <__cvt+0xb0>
 8003bde:	2f46      	cmp	r7, #70	; 0x46
 8003be0:	eb08 0906 	add.w	r9, r8, r6
 8003be4:	d111      	bne.n	8003c0a <__cvt+0x8e>
 8003be6:	f898 3000 	ldrb.w	r3, [r8]
 8003bea:	2b30      	cmp	r3, #48	; 0x30
 8003bec:	d10a      	bne.n	8003c04 <__cvt+0x88>
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	f7fc ff87 	bl	8000b08 <__aeabi_dcmpeq>
 8003bfa:	b918      	cbnz	r0, 8003c04 <__cvt+0x88>
 8003bfc:	f1c6 0601 	rsb	r6, r6, #1
 8003c00:	f8ca 6000 	str.w	r6, [sl]
 8003c04:	f8da 3000 	ldr.w	r3, [sl]
 8003c08:	4499      	add	r9, r3
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	4620      	mov	r0, r4
 8003c10:	4629      	mov	r1, r5
 8003c12:	f7fc ff79 	bl	8000b08 <__aeabi_dcmpeq>
 8003c16:	b938      	cbnz	r0, 8003c28 <__cvt+0xac>
 8003c18:	2230      	movs	r2, #48	; 0x30
 8003c1a:	9b03      	ldr	r3, [sp, #12]
 8003c1c:	454b      	cmp	r3, r9
 8003c1e:	d205      	bcs.n	8003c2c <__cvt+0xb0>
 8003c20:	1c59      	adds	r1, r3, #1
 8003c22:	9103      	str	r1, [sp, #12]
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	e7f8      	b.n	8003c1a <__cvt+0x9e>
 8003c28:	f8cd 900c 	str.w	r9, [sp, #12]
 8003c2c:	9b03      	ldr	r3, [sp, #12]
 8003c2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c30:	eba3 0308 	sub.w	r3, r3, r8
 8003c34:	4640      	mov	r0, r8
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	b004      	add	sp, #16
 8003c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003c3e <__exponent>:
 8003c3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c40:	2900      	cmp	r1, #0
 8003c42:	4604      	mov	r4, r0
 8003c44:	bfba      	itte	lt
 8003c46:	4249      	neglt	r1, r1
 8003c48:	232d      	movlt	r3, #45	; 0x2d
 8003c4a:	232b      	movge	r3, #43	; 0x2b
 8003c4c:	2909      	cmp	r1, #9
 8003c4e:	f804 2b02 	strb.w	r2, [r4], #2
 8003c52:	7043      	strb	r3, [r0, #1]
 8003c54:	dd20      	ble.n	8003c98 <__exponent+0x5a>
 8003c56:	f10d 0307 	add.w	r3, sp, #7
 8003c5a:	461f      	mov	r7, r3
 8003c5c:	260a      	movs	r6, #10
 8003c5e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003c62:	fb06 1115 	mls	r1, r6, r5, r1
 8003c66:	3130      	adds	r1, #48	; 0x30
 8003c68:	2d09      	cmp	r5, #9
 8003c6a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003c6e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8003c72:	4629      	mov	r1, r5
 8003c74:	dc09      	bgt.n	8003c8a <__exponent+0x4c>
 8003c76:	3130      	adds	r1, #48	; 0x30
 8003c78:	3b02      	subs	r3, #2
 8003c7a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003c7e:	42bb      	cmp	r3, r7
 8003c80:	4622      	mov	r2, r4
 8003c82:	d304      	bcc.n	8003c8e <__exponent+0x50>
 8003c84:	1a10      	subs	r0, r2, r0
 8003c86:	b003      	add	sp, #12
 8003c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	e7e7      	b.n	8003c5e <__exponent+0x20>
 8003c8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c92:	f804 2b01 	strb.w	r2, [r4], #1
 8003c96:	e7f2      	b.n	8003c7e <__exponent+0x40>
 8003c98:	2330      	movs	r3, #48	; 0x30
 8003c9a:	4419      	add	r1, r3
 8003c9c:	7083      	strb	r3, [r0, #2]
 8003c9e:	1d02      	adds	r2, r0, #4
 8003ca0:	70c1      	strb	r1, [r0, #3]
 8003ca2:	e7ef      	b.n	8003c84 <__exponent+0x46>

08003ca4 <_printf_float>:
 8003ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca8:	b08d      	sub	sp, #52	; 0x34
 8003caa:	460c      	mov	r4, r1
 8003cac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003cb0:	4616      	mov	r6, r2
 8003cb2:	461f      	mov	r7, r3
 8003cb4:	4605      	mov	r5, r0
 8003cb6:	f001 fa23 	bl	8005100 <_localeconv_r>
 8003cba:	6803      	ldr	r3, [r0, #0]
 8003cbc:	9304      	str	r3, [sp, #16]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fc faa6 	bl	8000210 <strlen>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8003cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8003ccc:	9005      	str	r0, [sp, #20]
 8003cce:	3307      	adds	r3, #7
 8003cd0:	f023 0307 	bic.w	r3, r3, #7
 8003cd4:	f103 0208 	add.w	r2, r3, #8
 8003cd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003cdc:	f8d4 b000 	ldr.w	fp, [r4]
 8003ce0:	f8c8 2000 	str.w	r2, [r8]
 8003ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003cec:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003cf0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003cf4:	9307      	str	r3, [sp, #28]
 8003cf6:	f8cd 8018 	str.w	r8, [sp, #24]
 8003cfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cfe:	4ba7      	ldr	r3, [pc, #668]	; (8003f9c <_printf_float+0x2f8>)
 8003d00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d04:	f7fc ff32 	bl	8000b6c <__aeabi_dcmpun>
 8003d08:	bb70      	cbnz	r0, 8003d68 <_printf_float+0xc4>
 8003d0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d0e:	4ba3      	ldr	r3, [pc, #652]	; (8003f9c <_printf_float+0x2f8>)
 8003d10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d14:	f7fc ff0c 	bl	8000b30 <__aeabi_dcmple>
 8003d18:	bb30      	cbnz	r0, 8003d68 <_printf_float+0xc4>
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	4640      	mov	r0, r8
 8003d20:	4649      	mov	r1, r9
 8003d22:	f7fc fefb 	bl	8000b1c <__aeabi_dcmplt>
 8003d26:	b110      	cbz	r0, 8003d2e <_printf_float+0x8a>
 8003d28:	232d      	movs	r3, #45	; 0x2d
 8003d2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d2e:	4a9c      	ldr	r2, [pc, #624]	; (8003fa0 <_printf_float+0x2fc>)
 8003d30:	4b9c      	ldr	r3, [pc, #624]	; (8003fa4 <_printf_float+0x300>)
 8003d32:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003d36:	bf8c      	ite	hi
 8003d38:	4690      	movhi	r8, r2
 8003d3a:	4698      	movls	r8, r3
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	f02b 0204 	bic.w	r2, fp, #4
 8003d42:	6123      	str	r3, [r4, #16]
 8003d44:	6022      	str	r2, [r4, #0]
 8003d46:	f04f 0900 	mov.w	r9, #0
 8003d4a:	9700      	str	r7, [sp, #0]
 8003d4c:	4633      	mov	r3, r6
 8003d4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003d50:	4621      	mov	r1, r4
 8003d52:	4628      	mov	r0, r5
 8003d54:	f000 f9e6 	bl	8004124 <_printf_common>
 8003d58:	3001      	adds	r0, #1
 8003d5a:	f040 808d 	bne.w	8003e78 <_printf_float+0x1d4>
 8003d5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d62:	b00d      	add	sp, #52	; 0x34
 8003d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d68:	4642      	mov	r2, r8
 8003d6a:	464b      	mov	r3, r9
 8003d6c:	4640      	mov	r0, r8
 8003d6e:	4649      	mov	r1, r9
 8003d70:	f7fc fefc 	bl	8000b6c <__aeabi_dcmpun>
 8003d74:	b110      	cbz	r0, 8003d7c <_printf_float+0xd8>
 8003d76:	4a8c      	ldr	r2, [pc, #560]	; (8003fa8 <_printf_float+0x304>)
 8003d78:	4b8c      	ldr	r3, [pc, #560]	; (8003fac <_printf_float+0x308>)
 8003d7a:	e7da      	b.n	8003d32 <_printf_float+0x8e>
 8003d7c:	6861      	ldr	r1, [r4, #4]
 8003d7e:	1c4b      	adds	r3, r1, #1
 8003d80:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003d84:	a80a      	add	r0, sp, #40	; 0x28
 8003d86:	d13e      	bne.n	8003e06 <_printf_float+0x162>
 8003d88:	2306      	movs	r3, #6
 8003d8a:	6063      	str	r3, [r4, #4]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003d92:	ab09      	add	r3, sp, #36	; 0x24
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	ec49 8b10 	vmov	d0, r8, r9
 8003d9a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003d9e:	6022      	str	r2, [r4, #0]
 8003da0:	f8cd a004 	str.w	sl, [sp, #4]
 8003da4:	6861      	ldr	r1, [r4, #4]
 8003da6:	4628      	mov	r0, r5
 8003da8:	f7ff fee8 	bl	8003b7c <__cvt>
 8003dac:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003db0:	2b47      	cmp	r3, #71	; 0x47
 8003db2:	4680      	mov	r8, r0
 8003db4:	d109      	bne.n	8003dca <_printf_float+0x126>
 8003db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003db8:	1cd8      	adds	r0, r3, #3
 8003dba:	db02      	blt.n	8003dc2 <_printf_float+0x11e>
 8003dbc:	6862      	ldr	r2, [r4, #4]
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	dd47      	ble.n	8003e52 <_printf_float+0x1ae>
 8003dc2:	f1aa 0a02 	sub.w	sl, sl, #2
 8003dc6:	fa5f fa8a 	uxtb.w	sl, sl
 8003dca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003dce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003dd0:	d824      	bhi.n	8003e1c <_printf_float+0x178>
 8003dd2:	3901      	subs	r1, #1
 8003dd4:	4652      	mov	r2, sl
 8003dd6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003dda:	9109      	str	r1, [sp, #36]	; 0x24
 8003ddc:	f7ff ff2f 	bl	8003c3e <__exponent>
 8003de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003de2:	1813      	adds	r3, r2, r0
 8003de4:	2a01      	cmp	r2, #1
 8003de6:	4681      	mov	r9, r0
 8003de8:	6123      	str	r3, [r4, #16]
 8003dea:	dc02      	bgt.n	8003df2 <_printf_float+0x14e>
 8003dec:	6822      	ldr	r2, [r4, #0]
 8003dee:	07d1      	lsls	r1, r2, #31
 8003df0:	d501      	bpl.n	8003df6 <_printf_float+0x152>
 8003df2:	3301      	adds	r3, #1
 8003df4:	6123      	str	r3, [r4, #16]
 8003df6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0a5      	beq.n	8003d4a <_printf_float+0xa6>
 8003dfe:	232d      	movs	r3, #45	; 0x2d
 8003e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e04:	e7a1      	b.n	8003d4a <_printf_float+0xa6>
 8003e06:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003e0a:	f000 8177 	beq.w	80040fc <_printf_float+0x458>
 8003e0e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003e12:	d1bb      	bne.n	8003d8c <_printf_float+0xe8>
 8003e14:	2900      	cmp	r1, #0
 8003e16:	d1b9      	bne.n	8003d8c <_printf_float+0xe8>
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e7b6      	b.n	8003d8a <_printf_float+0xe6>
 8003e1c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003e20:	d119      	bne.n	8003e56 <_printf_float+0x1b2>
 8003e22:	2900      	cmp	r1, #0
 8003e24:	6863      	ldr	r3, [r4, #4]
 8003e26:	dd0c      	ble.n	8003e42 <_printf_float+0x19e>
 8003e28:	6121      	str	r1, [r4, #16]
 8003e2a:	b913      	cbnz	r3, 8003e32 <_printf_float+0x18e>
 8003e2c:	6822      	ldr	r2, [r4, #0]
 8003e2e:	07d2      	lsls	r2, r2, #31
 8003e30:	d502      	bpl.n	8003e38 <_printf_float+0x194>
 8003e32:	3301      	adds	r3, #1
 8003e34:	440b      	add	r3, r1
 8003e36:	6123      	str	r3, [r4, #16]
 8003e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e3a:	65a3      	str	r3, [r4, #88]	; 0x58
 8003e3c:	f04f 0900 	mov.w	r9, #0
 8003e40:	e7d9      	b.n	8003df6 <_printf_float+0x152>
 8003e42:	b913      	cbnz	r3, 8003e4a <_printf_float+0x1a6>
 8003e44:	6822      	ldr	r2, [r4, #0]
 8003e46:	07d0      	lsls	r0, r2, #31
 8003e48:	d501      	bpl.n	8003e4e <_printf_float+0x1aa>
 8003e4a:	3302      	adds	r3, #2
 8003e4c:	e7f3      	b.n	8003e36 <_printf_float+0x192>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e7f1      	b.n	8003e36 <_printf_float+0x192>
 8003e52:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003e56:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	db05      	blt.n	8003e6a <_printf_float+0x1c6>
 8003e5e:	6822      	ldr	r2, [r4, #0]
 8003e60:	6123      	str	r3, [r4, #16]
 8003e62:	07d1      	lsls	r1, r2, #31
 8003e64:	d5e8      	bpl.n	8003e38 <_printf_float+0x194>
 8003e66:	3301      	adds	r3, #1
 8003e68:	e7e5      	b.n	8003e36 <_printf_float+0x192>
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bfd4      	ite	le
 8003e6e:	f1c3 0302 	rsble	r3, r3, #2
 8003e72:	2301      	movgt	r3, #1
 8003e74:	4413      	add	r3, r2
 8003e76:	e7de      	b.n	8003e36 <_printf_float+0x192>
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	055a      	lsls	r2, r3, #21
 8003e7c:	d407      	bmi.n	8003e8e <_printf_float+0x1ea>
 8003e7e:	6923      	ldr	r3, [r4, #16]
 8003e80:	4642      	mov	r2, r8
 8003e82:	4631      	mov	r1, r6
 8003e84:	4628      	mov	r0, r5
 8003e86:	47b8      	blx	r7
 8003e88:	3001      	adds	r0, #1
 8003e8a:	d12b      	bne.n	8003ee4 <_printf_float+0x240>
 8003e8c:	e767      	b.n	8003d5e <_printf_float+0xba>
 8003e8e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003e92:	f240 80dc 	bls.w	800404e <_printf_float+0x3aa>
 8003e96:	2200      	movs	r2, #0
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e9e:	f7fc fe33 	bl	8000b08 <__aeabi_dcmpeq>
 8003ea2:	2800      	cmp	r0, #0
 8003ea4:	d033      	beq.n	8003f0e <_printf_float+0x26a>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	4a41      	ldr	r2, [pc, #260]	; (8003fb0 <_printf_float+0x30c>)
 8003eaa:	4631      	mov	r1, r6
 8003eac:	4628      	mov	r0, r5
 8003eae:	47b8      	blx	r7
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	f43f af54 	beq.w	8003d5e <_printf_float+0xba>
 8003eb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	db02      	blt.n	8003ec4 <_printf_float+0x220>
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	07d8      	lsls	r0, r3, #31
 8003ec2:	d50f      	bpl.n	8003ee4 <_printf_float+0x240>
 8003ec4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ec8:	4631      	mov	r1, r6
 8003eca:	4628      	mov	r0, r5
 8003ecc:	47b8      	blx	r7
 8003ece:	3001      	adds	r0, #1
 8003ed0:	f43f af45 	beq.w	8003d5e <_printf_float+0xba>
 8003ed4:	f04f 0800 	mov.w	r8, #0
 8003ed8:	f104 091a 	add.w	r9, r4, #26
 8003edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	4543      	cmp	r3, r8
 8003ee2:	dc09      	bgt.n	8003ef8 <_printf_float+0x254>
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	079b      	lsls	r3, r3, #30
 8003ee8:	f100 8103 	bmi.w	80040f2 <_printf_float+0x44e>
 8003eec:	68e0      	ldr	r0, [r4, #12]
 8003eee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ef0:	4298      	cmp	r0, r3
 8003ef2:	bfb8      	it	lt
 8003ef4:	4618      	movlt	r0, r3
 8003ef6:	e734      	b.n	8003d62 <_printf_float+0xbe>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	464a      	mov	r2, r9
 8003efc:	4631      	mov	r1, r6
 8003efe:	4628      	mov	r0, r5
 8003f00:	47b8      	blx	r7
 8003f02:	3001      	adds	r0, #1
 8003f04:	f43f af2b 	beq.w	8003d5e <_printf_float+0xba>
 8003f08:	f108 0801 	add.w	r8, r8, #1
 8003f0c:	e7e6      	b.n	8003edc <_printf_float+0x238>
 8003f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	dc2b      	bgt.n	8003f6c <_printf_float+0x2c8>
 8003f14:	2301      	movs	r3, #1
 8003f16:	4a26      	ldr	r2, [pc, #152]	; (8003fb0 <_printf_float+0x30c>)
 8003f18:	4631      	mov	r1, r6
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	47b8      	blx	r7
 8003f1e:	3001      	adds	r0, #1
 8003f20:	f43f af1d 	beq.w	8003d5e <_printf_float+0xba>
 8003f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f26:	b923      	cbnz	r3, 8003f32 <_printf_float+0x28e>
 8003f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f2a:	b913      	cbnz	r3, 8003f32 <_printf_float+0x28e>
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	07d9      	lsls	r1, r3, #31
 8003f30:	d5d8      	bpl.n	8003ee4 <_printf_float+0x240>
 8003f32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f36:	4631      	mov	r1, r6
 8003f38:	4628      	mov	r0, r5
 8003f3a:	47b8      	blx	r7
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	f43f af0e 	beq.w	8003d5e <_printf_float+0xba>
 8003f42:	f04f 0900 	mov.w	r9, #0
 8003f46:	f104 0a1a 	add.w	sl, r4, #26
 8003f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f4c:	425b      	negs	r3, r3
 8003f4e:	454b      	cmp	r3, r9
 8003f50:	dc01      	bgt.n	8003f56 <_printf_float+0x2b2>
 8003f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f54:	e794      	b.n	8003e80 <_printf_float+0x1dc>
 8003f56:	2301      	movs	r3, #1
 8003f58:	4652      	mov	r2, sl
 8003f5a:	4631      	mov	r1, r6
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	47b8      	blx	r7
 8003f60:	3001      	adds	r0, #1
 8003f62:	f43f aefc 	beq.w	8003d5e <_printf_float+0xba>
 8003f66:	f109 0901 	add.w	r9, r9, #1
 8003f6a:	e7ee      	b.n	8003f4a <_printf_float+0x2a6>
 8003f6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f70:	429a      	cmp	r2, r3
 8003f72:	bfa8      	it	ge
 8003f74:	461a      	movge	r2, r3
 8003f76:	2a00      	cmp	r2, #0
 8003f78:	4691      	mov	r9, r2
 8003f7a:	dd07      	ble.n	8003f8c <_printf_float+0x2e8>
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	4631      	mov	r1, r6
 8003f80:	4642      	mov	r2, r8
 8003f82:	4628      	mov	r0, r5
 8003f84:	47b8      	blx	r7
 8003f86:	3001      	adds	r0, #1
 8003f88:	f43f aee9 	beq.w	8003d5e <_printf_float+0xba>
 8003f8c:	f104 031a 	add.w	r3, r4, #26
 8003f90:	f04f 0b00 	mov.w	fp, #0
 8003f94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f98:	9306      	str	r3, [sp, #24]
 8003f9a:	e015      	b.n	8003fc8 <_printf_float+0x324>
 8003f9c:	7fefffff 	.word	0x7fefffff
 8003fa0:	08005fe0 	.word	0x08005fe0
 8003fa4:	08005fdc 	.word	0x08005fdc
 8003fa8:	08005fe8 	.word	0x08005fe8
 8003fac:	08005fe4 	.word	0x08005fe4
 8003fb0:	08005fec 	.word	0x08005fec
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	9a06      	ldr	r2, [sp, #24]
 8003fb8:	4631      	mov	r1, r6
 8003fba:	4628      	mov	r0, r5
 8003fbc:	47b8      	blx	r7
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	f43f aecd 	beq.w	8003d5e <_printf_float+0xba>
 8003fc4:	f10b 0b01 	add.w	fp, fp, #1
 8003fc8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003fcc:	ebaa 0309 	sub.w	r3, sl, r9
 8003fd0:	455b      	cmp	r3, fp
 8003fd2:	dcef      	bgt.n	8003fb4 <_printf_float+0x310>
 8003fd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	44d0      	add	r8, sl
 8003fdc:	db15      	blt.n	800400a <_printf_float+0x366>
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	07da      	lsls	r2, r3, #31
 8003fe2:	d412      	bmi.n	800400a <_printf_float+0x366>
 8003fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fe6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fe8:	eba3 020a 	sub.w	r2, r3, sl
 8003fec:	eba3 0a01 	sub.w	sl, r3, r1
 8003ff0:	4592      	cmp	sl, r2
 8003ff2:	bfa8      	it	ge
 8003ff4:	4692      	movge	sl, r2
 8003ff6:	f1ba 0f00 	cmp.w	sl, #0
 8003ffa:	dc0e      	bgt.n	800401a <_printf_float+0x376>
 8003ffc:	f04f 0800 	mov.w	r8, #0
 8004000:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004004:	f104 091a 	add.w	r9, r4, #26
 8004008:	e019      	b.n	800403e <_printf_float+0x39a>
 800400a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800400e:	4631      	mov	r1, r6
 8004010:	4628      	mov	r0, r5
 8004012:	47b8      	blx	r7
 8004014:	3001      	adds	r0, #1
 8004016:	d1e5      	bne.n	8003fe4 <_printf_float+0x340>
 8004018:	e6a1      	b.n	8003d5e <_printf_float+0xba>
 800401a:	4653      	mov	r3, sl
 800401c:	4642      	mov	r2, r8
 800401e:	4631      	mov	r1, r6
 8004020:	4628      	mov	r0, r5
 8004022:	47b8      	blx	r7
 8004024:	3001      	adds	r0, #1
 8004026:	d1e9      	bne.n	8003ffc <_printf_float+0x358>
 8004028:	e699      	b.n	8003d5e <_printf_float+0xba>
 800402a:	2301      	movs	r3, #1
 800402c:	464a      	mov	r2, r9
 800402e:	4631      	mov	r1, r6
 8004030:	4628      	mov	r0, r5
 8004032:	47b8      	blx	r7
 8004034:	3001      	adds	r0, #1
 8004036:	f43f ae92 	beq.w	8003d5e <_printf_float+0xba>
 800403a:	f108 0801 	add.w	r8, r8, #1
 800403e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	eba3 030a 	sub.w	r3, r3, sl
 8004048:	4543      	cmp	r3, r8
 800404a:	dcee      	bgt.n	800402a <_printf_float+0x386>
 800404c:	e74a      	b.n	8003ee4 <_printf_float+0x240>
 800404e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004050:	2a01      	cmp	r2, #1
 8004052:	dc01      	bgt.n	8004058 <_printf_float+0x3b4>
 8004054:	07db      	lsls	r3, r3, #31
 8004056:	d53a      	bpl.n	80040ce <_printf_float+0x42a>
 8004058:	2301      	movs	r3, #1
 800405a:	4642      	mov	r2, r8
 800405c:	4631      	mov	r1, r6
 800405e:	4628      	mov	r0, r5
 8004060:	47b8      	blx	r7
 8004062:	3001      	adds	r0, #1
 8004064:	f43f ae7b 	beq.w	8003d5e <_printf_float+0xba>
 8004068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800406c:	4631      	mov	r1, r6
 800406e:	4628      	mov	r0, r5
 8004070:	47b8      	blx	r7
 8004072:	3001      	adds	r0, #1
 8004074:	f108 0801 	add.w	r8, r8, #1
 8004078:	f43f ae71 	beq.w	8003d5e <_printf_float+0xba>
 800407c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800407e:	2200      	movs	r2, #0
 8004080:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8004084:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004088:	2300      	movs	r3, #0
 800408a:	f7fc fd3d 	bl	8000b08 <__aeabi_dcmpeq>
 800408e:	b9c8      	cbnz	r0, 80040c4 <_printf_float+0x420>
 8004090:	4653      	mov	r3, sl
 8004092:	4642      	mov	r2, r8
 8004094:	4631      	mov	r1, r6
 8004096:	4628      	mov	r0, r5
 8004098:	47b8      	blx	r7
 800409a:	3001      	adds	r0, #1
 800409c:	d10e      	bne.n	80040bc <_printf_float+0x418>
 800409e:	e65e      	b.n	8003d5e <_printf_float+0xba>
 80040a0:	2301      	movs	r3, #1
 80040a2:	4652      	mov	r2, sl
 80040a4:	4631      	mov	r1, r6
 80040a6:	4628      	mov	r0, r5
 80040a8:	47b8      	blx	r7
 80040aa:	3001      	adds	r0, #1
 80040ac:	f43f ae57 	beq.w	8003d5e <_printf_float+0xba>
 80040b0:	f108 0801 	add.w	r8, r8, #1
 80040b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040b6:	3b01      	subs	r3, #1
 80040b8:	4543      	cmp	r3, r8
 80040ba:	dcf1      	bgt.n	80040a0 <_printf_float+0x3fc>
 80040bc:	464b      	mov	r3, r9
 80040be:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80040c2:	e6de      	b.n	8003e82 <_printf_float+0x1de>
 80040c4:	f04f 0800 	mov.w	r8, #0
 80040c8:	f104 0a1a 	add.w	sl, r4, #26
 80040cc:	e7f2      	b.n	80040b4 <_printf_float+0x410>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e7df      	b.n	8004092 <_printf_float+0x3ee>
 80040d2:	2301      	movs	r3, #1
 80040d4:	464a      	mov	r2, r9
 80040d6:	4631      	mov	r1, r6
 80040d8:	4628      	mov	r0, r5
 80040da:	47b8      	blx	r7
 80040dc:	3001      	adds	r0, #1
 80040de:	f43f ae3e 	beq.w	8003d5e <_printf_float+0xba>
 80040e2:	f108 0801 	add.w	r8, r8, #1
 80040e6:	68e3      	ldr	r3, [r4, #12]
 80040e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	4543      	cmp	r3, r8
 80040ee:	dcf0      	bgt.n	80040d2 <_printf_float+0x42e>
 80040f0:	e6fc      	b.n	8003eec <_printf_float+0x248>
 80040f2:	f04f 0800 	mov.w	r8, #0
 80040f6:	f104 0919 	add.w	r9, r4, #25
 80040fa:	e7f4      	b.n	80040e6 <_printf_float+0x442>
 80040fc:	2900      	cmp	r1, #0
 80040fe:	f43f ae8b 	beq.w	8003e18 <_printf_float+0x174>
 8004102:	2300      	movs	r3, #0
 8004104:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004108:	ab09      	add	r3, sp, #36	; 0x24
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	ec49 8b10 	vmov	d0, r8, r9
 8004110:	6022      	str	r2, [r4, #0]
 8004112:	f8cd a004 	str.w	sl, [sp, #4]
 8004116:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800411a:	4628      	mov	r0, r5
 800411c:	f7ff fd2e 	bl	8003b7c <__cvt>
 8004120:	4680      	mov	r8, r0
 8004122:	e648      	b.n	8003db6 <_printf_float+0x112>

08004124 <_printf_common>:
 8004124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004128:	4691      	mov	r9, r2
 800412a:	461f      	mov	r7, r3
 800412c:	688a      	ldr	r2, [r1, #8]
 800412e:	690b      	ldr	r3, [r1, #16]
 8004130:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004134:	4293      	cmp	r3, r2
 8004136:	bfb8      	it	lt
 8004138:	4613      	movlt	r3, r2
 800413a:	f8c9 3000 	str.w	r3, [r9]
 800413e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004142:	4606      	mov	r6, r0
 8004144:	460c      	mov	r4, r1
 8004146:	b112      	cbz	r2, 800414e <_printf_common+0x2a>
 8004148:	3301      	adds	r3, #1
 800414a:	f8c9 3000 	str.w	r3, [r9]
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	0699      	lsls	r1, r3, #26
 8004152:	bf42      	ittt	mi
 8004154:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004158:	3302      	addmi	r3, #2
 800415a:	f8c9 3000 	strmi.w	r3, [r9]
 800415e:	6825      	ldr	r5, [r4, #0]
 8004160:	f015 0506 	ands.w	r5, r5, #6
 8004164:	d107      	bne.n	8004176 <_printf_common+0x52>
 8004166:	f104 0a19 	add.w	sl, r4, #25
 800416a:	68e3      	ldr	r3, [r4, #12]
 800416c:	f8d9 2000 	ldr.w	r2, [r9]
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	42ab      	cmp	r3, r5
 8004174:	dc28      	bgt.n	80041c8 <_printf_common+0xa4>
 8004176:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800417a:	6822      	ldr	r2, [r4, #0]
 800417c:	3300      	adds	r3, #0
 800417e:	bf18      	it	ne
 8004180:	2301      	movne	r3, #1
 8004182:	0692      	lsls	r2, r2, #26
 8004184:	d42d      	bmi.n	80041e2 <_printf_common+0xbe>
 8004186:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800418a:	4639      	mov	r1, r7
 800418c:	4630      	mov	r0, r6
 800418e:	47c0      	blx	r8
 8004190:	3001      	adds	r0, #1
 8004192:	d020      	beq.n	80041d6 <_printf_common+0xb2>
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	68e5      	ldr	r5, [r4, #12]
 8004198:	f8d9 2000 	ldr.w	r2, [r9]
 800419c:	f003 0306 	and.w	r3, r3, #6
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	bf08      	it	eq
 80041a4:	1aad      	subeq	r5, r5, r2
 80041a6:	68a3      	ldr	r3, [r4, #8]
 80041a8:	6922      	ldr	r2, [r4, #16]
 80041aa:	bf0c      	ite	eq
 80041ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041b0:	2500      	movne	r5, #0
 80041b2:	4293      	cmp	r3, r2
 80041b4:	bfc4      	itt	gt
 80041b6:	1a9b      	subgt	r3, r3, r2
 80041b8:	18ed      	addgt	r5, r5, r3
 80041ba:	f04f 0900 	mov.w	r9, #0
 80041be:	341a      	adds	r4, #26
 80041c0:	454d      	cmp	r5, r9
 80041c2:	d11a      	bne.n	80041fa <_printf_common+0xd6>
 80041c4:	2000      	movs	r0, #0
 80041c6:	e008      	b.n	80041da <_printf_common+0xb6>
 80041c8:	2301      	movs	r3, #1
 80041ca:	4652      	mov	r2, sl
 80041cc:	4639      	mov	r1, r7
 80041ce:	4630      	mov	r0, r6
 80041d0:	47c0      	blx	r8
 80041d2:	3001      	adds	r0, #1
 80041d4:	d103      	bne.n	80041de <_printf_common+0xba>
 80041d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041de:	3501      	adds	r5, #1
 80041e0:	e7c3      	b.n	800416a <_printf_common+0x46>
 80041e2:	18e1      	adds	r1, r4, r3
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	2030      	movs	r0, #48	; 0x30
 80041e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041ec:	4422      	add	r2, r4
 80041ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041f6:	3302      	adds	r3, #2
 80041f8:	e7c5      	b.n	8004186 <_printf_common+0x62>
 80041fa:	2301      	movs	r3, #1
 80041fc:	4622      	mov	r2, r4
 80041fe:	4639      	mov	r1, r7
 8004200:	4630      	mov	r0, r6
 8004202:	47c0      	blx	r8
 8004204:	3001      	adds	r0, #1
 8004206:	d0e6      	beq.n	80041d6 <_printf_common+0xb2>
 8004208:	f109 0901 	add.w	r9, r9, #1
 800420c:	e7d8      	b.n	80041c0 <_printf_common+0x9c>
	...

08004210 <_printf_i>:
 8004210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004214:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004218:	460c      	mov	r4, r1
 800421a:	7e09      	ldrb	r1, [r1, #24]
 800421c:	b085      	sub	sp, #20
 800421e:	296e      	cmp	r1, #110	; 0x6e
 8004220:	4617      	mov	r7, r2
 8004222:	4606      	mov	r6, r0
 8004224:	4698      	mov	r8, r3
 8004226:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004228:	f000 80b3 	beq.w	8004392 <_printf_i+0x182>
 800422c:	d822      	bhi.n	8004274 <_printf_i+0x64>
 800422e:	2963      	cmp	r1, #99	; 0x63
 8004230:	d036      	beq.n	80042a0 <_printf_i+0x90>
 8004232:	d80a      	bhi.n	800424a <_printf_i+0x3a>
 8004234:	2900      	cmp	r1, #0
 8004236:	f000 80b9 	beq.w	80043ac <_printf_i+0x19c>
 800423a:	2958      	cmp	r1, #88	; 0x58
 800423c:	f000 8083 	beq.w	8004346 <_printf_i+0x136>
 8004240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004244:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004248:	e032      	b.n	80042b0 <_printf_i+0xa0>
 800424a:	2964      	cmp	r1, #100	; 0x64
 800424c:	d001      	beq.n	8004252 <_printf_i+0x42>
 800424e:	2969      	cmp	r1, #105	; 0x69
 8004250:	d1f6      	bne.n	8004240 <_printf_i+0x30>
 8004252:	6820      	ldr	r0, [r4, #0]
 8004254:	6813      	ldr	r3, [r2, #0]
 8004256:	0605      	lsls	r5, r0, #24
 8004258:	f103 0104 	add.w	r1, r3, #4
 800425c:	d52a      	bpl.n	80042b4 <_printf_i+0xa4>
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6011      	str	r1, [r2, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	da03      	bge.n	800426e <_printf_i+0x5e>
 8004266:	222d      	movs	r2, #45	; 0x2d
 8004268:	425b      	negs	r3, r3
 800426a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800426e:	486f      	ldr	r0, [pc, #444]	; (800442c <_printf_i+0x21c>)
 8004270:	220a      	movs	r2, #10
 8004272:	e039      	b.n	80042e8 <_printf_i+0xd8>
 8004274:	2973      	cmp	r1, #115	; 0x73
 8004276:	f000 809d 	beq.w	80043b4 <_printf_i+0x1a4>
 800427a:	d808      	bhi.n	800428e <_printf_i+0x7e>
 800427c:	296f      	cmp	r1, #111	; 0x6f
 800427e:	d020      	beq.n	80042c2 <_printf_i+0xb2>
 8004280:	2970      	cmp	r1, #112	; 0x70
 8004282:	d1dd      	bne.n	8004240 <_printf_i+0x30>
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	f043 0320 	orr.w	r3, r3, #32
 800428a:	6023      	str	r3, [r4, #0]
 800428c:	e003      	b.n	8004296 <_printf_i+0x86>
 800428e:	2975      	cmp	r1, #117	; 0x75
 8004290:	d017      	beq.n	80042c2 <_printf_i+0xb2>
 8004292:	2978      	cmp	r1, #120	; 0x78
 8004294:	d1d4      	bne.n	8004240 <_printf_i+0x30>
 8004296:	2378      	movs	r3, #120	; 0x78
 8004298:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800429c:	4864      	ldr	r0, [pc, #400]	; (8004430 <_printf_i+0x220>)
 800429e:	e055      	b.n	800434c <_printf_i+0x13c>
 80042a0:	6813      	ldr	r3, [r2, #0]
 80042a2:	1d19      	adds	r1, r3, #4
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6011      	str	r1, [r2, #0]
 80042a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042b0:	2301      	movs	r3, #1
 80042b2:	e08c      	b.n	80043ce <_printf_i+0x1be>
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6011      	str	r1, [r2, #0]
 80042b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042bc:	bf18      	it	ne
 80042be:	b21b      	sxthne	r3, r3
 80042c0:	e7cf      	b.n	8004262 <_printf_i+0x52>
 80042c2:	6813      	ldr	r3, [r2, #0]
 80042c4:	6825      	ldr	r5, [r4, #0]
 80042c6:	1d18      	adds	r0, r3, #4
 80042c8:	6010      	str	r0, [r2, #0]
 80042ca:	0628      	lsls	r0, r5, #24
 80042cc:	d501      	bpl.n	80042d2 <_printf_i+0xc2>
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	e002      	b.n	80042d8 <_printf_i+0xc8>
 80042d2:	0668      	lsls	r0, r5, #25
 80042d4:	d5fb      	bpl.n	80042ce <_printf_i+0xbe>
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	4854      	ldr	r0, [pc, #336]	; (800442c <_printf_i+0x21c>)
 80042da:	296f      	cmp	r1, #111	; 0x6f
 80042dc:	bf14      	ite	ne
 80042de:	220a      	movne	r2, #10
 80042e0:	2208      	moveq	r2, #8
 80042e2:	2100      	movs	r1, #0
 80042e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042e8:	6865      	ldr	r5, [r4, #4]
 80042ea:	60a5      	str	r5, [r4, #8]
 80042ec:	2d00      	cmp	r5, #0
 80042ee:	f2c0 8095 	blt.w	800441c <_printf_i+0x20c>
 80042f2:	6821      	ldr	r1, [r4, #0]
 80042f4:	f021 0104 	bic.w	r1, r1, #4
 80042f8:	6021      	str	r1, [r4, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d13d      	bne.n	800437a <_printf_i+0x16a>
 80042fe:	2d00      	cmp	r5, #0
 8004300:	f040 808e 	bne.w	8004420 <_printf_i+0x210>
 8004304:	4665      	mov	r5, ip
 8004306:	2a08      	cmp	r2, #8
 8004308:	d10b      	bne.n	8004322 <_printf_i+0x112>
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	07db      	lsls	r3, r3, #31
 800430e:	d508      	bpl.n	8004322 <_printf_i+0x112>
 8004310:	6923      	ldr	r3, [r4, #16]
 8004312:	6862      	ldr	r2, [r4, #4]
 8004314:	429a      	cmp	r2, r3
 8004316:	bfde      	ittt	le
 8004318:	2330      	movle	r3, #48	; 0x30
 800431a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800431e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004322:	ebac 0305 	sub.w	r3, ip, r5
 8004326:	6123      	str	r3, [r4, #16]
 8004328:	f8cd 8000 	str.w	r8, [sp]
 800432c:	463b      	mov	r3, r7
 800432e:	aa03      	add	r2, sp, #12
 8004330:	4621      	mov	r1, r4
 8004332:	4630      	mov	r0, r6
 8004334:	f7ff fef6 	bl	8004124 <_printf_common>
 8004338:	3001      	adds	r0, #1
 800433a:	d14d      	bne.n	80043d8 <_printf_i+0x1c8>
 800433c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004340:	b005      	add	sp, #20
 8004342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004346:	4839      	ldr	r0, [pc, #228]	; (800442c <_printf_i+0x21c>)
 8004348:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800434c:	6813      	ldr	r3, [r2, #0]
 800434e:	6821      	ldr	r1, [r4, #0]
 8004350:	1d1d      	adds	r5, r3, #4
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6015      	str	r5, [r2, #0]
 8004356:	060a      	lsls	r2, r1, #24
 8004358:	d50b      	bpl.n	8004372 <_printf_i+0x162>
 800435a:	07ca      	lsls	r2, r1, #31
 800435c:	bf44      	itt	mi
 800435e:	f041 0120 	orrmi.w	r1, r1, #32
 8004362:	6021      	strmi	r1, [r4, #0]
 8004364:	b91b      	cbnz	r3, 800436e <_printf_i+0x15e>
 8004366:	6822      	ldr	r2, [r4, #0]
 8004368:	f022 0220 	bic.w	r2, r2, #32
 800436c:	6022      	str	r2, [r4, #0]
 800436e:	2210      	movs	r2, #16
 8004370:	e7b7      	b.n	80042e2 <_printf_i+0xd2>
 8004372:	064d      	lsls	r5, r1, #25
 8004374:	bf48      	it	mi
 8004376:	b29b      	uxthmi	r3, r3
 8004378:	e7ef      	b.n	800435a <_printf_i+0x14a>
 800437a:	4665      	mov	r5, ip
 800437c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004380:	fb02 3311 	mls	r3, r2, r1, r3
 8004384:	5cc3      	ldrb	r3, [r0, r3]
 8004386:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800438a:	460b      	mov	r3, r1
 800438c:	2900      	cmp	r1, #0
 800438e:	d1f5      	bne.n	800437c <_printf_i+0x16c>
 8004390:	e7b9      	b.n	8004306 <_printf_i+0xf6>
 8004392:	6813      	ldr	r3, [r2, #0]
 8004394:	6825      	ldr	r5, [r4, #0]
 8004396:	6961      	ldr	r1, [r4, #20]
 8004398:	1d18      	adds	r0, r3, #4
 800439a:	6010      	str	r0, [r2, #0]
 800439c:	0628      	lsls	r0, r5, #24
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	d501      	bpl.n	80043a6 <_printf_i+0x196>
 80043a2:	6019      	str	r1, [r3, #0]
 80043a4:	e002      	b.n	80043ac <_printf_i+0x19c>
 80043a6:	066a      	lsls	r2, r5, #25
 80043a8:	d5fb      	bpl.n	80043a2 <_printf_i+0x192>
 80043aa:	8019      	strh	r1, [r3, #0]
 80043ac:	2300      	movs	r3, #0
 80043ae:	6123      	str	r3, [r4, #16]
 80043b0:	4665      	mov	r5, ip
 80043b2:	e7b9      	b.n	8004328 <_printf_i+0x118>
 80043b4:	6813      	ldr	r3, [r2, #0]
 80043b6:	1d19      	adds	r1, r3, #4
 80043b8:	6011      	str	r1, [r2, #0]
 80043ba:	681d      	ldr	r5, [r3, #0]
 80043bc:	6862      	ldr	r2, [r4, #4]
 80043be:	2100      	movs	r1, #0
 80043c0:	4628      	mov	r0, r5
 80043c2:	f7fb ff2d 	bl	8000220 <memchr>
 80043c6:	b108      	cbz	r0, 80043cc <_printf_i+0x1bc>
 80043c8:	1b40      	subs	r0, r0, r5
 80043ca:	6060      	str	r0, [r4, #4]
 80043cc:	6863      	ldr	r3, [r4, #4]
 80043ce:	6123      	str	r3, [r4, #16]
 80043d0:	2300      	movs	r3, #0
 80043d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043d6:	e7a7      	b.n	8004328 <_printf_i+0x118>
 80043d8:	6923      	ldr	r3, [r4, #16]
 80043da:	462a      	mov	r2, r5
 80043dc:	4639      	mov	r1, r7
 80043de:	4630      	mov	r0, r6
 80043e0:	47c0      	blx	r8
 80043e2:	3001      	adds	r0, #1
 80043e4:	d0aa      	beq.n	800433c <_printf_i+0x12c>
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	079b      	lsls	r3, r3, #30
 80043ea:	d413      	bmi.n	8004414 <_printf_i+0x204>
 80043ec:	68e0      	ldr	r0, [r4, #12]
 80043ee:	9b03      	ldr	r3, [sp, #12]
 80043f0:	4298      	cmp	r0, r3
 80043f2:	bfb8      	it	lt
 80043f4:	4618      	movlt	r0, r3
 80043f6:	e7a3      	b.n	8004340 <_printf_i+0x130>
 80043f8:	2301      	movs	r3, #1
 80043fa:	464a      	mov	r2, r9
 80043fc:	4639      	mov	r1, r7
 80043fe:	4630      	mov	r0, r6
 8004400:	47c0      	blx	r8
 8004402:	3001      	adds	r0, #1
 8004404:	d09a      	beq.n	800433c <_printf_i+0x12c>
 8004406:	3501      	adds	r5, #1
 8004408:	68e3      	ldr	r3, [r4, #12]
 800440a:	9a03      	ldr	r2, [sp, #12]
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	42ab      	cmp	r3, r5
 8004410:	dcf2      	bgt.n	80043f8 <_printf_i+0x1e8>
 8004412:	e7eb      	b.n	80043ec <_printf_i+0x1dc>
 8004414:	2500      	movs	r5, #0
 8004416:	f104 0919 	add.w	r9, r4, #25
 800441a:	e7f5      	b.n	8004408 <_printf_i+0x1f8>
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1ac      	bne.n	800437a <_printf_i+0x16a>
 8004420:	7803      	ldrb	r3, [r0, #0]
 8004422:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004426:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800442a:	e76c      	b.n	8004306 <_printf_i+0xf6>
 800442c:	08005fee 	.word	0x08005fee
 8004430:	08005fff 	.word	0x08005fff

08004434 <siprintf>:
 8004434:	b40e      	push	{r1, r2, r3}
 8004436:	b500      	push	{lr}
 8004438:	b09c      	sub	sp, #112	; 0x70
 800443a:	ab1d      	add	r3, sp, #116	; 0x74
 800443c:	9002      	str	r0, [sp, #8]
 800443e:	9006      	str	r0, [sp, #24]
 8004440:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004444:	4809      	ldr	r0, [pc, #36]	; (800446c <siprintf+0x38>)
 8004446:	9107      	str	r1, [sp, #28]
 8004448:	9104      	str	r1, [sp, #16]
 800444a:	4909      	ldr	r1, [pc, #36]	; (8004470 <siprintf+0x3c>)
 800444c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004450:	9105      	str	r1, [sp, #20]
 8004452:	6800      	ldr	r0, [r0, #0]
 8004454:	9301      	str	r3, [sp, #4]
 8004456:	a902      	add	r1, sp, #8
 8004458:	f001 fa5e 	bl	8005918 <_svfiprintf_r>
 800445c:	9b02      	ldr	r3, [sp, #8]
 800445e:	2200      	movs	r2, #0
 8004460:	701a      	strb	r2, [r3, #0]
 8004462:	b01c      	add	sp, #112	; 0x70
 8004464:	f85d eb04 	ldr.w	lr, [sp], #4
 8004468:	b003      	add	sp, #12
 800446a:	4770      	bx	lr
 800446c:	2000000c 	.word	0x2000000c
 8004470:	ffff0208 	.word	0xffff0208

08004474 <quorem>:
 8004474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004478:	6903      	ldr	r3, [r0, #16]
 800447a:	690c      	ldr	r4, [r1, #16]
 800447c:	42a3      	cmp	r3, r4
 800447e:	4680      	mov	r8, r0
 8004480:	f2c0 8082 	blt.w	8004588 <quorem+0x114>
 8004484:	3c01      	subs	r4, #1
 8004486:	f101 0714 	add.w	r7, r1, #20
 800448a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800448e:	f100 0614 	add.w	r6, r0, #20
 8004492:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004496:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800449a:	eb06 030c 	add.w	r3, r6, ip
 800449e:	3501      	adds	r5, #1
 80044a0:	eb07 090c 	add.w	r9, r7, ip
 80044a4:	9301      	str	r3, [sp, #4]
 80044a6:	fbb0 f5f5 	udiv	r5, r0, r5
 80044aa:	b395      	cbz	r5, 8004512 <quorem+0x9e>
 80044ac:	f04f 0a00 	mov.w	sl, #0
 80044b0:	4638      	mov	r0, r7
 80044b2:	46b6      	mov	lr, r6
 80044b4:	46d3      	mov	fp, sl
 80044b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80044ba:	b293      	uxth	r3, r2
 80044bc:	fb05 a303 	mla	r3, r5, r3, sl
 80044c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	ebab 0303 	sub.w	r3, fp, r3
 80044ca:	0c12      	lsrs	r2, r2, #16
 80044cc:	f8de b000 	ldr.w	fp, [lr]
 80044d0:	fb05 a202 	mla	r2, r5, r2, sl
 80044d4:	fa13 f38b 	uxtah	r3, r3, fp
 80044d8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80044dc:	fa1f fb82 	uxth.w	fp, r2
 80044e0:	f8de 2000 	ldr.w	r2, [lr]
 80044e4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80044e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044f2:	4581      	cmp	r9, r0
 80044f4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80044f8:	f84e 3b04 	str.w	r3, [lr], #4
 80044fc:	d2db      	bcs.n	80044b6 <quorem+0x42>
 80044fe:	f856 300c 	ldr.w	r3, [r6, ip]
 8004502:	b933      	cbnz	r3, 8004512 <quorem+0x9e>
 8004504:	9b01      	ldr	r3, [sp, #4]
 8004506:	3b04      	subs	r3, #4
 8004508:	429e      	cmp	r6, r3
 800450a:	461a      	mov	r2, r3
 800450c:	d330      	bcc.n	8004570 <quorem+0xfc>
 800450e:	f8c8 4010 	str.w	r4, [r8, #16]
 8004512:	4640      	mov	r0, r8
 8004514:	f001 f82a 	bl	800556c <__mcmp>
 8004518:	2800      	cmp	r0, #0
 800451a:	db25      	blt.n	8004568 <quorem+0xf4>
 800451c:	3501      	adds	r5, #1
 800451e:	4630      	mov	r0, r6
 8004520:	f04f 0c00 	mov.w	ip, #0
 8004524:	f857 2b04 	ldr.w	r2, [r7], #4
 8004528:	f8d0 e000 	ldr.w	lr, [r0]
 800452c:	b293      	uxth	r3, r2
 800452e:	ebac 0303 	sub.w	r3, ip, r3
 8004532:	0c12      	lsrs	r2, r2, #16
 8004534:	fa13 f38e 	uxtah	r3, r3, lr
 8004538:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800453c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004540:	b29b      	uxth	r3, r3
 8004542:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004546:	45b9      	cmp	r9, r7
 8004548:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800454c:	f840 3b04 	str.w	r3, [r0], #4
 8004550:	d2e8      	bcs.n	8004524 <quorem+0xb0>
 8004552:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004556:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800455a:	b92a      	cbnz	r2, 8004568 <quorem+0xf4>
 800455c:	3b04      	subs	r3, #4
 800455e:	429e      	cmp	r6, r3
 8004560:	461a      	mov	r2, r3
 8004562:	d30b      	bcc.n	800457c <quorem+0x108>
 8004564:	f8c8 4010 	str.w	r4, [r8, #16]
 8004568:	4628      	mov	r0, r5
 800456a:	b003      	add	sp, #12
 800456c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004570:	6812      	ldr	r2, [r2, #0]
 8004572:	3b04      	subs	r3, #4
 8004574:	2a00      	cmp	r2, #0
 8004576:	d1ca      	bne.n	800450e <quorem+0x9a>
 8004578:	3c01      	subs	r4, #1
 800457a:	e7c5      	b.n	8004508 <quorem+0x94>
 800457c:	6812      	ldr	r2, [r2, #0]
 800457e:	3b04      	subs	r3, #4
 8004580:	2a00      	cmp	r2, #0
 8004582:	d1ef      	bne.n	8004564 <quorem+0xf0>
 8004584:	3c01      	subs	r4, #1
 8004586:	e7ea      	b.n	800455e <quorem+0xea>
 8004588:	2000      	movs	r0, #0
 800458a:	e7ee      	b.n	800456a <quorem+0xf6>
 800458c:	0000      	movs	r0, r0
	...

08004590 <_dtoa_r>:
 8004590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004594:	ec57 6b10 	vmov	r6, r7, d0
 8004598:	b097      	sub	sp, #92	; 0x5c
 800459a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800459c:	9106      	str	r1, [sp, #24]
 800459e:	4604      	mov	r4, r0
 80045a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80045a2:	9312      	str	r3, [sp, #72]	; 0x48
 80045a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80045a8:	e9cd 6700 	strd	r6, r7, [sp]
 80045ac:	b93d      	cbnz	r5, 80045be <_dtoa_r+0x2e>
 80045ae:	2010      	movs	r0, #16
 80045b0:	f000 fdb4 	bl	800511c <malloc>
 80045b4:	6260      	str	r0, [r4, #36]	; 0x24
 80045b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80045ba:	6005      	str	r5, [r0, #0]
 80045bc:	60c5      	str	r5, [r0, #12]
 80045be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045c0:	6819      	ldr	r1, [r3, #0]
 80045c2:	b151      	cbz	r1, 80045da <_dtoa_r+0x4a>
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	604a      	str	r2, [r1, #4]
 80045c8:	2301      	movs	r3, #1
 80045ca:	4093      	lsls	r3, r2
 80045cc:	608b      	str	r3, [r1, #8]
 80045ce:	4620      	mov	r0, r4
 80045d0:	f000 fdeb 	bl	80051aa <_Bfree>
 80045d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	1e3b      	subs	r3, r7, #0
 80045dc:	bfbb      	ittet	lt
 80045de:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80045e2:	9301      	strlt	r3, [sp, #4]
 80045e4:	2300      	movge	r3, #0
 80045e6:	2201      	movlt	r2, #1
 80045e8:	bfac      	ite	ge
 80045ea:	f8c8 3000 	strge.w	r3, [r8]
 80045ee:	f8c8 2000 	strlt.w	r2, [r8]
 80045f2:	4baf      	ldr	r3, [pc, #700]	; (80048b0 <_dtoa_r+0x320>)
 80045f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80045f8:	ea33 0308 	bics.w	r3, r3, r8
 80045fc:	d114      	bne.n	8004628 <_dtoa_r+0x98>
 80045fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004600:	f242 730f 	movw	r3, #9999	; 0x270f
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	9b00      	ldr	r3, [sp, #0]
 8004608:	b923      	cbnz	r3, 8004614 <_dtoa_r+0x84>
 800460a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800460e:	2800      	cmp	r0, #0
 8004610:	f000 8542 	beq.w	8005098 <_dtoa_r+0xb08>
 8004614:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004616:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80048c4 <_dtoa_r+0x334>
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 8544 	beq.w	80050a8 <_dtoa_r+0xb18>
 8004620:	f10b 0303 	add.w	r3, fp, #3
 8004624:	f000 bd3e 	b.w	80050a4 <_dtoa_r+0xb14>
 8004628:	e9dd 6700 	ldrd	r6, r7, [sp]
 800462c:	2200      	movs	r2, #0
 800462e:	2300      	movs	r3, #0
 8004630:	4630      	mov	r0, r6
 8004632:	4639      	mov	r1, r7
 8004634:	f7fc fa68 	bl	8000b08 <__aeabi_dcmpeq>
 8004638:	4681      	mov	r9, r0
 800463a:	b168      	cbz	r0, 8004658 <_dtoa_r+0xc8>
 800463c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800463e:	2301      	movs	r3, #1
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 8524 	beq.w	8005092 <_dtoa_r+0xb02>
 800464a:	4b9a      	ldr	r3, [pc, #616]	; (80048b4 <_dtoa_r+0x324>)
 800464c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800464e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	f000 bd28 	b.w	80050a8 <_dtoa_r+0xb18>
 8004658:	aa14      	add	r2, sp, #80	; 0x50
 800465a:	a915      	add	r1, sp, #84	; 0x54
 800465c:	ec47 6b10 	vmov	d0, r6, r7
 8004660:	4620      	mov	r0, r4
 8004662:	f000 fffa 	bl	800565a <__d2b>
 8004666:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800466a:	9004      	str	r0, [sp, #16]
 800466c:	2d00      	cmp	r5, #0
 800466e:	d07c      	beq.n	800476a <_dtoa_r+0x1da>
 8004670:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004674:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004678:	46b2      	mov	sl, r6
 800467a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800467e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004682:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004686:	2200      	movs	r2, #0
 8004688:	4b8b      	ldr	r3, [pc, #556]	; (80048b8 <_dtoa_r+0x328>)
 800468a:	4650      	mov	r0, sl
 800468c:	4659      	mov	r1, fp
 800468e:	f7fb fe1b 	bl	80002c8 <__aeabi_dsub>
 8004692:	a381      	add	r3, pc, #516	; (adr r3, 8004898 <_dtoa_r+0x308>)
 8004694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004698:	f7fb ffce 	bl	8000638 <__aeabi_dmul>
 800469c:	a380      	add	r3, pc, #512	; (adr r3, 80048a0 <_dtoa_r+0x310>)
 800469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a2:	f7fb fe13 	bl	80002cc <__adddf3>
 80046a6:	4606      	mov	r6, r0
 80046a8:	4628      	mov	r0, r5
 80046aa:	460f      	mov	r7, r1
 80046ac:	f7fb ff5a 	bl	8000564 <__aeabi_i2d>
 80046b0:	a37d      	add	r3, pc, #500	; (adr r3, 80048a8 <_dtoa_r+0x318>)
 80046b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b6:	f7fb ffbf 	bl	8000638 <__aeabi_dmul>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4630      	mov	r0, r6
 80046c0:	4639      	mov	r1, r7
 80046c2:	f7fb fe03 	bl	80002cc <__adddf3>
 80046c6:	4606      	mov	r6, r0
 80046c8:	460f      	mov	r7, r1
 80046ca:	f7fc fa65 	bl	8000b98 <__aeabi_d2iz>
 80046ce:	2200      	movs	r2, #0
 80046d0:	4682      	mov	sl, r0
 80046d2:	2300      	movs	r3, #0
 80046d4:	4630      	mov	r0, r6
 80046d6:	4639      	mov	r1, r7
 80046d8:	f7fc fa20 	bl	8000b1c <__aeabi_dcmplt>
 80046dc:	b148      	cbz	r0, 80046f2 <_dtoa_r+0x162>
 80046de:	4650      	mov	r0, sl
 80046e0:	f7fb ff40 	bl	8000564 <__aeabi_i2d>
 80046e4:	4632      	mov	r2, r6
 80046e6:	463b      	mov	r3, r7
 80046e8:	f7fc fa0e 	bl	8000b08 <__aeabi_dcmpeq>
 80046ec:	b908      	cbnz	r0, 80046f2 <_dtoa_r+0x162>
 80046ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80046f2:	f1ba 0f16 	cmp.w	sl, #22
 80046f6:	d859      	bhi.n	80047ac <_dtoa_r+0x21c>
 80046f8:	4970      	ldr	r1, [pc, #448]	; (80048bc <_dtoa_r+0x32c>)
 80046fa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80046fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004702:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004706:	f7fc fa27 	bl	8000b58 <__aeabi_dcmpgt>
 800470a:	2800      	cmp	r0, #0
 800470c:	d050      	beq.n	80047b0 <_dtoa_r+0x220>
 800470e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004712:	2300      	movs	r3, #0
 8004714:	930f      	str	r3, [sp, #60]	; 0x3c
 8004716:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004718:	1b5d      	subs	r5, r3, r5
 800471a:	f1b5 0801 	subs.w	r8, r5, #1
 800471e:	bf49      	itett	mi
 8004720:	f1c5 0301 	rsbmi	r3, r5, #1
 8004724:	2300      	movpl	r3, #0
 8004726:	9305      	strmi	r3, [sp, #20]
 8004728:	f04f 0800 	movmi.w	r8, #0
 800472c:	bf58      	it	pl
 800472e:	9305      	strpl	r3, [sp, #20]
 8004730:	f1ba 0f00 	cmp.w	sl, #0
 8004734:	db3e      	blt.n	80047b4 <_dtoa_r+0x224>
 8004736:	2300      	movs	r3, #0
 8004738:	44d0      	add	r8, sl
 800473a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800473e:	9307      	str	r3, [sp, #28]
 8004740:	9b06      	ldr	r3, [sp, #24]
 8004742:	2b09      	cmp	r3, #9
 8004744:	f200 8090 	bhi.w	8004868 <_dtoa_r+0x2d8>
 8004748:	2b05      	cmp	r3, #5
 800474a:	bfc4      	itt	gt
 800474c:	3b04      	subgt	r3, #4
 800474e:	9306      	strgt	r3, [sp, #24]
 8004750:	9b06      	ldr	r3, [sp, #24]
 8004752:	f1a3 0302 	sub.w	r3, r3, #2
 8004756:	bfcc      	ite	gt
 8004758:	2500      	movgt	r5, #0
 800475a:	2501      	movle	r5, #1
 800475c:	2b03      	cmp	r3, #3
 800475e:	f200 808f 	bhi.w	8004880 <_dtoa_r+0x2f0>
 8004762:	e8df f003 	tbb	[pc, r3]
 8004766:	7f7d      	.short	0x7f7d
 8004768:	7131      	.short	0x7131
 800476a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800476e:	441d      	add	r5, r3
 8004770:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004774:	2820      	cmp	r0, #32
 8004776:	dd13      	ble.n	80047a0 <_dtoa_r+0x210>
 8004778:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800477c:	9b00      	ldr	r3, [sp, #0]
 800477e:	fa08 f800 	lsl.w	r8, r8, r0
 8004782:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004786:	fa23 f000 	lsr.w	r0, r3, r0
 800478a:	ea48 0000 	orr.w	r0, r8, r0
 800478e:	f7fb fed9 	bl	8000544 <__aeabi_ui2d>
 8004792:	2301      	movs	r3, #1
 8004794:	4682      	mov	sl, r0
 8004796:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800479a:	3d01      	subs	r5, #1
 800479c:	9313      	str	r3, [sp, #76]	; 0x4c
 800479e:	e772      	b.n	8004686 <_dtoa_r+0xf6>
 80047a0:	9b00      	ldr	r3, [sp, #0]
 80047a2:	f1c0 0020 	rsb	r0, r0, #32
 80047a6:	fa03 f000 	lsl.w	r0, r3, r0
 80047aa:	e7f0      	b.n	800478e <_dtoa_r+0x1fe>
 80047ac:	2301      	movs	r3, #1
 80047ae:	e7b1      	b.n	8004714 <_dtoa_r+0x184>
 80047b0:	900f      	str	r0, [sp, #60]	; 0x3c
 80047b2:	e7b0      	b.n	8004716 <_dtoa_r+0x186>
 80047b4:	9b05      	ldr	r3, [sp, #20]
 80047b6:	eba3 030a 	sub.w	r3, r3, sl
 80047ba:	9305      	str	r3, [sp, #20]
 80047bc:	f1ca 0300 	rsb	r3, sl, #0
 80047c0:	9307      	str	r3, [sp, #28]
 80047c2:	2300      	movs	r3, #0
 80047c4:	930e      	str	r3, [sp, #56]	; 0x38
 80047c6:	e7bb      	b.n	8004740 <_dtoa_r+0x1b0>
 80047c8:	2301      	movs	r3, #1
 80047ca:	930a      	str	r3, [sp, #40]	; 0x28
 80047cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	dd59      	ble.n	8004886 <_dtoa_r+0x2f6>
 80047d2:	9302      	str	r3, [sp, #8]
 80047d4:	4699      	mov	r9, r3
 80047d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80047d8:	2200      	movs	r2, #0
 80047da:	6072      	str	r2, [r6, #4]
 80047dc:	2204      	movs	r2, #4
 80047de:	f102 0014 	add.w	r0, r2, #20
 80047e2:	4298      	cmp	r0, r3
 80047e4:	6871      	ldr	r1, [r6, #4]
 80047e6:	d953      	bls.n	8004890 <_dtoa_r+0x300>
 80047e8:	4620      	mov	r0, r4
 80047ea:	f000 fcaa 	bl	8005142 <_Balloc>
 80047ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047f0:	6030      	str	r0, [r6, #0]
 80047f2:	f1b9 0f0e 	cmp.w	r9, #14
 80047f6:	f8d3 b000 	ldr.w	fp, [r3]
 80047fa:	f200 80e6 	bhi.w	80049ca <_dtoa_r+0x43a>
 80047fe:	2d00      	cmp	r5, #0
 8004800:	f000 80e3 	beq.w	80049ca <_dtoa_r+0x43a>
 8004804:	ed9d 7b00 	vldr	d7, [sp]
 8004808:	f1ba 0f00 	cmp.w	sl, #0
 800480c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004810:	dd74      	ble.n	80048fc <_dtoa_r+0x36c>
 8004812:	4a2a      	ldr	r2, [pc, #168]	; (80048bc <_dtoa_r+0x32c>)
 8004814:	f00a 030f 	and.w	r3, sl, #15
 8004818:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800481c:	ed93 7b00 	vldr	d7, [r3]
 8004820:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004824:	06f0      	lsls	r0, r6, #27
 8004826:	ed8d 7b08 	vstr	d7, [sp, #32]
 800482a:	d565      	bpl.n	80048f8 <_dtoa_r+0x368>
 800482c:	4b24      	ldr	r3, [pc, #144]	; (80048c0 <_dtoa_r+0x330>)
 800482e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004832:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004836:	f7fc f829 	bl	800088c <__aeabi_ddiv>
 800483a:	e9cd 0100 	strd	r0, r1, [sp]
 800483e:	f006 060f 	and.w	r6, r6, #15
 8004842:	2503      	movs	r5, #3
 8004844:	4f1e      	ldr	r7, [pc, #120]	; (80048c0 <_dtoa_r+0x330>)
 8004846:	e04c      	b.n	80048e2 <_dtoa_r+0x352>
 8004848:	2301      	movs	r3, #1
 800484a:	930a      	str	r3, [sp, #40]	; 0x28
 800484c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800484e:	4453      	add	r3, sl
 8004850:	f103 0901 	add.w	r9, r3, #1
 8004854:	9302      	str	r3, [sp, #8]
 8004856:	464b      	mov	r3, r9
 8004858:	2b01      	cmp	r3, #1
 800485a:	bfb8      	it	lt
 800485c:	2301      	movlt	r3, #1
 800485e:	e7ba      	b.n	80047d6 <_dtoa_r+0x246>
 8004860:	2300      	movs	r3, #0
 8004862:	e7b2      	b.n	80047ca <_dtoa_r+0x23a>
 8004864:	2300      	movs	r3, #0
 8004866:	e7f0      	b.n	800484a <_dtoa_r+0x2ba>
 8004868:	2501      	movs	r5, #1
 800486a:	2300      	movs	r3, #0
 800486c:	9306      	str	r3, [sp, #24]
 800486e:	950a      	str	r5, [sp, #40]	; 0x28
 8004870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004874:	9302      	str	r3, [sp, #8]
 8004876:	4699      	mov	r9, r3
 8004878:	2200      	movs	r2, #0
 800487a:	2312      	movs	r3, #18
 800487c:	920b      	str	r2, [sp, #44]	; 0x2c
 800487e:	e7aa      	b.n	80047d6 <_dtoa_r+0x246>
 8004880:	2301      	movs	r3, #1
 8004882:	930a      	str	r3, [sp, #40]	; 0x28
 8004884:	e7f4      	b.n	8004870 <_dtoa_r+0x2e0>
 8004886:	2301      	movs	r3, #1
 8004888:	9302      	str	r3, [sp, #8]
 800488a:	4699      	mov	r9, r3
 800488c:	461a      	mov	r2, r3
 800488e:	e7f5      	b.n	800487c <_dtoa_r+0x2ec>
 8004890:	3101      	adds	r1, #1
 8004892:	6071      	str	r1, [r6, #4]
 8004894:	0052      	lsls	r2, r2, #1
 8004896:	e7a2      	b.n	80047de <_dtoa_r+0x24e>
 8004898:	636f4361 	.word	0x636f4361
 800489c:	3fd287a7 	.word	0x3fd287a7
 80048a0:	8b60c8b3 	.word	0x8b60c8b3
 80048a4:	3fc68a28 	.word	0x3fc68a28
 80048a8:	509f79fb 	.word	0x509f79fb
 80048ac:	3fd34413 	.word	0x3fd34413
 80048b0:	7ff00000 	.word	0x7ff00000
 80048b4:	08005fed 	.word	0x08005fed
 80048b8:	3ff80000 	.word	0x3ff80000
 80048bc:	08006048 	.word	0x08006048
 80048c0:	08006020 	.word	0x08006020
 80048c4:	08006019 	.word	0x08006019
 80048c8:	07f1      	lsls	r1, r6, #31
 80048ca:	d508      	bpl.n	80048de <_dtoa_r+0x34e>
 80048cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80048d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048d4:	f7fb feb0 	bl	8000638 <__aeabi_dmul>
 80048d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80048dc:	3501      	adds	r5, #1
 80048de:	1076      	asrs	r6, r6, #1
 80048e0:	3708      	adds	r7, #8
 80048e2:	2e00      	cmp	r6, #0
 80048e4:	d1f0      	bne.n	80048c8 <_dtoa_r+0x338>
 80048e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80048ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048ee:	f7fb ffcd 	bl	800088c <__aeabi_ddiv>
 80048f2:	e9cd 0100 	strd	r0, r1, [sp]
 80048f6:	e01a      	b.n	800492e <_dtoa_r+0x39e>
 80048f8:	2502      	movs	r5, #2
 80048fa:	e7a3      	b.n	8004844 <_dtoa_r+0x2b4>
 80048fc:	f000 80a0 	beq.w	8004a40 <_dtoa_r+0x4b0>
 8004900:	f1ca 0600 	rsb	r6, sl, #0
 8004904:	4b9f      	ldr	r3, [pc, #636]	; (8004b84 <_dtoa_r+0x5f4>)
 8004906:	4fa0      	ldr	r7, [pc, #640]	; (8004b88 <_dtoa_r+0x5f8>)
 8004908:	f006 020f 	and.w	r2, r6, #15
 800490c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004914:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004918:	f7fb fe8e 	bl	8000638 <__aeabi_dmul>
 800491c:	e9cd 0100 	strd	r0, r1, [sp]
 8004920:	1136      	asrs	r6, r6, #4
 8004922:	2300      	movs	r3, #0
 8004924:	2502      	movs	r5, #2
 8004926:	2e00      	cmp	r6, #0
 8004928:	d17f      	bne.n	8004a2a <_dtoa_r+0x49a>
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1e1      	bne.n	80048f2 <_dtoa_r+0x362>
 800492e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 8087 	beq.w	8004a44 <_dtoa_r+0x4b4>
 8004936:	e9dd 6700 	ldrd	r6, r7, [sp]
 800493a:	2200      	movs	r2, #0
 800493c:	4b93      	ldr	r3, [pc, #588]	; (8004b8c <_dtoa_r+0x5fc>)
 800493e:	4630      	mov	r0, r6
 8004940:	4639      	mov	r1, r7
 8004942:	f7fc f8eb 	bl	8000b1c <__aeabi_dcmplt>
 8004946:	2800      	cmp	r0, #0
 8004948:	d07c      	beq.n	8004a44 <_dtoa_r+0x4b4>
 800494a:	f1b9 0f00 	cmp.w	r9, #0
 800494e:	d079      	beq.n	8004a44 <_dtoa_r+0x4b4>
 8004950:	9b02      	ldr	r3, [sp, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	dd35      	ble.n	80049c2 <_dtoa_r+0x432>
 8004956:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800495a:	9308      	str	r3, [sp, #32]
 800495c:	4639      	mov	r1, r7
 800495e:	2200      	movs	r2, #0
 8004960:	4b8b      	ldr	r3, [pc, #556]	; (8004b90 <_dtoa_r+0x600>)
 8004962:	4630      	mov	r0, r6
 8004964:	f7fb fe68 	bl	8000638 <__aeabi_dmul>
 8004968:	e9cd 0100 	strd	r0, r1, [sp]
 800496c:	9f02      	ldr	r7, [sp, #8]
 800496e:	3501      	adds	r5, #1
 8004970:	4628      	mov	r0, r5
 8004972:	f7fb fdf7 	bl	8000564 <__aeabi_i2d>
 8004976:	e9dd 2300 	ldrd	r2, r3, [sp]
 800497a:	f7fb fe5d 	bl	8000638 <__aeabi_dmul>
 800497e:	2200      	movs	r2, #0
 8004980:	4b84      	ldr	r3, [pc, #528]	; (8004b94 <_dtoa_r+0x604>)
 8004982:	f7fb fca3 	bl	80002cc <__adddf3>
 8004986:	4605      	mov	r5, r0
 8004988:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800498c:	2f00      	cmp	r7, #0
 800498e:	d15d      	bne.n	8004a4c <_dtoa_r+0x4bc>
 8004990:	2200      	movs	r2, #0
 8004992:	4b81      	ldr	r3, [pc, #516]	; (8004b98 <_dtoa_r+0x608>)
 8004994:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004998:	f7fb fc96 	bl	80002c8 <__aeabi_dsub>
 800499c:	462a      	mov	r2, r5
 800499e:	4633      	mov	r3, r6
 80049a0:	e9cd 0100 	strd	r0, r1, [sp]
 80049a4:	f7fc f8d8 	bl	8000b58 <__aeabi_dcmpgt>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	f040 8288 	bne.w	8004ebe <_dtoa_r+0x92e>
 80049ae:	462a      	mov	r2, r5
 80049b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80049b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049b8:	f7fc f8b0 	bl	8000b1c <__aeabi_dcmplt>
 80049bc:	2800      	cmp	r0, #0
 80049be:	f040 827c 	bne.w	8004eba <_dtoa_r+0x92a>
 80049c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80049c6:	e9cd 2300 	strd	r2, r3, [sp]
 80049ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f2c0 8150 	blt.w	8004c72 <_dtoa_r+0x6e2>
 80049d2:	f1ba 0f0e 	cmp.w	sl, #14
 80049d6:	f300 814c 	bgt.w	8004c72 <_dtoa_r+0x6e2>
 80049da:	4b6a      	ldr	r3, [pc, #424]	; (8004b84 <_dtoa_r+0x5f4>)
 80049dc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80049e0:	ed93 7b00 	vldr	d7, [r3]
 80049e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80049ec:	f280 80d8 	bge.w	8004ba0 <_dtoa_r+0x610>
 80049f0:	f1b9 0f00 	cmp.w	r9, #0
 80049f4:	f300 80d4 	bgt.w	8004ba0 <_dtoa_r+0x610>
 80049f8:	f040 825e 	bne.w	8004eb8 <_dtoa_r+0x928>
 80049fc:	2200      	movs	r2, #0
 80049fe:	4b66      	ldr	r3, [pc, #408]	; (8004b98 <_dtoa_r+0x608>)
 8004a00:	ec51 0b17 	vmov	r0, r1, d7
 8004a04:	f7fb fe18 	bl	8000638 <__aeabi_dmul>
 8004a08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a0c:	f7fc f89a 	bl	8000b44 <__aeabi_dcmpge>
 8004a10:	464f      	mov	r7, r9
 8004a12:	464e      	mov	r6, r9
 8004a14:	2800      	cmp	r0, #0
 8004a16:	f040 8234 	bne.w	8004e82 <_dtoa_r+0x8f2>
 8004a1a:	2331      	movs	r3, #49	; 0x31
 8004a1c:	f10b 0501 	add.w	r5, fp, #1
 8004a20:	f88b 3000 	strb.w	r3, [fp]
 8004a24:	f10a 0a01 	add.w	sl, sl, #1
 8004a28:	e22f      	b.n	8004e8a <_dtoa_r+0x8fa>
 8004a2a:	07f2      	lsls	r2, r6, #31
 8004a2c:	d505      	bpl.n	8004a3a <_dtoa_r+0x4aa>
 8004a2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a32:	f7fb fe01 	bl	8000638 <__aeabi_dmul>
 8004a36:	3501      	adds	r5, #1
 8004a38:	2301      	movs	r3, #1
 8004a3a:	1076      	asrs	r6, r6, #1
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	e772      	b.n	8004926 <_dtoa_r+0x396>
 8004a40:	2502      	movs	r5, #2
 8004a42:	e774      	b.n	800492e <_dtoa_r+0x39e>
 8004a44:	f8cd a020 	str.w	sl, [sp, #32]
 8004a48:	464f      	mov	r7, r9
 8004a4a:	e791      	b.n	8004970 <_dtoa_r+0x3e0>
 8004a4c:	4b4d      	ldr	r3, [pc, #308]	; (8004b84 <_dtoa_r+0x5f4>)
 8004a4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004a52:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d047      	beq.n	8004aec <_dtoa_r+0x55c>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	2000      	movs	r0, #0
 8004a62:	494e      	ldr	r1, [pc, #312]	; (8004b9c <_dtoa_r+0x60c>)
 8004a64:	f7fb ff12 	bl	800088c <__aeabi_ddiv>
 8004a68:	462a      	mov	r2, r5
 8004a6a:	4633      	mov	r3, r6
 8004a6c:	f7fb fc2c 	bl	80002c8 <__aeabi_dsub>
 8004a70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004a74:	465d      	mov	r5, fp
 8004a76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a7a:	f7fc f88d 	bl	8000b98 <__aeabi_d2iz>
 8004a7e:	4606      	mov	r6, r0
 8004a80:	f7fb fd70 	bl	8000564 <__aeabi_i2d>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a8c:	f7fb fc1c 	bl	80002c8 <__aeabi_dsub>
 8004a90:	3630      	adds	r6, #48	; 0x30
 8004a92:	f805 6b01 	strb.w	r6, [r5], #1
 8004a96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004a9a:	e9cd 0100 	strd	r0, r1, [sp]
 8004a9e:	f7fc f83d 	bl	8000b1c <__aeabi_dcmplt>
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	d163      	bne.n	8004b6e <_dtoa_r+0x5de>
 8004aa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004aaa:	2000      	movs	r0, #0
 8004aac:	4937      	ldr	r1, [pc, #220]	; (8004b8c <_dtoa_r+0x5fc>)
 8004aae:	f7fb fc0b 	bl	80002c8 <__aeabi_dsub>
 8004ab2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004ab6:	f7fc f831 	bl	8000b1c <__aeabi_dcmplt>
 8004aba:	2800      	cmp	r0, #0
 8004abc:	f040 80b7 	bne.w	8004c2e <_dtoa_r+0x69e>
 8004ac0:	eba5 030b 	sub.w	r3, r5, fp
 8004ac4:	429f      	cmp	r7, r3
 8004ac6:	f77f af7c 	ble.w	80049c2 <_dtoa_r+0x432>
 8004aca:	2200      	movs	r2, #0
 8004acc:	4b30      	ldr	r3, [pc, #192]	; (8004b90 <_dtoa_r+0x600>)
 8004ace:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ad2:	f7fb fdb1 	bl	8000638 <__aeabi_dmul>
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004adc:	4b2c      	ldr	r3, [pc, #176]	; (8004b90 <_dtoa_r+0x600>)
 8004ade:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ae2:	f7fb fda9 	bl	8000638 <__aeabi_dmul>
 8004ae6:	e9cd 0100 	strd	r0, r1, [sp]
 8004aea:	e7c4      	b.n	8004a76 <_dtoa_r+0x4e6>
 8004aec:	462a      	mov	r2, r5
 8004aee:	4633      	mov	r3, r6
 8004af0:	f7fb fda2 	bl	8000638 <__aeabi_dmul>
 8004af4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004af8:	eb0b 0507 	add.w	r5, fp, r7
 8004afc:	465e      	mov	r6, fp
 8004afe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b02:	f7fc f849 	bl	8000b98 <__aeabi_d2iz>
 8004b06:	4607      	mov	r7, r0
 8004b08:	f7fb fd2c 	bl	8000564 <__aeabi_i2d>
 8004b0c:	3730      	adds	r7, #48	; 0x30
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b16:	f7fb fbd7 	bl	80002c8 <__aeabi_dsub>
 8004b1a:	f806 7b01 	strb.w	r7, [r6], #1
 8004b1e:	42ae      	cmp	r6, r5
 8004b20:	e9cd 0100 	strd	r0, r1, [sp]
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	d126      	bne.n	8004b78 <_dtoa_r+0x5e8>
 8004b2a:	4b1c      	ldr	r3, [pc, #112]	; (8004b9c <_dtoa_r+0x60c>)
 8004b2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b30:	f7fb fbcc 	bl	80002cc <__adddf3>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b3c:	f7fc f80c 	bl	8000b58 <__aeabi_dcmpgt>
 8004b40:	2800      	cmp	r0, #0
 8004b42:	d174      	bne.n	8004c2e <_dtoa_r+0x69e>
 8004b44:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004b48:	2000      	movs	r0, #0
 8004b4a:	4914      	ldr	r1, [pc, #80]	; (8004b9c <_dtoa_r+0x60c>)
 8004b4c:	f7fb fbbc 	bl	80002c8 <__aeabi_dsub>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b58:	f7fb ffe0 	bl	8000b1c <__aeabi_dcmplt>
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	f43f af30 	beq.w	80049c2 <_dtoa_r+0x432>
 8004b62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004b66:	2b30      	cmp	r3, #48	; 0x30
 8004b68:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8004b6c:	d002      	beq.n	8004b74 <_dtoa_r+0x5e4>
 8004b6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004b72:	e04a      	b.n	8004c0a <_dtoa_r+0x67a>
 8004b74:	4615      	mov	r5, r2
 8004b76:	e7f4      	b.n	8004b62 <_dtoa_r+0x5d2>
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <_dtoa_r+0x600>)
 8004b7a:	f7fb fd5d 	bl	8000638 <__aeabi_dmul>
 8004b7e:	e9cd 0100 	strd	r0, r1, [sp]
 8004b82:	e7bc      	b.n	8004afe <_dtoa_r+0x56e>
 8004b84:	08006048 	.word	0x08006048
 8004b88:	08006020 	.word	0x08006020
 8004b8c:	3ff00000 	.word	0x3ff00000
 8004b90:	40240000 	.word	0x40240000
 8004b94:	401c0000 	.word	0x401c0000
 8004b98:	40140000 	.word	0x40140000
 8004b9c:	3fe00000 	.word	0x3fe00000
 8004ba0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004ba4:	465d      	mov	r5, fp
 8004ba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004baa:	4630      	mov	r0, r6
 8004bac:	4639      	mov	r1, r7
 8004bae:	f7fb fe6d 	bl	800088c <__aeabi_ddiv>
 8004bb2:	f7fb fff1 	bl	8000b98 <__aeabi_d2iz>
 8004bb6:	4680      	mov	r8, r0
 8004bb8:	f7fb fcd4 	bl	8000564 <__aeabi_i2d>
 8004bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bc0:	f7fb fd3a 	bl	8000638 <__aeabi_dmul>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4630      	mov	r0, r6
 8004bca:	4639      	mov	r1, r7
 8004bcc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004bd0:	f7fb fb7a 	bl	80002c8 <__aeabi_dsub>
 8004bd4:	f805 6b01 	strb.w	r6, [r5], #1
 8004bd8:	eba5 060b 	sub.w	r6, r5, fp
 8004bdc:	45b1      	cmp	r9, r6
 8004bde:	4602      	mov	r2, r0
 8004be0:	460b      	mov	r3, r1
 8004be2:	d139      	bne.n	8004c58 <_dtoa_r+0x6c8>
 8004be4:	f7fb fb72 	bl	80002cc <__adddf3>
 8004be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bec:	4606      	mov	r6, r0
 8004bee:	460f      	mov	r7, r1
 8004bf0:	f7fb ffb2 	bl	8000b58 <__aeabi_dcmpgt>
 8004bf4:	b9c8      	cbnz	r0, 8004c2a <_dtoa_r+0x69a>
 8004bf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	4639      	mov	r1, r7
 8004bfe:	f7fb ff83 	bl	8000b08 <__aeabi_dcmpeq>
 8004c02:	b110      	cbz	r0, 8004c0a <_dtoa_r+0x67a>
 8004c04:	f018 0f01 	tst.w	r8, #1
 8004c08:	d10f      	bne.n	8004c2a <_dtoa_r+0x69a>
 8004c0a:	9904      	ldr	r1, [sp, #16]
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	f000 facc 	bl	80051aa <_Bfree>
 8004c12:	2300      	movs	r3, #0
 8004c14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004c16:	702b      	strb	r3, [r5, #0]
 8004c18:	f10a 0301 	add.w	r3, sl, #1
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 8241 	beq.w	80050a8 <_dtoa_r+0xb18>
 8004c26:	601d      	str	r5, [r3, #0]
 8004c28:	e23e      	b.n	80050a8 <_dtoa_r+0xb18>
 8004c2a:	f8cd a020 	str.w	sl, [sp, #32]
 8004c2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004c32:	2a39      	cmp	r2, #57	; 0x39
 8004c34:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8004c38:	d108      	bne.n	8004c4c <_dtoa_r+0x6bc>
 8004c3a:	459b      	cmp	fp, r3
 8004c3c:	d10a      	bne.n	8004c54 <_dtoa_r+0x6c4>
 8004c3e:	9b08      	ldr	r3, [sp, #32]
 8004c40:	3301      	adds	r3, #1
 8004c42:	9308      	str	r3, [sp, #32]
 8004c44:	2330      	movs	r3, #48	; 0x30
 8004c46:	f88b 3000 	strb.w	r3, [fp]
 8004c4a:	465b      	mov	r3, fp
 8004c4c:	781a      	ldrb	r2, [r3, #0]
 8004c4e:	3201      	adds	r2, #1
 8004c50:	701a      	strb	r2, [r3, #0]
 8004c52:	e78c      	b.n	8004b6e <_dtoa_r+0x5de>
 8004c54:	461d      	mov	r5, r3
 8004c56:	e7ea      	b.n	8004c2e <_dtoa_r+0x69e>
 8004c58:	2200      	movs	r2, #0
 8004c5a:	4b9b      	ldr	r3, [pc, #620]	; (8004ec8 <_dtoa_r+0x938>)
 8004c5c:	f7fb fcec 	bl	8000638 <__aeabi_dmul>
 8004c60:	2200      	movs	r2, #0
 8004c62:	2300      	movs	r3, #0
 8004c64:	4606      	mov	r6, r0
 8004c66:	460f      	mov	r7, r1
 8004c68:	f7fb ff4e 	bl	8000b08 <__aeabi_dcmpeq>
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	d09a      	beq.n	8004ba6 <_dtoa_r+0x616>
 8004c70:	e7cb      	b.n	8004c0a <_dtoa_r+0x67a>
 8004c72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c74:	2a00      	cmp	r2, #0
 8004c76:	f000 808b 	beq.w	8004d90 <_dtoa_r+0x800>
 8004c7a:	9a06      	ldr	r2, [sp, #24]
 8004c7c:	2a01      	cmp	r2, #1
 8004c7e:	dc6e      	bgt.n	8004d5e <_dtoa_r+0x7ce>
 8004c80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004c82:	2a00      	cmp	r2, #0
 8004c84:	d067      	beq.n	8004d56 <_dtoa_r+0x7c6>
 8004c86:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004c8a:	9f07      	ldr	r7, [sp, #28]
 8004c8c:	9d05      	ldr	r5, [sp, #20]
 8004c8e:	9a05      	ldr	r2, [sp, #20]
 8004c90:	2101      	movs	r1, #1
 8004c92:	441a      	add	r2, r3
 8004c94:	4620      	mov	r0, r4
 8004c96:	9205      	str	r2, [sp, #20]
 8004c98:	4498      	add	r8, r3
 8004c9a:	f000 fb26 	bl	80052ea <__i2b>
 8004c9e:	4606      	mov	r6, r0
 8004ca0:	2d00      	cmp	r5, #0
 8004ca2:	dd0c      	ble.n	8004cbe <_dtoa_r+0x72e>
 8004ca4:	f1b8 0f00 	cmp.w	r8, #0
 8004ca8:	dd09      	ble.n	8004cbe <_dtoa_r+0x72e>
 8004caa:	4545      	cmp	r5, r8
 8004cac:	9a05      	ldr	r2, [sp, #20]
 8004cae:	462b      	mov	r3, r5
 8004cb0:	bfa8      	it	ge
 8004cb2:	4643      	movge	r3, r8
 8004cb4:	1ad2      	subs	r2, r2, r3
 8004cb6:	9205      	str	r2, [sp, #20]
 8004cb8:	1aed      	subs	r5, r5, r3
 8004cba:	eba8 0803 	sub.w	r8, r8, r3
 8004cbe:	9b07      	ldr	r3, [sp, #28]
 8004cc0:	b1eb      	cbz	r3, 8004cfe <_dtoa_r+0x76e>
 8004cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d067      	beq.n	8004d98 <_dtoa_r+0x808>
 8004cc8:	b18f      	cbz	r7, 8004cee <_dtoa_r+0x75e>
 8004cca:	4631      	mov	r1, r6
 8004ccc:	463a      	mov	r2, r7
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f000 fbaa 	bl	8005428 <__pow5mult>
 8004cd4:	9a04      	ldr	r2, [sp, #16]
 8004cd6:	4601      	mov	r1, r0
 8004cd8:	4606      	mov	r6, r0
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f000 fb0e 	bl	80052fc <__multiply>
 8004ce0:	9904      	ldr	r1, [sp, #16]
 8004ce2:	9008      	str	r0, [sp, #32]
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	f000 fa60 	bl	80051aa <_Bfree>
 8004cea:	9b08      	ldr	r3, [sp, #32]
 8004cec:	9304      	str	r3, [sp, #16]
 8004cee:	9b07      	ldr	r3, [sp, #28]
 8004cf0:	1bda      	subs	r2, r3, r7
 8004cf2:	d004      	beq.n	8004cfe <_dtoa_r+0x76e>
 8004cf4:	9904      	ldr	r1, [sp, #16]
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f000 fb96 	bl	8005428 <__pow5mult>
 8004cfc:	9004      	str	r0, [sp, #16]
 8004cfe:	2101      	movs	r1, #1
 8004d00:	4620      	mov	r0, r4
 8004d02:	f000 faf2 	bl	80052ea <__i2b>
 8004d06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d08:	4607      	mov	r7, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 81d0 	beq.w	80050b0 <_dtoa_r+0xb20>
 8004d10:	461a      	mov	r2, r3
 8004d12:	4601      	mov	r1, r0
 8004d14:	4620      	mov	r0, r4
 8004d16:	f000 fb87 	bl	8005428 <__pow5mult>
 8004d1a:	9b06      	ldr	r3, [sp, #24]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	4607      	mov	r7, r0
 8004d20:	dc40      	bgt.n	8004da4 <_dtoa_r+0x814>
 8004d22:	9b00      	ldr	r3, [sp, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d139      	bne.n	8004d9c <_dtoa_r+0x80c>
 8004d28:	9b01      	ldr	r3, [sp, #4]
 8004d2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d136      	bne.n	8004da0 <_dtoa_r+0x810>
 8004d32:	9b01      	ldr	r3, [sp, #4]
 8004d34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d38:	0d1b      	lsrs	r3, r3, #20
 8004d3a:	051b      	lsls	r3, r3, #20
 8004d3c:	b12b      	cbz	r3, 8004d4a <_dtoa_r+0x7ba>
 8004d3e:	9b05      	ldr	r3, [sp, #20]
 8004d40:	3301      	adds	r3, #1
 8004d42:	9305      	str	r3, [sp, #20]
 8004d44:	f108 0801 	add.w	r8, r8, #1
 8004d48:	2301      	movs	r3, #1
 8004d4a:	9307      	str	r3, [sp, #28]
 8004d4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d12a      	bne.n	8004da8 <_dtoa_r+0x818>
 8004d52:	2001      	movs	r0, #1
 8004d54:	e030      	b.n	8004db8 <_dtoa_r+0x828>
 8004d56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d58:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004d5c:	e795      	b.n	8004c8a <_dtoa_r+0x6fa>
 8004d5e:	9b07      	ldr	r3, [sp, #28]
 8004d60:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8004d64:	42bb      	cmp	r3, r7
 8004d66:	bfbf      	itttt	lt
 8004d68:	9b07      	ldrlt	r3, [sp, #28]
 8004d6a:	9707      	strlt	r7, [sp, #28]
 8004d6c:	1afa      	sublt	r2, r7, r3
 8004d6e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004d70:	bfbb      	ittet	lt
 8004d72:	189b      	addlt	r3, r3, r2
 8004d74:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004d76:	1bdf      	subge	r7, r3, r7
 8004d78:	2700      	movlt	r7, #0
 8004d7a:	f1b9 0f00 	cmp.w	r9, #0
 8004d7e:	bfb5      	itete	lt
 8004d80:	9b05      	ldrlt	r3, [sp, #20]
 8004d82:	9d05      	ldrge	r5, [sp, #20]
 8004d84:	eba3 0509 	sublt.w	r5, r3, r9
 8004d88:	464b      	movge	r3, r9
 8004d8a:	bfb8      	it	lt
 8004d8c:	2300      	movlt	r3, #0
 8004d8e:	e77e      	b.n	8004c8e <_dtoa_r+0x6fe>
 8004d90:	9f07      	ldr	r7, [sp, #28]
 8004d92:	9d05      	ldr	r5, [sp, #20]
 8004d94:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004d96:	e783      	b.n	8004ca0 <_dtoa_r+0x710>
 8004d98:	9a07      	ldr	r2, [sp, #28]
 8004d9a:	e7ab      	b.n	8004cf4 <_dtoa_r+0x764>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	e7d4      	b.n	8004d4a <_dtoa_r+0x7ba>
 8004da0:	9b00      	ldr	r3, [sp, #0]
 8004da2:	e7d2      	b.n	8004d4a <_dtoa_r+0x7ba>
 8004da4:	2300      	movs	r3, #0
 8004da6:	9307      	str	r3, [sp, #28]
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004dae:	6918      	ldr	r0, [r3, #16]
 8004db0:	f000 fa4d 	bl	800524e <__hi0bits>
 8004db4:	f1c0 0020 	rsb	r0, r0, #32
 8004db8:	4440      	add	r0, r8
 8004dba:	f010 001f 	ands.w	r0, r0, #31
 8004dbe:	d047      	beq.n	8004e50 <_dtoa_r+0x8c0>
 8004dc0:	f1c0 0320 	rsb	r3, r0, #32
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	dd3b      	ble.n	8004e40 <_dtoa_r+0x8b0>
 8004dc8:	9b05      	ldr	r3, [sp, #20]
 8004dca:	f1c0 001c 	rsb	r0, r0, #28
 8004dce:	4403      	add	r3, r0
 8004dd0:	9305      	str	r3, [sp, #20]
 8004dd2:	4405      	add	r5, r0
 8004dd4:	4480      	add	r8, r0
 8004dd6:	9b05      	ldr	r3, [sp, #20]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	dd05      	ble.n	8004de8 <_dtoa_r+0x858>
 8004ddc:	461a      	mov	r2, r3
 8004dde:	9904      	ldr	r1, [sp, #16]
 8004de0:	4620      	mov	r0, r4
 8004de2:	f000 fb6f 	bl	80054c4 <__lshift>
 8004de6:	9004      	str	r0, [sp, #16]
 8004de8:	f1b8 0f00 	cmp.w	r8, #0
 8004dec:	dd05      	ble.n	8004dfa <_dtoa_r+0x86a>
 8004dee:	4639      	mov	r1, r7
 8004df0:	4642      	mov	r2, r8
 8004df2:	4620      	mov	r0, r4
 8004df4:	f000 fb66 	bl	80054c4 <__lshift>
 8004df8:	4607      	mov	r7, r0
 8004dfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dfc:	b353      	cbz	r3, 8004e54 <_dtoa_r+0x8c4>
 8004dfe:	4639      	mov	r1, r7
 8004e00:	9804      	ldr	r0, [sp, #16]
 8004e02:	f000 fbb3 	bl	800556c <__mcmp>
 8004e06:	2800      	cmp	r0, #0
 8004e08:	da24      	bge.n	8004e54 <_dtoa_r+0x8c4>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	220a      	movs	r2, #10
 8004e0e:	9904      	ldr	r1, [sp, #16]
 8004e10:	4620      	mov	r0, r4
 8004e12:	f000 f9e1 	bl	80051d8 <__multadd>
 8004e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e18:	9004      	str	r0, [sp, #16]
 8004e1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 814d 	beq.w	80050be <_dtoa_r+0xb2e>
 8004e24:	2300      	movs	r3, #0
 8004e26:	4631      	mov	r1, r6
 8004e28:	220a      	movs	r2, #10
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	f000 f9d4 	bl	80051d8 <__multadd>
 8004e30:	9b02      	ldr	r3, [sp, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	4606      	mov	r6, r0
 8004e36:	dc4f      	bgt.n	8004ed8 <_dtoa_r+0x948>
 8004e38:	9b06      	ldr	r3, [sp, #24]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	dd4c      	ble.n	8004ed8 <_dtoa_r+0x948>
 8004e3e:	e011      	b.n	8004e64 <_dtoa_r+0x8d4>
 8004e40:	d0c9      	beq.n	8004dd6 <_dtoa_r+0x846>
 8004e42:	9a05      	ldr	r2, [sp, #20]
 8004e44:	331c      	adds	r3, #28
 8004e46:	441a      	add	r2, r3
 8004e48:	9205      	str	r2, [sp, #20]
 8004e4a:	441d      	add	r5, r3
 8004e4c:	4498      	add	r8, r3
 8004e4e:	e7c2      	b.n	8004dd6 <_dtoa_r+0x846>
 8004e50:	4603      	mov	r3, r0
 8004e52:	e7f6      	b.n	8004e42 <_dtoa_r+0x8b2>
 8004e54:	f1b9 0f00 	cmp.w	r9, #0
 8004e58:	dc38      	bgt.n	8004ecc <_dtoa_r+0x93c>
 8004e5a:	9b06      	ldr	r3, [sp, #24]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	dd35      	ble.n	8004ecc <_dtoa_r+0x93c>
 8004e60:	f8cd 9008 	str.w	r9, [sp, #8]
 8004e64:	9b02      	ldr	r3, [sp, #8]
 8004e66:	b963      	cbnz	r3, 8004e82 <_dtoa_r+0x8f2>
 8004e68:	4639      	mov	r1, r7
 8004e6a:	2205      	movs	r2, #5
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	f000 f9b3 	bl	80051d8 <__multadd>
 8004e72:	4601      	mov	r1, r0
 8004e74:	4607      	mov	r7, r0
 8004e76:	9804      	ldr	r0, [sp, #16]
 8004e78:	f000 fb78 	bl	800556c <__mcmp>
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	f73f adcc 	bgt.w	8004a1a <_dtoa_r+0x48a>
 8004e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e84:	465d      	mov	r5, fp
 8004e86:	ea6f 0a03 	mvn.w	sl, r3
 8004e8a:	f04f 0900 	mov.w	r9, #0
 8004e8e:	4639      	mov	r1, r7
 8004e90:	4620      	mov	r0, r4
 8004e92:	f000 f98a 	bl	80051aa <_Bfree>
 8004e96:	2e00      	cmp	r6, #0
 8004e98:	f43f aeb7 	beq.w	8004c0a <_dtoa_r+0x67a>
 8004e9c:	f1b9 0f00 	cmp.w	r9, #0
 8004ea0:	d005      	beq.n	8004eae <_dtoa_r+0x91e>
 8004ea2:	45b1      	cmp	r9, r6
 8004ea4:	d003      	beq.n	8004eae <_dtoa_r+0x91e>
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	f000 f97e 	bl	80051aa <_Bfree>
 8004eae:	4631      	mov	r1, r6
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f000 f97a 	bl	80051aa <_Bfree>
 8004eb6:	e6a8      	b.n	8004c0a <_dtoa_r+0x67a>
 8004eb8:	2700      	movs	r7, #0
 8004eba:	463e      	mov	r6, r7
 8004ebc:	e7e1      	b.n	8004e82 <_dtoa_r+0x8f2>
 8004ebe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004ec2:	463e      	mov	r6, r7
 8004ec4:	e5a9      	b.n	8004a1a <_dtoa_r+0x48a>
 8004ec6:	bf00      	nop
 8004ec8:	40240000 	.word	0x40240000
 8004ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ece:	f8cd 9008 	str.w	r9, [sp, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 80fa 	beq.w	80050cc <_dtoa_r+0xb3c>
 8004ed8:	2d00      	cmp	r5, #0
 8004eda:	dd05      	ble.n	8004ee8 <_dtoa_r+0x958>
 8004edc:	4631      	mov	r1, r6
 8004ede:	462a      	mov	r2, r5
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f000 faef 	bl	80054c4 <__lshift>
 8004ee6:	4606      	mov	r6, r0
 8004ee8:	9b07      	ldr	r3, [sp, #28]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d04c      	beq.n	8004f88 <_dtoa_r+0x9f8>
 8004eee:	6871      	ldr	r1, [r6, #4]
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	f000 f926 	bl	8005142 <_Balloc>
 8004ef6:	6932      	ldr	r2, [r6, #16]
 8004ef8:	3202      	adds	r2, #2
 8004efa:	4605      	mov	r5, r0
 8004efc:	0092      	lsls	r2, r2, #2
 8004efe:	f106 010c 	add.w	r1, r6, #12
 8004f02:	300c      	adds	r0, #12
 8004f04:	f000 f912 	bl	800512c <memcpy>
 8004f08:	2201      	movs	r2, #1
 8004f0a:	4629      	mov	r1, r5
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f000 fad9 	bl	80054c4 <__lshift>
 8004f12:	9b00      	ldr	r3, [sp, #0]
 8004f14:	f8cd b014 	str.w	fp, [sp, #20]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	46b1      	mov	r9, r6
 8004f1e:	9307      	str	r3, [sp, #28]
 8004f20:	4606      	mov	r6, r0
 8004f22:	4639      	mov	r1, r7
 8004f24:	9804      	ldr	r0, [sp, #16]
 8004f26:	f7ff faa5 	bl	8004474 <quorem>
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	4605      	mov	r5, r0
 8004f2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004f32:	9804      	ldr	r0, [sp, #16]
 8004f34:	f000 fb1a 	bl	800556c <__mcmp>
 8004f38:	4632      	mov	r2, r6
 8004f3a:	9000      	str	r0, [sp, #0]
 8004f3c:	4639      	mov	r1, r7
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f000 fb2e 	bl	80055a0 <__mdiff>
 8004f44:	68c3      	ldr	r3, [r0, #12]
 8004f46:	4602      	mov	r2, r0
 8004f48:	bb03      	cbnz	r3, 8004f8c <_dtoa_r+0x9fc>
 8004f4a:	4601      	mov	r1, r0
 8004f4c:	9008      	str	r0, [sp, #32]
 8004f4e:	9804      	ldr	r0, [sp, #16]
 8004f50:	f000 fb0c 	bl	800556c <__mcmp>
 8004f54:	9a08      	ldr	r2, [sp, #32]
 8004f56:	4603      	mov	r3, r0
 8004f58:	4611      	mov	r1, r2
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	9308      	str	r3, [sp, #32]
 8004f5e:	f000 f924 	bl	80051aa <_Bfree>
 8004f62:	9b08      	ldr	r3, [sp, #32]
 8004f64:	b9a3      	cbnz	r3, 8004f90 <_dtoa_r+0xa00>
 8004f66:	9a06      	ldr	r2, [sp, #24]
 8004f68:	b992      	cbnz	r2, 8004f90 <_dtoa_r+0xa00>
 8004f6a:	9a07      	ldr	r2, [sp, #28]
 8004f6c:	b982      	cbnz	r2, 8004f90 <_dtoa_r+0xa00>
 8004f6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004f72:	d029      	beq.n	8004fc8 <_dtoa_r+0xa38>
 8004f74:	9b00      	ldr	r3, [sp, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	dd01      	ble.n	8004f7e <_dtoa_r+0x9ee>
 8004f7a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004f7e:	9b05      	ldr	r3, [sp, #20]
 8004f80:	1c5d      	adds	r5, r3, #1
 8004f82:	f883 8000 	strb.w	r8, [r3]
 8004f86:	e782      	b.n	8004e8e <_dtoa_r+0x8fe>
 8004f88:	4630      	mov	r0, r6
 8004f8a:	e7c2      	b.n	8004f12 <_dtoa_r+0x982>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e7e3      	b.n	8004f58 <_dtoa_r+0x9c8>
 8004f90:	9a00      	ldr	r2, [sp, #0]
 8004f92:	2a00      	cmp	r2, #0
 8004f94:	db04      	blt.n	8004fa0 <_dtoa_r+0xa10>
 8004f96:	d125      	bne.n	8004fe4 <_dtoa_r+0xa54>
 8004f98:	9a06      	ldr	r2, [sp, #24]
 8004f9a:	bb1a      	cbnz	r2, 8004fe4 <_dtoa_r+0xa54>
 8004f9c:	9a07      	ldr	r2, [sp, #28]
 8004f9e:	bb0a      	cbnz	r2, 8004fe4 <_dtoa_r+0xa54>
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	ddec      	ble.n	8004f7e <_dtoa_r+0x9ee>
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	9904      	ldr	r1, [sp, #16]
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f000 fa8b 	bl	80054c4 <__lshift>
 8004fae:	4639      	mov	r1, r7
 8004fb0:	9004      	str	r0, [sp, #16]
 8004fb2:	f000 fadb 	bl	800556c <__mcmp>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	dc03      	bgt.n	8004fc2 <_dtoa_r+0xa32>
 8004fba:	d1e0      	bne.n	8004f7e <_dtoa_r+0x9ee>
 8004fbc:	f018 0f01 	tst.w	r8, #1
 8004fc0:	d0dd      	beq.n	8004f7e <_dtoa_r+0x9ee>
 8004fc2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004fc6:	d1d8      	bne.n	8004f7a <_dtoa_r+0x9ea>
 8004fc8:	9b05      	ldr	r3, [sp, #20]
 8004fca:	9a05      	ldr	r2, [sp, #20]
 8004fcc:	1c5d      	adds	r5, r3, #1
 8004fce:	2339      	movs	r3, #57	; 0x39
 8004fd0:	7013      	strb	r3, [r2, #0]
 8004fd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004fd6:	2b39      	cmp	r3, #57	; 0x39
 8004fd8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8004fdc:	d04f      	beq.n	800507e <_dtoa_r+0xaee>
 8004fde:	3301      	adds	r3, #1
 8004fe0:	7013      	strb	r3, [r2, #0]
 8004fe2:	e754      	b.n	8004e8e <_dtoa_r+0x8fe>
 8004fe4:	9a05      	ldr	r2, [sp, #20]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f102 0501 	add.w	r5, r2, #1
 8004fec:	dd06      	ble.n	8004ffc <_dtoa_r+0xa6c>
 8004fee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004ff2:	d0e9      	beq.n	8004fc8 <_dtoa_r+0xa38>
 8004ff4:	f108 0801 	add.w	r8, r8, #1
 8004ff8:	9b05      	ldr	r3, [sp, #20]
 8004ffa:	e7c2      	b.n	8004f82 <_dtoa_r+0x9f2>
 8004ffc:	9a02      	ldr	r2, [sp, #8]
 8004ffe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005002:	eba5 030b 	sub.w	r3, r5, fp
 8005006:	4293      	cmp	r3, r2
 8005008:	d021      	beq.n	800504e <_dtoa_r+0xabe>
 800500a:	2300      	movs	r3, #0
 800500c:	220a      	movs	r2, #10
 800500e:	9904      	ldr	r1, [sp, #16]
 8005010:	4620      	mov	r0, r4
 8005012:	f000 f8e1 	bl	80051d8 <__multadd>
 8005016:	45b1      	cmp	r9, r6
 8005018:	9004      	str	r0, [sp, #16]
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	f04f 020a 	mov.w	r2, #10
 8005022:	4649      	mov	r1, r9
 8005024:	4620      	mov	r0, r4
 8005026:	d105      	bne.n	8005034 <_dtoa_r+0xaa4>
 8005028:	f000 f8d6 	bl	80051d8 <__multadd>
 800502c:	4681      	mov	r9, r0
 800502e:	4606      	mov	r6, r0
 8005030:	9505      	str	r5, [sp, #20]
 8005032:	e776      	b.n	8004f22 <_dtoa_r+0x992>
 8005034:	f000 f8d0 	bl	80051d8 <__multadd>
 8005038:	4631      	mov	r1, r6
 800503a:	4681      	mov	r9, r0
 800503c:	2300      	movs	r3, #0
 800503e:	220a      	movs	r2, #10
 8005040:	4620      	mov	r0, r4
 8005042:	f000 f8c9 	bl	80051d8 <__multadd>
 8005046:	4606      	mov	r6, r0
 8005048:	e7f2      	b.n	8005030 <_dtoa_r+0xaa0>
 800504a:	f04f 0900 	mov.w	r9, #0
 800504e:	2201      	movs	r2, #1
 8005050:	9904      	ldr	r1, [sp, #16]
 8005052:	4620      	mov	r0, r4
 8005054:	f000 fa36 	bl	80054c4 <__lshift>
 8005058:	4639      	mov	r1, r7
 800505a:	9004      	str	r0, [sp, #16]
 800505c:	f000 fa86 	bl	800556c <__mcmp>
 8005060:	2800      	cmp	r0, #0
 8005062:	dcb6      	bgt.n	8004fd2 <_dtoa_r+0xa42>
 8005064:	d102      	bne.n	800506c <_dtoa_r+0xadc>
 8005066:	f018 0f01 	tst.w	r8, #1
 800506a:	d1b2      	bne.n	8004fd2 <_dtoa_r+0xa42>
 800506c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005070:	2b30      	cmp	r3, #48	; 0x30
 8005072:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005076:	f47f af0a 	bne.w	8004e8e <_dtoa_r+0x8fe>
 800507a:	4615      	mov	r5, r2
 800507c:	e7f6      	b.n	800506c <_dtoa_r+0xadc>
 800507e:	4593      	cmp	fp, r2
 8005080:	d105      	bne.n	800508e <_dtoa_r+0xafe>
 8005082:	2331      	movs	r3, #49	; 0x31
 8005084:	f10a 0a01 	add.w	sl, sl, #1
 8005088:	f88b 3000 	strb.w	r3, [fp]
 800508c:	e6ff      	b.n	8004e8e <_dtoa_r+0x8fe>
 800508e:	4615      	mov	r5, r2
 8005090:	e79f      	b.n	8004fd2 <_dtoa_r+0xa42>
 8005092:	f8df b064 	ldr.w	fp, [pc, #100]	; 80050f8 <_dtoa_r+0xb68>
 8005096:	e007      	b.n	80050a8 <_dtoa_r+0xb18>
 8005098:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800509a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80050fc <_dtoa_r+0xb6c>
 800509e:	b11b      	cbz	r3, 80050a8 <_dtoa_r+0xb18>
 80050a0:	f10b 0308 	add.w	r3, fp, #8
 80050a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80050a6:	6013      	str	r3, [r2, #0]
 80050a8:	4658      	mov	r0, fp
 80050aa:	b017      	add	sp, #92	; 0x5c
 80050ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b0:	9b06      	ldr	r3, [sp, #24]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	f77f ae35 	ble.w	8004d22 <_dtoa_r+0x792>
 80050b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050ba:	9307      	str	r3, [sp, #28]
 80050bc:	e649      	b.n	8004d52 <_dtoa_r+0x7c2>
 80050be:	9b02      	ldr	r3, [sp, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	dc03      	bgt.n	80050cc <_dtoa_r+0xb3c>
 80050c4:	9b06      	ldr	r3, [sp, #24]
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	f73f aecc 	bgt.w	8004e64 <_dtoa_r+0x8d4>
 80050cc:	465d      	mov	r5, fp
 80050ce:	4639      	mov	r1, r7
 80050d0:	9804      	ldr	r0, [sp, #16]
 80050d2:	f7ff f9cf 	bl	8004474 <quorem>
 80050d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80050da:	f805 8b01 	strb.w	r8, [r5], #1
 80050de:	9a02      	ldr	r2, [sp, #8]
 80050e0:	eba5 030b 	sub.w	r3, r5, fp
 80050e4:	429a      	cmp	r2, r3
 80050e6:	ddb0      	ble.n	800504a <_dtoa_r+0xaba>
 80050e8:	2300      	movs	r3, #0
 80050ea:	220a      	movs	r2, #10
 80050ec:	9904      	ldr	r1, [sp, #16]
 80050ee:	4620      	mov	r0, r4
 80050f0:	f000 f872 	bl	80051d8 <__multadd>
 80050f4:	9004      	str	r0, [sp, #16]
 80050f6:	e7ea      	b.n	80050ce <_dtoa_r+0xb3e>
 80050f8:	08005fec 	.word	0x08005fec
 80050fc:	08006010 	.word	0x08006010

08005100 <_localeconv_r>:
 8005100:	4b04      	ldr	r3, [pc, #16]	; (8005114 <_localeconv_r+0x14>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6a18      	ldr	r0, [r3, #32]
 8005106:	4b04      	ldr	r3, [pc, #16]	; (8005118 <_localeconv_r+0x18>)
 8005108:	2800      	cmp	r0, #0
 800510a:	bf08      	it	eq
 800510c:	4618      	moveq	r0, r3
 800510e:	30f0      	adds	r0, #240	; 0xf0
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	2000000c 	.word	0x2000000c
 8005118:	20000070 	.word	0x20000070

0800511c <malloc>:
 800511c:	4b02      	ldr	r3, [pc, #8]	; (8005128 <malloc+0xc>)
 800511e:	4601      	mov	r1, r0
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	f000 bb45 	b.w	80057b0 <_malloc_r>
 8005126:	bf00      	nop
 8005128:	2000000c 	.word	0x2000000c

0800512c <memcpy>:
 800512c:	b510      	push	{r4, lr}
 800512e:	1e43      	subs	r3, r0, #1
 8005130:	440a      	add	r2, r1
 8005132:	4291      	cmp	r1, r2
 8005134:	d100      	bne.n	8005138 <memcpy+0xc>
 8005136:	bd10      	pop	{r4, pc}
 8005138:	f811 4b01 	ldrb.w	r4, [r1], #1
 800513c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005140:	e7f7      	b.n	8005132 <memcpy+0x6>

08005142 <_Balloc>:
 8005142:	b570      	push	{r4, r5, r6, lr}
 8005144:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005146:	4604      	mov	r4, r0
 8005148:	460e      	mov	r6, r1
 800514a:	b93d      	cbnz	r5, 800515c <_Balloc+0x1a>
 800514c:	2010      	movs	r0, #16
 800514e:	f7ff ffe5 	bl	800511c <malloc>
 8005152:	6260      	str	r0, [r4, #36]	; 0x24
 8005154:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005158:	6005      	str	r5, [r0, #0]
 800515a:	60c5      	str	r5, [r0, #12]
 800515c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800515e:	68eb      	ldr	r3, [r5, #12]
 8005160:	b183      	cbz	r3, 8005184 <_Balloc+0x42>
 8005162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800516a:	b9b8      	cbnz	r0, 800519c <_Balloc+0x5a>
 800516c:	2101      	movs	r1, #1
 800516e:	fa01 f506 	lsl.w	r5, r1, r6
 8005172:	1d6a      	adds	r2, r5, #5
 8005174:	0092      	lsls	r2, r2, #2
 8005176:	4620      	mov	r0, r4
 8005178:	f000 fabe 	bl	80056f8 <_calloc_r>
 800517c:	b160      	cbz	r0, 8005198 <_Balloc+0x56>
 800517e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005182:	e00e      	b.n	80051a2 <_Balloc+0x60>
 8005184:	2221      	movs	r2, #33	; 0x21
 8005186:	2104      	movs	r1, #4
 8005188:	4620      	mov	r0, r4
 800518a:	f000 fab5 	bl	80056f8 <_calloc_r>
 800518e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005190:	60e8      	str	r0, [r5, #12]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1e4      	bne.n	8005162 <_Balloc+0x20>
 8005198:	2000      	movs	r0, #0
 800519a:	bd70      	pop	{r4, r5, r6, pc}
 800519c:	6802      	ldr	r2, [r0, #0]
 800519e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80051a2:	2300      	movs	r3, #0
 80051a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80051a8:	e7f7      	b.n	800519a <_Balloc+0x58>

080051aa <_Bfree>:
 80051aa:	b570      	push	{r4, r5, r6, lr}
 80051ac:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80051ae:	4606      	mov	r6, r0
 80051b0:	460d      	mov	r5, r1
 80051b2:	b93c      	cbnz	r4, 80051c4 <_Bfree+0x1a>
 80051b4:	2010      	movs	r0, #16
 80051b6:	f7ff ffb1 	bl	800511c <malloc>
 80051ba:	6270      	str	r0, [r6, #36]	; 0x24
 80051bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80051c0:	6004      	str	r4, [r0, #0]
 80051c2:	60c4      	str	r4, [r0, #12]
 80051c4:	b13d      	cbz	r5, 80051d6 <_Bfree+0x2c>
 80051c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80051c8:	686a      	ldr	r2, [r5, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051d0:	6029      	str	r1, [r5, #0]
 80051d2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80051d6:	bd70      	pop	{r4, r5, r6, pc}

080051d8 <__multadd>:
 80051d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051dc:	690d      	ldr	r5, [r1, #16]
 80051de:	461f      	mov	r7, r3
 80051e0:	4606      	mov	r6, r0
 80051e2:	460c      	mov	r4, r1
 80051e4:	f101 0c14 	add.w	ip, r1, #20
 80051e8:	2300      	movs	r3, #0
 80051ea:	f8dc 0000 	ldr.w	r0, [ip]
 80051ee:	b281      	uxth	r1, r0
 80051f0:	fb02 7101 	mla	r1, r2, r1, r7
 80051f4:	0c0f      	lsrs	r7, r1, #16
 80051f6:	0c00      	lsrs	r0, r0, #16
 80051f8:	fb02 7000 	mla	r0, r2, r0, r7
 80051fc:	b289      	uxth	r1, r1
 80051fe:	3301      	adds	r3, #1
 8005200:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005204:	429d      	cmp	r5, r3
 8005206:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800520a:	f84c 1b04 	str.w	r1, [ip], #4
 800520e:	dcec      	bgt.n	80051ea <__multadd+0x12>
 8005210:	b1d7      	cbz	r7, 8005248 <__multadd+0x70>
 8005212:	68a3      	ldr	r3, [r4, #8]
 8005214:	42ab      	cmp	r3, r5
 8005216:	dc12      	bgt.n	800523e <__multadd+0x66>
 8005218:	6861      	ldr	r1, [r4, #4]
 800521a:	4630      	mov	r0, r6
 800521c:	3101      	adds	r1, #1
 800521e:	f7ff ff90 	bl	8005142 <_Balloc>
 8005222:	6922      	ldr	r2, [r4, #16]
 8005224:	3202      	adds	r2, #2
 8005226:	f104 010c 	add.w	r1, r4, #12
 800522a:	4680      	mov	r8, r0
 800522c:	0092      	lsls	r2, r2, #2
 800522e:	300c      	adds	r0, #12
 8005230:	f7ff ff7c 	bl	800512c <memcpy>
 8005234:	4621      	mov	r1, r4
 8005236:	4630      	mov	r0, r6
 8005238:	f7ff ffb7 	bl	80051aa <_Bfree>
 800523c:	4644      	mov	r4, r8
 800523e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005242:	3501      	adds	r5, #1
 8005244:	615f      	str	r7, [r3, #20]
 8005246:	6125      	str	r5, [r4, #16]
 8005248:	4620      	mov	r0, r4
 800524a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800524e <__hi0bits>:
 800524e:	0c02      	lsrs	r2, r0, #16
 8005250:	0412      	lsls	r2, r2, #16
 8005252:	4603      	mov	r3, r0
 8005254:	b9b2      	cbnz	r2, 8005284 <__hi0bits+0x36>
 8005256:	0403      	lsls	r3, r0, #16
 8005258:	2010      	movs	r0, #16
 800525a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800525e:	bf04      	itt	eq
 8005260:	021b      	lsleq	r3, r3, #8
 8005262:	3008      	addeq	r0, #8
 8005264:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005268:	bf04      	itt	eq
 800526a:	011b      	lsleq	r3, r3, #4
 800526c:	3004      	addeq	r0, #4
 800526e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005272:	bf04      	itt	eq
 8005274:	009b      	lsleq	r3, r3, #2
 8005276:	3002      	addeq	r0, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	db06      	blt.n	800528a <__hi0bits+0x3c>
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	d503      	bpl.n	8005288 <__hi0bits+0x3a>
 8005280:	3001      	adds	r0, #1
 8005282:	4770      	bx	lr
 8005284:	2000      	movs	r0, #0
 8005286:	e7e8      	b.n	800525a <__hi0bits+0xc>
 8005288:	2020      	movs	r0, #32
 800528a:	4770      	bx	lr

0800528c <__lo0bits>:
 800528c:	6803      	ldr	r3, [r0, #0]
 800528e:	f013 0207 	ands.w	r2, r3, #7
 8005292:	4601      	mov	r1, r0
 8005294:	d00b      	beq.n	80052ae <__lo0bits+0x22>
 8005296:	07da      	lsls	r2, r3, #31
 8005298:	d423      	bmi.n	80052e2 <__lo0bits+0x56>
 800529a:	0798      	lsls	r0, r3, #30
 800529c:	bf49      	itett	mi
 800529e:	085b      	lsrmi	r3, r3, #1
 80052a0:	089b      	lsrpl	r3, r3, #2
 80052a2:	2001      	movmi	r0, #1
 80052a4:	600b      	strmi	r3, [r1, #0]
 80052a6:	bf5c      	itt	pl
 80052a8:	600b      	strpl	r3, [r1, #0]
 80052aa:	2002      	movpl	r0, #2
 80052ac:	4770      	bx	lr
 80052ae:	b298      	uxth	r0, r3
 80052b0:	b9a8      	cbnz	r0, 80052de <__lo0bits+0x52>
 80052b2:	0c1b      	lsrs	r3, r3, #16
 80052b4:	2010      	movs	r0, #16
 80052b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80052ba:	bf04      	itt	eq
 80052bc:	0a1b      	lsreq	r3, r3, #8
 80052be:	3008      	addeq	r0, #8
 80052c0:	071a      	lsls	r2, r3, #28
 80052c2:	bf04      	itt	eq
 80052c4:	091b      	lsreq	r3, r3, #4
 80052c6:	3004      	addeq	r0, #4
 80052c8:	079a      	lsls	r2, r3, #30
 80052ca:	bf04      	itt	eq
 80052cc:	089b      	lsreq	r3, r3, #2
 80052ce:	3002      	addeq	r0, #2
 80052d0:	07da      	lsls	r2, r3, #31
 80052d2:	d402      	bmi.n	80052da <__lo0bits+0x4e>
 80052d4:	085b      	lsrs	r3, r3, #1
 80052d6:	d006      	beq.n	80052e6 <__lo0bits+0x5a>
 80052d8:	3001      	adds	r0, #1
 80052da:	600b      	str	r3, [r1, #0]
 80052dc:	4770      	bx	lr
 80052de:	4610      	mov	r0, r2
 80052e0:	e7e9      	b.n	80052b6 <__lo0bits+0x2a>
 80052e2:	2000      	movs	r0, #0
 80052e4:	4770      	bx	lr
 80052e6:	2020      	movs	r0, #32
 80052e8:	4770      	bx	lr

080052ea <__i2b>:
 80052ea:	b510      	push	{r4, lr}
 80052ec:	460c      	mov	r4, r1
 80052ee:	2101      	movs	r1, #1
 80052f0:	f7ff ff27 	bl	8005142 <_Balloc>
 80052f4:	2201      	movs	r2, #1
 80052f6:	6144      	str	r4, [r0, #20]
 80052f8:	6102      	str	r2, [r0, #16]
 80052fa:	bd10      	pop	{r4, pc}

080052fc <__multiply>:
 80052fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005300:	4614      	mov	r4, r2
 8005302:	690a      	ldr	r2, [r1, #16]
 8005304:	6923      	ldr	r3, [r4, #16]
 8005306:	429a      	cmp	r2, r3
 8005308:	bfb8      	it	lt
 800530a:	460b      	movlt	r3, r1
 800530c:	4688      	mov	r8, r1
 800530e:	bfbc      	itt	lt
 8005310:	46a0      	movlt	r8, r4
 8005312:	461c      	movlt	r4, r3
 8005314:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005318:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800531c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005320:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005324:	eb07 0609 	add.w	r6, r7, r9
 8005328:	42b3      	cmp	r3, r6
 800532a:	bfb8      	it	lt
 800532c:	3101      	addlt	r1, #1
 800532e:	f7ff ff08 	bl	8005142 <_Balloc>
 8005332:	f100 0514 	add.w	r5, r0, #20
 8005336:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800533a:	462b      	mov	r3, r5
 800533c:	2200      	movs	r2, #0
 800533e:	4573      	cmp	r3, lr
 8005340:	d316      	bcc.n	8005370 <__multiply+0x74>
 8005342:	f104 0214 	add.w	r2, r4, #20
 8005346:	f108 0114 	add.w	r1, r8, #20
 800534a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800534e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	9b00      	ldr	r3, [sp, #0]
 8005356:	9201      	str	r2, [sp, #4]
 8005358:	4293      	cmp	r3, r2
 800535a:	d80c      	bhi.n	8005376 <__multiply+0x7a>
 800535c:	2e00      	cmp	r6, #0
 800535e:	dd03      	ble.n	8005368 <__multiply+0x6c>
 8005360:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005364:	2b00      	cmp	r3, #0
 8005366:	d05d      	beq.n	8005424 <__multiply+0x128>
 8005368:	6106      	str	r6, [r0, #16]
 800536a:	b003      	add	sp, #12
 800536c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005370:	f843 2b04 	str.w	r2, [r3], #4
 8005374:	e7e3      	b.n	800533e <__multiply+0x42>
 8005376:	f8b2 b000 	ldrh.w	fp, [r2]
 800537a:	f1bb 0f00 	cmp.w	fp, #0
 800537e:	d023      	beq.n	80053c8 <__multiply+0xcc>
 8005380:	4689      	mov	r9, r1
 8005382:	46ac      	mov	ip, r5
 8005384:	f04f 0800 	mov.w	r8, #0
 8005388:	f859 4b04 	ldr.w	r4, [r9], #4
 800538c:	f8dc a000 	ldr.w	sl, [ip]
 8005390:	b2a3      	uxth	r3, r4
 8005392:	fa1f fa8a 	uxth.w	sl, sl
 8005396:	fb0b a303 	mla	r3, fp, r3, sl
 800539a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800539e:	f8dc 4000 	ldr.w	r4, [ip]
 80053a2:	4443      	add	r3, r8
 80053a4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80053a8:	fb0b 840a 	mla	r4, fp, sl, r8
 80053ac:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80053b0:	46e2      	mov	sl, ip
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80053b8:	454f      	cmp	r7, r9
 80053ba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80053be:	f84a 3b04 	str.w	r3, [sl], #4
 80053c2:	d82b      	bhi.n	800541c <__multiply+0x120>
 80053c4:	f8cc 8004 	str.w	r8, [ip, #4]
 80053c8:	9b01      	ldr	r3, [sp, #4]
 80053ca:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80053ce:	3204      	adds	r2, #4
 80053d0:	f1ba 0f00 	cmp.w	sl, #0
 80053d4:	d020      	beq.n	8005418 <__multiply+0x11c>
 80053d6:	682b      	ldr	r3, [r5, #0]
 80053d8:	4689      	mov	r9, r1
 80053da:	46a8      	mov	r8, r5
 80053dc:	f04f 0b00 	mov.w	fp, #0
 80053e0:	f8b9 c000 	ldrh.w	ip, [r9]
 80053e4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80053e8:	fb0a 440c 	mla	r4, sl, ip, r4
 80053ec:	445c      	add	r4, fp
 80053ee:	46c4      	mov	ip, r8
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80053f6:	f84c 3b04 	str.w	r3, [ip], #4
 80053fa:	f859 3b04 	ldr.w	r3, [r9], #4
 80053fe:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005402:	0c1b      	lsrs	r3, r3, #16
 8005404:	fb0a b303 	mla	r3, sl, r3, fp
 8005408:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800540c:	454f      	cmp	r7, r9
 800540e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005412:	d805      	bhi.n	8005420 <__multiply+0x124>
 8005414:	f8c8 3004 	str.w	r3, [r8, #4]
 8005418:	3504      	adds	r5, #4
 800541a:	e79b      	b.n	8005354 <__multiply+0x58>
 800541c:	46d4      	mov	ip, sl
 800541e:	e7b3      	b.n	8005388 <__multiply+0x8c>
 8005420:	46e0      	mov	r8, ip
 8005422:	e7dd      	b.n	80053e0 <__multiply+0xe4>
 8005424:	3e01      	subs	r6, #1
 8005426:	e799      	b.n	800535c <__multiply+0x60>

08005428 <__pow5mult>:
 8005428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800542c:	4615      	mov	r5, r2
 800542e:	f012 0203 	ands.w	r2, r2, #3
 8005432:	4606      	mov	r6, r0
 8005434:	460f      	mov	r7, r1
 8005436:	d007      	beq.n	8005448 <__pow5mult+0x20>
 8005438:	3a01      	subs	r2, #1
 800543a:	4c21      	ldr	r4, [pc, #132]	; (80054c0 <__pow5mult+0x98>)
 800543c:	2300      	movs	r3, #0
 800543e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005442:	f7ff fec9 	bl	80051d8 <__multadd>
 8005446:	4607      	mov	r7, r0
 8005448:	10ad      	asrs	r5, r5, #2
 800544a:	d035      	beq.n	80054b8 <__pow5mult+0x90>
 800544c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800544e:	b93c      	cbnz	r4, 8005460 <__pow5mult+0x38>
 8005450:	2010      	movs	r0, #16
 8005452:	f7ff fe63 	bl	800511c <malloc>
 8005456:	6270      	str	r0, [r6, #36]	; 0x24
 8005458:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800545c:	6004      	str	r4, [r0, #0]
 800545e:	60c4      	str	r4, [r0, #12]
 8005460:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005464:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005468:	b94c      	cbnz	r4, 800547e <__pow5mult+0x56>
 800546a:	f240 2171 	movw	r1, #625	; 0x271
 800546e:	4630      	mov	r0, r6
 8005470:	f7ff ff3b 	bl	80052ea <__i2b>
 8005474:	2300      	movs	r3, #0
 8005476:	f8c8 0008 	str.w	r0, [r8, #8]
 800547a:	4604      	mov	r4, r0
 800547c:	6003      	str	r3, [r0, #0]
 800547e:	f04f 0800 	mov.w	r8, #0
 8005482:	07eb      	lsls	r3, r5, #31
 8005484:	d50a      	bpl.n	800549c <__pow5mult+0x74>
 8005486:	4639      	mov	r1, r7
 8005488:	4622      	mov	r2, r4
 800548a:	4630      	mov	r0, r6
 800548c:	f7ff ff36 	bl	80052fc <__multiply>
 8005490:	4639      	mov	r1, r7
 8005492:	4681      	mov	r9, r0
 8005494:	4630      	mov	r0, r6
 8005496:	f7ff fe88 	bl	80051aa <_Bfree>
 800549a:	464f      	mov	r7, r9
 800549c:	106d      	asrs	r5, r5, #1
 800549e:	d00b      	beq.n	80054b8 <__pow5mult+0x90>
 80054a0:	6820      	ldr	r0, [r4, #0]
 80054a2:	b938      	cbnz	r0, 80054b4 <__pow5mult+0x8c>
 80054a4:	4622      	mov	r2, r4
 80054a6:	4621      	mov	r1, r4
 80054a8:	4630      	mov	r0, r6
 80054aa:	f7ff ff27 	bl	80052fc <__multiply>
 80054ae:	6020      	str	r0, [r4, #0]
 80054b0:	f8c0 8000 	str.w	r8, [r0]
 80054b4:	4604      	mov	r4, r0
 80054b6:	e7e4      	b.n	8005482 <__pow5mult+0x5a>
 80054b8:	4638      	mov	r0, r7
 80054ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054be:	bf00      	nop
 80054c0:	08006110 	.word	0x08006110

080054c4 <__lshift>:
 80054c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c8:	460c      	mov	r4, r1
 80054ca:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80054ce:	6923      	ldr	r3, [r4, #16]
 80054d0:	6849      	ldr	r1, [r1, #4]
 80054d2:	eb0a 0903 	add.w	r9, sl, r3
 80054d6:	68a3      	ldr	r3, [r4, #8]
 80054d8:	4607      	mov	r7, r0
 80054da:	4616      	mov	r6, r2
 80054dc:	f109 0501 	add.w	r5, r9, #1
 80054e0:	42ab      	cmp	r3, r5
 80054e2:	db32      	blt.n	800554a <__lshift+0x86>
 80054e4:	4638      	mov	r0, r7
 80054e6:	f7ff fe2c 	bl	8005142 <_Balloc>
 80054ea:	2300      	movs	r3, #0
 80054ec:	4680      	mov	r8, r0
 80054ee:	f100 0114 	add.w	r1, r0, #20
 80054f2:	461a      	mov	r2, r3
 80054f4:	4553      	cmp	r3, sl
 80054f6:	db2b      	blt.n	8005550 <__lshift+0x8c>
 80054f8:	6920      	ldr	r0, [r4, #16]
 80054fa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80054fe:	f104 0314 	add.w	r3, r4, #20
 8005502:	f016 021f 	ands.w	r2, r6, #31
 8005506:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800550a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800550e:	d025      	beq.n	800555c <__lshift+0x98>
 8005510:	f1c2 0e20 	rsb	lr, r2, #32
 8005514:	2000      	movs	r0, #0
 8005516:	681e      	ldr	r6, [r3, #0]
 8005518:	468a      	mov	sl, r1
 800551a:	4096      	lsls	r6, r2
 800551c:	4330      	orrs	r0, r6
 800551e:	f84a 0b04 	str.w	r0, [sl], #4
 8005522:	f853 0b04 	ldr.w	r0, [r3], #4
 8005526:	459c      	cmp	ip, r3
 8005528:	fa20 f00e 	lsr.w	r0, r0, lr
 800552c:	d814      	bhi.n	8005558 <__lshift+0x94>
 800552e:	6048      	str	r0, [r1, #4]
 8005530:	b108      	cbz	r0, 8005536 <__lshift+0x72>
 8005532:	f109 0502 	add.w	r5, r9, #2
 8005536:	3d01      	subs	r5, #1
 8005538:	4638      	mov	r0, r7
 800553a:	f8c8 5010 	str.w	r5, [r8, #16]
 800553e:	4621      	mov	r1, r4
 8005540:	f7ff fe33 	bl	80051aa <_Bfree>
 8005544:	4640      	mov	r0, r8
 8005546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554a:	3101      	adds	r1, #1
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	e7c7      	b.n	80054e0 <__lshift+0x1c>
 8005550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005554:	3301      	adds	r3, #1
 8005556:	e7cd      	b.n	80054f4 <__lshift+0x30>
 8005558:	4651      	mov	r1, sl
 800555a:	e7dc      	b.n	8005516 <__lshift+0x52>
 800555c:	3904      	subs	r1, #4
 800555e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005562:	f841 2f04 	str.w	r2, [r1, #4]!
 8005566:	459c      	cmp	ip, r3
 8005568:	d8f9      	bhi.n	800555e <__lshift+0x9a>
 800556a:	e7e4      	b.n	8005536 <__lshift+0x72>

0800556c <__mcmp>:
 800556c:	6903      	ldr	r3, [r0, #16]
 800556e:	690a      	ldr	r2, [r1, #16]
 8005570:	1a9b      	subs	r3, r3, r2
 8005572:	b530      	push	{r4, r5, lr}
 8005574:	d10c      	bne.n	8005590 <__mcmp+0x24>
 8005576:	0092      	lsls	r2, r2, #2
 8005578:	3014      	adds	r0, #20
 800557a:	3114      	adds	r1, #20
 800557c:	1884      	adds	r4, r0, r2
 800557e:	4411      	add	r1, r2
 8005580:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005584:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005588:	4295      	cmp	r5, r2
 800558a:	d003      	beq.n	8005594 <__mcmp+0x28>
 800558c:	d305      	bcc.n	800559a <__mcmp+0x2e>
 800558e:	2301      	movs	r3, #1
 8005590:	4618      	mov	r0, r3
 8005592:	bd30      	pop	{r4, r5, pc}
 8005594:	42a0      	cmp	r0, r4
 8005596:	d3f3      	bcc.n	8005580 <__mcmp+0x14>
 8005598:	e7fa      	b.n	8005590 <__mcmp+0x24>
 800559a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800559e:	e7f7      	b.n	8005590 <__mcmp+0x24>

080055a0 <__mdiff>:
 80055a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a4:	460d      	mov	r5, r1
 80055a6:	4607      	mov	r7, r0
 80055a8:	4611      	mov	r1, r2
 80055aa:	4628      	mov	r0, r5
 80055ac:	4614      	mov	r4, r2
 80055ae:	f7ff ffdd 	bl	800556c <__mcmp>
 80055b2:	1e06      	subs	r6, r0, #0
 80055b4:	d108      	bne.n	80055c8 <__mdiff+0x28>
 80055b6:	4631      	mov	r1, r6
 80055b8:	4638      	mov	r0, r7
 80055ba:	f7ff fdc2 	bl	8005142 <_Balloc>
 80055be:	2301      	movs	r3, #1
 80055c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80055c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c8:	bfa4      	itt	ge
 80055ca:	4623      	movge	r3, r4
 80055cc:	462c      	movge	r4, r5
 80055ce:	4638      	mov	r0, r7
 80055d0:	6861      	ldr	r1, [r4, #4]
 80055d2:	bfa6      	itte	ge
 80055d4:	461d      	movge	r5, r3
 80055d6:	2600      	movge	r6, #0
 80055d8:	2601      	movlt	r6, #1
 80055da:	f7ff fdb2 	bl	8005142 <_Balloc>
 80055de:	692b      	ldr	r3, [r5, #16]
 80055e0:	60c6      	str	r6, [r0, #12]
 80055e2:	6926      	ldr	r6, [r4, #16]
 80055e4:	f105 0914 	add.w	r9, r5, #20
 80055e8:	f104 0214 	add.w	r2, r4, #20
 80055ec:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80055f0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80055f4:	f100 0514 	add.w	r5, r0, #20
 80055f8:	f04f 0e00 	mov.w	lr, #0
 80055fc:	f852 ab04 	ldr.w	sl, [r2], #4
 8005600:	f859 4b04 	ldr.w	r4, [r9], #4
 8005604:	fa1e f18a 	uxtah	r1, lr, sl
 8005608:	b2a3      	uxth	r3, r4
 800560a:	1ac9      	subs	r1, r1, r3
 800560c:	0c23      	lsrs	r3, r4, #16
 800560e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005612:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005616:	b289      	uxth	r1, r1
 8005618:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800561c:	45c8      	cmp	r8, r9
 800561e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005622:	4694      	mov	ip, r2
 8005624:	f845 3b04 	str.w	r3, [r5], #4
 8005628:	d8e8      	bhi.n	80055fc <__mdiff+0x5c>
 800562a:	45bc      	cmp	ip, r7
 800562c:	d304      	bcc.n	8005638 <__mdiff+0x98>
 800562e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005632:	b183      	cbz	r3, 8005656 <__mdiff+0xb6>
 8005634:	6106      	str	r6, [r0, #16]
 8005636:	e7c5      	b.n	80055c4 <__mdiff+0x24>
 8005638:	f85c 1b04 	ldr.w	r1, [ip], #4
 800563c:	fa1e f381 	uxtah	r3, lr, r1
 8005640:	141a      	asrs	r2, r3, #16
 8005642:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005646:	b29b      	uxth	r3, r3
 8005648:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800564c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005650:	f845 3b04 	str.w	r3, [r5], #4
 8005654:	e7e9      	b.n	800562a <__mdiff+0x8a>
 8005656:	3e01      	subs	r6, #1
 8005658:	e7e9      	b.n	800562e <__mdiff+0x8e>

0800565a <__d2b>:
 800565a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800565e:	460e      	mov	r6, r1
 8005660:	2101      	movs	r1, #1
 8005662:	ec59 8b10 	vmov	r8, r9, d0
 8005666:	4615      	mov	r5, r2
 8005668:	f7ff fd6b 	bl	8005142 <_Balloc>
 800566c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005670:	4607      	mov	r7, r0
 8005672:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005676:	bb34      	cbnz	r4, 80056c6 <__d2b+0x6c>
 8005678:	9301      	str	r3, [sp, #4]
 800567a:	f1b8 0300 	subs.w	r3, r8, #0
 800567e:	d027      	beq.n	80056d0 <__d2b+0x76>
 8005680:	a802      	add	r0, sp, #8
 8005682:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005686:	f7ff fe01 	bl	800528c <__lo0bits>
 800568a:	9900      	ldr	r1, [sp, #0]
 800568c:	b1f0      	cbz	r0, 80056cc <__d2b+0x72>
 800568e:	9a01      	ldr	r2, [sp, #4]
 8005690:	f1c0 0320 	rsb	r3, r0, #32
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	430b      	orrs	r3, r1
 800569a:	40c2      	lsrs	r2, r0
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	9201      	str	r2, [sp, #4]
 80056a0:	9b01      	ldr	r3, [sp, #4]
 80056a2:	61bb      	str	r3, [r7, #24]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	bf14      	ite	ne
 80056a8:	2102      	movne	r1, #2
 80056aa:	2101      	moveq	r1, #1
 80056ac:	6139      	str	r1, [r7, #16]
 80056ae:	b1c4      	cbz	r4, 80056e2 <__d2b+0x88>
 80056b0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80056b4:	4404      	add	r4, r0
 80056b6:	6034      	str	r4, [r6, #0]
 80056b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80056bc:	6028      	str	r0, [r5, #0]
 80056be:	4638      	mov	r0, r7
 80056c0:	b003      	add	sp, #12
 80056c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ca:	e7d5      	b.n	8005678 <__d2b+0x1e>
 80056cc:	6179      	str	r1, [r7, #20]
 80056ce:	e7e7      	b.n	80056a0 <__d2b+0x46>
 80056d0:	a801      	add	r0, sp, #4
 80056d2:	f7ff fddb 	bl	800528c <__lo0bits>
 80056d6:	9b01      	ldr	r3, [sp, #4]
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	2101      	movs	r1, #1
 80056dc:	6139      	str	r1, [r7, #16]
 80056de:	3020      	adds	r0, #32
 80056e0:	e7e5      	b.n	80056ae <__d2b+0x54>
 80056e2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80056e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80056ea:	6030      	str	r0, [r6, #0]
 80056ec:	6918      	ldr	r0, [r3, #16]
 80056ee:	f7ff fdae 	bl	800524e <__hi0bits>
 80056f2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80056f6:	e7e1      	b.n	80056bc <__d2b+0x62>

080056f8 <_calloc_r>:
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	fb02 f401 	mul.w	r4, r2, r1
 80056fe:	4621      	mov	r1, r4
 8005700:	f000 f856 	bl	80057b0 <_malloc_r>
 8005704:	4605      	mov	r5, r0
 8005706:	b118      	cbz	r0, 8005710 <_calloc_r+0x18>
 8005708:	4622      	mov	r2, r4
 800570a:	2100      	movs	r1, #0
 800570c:	f7fe fa2e 	bl	8003b6c <memset>
 8005710:	4628      	mov	r0, r5
 8005712:	bd38      	pop	{r3, r4, r5, pc}

08005714 <_free_r>:
 8005714:	b538      	push	{r3, r4, r5, lr}
 8005716:	4605      	mov	r5, r0
 8005718:	2900      	cmp	r1, #0
 800571a:	d045      	beq.n	80057a8 <_free_r+0x94>
 800571c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005720:	1f0c      	subs	r4, r1, #4
 8005722:	2b00      	cmp	r3, #0
 8005724:	bfb8      	it	lt
 8005726:	18e4      	addlt	r4, r4, r3
 8005728:	f000 fa29 	bl	8005b7e <__malloc_lock>
 800572c:	4a1f      	ldr	r2, [pc, #124]	; (80057ac <_free_r+0x98>)
 800572e:	6813      	ldr	r3, [r2, #0]
 8005730:	4610      	mov	r0, r2
 8005732:	b933      	cbnz	r3, 8005742 <_free_r+0x2e>
 8005734:	6063      	str	r3, [r4, #4]
 8005736:	6014      	str	r4, [r2, #0]
 8005738:	4628      	mov	r0, r5
 800573a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800573e:	f000 ba1f 	b.w	8005b80 <__malloc_unlock>
 8005742:	42a3      	cmp	r3, r4
 8005744:	d90c      	bls.n	8005760 <_free_r+0x4c>
 8005746:	6821      	ldr	r1, [r4, #0]
 8005748:	1862      	adds	r2, r4, r1
 800574a:	4293      	cmp	r3, r2
 800574c:	bf04      	itt	eq
 800574e:	681a      	ldreq	r2, [r3, #0]
 8005750:	685b      	ldreq	r3, [r3, #4]
 8005752:	6063      	str	r3, [r4, #4]
 8005754:	bf04      	itt	eq
 8005756:	1852      	addeq	r2, r2, r1
 8005758:	6022      	streq	r2, [r4, #0]
 800575a:	6004      	str	r4, [r0, #0]
 800575c:	e7ec      	b.n	8005738 <_free_r+0x24>
 800575e:	4613      	mov	r3, r2
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	b10a      	cbz	r2, 8005768 <_free_r+0x54>
 8005764:	42a2      	cmp	r2, r4
 8005766:	d9fa      	bls.n	800575e <_free_r+0x4a>
 8005768:	6819      	ldr	r1, [r3, #0]
 800576a:	1858      	adds	r0, r3, r1
 800576c:	42a0      	cmp	r0, r4
 800576e:	d10b      	bne.n	8005788 <_free_r+0x74>
 8005770:	6820      	ldr	r0, [r4, #0]
 8005772:	4401      	add	r1, r0
 8005774:	1858      	adds	r0, r3, r1
 8005776:	4282      	cmp	r2, r0
 8005778:	6019      	str	r1, [r3, #0]
 800577a:	d1dd      	bne.n	8005738 <_free_r+0x24>
 800577c:	6810      	ldr	r0, [r2, #0]
 800577e:	6852      	ldr	r2, [r2, #4]
 8005780:	605a      	str	r2, [r3, #4]
 8005782:	4401      	add	r1, r0
 8005784:	6019      	str	r1, [r3, #0]
 8005786:	e7d7      	b.n	8005738 <_free_r+0x24>
 8005788:	d902      	bls.n	8005790 <_free_r+0x7c>
 800578a:	230c      	movs	r3, #12
 800578c:	602b      	str	r3, [r5, #0]
 800578e:	e7d3      	b.n	8005738 <_free_r+0x24>
 8005790:	6820      	ldr	r0, [r4, #0]
 8005792:	1821      	adds	r1, r4, r0
 8005794:	428a      	cmp	r2, r1
 8005796:	bf04      	itt	eq
 8005798:	6811      	ldreq	r1, [r2, #0]
 800579a:	6852      	ldreq	r2, [r2, #4]
 800579c:	6062      	str	r2, [r4, #4]
 800579e:	bf04      	itt	eq
 80057a0:	1809      	addeq	r1, r1, r0
 80057a2:	6021      	streq	r1, [r4, #0]
 80057a4:	605c      	str	r4, [r3, #4]
 80057a6:	e7c7      	b.n	8005738 <_free_r+0x24>
 80057a8:	bd38      	pop	{r3, r4, r5, pc}
 80057aa:	bf00      	nop
 80057ac:	20000400 	.word	0x20000400

080057b0 <_malloc_r>:
 80057b0:	b570      	push	{r4, r5, r6, lr}
 80057b2:	1ccd      	adds	r5, r1, #3
 80057b4:	f025 0503 	bic.w	r5, r5, #3
 80057b8:	3508      	adds	r5, #8
 80057ba:	2d0c      	cmp	r5, #12
 80057bc:	bf38      	it	cc
 80057be:	250c      	movcc	r5, #12
 80057c0:	2d00      	cmp	r5, #0
 80057c2:	4606      	mov	r6, r0
 80057c4:	db01      	blt.n	80057ca <_malloc_r+0x1a>
 80057c6:	42a9      	cmp	r1, r5
 80057c8:	d903      	bls.n	80057d2 <_malloc_r+0x22>
 80057ca:	230c      	movs	r3, #12
 80057cc:	6033      	str	r3, [r6, #0]
 80057ce:	2000      	movs	r0, #0
 80057d0:	bd70      	pop	{r4, r5, r6, pc}
 80057d2:	f000 f9d4 	bl	8005b7e <__malloc_lock>
 80057d6:	4a21      	ldr	r2, [pc, #132]	; (800585c <_malloc_r+0xac>)
 80057d8:	6814      	ldr	r4, [r2, #0]
 80057da:	4621      	mov	r1, r4
 80057dc:	b991      	cbnz	r1, 8005804 <_malloc_r+0x54>
 80057de:	4c20      	ldr	r4, [pc, #128]	; (8005860 <_malloc_r+0xb0>)
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	b91b      	cbnz	r3, 80057ec <_malloc_r+0x3c>
 80057e4:	4630      	mov	r0, r6
 80057e6:	f000 f98f 	bl	8005b08 <_sbrk_r>
 80057ea:	6020      	str	r0, [r4, #0]
 80057ec:	4629      	mov	r1, r5
 80057ee:	4630      	mov	r0, r6
 80057f0:	f000 f98a 	bl	8005b08 <_sbrk_r>
 80057f4:	1c43      	adds	r3, r0, #1
 80057f6:	d124      	bne.n	8005842 <_malloc_r+0x92>
 80057f8:	230c      	movs	r3, #12
 80057fa:	6033      	str	r3, [r6, #0]
 80057fc:	4630      	mov	r0, r6
 80057fe:	f000 f9bf 	bl	8005b80 <__malloc_unlock>
 8005802:	e7e4      	b.n	80057ce <_malloc_r+0x1e>
 8005804:	680b      	ldr	r3, [r1, #0]
 8005806:	1b5b      	subs	r3, r3, r5
 8005808:	d418      	bmi.n	800583c <_malloc_r+0x8c>
 800580a:	2b0b      	cmp	r3, #11
 800580c:	d90f      	bls.n	800582e <_malloc_r+0x7e>
 800580e:	600b      	str	r3, [r1, #0]
 8005810:	50cd      	str	r5, [r1, r3]
 8005812:	18cc      	adds	r4, r1, r3
 8005814:	4630      	mov	r0, r6
 8005816:	f000 f9b3 	bl	8005b80 <__malloc_unlock>
 800581a:	f104 000b 	add.w	r0, r4, #11
 800581e:	1d23      	adds	r3, r4, #4
 8005820:	f020 0007 	bic.w	r0, r0, #7
 8005824:	1ac3      	subs	r3, r0, r3
 8005826:	d0d3      	beq.n	80057d0 <_malloc_r+0x20>
 8005828:	425a      	negs	r2, r3
 800582a:	50e2      	str	r2, [r4, r3]
 800582c:	e7d0      	b.n	80057d0 <_malloc_r+0x20>
 800582e:	428c      	cmp	r4, r1
 8005830:	684b      	ldr	r3, [r1, #4]
 8005832:	bf16      	itet	ne
 8005834:	6063      	strne	r3, [r4, #4]
 8005836:	6013      	streq	r3, [r2, #0]
 8005838:	460c      	movne	r4, r1
 800583a:	e7eb      	b.n	8005814 <_malloc_r+0x64>
 800583c:	460c      	mov	r4, r1
 800583e:	6849      	ldr	r1, [r1, #4]
 8005840:	e7cc      	b.n	80057dc <_malloc_r+0x2c>
 8005842:	1cc4      	adds	r4, r0, #3
 8005844:	f024 0403 	bic.w	r4, r4, #3
 8005848:	42a0      	cmp	r0, r4
 800584a:	d005      	beq.n	8005858 <_malloc_r+0xa8>
 800584c:	1a21      	subs	r1, r4, r0
 800584e:	4630      	mov	r0, r6
 8005850:	f000 f95a 	bl	8005b08 <_sbrk_r>
 8005854:	3001      	adds	r0, #1
 8005856:	d0cf      	beq.n	80057f8 <_malloc_r+0x48>
 8005858:	6025      	str	r5, [r4, #0]
 800585a:	e7db      	b.n	8005814 <_malloc_r+0x64>
 800585c:	20000400 	.word	0x20000400
 8005860:	20000404 	.word	0x20000404

08005864 <__ssputs_r>:
 8005864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005868:	688e      	ldr	r6, [r1, #8]
 800586a:	429e      	cmp	r6, r3
 800586c:	4682      	mov	sl, r0
 800586e:	460c      	mov	r4, r1
 8005870:	4690      	mov	r8, r2
 8005872:	4699      	mov	r9, r3
 8005874:	d837      	bhi.n	80058e6 <__ssputs_r+0x82>
 8005876:	898a      	ldrh	r2, [r1, #12]
 8005878:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800587c:	d031      	beq.n	80058e2 <__ssputs_r+0x7e>
 800587e:	6825      	ldr	r5, [r4, #0]
 8005880:	6909      	ldr	r1, [r1, #16]
 8005882:	1a6f      	subs	r7, r5, r1
 8005884:	6965      	ldr	r5, [r4, #20]
 8005886:	2302      	movs	r3, #2
 8005888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800588c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005890:	f109 0301 	add.w	r3, r9, #1
 8005894:	443b      	add	r3, r7
 8005896:	429d      	cmp	r5, r3
 8005898:	bf38      	it	cc
 800589a:	461d      	movcc	r5, r3
 800589c:	0553      	lsls	r3, r2, #21
 800589e:	d530      	bpl.n	8005902 <__ssputs_r+0x9e>
 80058a0:	4629      	mov	r1, r5
 80058a2:	f7ff ff85 	bl	80057b0 <_malloc_r>
 80058a6:	4606      	mov	r6, r0
 80058a8:	b950      	cbnz	r0, 80058c0 <__ssputs_r+0x5c>
 80058aa:	230c      	movs	r3, #12
 80058ac:	f8ca 3000 	str.w	r3, [sl]
 80058b0:	89a3      	ldrh	r3, [r4, #12]
 80058b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b6:	81a3      	strh	r3, [r4, #12]
 80058b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c0:	463a      	mov	r2, r7
 80058c2:	6921      	ldr	r1, [r4, #16]
 80058c4:	f7ff fc32 	bl	800512c <memcpy>
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d2:	81a3      	strh	r3, [r4, #12]
 80058d4:	6126      	str	r6, [r4, #16]
 80058d6:	6165      	str	r5, [r4, #20]
 80058d8:	443e      	add	r6, r7
 80058da:	1bed      	subs	r5, r5, r7
 80058dc:	6026      	str	r6, [r4, #0]
 80058de:	60a5      	str	r5, [r4, #8]
 80058e0:	464e      	mov	r6, r9
 80058e2:	454e      	cmp	r6, r9
 80058e4:	d900      	bls.n	80058e8 <__ssputs_r+0x84>
 80058e6:	464e      	mov	r6, r9
 80058e8:	4632      	mov	r2, r6
 80058ea:	4641      	mov	r1, r8
 80058ec:	6820      	ldr	r0, [r4, #0]
 80058ee:	f000 f92d 	bl	8005b4c <memmove>
 80058f2:	68a3      	ldr	r3, [r4, #8]
 80058f4:	1b9b      	subs	r3, r3, r6
 80058f6:	60a3      	str	r3, [r4, #8]
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	441e      	add	r6, r3
 80058fc:	6026      	str	r6, [r4, #0]
 80058fe:	2000      	movs	r0, #0
 8005900:	e7dc      	b.n	80058bc <__ssputs_r+0x58>
 8005902:	462a      	mov	r2, r5
 8005904:	f000 f93d 	bl	8005b82 <_realloc_r>
 8005908:	4606      	mov	r6, r0
 800590a:	2800      	cmp	r0, #0
 800590c:	d1e2      	bne.n	80058d4 <__ssputs_r+0x70>
 800590e:	6921      	ldr	r1, [r4, #16]
 8005910:	4650      	mov	r0, sl
 8005912:	f7ff feff 	bl	8005714 <_free_r>
 8005916:	e7c8      	b.n	80058aa <__ssputs_r+0x46>

08005918 <_svfiprintf_r>:
 8005918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591c:	461d      	mov	r5, r3
 800591e:	898b      	ldrh	r3, [r1, #12]
 8005920:	061f      	lsls	r7, r3, #24
 8005922:	b09d      	sub	sp, #116	; 0x74
 8005924:	4680      	mov	r8, r0
 8005926:	460c      	mov	r4, r1
 8005928:	4616      	mov	r6, r2
 800592a:	d50f      	bpl.n	800594c <_svfiprintf_r+0x34>
 800592c:	690b      	ldr	r3, [r1, #16]
 800592e:	b96b      	cbnz	r3, 800594c <_svfiprintf_r+0x34>
 8005930:	2140      	movs	r1, #64	; 0x40
 8005932:	f7ff ff3d 	bl	80057b0 <_malloc_r>
 8005936:	6020      	str	r0, [r4, #0]
 8005938:	6120      	str	r0, [r4, #16]
 800593a:	b928      	cbnz	r0, 8005948 <_svfiprintf_r+0x30>
 800593c:	230c      	movs	r3, #12
 800593e:	f8c8 3000 	str.w	r3, [r8]
 8005942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005946:	e0c8      	b.n	8005ada <_svfiprintf_r+0x1c2>
 8005948:	2340      	movs	r3, #64	; 0x40
 800594a:	6163      	str	r3, [r4, #20]
 800594c:	2300      	movs	r3, #0
 800594e:	9309      	str	r3, [sp, #36]	; 0x24
 8005950:	2320      	movs	r3, #32
 8005952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005956:	2330      	movs	r3, #48	; 0x30
 8005958:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800595c:	9503      	str	r5, [sp, #12]
 800595e:	f04f 0b01 	mov.w	fp, #1
 8005962:	4637      	mov	r7, r6
 8005964:	463d      	mov	r5, r7
 8005966:	f815 3b01 	ldrb.w	r3, [r5], #1
 800596a:	b10b      	cbz	r3, 8005970 <_svfiprintf_r+0x58>
 800596c:	2b25      	cmp	r3, #37	; 0x25
 800596e:	d13e      	bne.n	80059ee <_svfiprintf_r+0xd6>
 8005970:	ebb7 0a06 	subs.w	sl, r7, r6
 8005974:	d00b      	beq.n	800598e <_svfiprintf_r+0x76>
 8005976:	4653      	mov	r3, sl
 8005978:	4632      	mov	r2, r6
 800597a:	4621      	mov	r1, r4
 800597c:	4640      	mov	r0, r8
 800597e:	f7ff ff71 	bl	8005864 <__ssputs_r>
 8005982:	3001      	adds	r0, #1
 8005984:	f000 80a4 	beq.w	8005ad0 <_svfiprintf_r+0x1b8>
 8005988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800598a:	4453      	add	r3, sl
 800598c:	9309      	str	r3, [sp, #36]	; 0x24
 800598e:	783b      	ldrb	r3, [r7, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 809d 	beq.w	8005ad0 <_svfiprintf_r+0x1b8>
 8005996:	2300      	movs	r3, #0
 8005998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800599c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059a0:	9304      	str	r3, [sp, #16]
 80059a2:	9307      	str	r3, [sp, #28]
 80059a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059a8:	931a      	str	r3, [sp, #104]	; 0x68
 80059aa:	462f      	mov	r7, r5
 80059ac:	2205      	movs	r2, #5
 80059ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 80059b2:	4850      	ldr	r0, [pc, #320]	; (8005af4 <_svfiprintf_r+0x1dc>)
 80059b4:	f7fa fc34 	bl	8000220 <memchr>
 80059b8:	9b04      	ldr	r3, [sp, #16]
 80059ba:	b9d0      	cbnz	r0, 80059f2 <_svfiprintf_r+0xda>
 80059bc:	06d9      	lsls	r1, r3, #27
 80059be:	bf44      	itt	mi
 80059c0:	2220      	movmi	r2, #32
 80059c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80059c6:	071a      	lsls	r2, r3, #28
 80059c8:	bf44      	itt	mi
 80059ca:	222b      	movmi	r2, #43	; 0x2b
 80059cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80059d0:	782a      	ldrb	r2, [r5, #0]
 80059d2:	2a2a      	cmp	r2, #42	; 0x2a
 80059d4:	d015      	beq.n	8005a02 <_svfiprintf_r+0xea>
 80059d6:	9a07      	ldr	r2, [sp, #28]
 80059d8:	462f      	mov	r7, r5
 80059da:	2000      	movs	r0, #0
 80059dc:	250a      	movs	r5, #10
 80059de:	4639      	mov	r1, r7
 80059e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059e4:	3b30      	subs	r3, #48	; 0x30
 80059e6:	2b09      	cmp	r3, #9
 80059e8:	d94d      	bls.n	8005a86 <_svfiprintf_r+0x16e>
 80059ea:	b1b8      	cbz	r0, 8005a1c <_svfiprintf_r+0x104>
 80059ec:	e00f      	b.n	8005a0e <_svfiprintf_r+0xf6>
 80059ee:	462f      	mov	r7, r5
 80059f0:	e7b8      	b.n	8005964 <_svfiprintf_r+0x4c>
 80059f2:	4a40      	ldr	r2, [pc, #256]	; (8005af4 <_svfiprintf_r+0x1dc>)
 80059f4:	1a80      	subs	r0, r0, r2
 80059f6:	fa0b f000 	lsl.w	r0, fp, r0
 80059fa:	4318      	orrs	r0, r3
 80059fc:	9004      	str	r0, [sp, #16]
 80059fe:	463d      	mov	r5, r7
 8005a00:	e7d3      	b.n	80059aa <_svfiprintf_r+0x92>
 8005a02:	9a03      	ldr	r2, [sp, #12]
 8005a04:	1d11      	adds	r1, r2, #4
 8005a06:	6812      	ldr	r2, [r2, #0]
 8005a08:	9103      	str	r1, [sp, #12]
 8005a0a:	2a00      	cmp	r2, #0
 8005a0c:	db01      	blt.n	8005a12 <_svfiprintf_r+0xfa>
 8005a0e:	9207      	str	r2, [sp, #28]
 8005a10:	e004      	b.n	8005a1c <_svfiprintf_r+0x104>
 8005a12:	4252      	negs	r2, r2
 8005a14:	f043 0302 	orr.w	r3, r3, #2
 8005a18:	9207      	str	r2, [sp, #28]
 8005a1a:	9304      	str	r3, [sp, #16]
 8005a1c:	783b      	ldrb	r3, [r7, #0]
 8005a1e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a20:	d10c      	bne.n	8005a3c <_svfiprintf_r+0x124>
 8005a22:	787b      	ldrb	r3, [r7, #1]
 8005a24:	2b2a      	cmp	r3, #42	; 0x2a
 8005a26:	d133      	bne.n	8005a90 <_svfiprintf_r+0x178>
 8005a28:	9b03      	ldr	r3, [sp, #12]
 8005a2a:	1d1a      	adds	r2, r3, #4
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	9203      	str	r2, [sp, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	bfb8      	it	lt
 8005a34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005a38:	3702      	adds	r7, #2
 8005a3a:	9305      	str	r3, [sp, #20]
 8005a3c:	4d2e      	ldr	r5, [pc, #184]	; (8005af8 <_svfiprintf_r+0x1e0>)
 8005a3e:	7839      	ldrb	r1, [r7, #0]
 8005a40:	2203      	movs	r2, #3
 8005a42:	4628      	mov	r0, r5
 8005a44:	f7fa fbec 	bl	8000220 <memchr>
 8005a48:	b138      	cbz	r0, 8005a5a <_svfiprintf_r+0x142>
 8005a4a:	2340      	movs	r3, #64	; 0x40
 8005a4c:	1b40      	subs	r0, r0, r5
 8005a4e:	fa03 f000 	lsl.w	r0, r3, r0
 8005a52:	9b04      	ldr	r3, [sp, #16]
 8005a54:	4303      	orrs	r3, r0
 8005a56:	3701      	adds	r7, #1
 8005a58:	9304      	str	r3, [sp, #16]
 8005a5a:	7839      	ldrb	r1, [r7, #0]
 8005a5c:	4827      	ldr	r0, [pc, #156]	; (8005afc <_svfiprintf_r+0x1e4>)
 8005a5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a62:	2206      	movs	r2, #6
 8005a64:	1c7e      	adds	r6, r7, #1
 8005a66:	f7fa fbdb 	bl	8000220 <memchr>
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	d038      	beq.n	8005ae0 <_svfiprintf_r+0x1c8>
 8005a6e:	4b24      	ldr	r3, [pc, #144]	; (8005b00 <_svfiprintf_r+0x1e8>)
 8005a70:	bb13      	cbnz	r3, 8005ab8 <_svfiprintf_r+0x1a0>
 8005a72:	9b03      	ldr	r3, [sp, #12]
 8005a74:	3307      	adds	r3, #7
 8005a76:	f023 0307 	bic.w	r3, r3, #7
 8005a7a:	3308      	adds	r3, #8
 8005a7c:	9303      	str	r3, [sp, #12]
 8005a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a80:	444b      	add	r3, r9
 8005a82:	9309      	str	r3, [sp, #36]	; 0x24
 8005a84:	e76d      	b.n	8005962 <_svfiprintf_r+0x4a>
 8005a86:	fb05 3202 	mla	r2, r5, r2, r3
 8005a8a:	2001      	movs	r0, #1
 8005a8c:	460f      	mov	r7, r1
 8005a8e:	e7a6      	b.n	80059de <_svfiprintf_r+0xc6>
 8005a90:	2300      	movs	r3, #0
 8005a92:	3701      	adds	r7, #1
 8005a94:	9305      	str	r3, [sp, #20]
 8005a96:	4619      	mov	r1, r3
 8005a98:	250a      	movs	r5, #10
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005aa0:	3a30      	subs	r2, #48	; 0x30
 8005aa2:	2a09      	cmp	r2, #9
 8005aa4:	d903      	bls.n	8005aae <_svfiprintf_r+0x196>
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0c8      	beq.n	8005a3c <_svfiprintf_r+0x124>
 8005aaa:	9105      	str	r1, [sp, #20]
 8005aac:	e7c6      	b.n	8005a3c <_svfiprintf_r+0x124>
 8005aae:	fb05 2101 	mla	r1, r5, r1, r2
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4607      	mov	r7, r0
 8005ab6:	e7f0      	b.n	8005a9a <_svfiprintf_r+0x182>
 8005ab8:	ab03      	add	r3, sp, #12
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	4622      	mov	r2, r4
 8005abe:	4b11      	ldr	r3, [pc, #68]	; (8005b04 <_svfiprintf_r+0x1ec>)
 8005ac0:	a904      	add	r1, sp, #16
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	f7fe f8ee 	bl	8003ca4 <_printf_float>
 8005ac8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005acc:	4681      	mov	r9, r0
 8005ace:	d1d6      	bne.n	8005a7e <_svfiprintf_r+0x166>
 8005ad0:	89a3      	ldrh	r3, [r4, #12]
 8005ad2:	065b      	lsls	r3, r3, #25
 8005ad4:	f53f af35 	bmi.w	8005942 <_svfiprintf_r+0x2a>
 8005ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ada:	b01d      	add	sp, #116	; 0x74
 8005adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae0:	ab03      	add	r3, sp, #12
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	4b07      	ldr	r3, [pc, #28]	; (8005b04 <_svfiprintf_r+0x1ec>)
 8005ae8:	a904      	add	r1, sp, #16
 8005aea:	4640      	mov	r0, r8
 8005aec:	f7fe fb90 	bl	8004210 <_printf_i>
 8005af0:	e7ea      	b.n	8005ac8 <_svfiprintf_r+0x1b0>
 8005af2:	bf00      	nop
 8005af4:	0800611c 	.word	0x0800611c
 8005af8:	08006122 	.word	0x08006122
 8005afc:	08006126 	.word	0x08006126
 8005b00:	08003ca5 	.word	0x08003ca5
 8005b04:	08005865 	.word	0x08005865

08005b08 <_sbrk_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4c06      	ldr	r4, [pc, #24]	; (8005b24 <_sbrk_r+0x1c>)
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4605      	mov	r5, r0
 8005b10:	4608      	mov	r0, r1
 8005b12:	6023      	str	r3, [r4, #0]
 8005b14:	f7fd ff74 	bl	8003a00 <_sbrk>
 8005b18:	1c43      	adds	r3, r0, #1
 8005b1a:	d102      	bne.n	8005b22 <_sbrk_r+0x1a>
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	b103      	cbz	r3, 8005b22 <_sbrk_r+0x1a>
 8005b20:	602b      	str	r3, [r5, #0]
 8005b22:	bd38      	pop	{r3, r4, r5, pc}
 8005b24:	200007dc 	.word	0x200007dc

08005b28 <__ascii_mbtowc>:
 8005b28:	b082      	sub	sp, #8
 8005b2a:	b901      	cbnz	r1, 8005b2e <__ascii_mbtowc+0x6>
 8005b2c:	a901      	add	r1, sp, #4
 8005b2e:	b142      	cbz	r2, 8005b42 <__ascii_mbtowc+0x1a>
 8005b30:	b14b      	cbz	r3, 8005b46 <__ascii_mbtowc+0x1e>
 8005b32:	7813      	ldrb	r3, [r2, #0]
 8005b34:	600b      	str	r3, [r1, #0]
 8005b36:	7812      	ldrb	r2, [r2, #0]
 8005b38:	1c10      	adds	r0, r2, #0
 8005b3a:	bf18      	it	ne
 8005b3c:	2001      	movne	r0, #1
 8005b3e:	b002      	add	sp, #8
 8005b40:	4770      	bx	lr
 8005b42:	4610      	mov	r0, r2
 8005b44:	e7fb      	b.n	8005b3e <__ascii_mbtowc+0x16>
 8005b46:	f06f 0001 	mvn.w	r0, #1
 8005b4a:	e7f8      	b.n	8005b3e <__ascii_mbtowc+0x16>

08005b4c <memmove>:
 8005b4c:	4288      	cmp	r0, r1
 8005b4e:	b510      	push	{r4, lr}
 8005b50:	eb01 0302 	add.w	r3, r1, r2
 8005b54:	d807      	bhi.n	8005b66 <memmove+0x1a>
 8005b56:	1e42      	subs	r2, r0, #1
 8005b58:	4299      	cmp	r1, r3
 8005b5a:	d00a      	beq.n	8005b72 <memmove+0x26>
 8005b5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b60:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005b64:	e7f8      	b.n	8005b58 <memmove+0xc>
 8005b66:	4283      	cmp	r3, r0
 8005b68:	d9f5      	bls.n	8005b56 <memmove+0xa>
 8005b6a:	1881      	adds	r1, r0, r2
 8005b6c:	1ad2      	subs	r2, r2, r3
 8005b6e:	42d3      	cmn	r3, r2
 8005b70:	d100      	bne.n	8005b74 <memmove+0x28>
 8005b72:	bd10      	pop	{r4, pc}
 8005b74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b78:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005b7c:	e7f7      	b.n	8005b6e <memmove+0x22>

08005b7e <__malloc_lock>:
 8005b7e:	4770      	bx	lr

08005b80 <__malloc_unlock>:
 8005b80:	4770      	bx	lr

08005b82 <_realloc_r>:
 8005b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b84:	4607      	mov	r7, r0
 8005b86:	4614      	mov	r4, r2
 8005b88:	460e      	mov	r6, r1
 8005b8a:	b921      	cbnz	r1, 8005b96 <_realloc_r+0x14>
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005b92:	f7ff be0d 	b.w	80057b0 <_malloc_r>
 8005b96:	b922      	cbnz	r2, 8005ba2 <_realloc_r+0x20>
 8005b98:	f7ff fdbc 	bl	8005714 <_free_r>
 8005b9c:	4625      	mov	r5, r4
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ba2:	f000 f821 	bl	8005be8 <_malloc_usable_size_r>
 8005ba6:	42a0      	cmp	r0, r4
 8005ba8:	d20f      	bcs.n	8005bca <_realloc_r+0x48>
 8005baa:	4621      	mov	r1, r4
 8005bac:	4638      	mov	r0, r7
 8005bae:	f7ff fdff 	bl	80057b0 <_malloc_r>
 8005bb2:	4605      	mov	r5, r0
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	d0f2      	beq.n	8005b9e <_realloc_r+0x1c>
 8005bb8:	4631      	mov	r1, r6
 8005bba:	4622      	mov	r2, r4
 8005bbc:	f7ff fab6 	bl	800512c <memcpy>
 8005bc0:	4631      	mov	r1, r6
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	f7ff fda6 	bl	8005714 <_free_r>
 8005bc8:	e7e9      	b.n	8005b9e <_realloc_r+0x1c>
 8005bca:	4635      	mov	r5, r6
 8005bcc:	e7e7      	b.n	8005b9e <_realloc_r+0x1c>

08005bce <__ascii_wctomb>:
 8005bce:	b149      	cbz	r1, 8005be4 <__ascii_wctomb+0x16>
 8005bd0:	2aff      	cmp	r2, #255	; 0xff
 8005bd2:	bf85      	ittet	hi
 8005bd4:	238a      	movhi	r3, #138	; 0x8a
 8005bd6:	6003      	strhi	r3, [r0, #0]
 8005bd8:	700a      	strbls	r2, [r1, #0]
 8005bda:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005bde:	bf98      	it	ls
 8005be0:	2001      	movls	r0, #1
 8005be2:	4770      	bx	lr
 8005be4:	4608      	mov	r0, r1
 8005be6:	4770      	bx	lr

08005be8 <_malloc_usable_size_r>:
 8005be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bec:	1f18      	subs	r0, r3, #4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	bfbc      	itt	lt
 8005bf2:	580b      	ldrlt	r3, [r1, r0]
 8005bf4:	18c0      	addlt	r0, r0, r3
 8005bf6:	4770      	bx	lr

08005bf8 <_init>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	bf00      	nop
 8005bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfe:	bc08      	pop	{r3}
 8005c00:	469e      	mov	lr, r3
 8005c02:	4770      	bx	lr

08005c04 <_fini>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	bf00      	nop
 8005c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	469e      	mov	lr, r3
 8005c0e:	4770      	bx	lr
