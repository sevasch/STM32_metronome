
mico_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062b4  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  08006480  08006480  00016480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a70  08006a70  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006a70  08006a70  00016a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a78  08006a78  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a78  08006a78  00016a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a7c  08006a7c  00016a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  200001dc  08006c5c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005cc  08006c5c  000205cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012699  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000274c  00000000  00000000  000328a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001080  00000000  00000000  00034ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f48  00000000  00000000  00036078  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022e7d  00000000  00000000  00036fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e948  00000000  00000000  00059e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5d80  00000000  00000000  00068785  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e505  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d18  00000000  00000000  0013e580  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001dc 	.word	0x200001dc
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006464 	.word	0x08006464

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001e0 	.word	0x200001e0
 8000204:	08006464 	.word	0x08006464

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	4688      	mov	r8, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14b      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b7e:	428a      	cmp	r2, r1
 8000b80:	4615      	mov	r5, r2
 8000b82:	d967      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0720 	rsb	r7, r2, #32
 8000b8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b92:	fa20 f707 	lsr.w	r7, r0, r7
 8000b96:	4095      	lsls	r5, r2
 8000b98:	ea47 0803 	orr.w	r8, r7, r3
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba8:	fa1f fc85 	uxth.w	ip, r5
 8000bac:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb4:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18eb      	adds	r3, r5, r3
 8000bbe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bc2:	f080 811b 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8118 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bcc:	3f02      	subs	r7, #2
 8000bce:	442b      	add	r3, r5
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be4:	45a4      	cmp	ip, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	442c      	add	r4, r5
 8000bfc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c00:	eba4 040c 	sub.w	r4, r4, ip
 8000c04:	2700      	movs	r7, #0
 8000c06:	b11e      	cbz	r6, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c10:	4639      	mov	r1, r7
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d909      	bls.n	8000c2e <__udivmoddi4+0xbe>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80eb 	beq.w	8000df6 <__udivmoddi4+0x286>
 8000c20:	2700      	movs	r7, #0
 8000c22:	e9c6 0100 	strd	r0, r1, [r6]
 8000c26:	4638      	mov	r0, r7
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	fab3 f783 	clz	r7, r3
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d147      	bne.n	8000cc6 <__udivmoddi4+0x156>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xd0>
 8000c3a:	4282      	cmp	r2, r0
 8000c3c:	f200 80fa 	bhi.w	8000e34 <__udivmoddi4+0x2c4>
 8000c40:	1a84      	subs	r4, r0, r2
 8000c42:	eb61 0303 	sbc.w	r3, r1, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	4698      	mov	r8, r3
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d0e0      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000c4e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c52:	e7dd      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000c54:	b902      	cbnz	r2, 8000c58 <__udivmoddi4+0xe8>
 8000c56:	deff      	udf	#255	; 0xff
 8000c58:	fab2 f282 	clz	r2, r2
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f040 808f 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c62:	1b49      	subs	r1, r1, r5
 8000c64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c68:	fa1f f885 	uxth.w	r8, r5
 8000c6c:	2701      	movs	r7, #1
 8000c6e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c72:	0c23      	lsrs	r3, r4, #16
 8000c74:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	f200 80cd 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1a59      	subs	r1, r3, r1
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x14c>
 8000cac:	192c      	adds	r4, r5, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x14a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80b6 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e79f      	b.n	8000c06 <__udivmoddi4+0x96>
 8000cc6:	f1c7 0c20 	rsb	ip, r7, #32
 8000cca:	40bb      	lsls	r3, r7
 8000ccc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd4:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cdc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce4:	4325      	orrs	r5, r4
 8000ce6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cea:	0c2c      	lsrs	r4, r5, #16
 8000cec:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf0:	fa1f fa8e 	uxth.w	sl, lr
 8000cf4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cfc:	429c      	cmp	r4, r3
 8000cfe:	fa02 f207 	lsl.w	r2, r2, r7
 8000d02:	fa00 f107 	lsl.w	r1, r0, r7
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1e 0303 	adds.w	r3, lr, r3
 8000d0c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d10:	f080 8087 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f240 8084 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1e:	4473      	add	r3, lr
 8000d20:	1b1b      	subs	r3, r3, r4
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d28:	fb08 3310 	mls	r3, r8, r0, r3
 8000d2c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d30:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d34:	45a2      	cmp	sl, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1e 0404 	adds.w	r4, lr, r4
 8000d3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d40:	d26b      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d42:	45a2      	cmp	sl, r4
 8000d44:	d969      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4474      	add	r4, lr
 8000d4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d52:	eba4 040a 	sub.w	r4, r4, sl
 8000d56:	454c      	cmp	r4, r9
 8000d58:	46c2      	mov	sl, r8
 8000d5a:	464b      	mov	r3, r9
 8000d5c:	d354      	bcc.n	8000e08 <__udivmoddi4+0x298>
 8000d5e:	d051      	beq.n	8000e04 <__udivmoddi4+0x294>
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d069      	beq.n	8000e38 <__udivmoddi4+0x2c8>
 8000d64:	ebb1 050a 	subs.w	r5, r1, sl
 8000d68:	eb64 0403 	sbc.w	r4, r4, r3
 8000d6c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d70:	40fd      	lsrs	r5, r7
 8000d72:	40fc      	lsrs	r4, r7
 8000d74:	ea4c 0505 	orr.w	r5, ip, r5
 8000d78:	e9c6 5400 	strd	r5, r4, [r6]
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	e747      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f703 	lsr.w	r7, r0, r3
 8000d88:	4095      	lsls	r5, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d96:	4338      	orrs	r0, r7
 8000d98:	0c01      	lsrs	r1, r0, #16
 8000d9a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9e:	fa1f f885 	uxth.w	r8, r5
 8000da2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb07 f308 	mul.w	r3, r7, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	fa04 f402 	lsl.w	r4, r4, r2
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db6:	1869      	adds	r1, r5, r1
 8000db8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3f02      	subs	r7, #2
 8000dc4:	4429      	add	r1, r5
 8000dc6:	1acb      	subs	r3, r1, r3
 8000dc8:	b281      	uxth	r1, r0
 8000dca:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dce:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb00 f308 	mul.w	r3, r0, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x27e>
 8000dde:	1869      	adds	r1, r5, r1
 8000de0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de4:	d217      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d915      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4429      	add	r1, r5
 8000dee:	1ac9      	subs	r1, r1, r3
 8000df0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df4:	e73b      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df6:	4637      	mov	r7, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e709      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000dfc:	4607      	mov	r7, r0
 8000dfe:	e6e7      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e04:	4541      	cmp	r1, r8
 8000e06:	d2ab      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e08:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e0c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e10:	3801      	subs	r0, #1
 8000e12:	4613      	mov	r3, r2
 8000e14:	e7a4      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e16:	4660      	mov	r0, ip
 8000e18:	e7e9      	b.n	8000dee <__udivmoddi4+0x27e>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	e795      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e1e:	4667      	mov	r7, ip
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	4681      	mov	r9, r0
 8000e24:	e77c      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e26:	3802      	subs	r0, #2
 8000e28:	442c      	add	r4, r5
 8000e2a:	e747      	b.n	8000cbc <__udivmoddi4+0x14c>
 8000e2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e30:	442b      	add	r3, r5
 8000e32:	e72f      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e34:	4638      	mov	r0, r7
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xda>
 8000e38:	4637      	mov	r7, r6
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0xa0>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <HAL_Init+0x40>)
 8000e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_Init+0x40>)
 8000e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_Init+0x40>)
 8000e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 fd49 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 f808 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f003 fb9a 	bl	80045ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023c00 	.word	0x40023c00

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x54>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x58>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 fd61 	bl	800196a <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00e      	b.n	8000ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d80a      	bhi.n	8000ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec0:	f000 fd29 	bl	8001916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <HAL_InitTick+0x5c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000004 	.word	0x20000004
 8000ee0:	20000000 	.word	0x20000000

08000ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x20>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000004 	.word	0x20000004
 8000f08:	20000408 	.word	0x20000408

08000f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <HAL_GetTick+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000408 	.word	0x20000408

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff ffee 	bl	8000f0c <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_Delay+0x40>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffde 	bl	8000f0c <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8f7      	bhi.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000004 	.word	0x20000004

08000f68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e033      	b.n	8000fe6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d109      	bne.n	8000f9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f002 fcfa 	bl	8003980 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d118      	bne.n	8000fd8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fae:	f023 0302 	bic.w	r3, r3, #2
 8000fb2:	f043 0202 	orr.w	r2, r3, #2
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 fad4 	bl	8001568 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f023 0303 	bic.w	r3, r3, #3
 8000fce:	f043 0201 	orr.w	r2, r3, #1
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	641a      	str	r2, [r3, #64]	; 0x40
 8000fd6:	e001      	b.n	8000fdc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001002:	2b01      	cmp	r3, #1
 8001004:	d101      	bne.n	800100a <HAL_ADC_Start+0x1a>
 8001006:	2302      	movs	r3, #2
 8001008:	e0a5      	b.n	8001156 <HAL_ADC_Start+0x166>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	2b01      	cmp	r3, #1
 800101e:	d018      	beq.n	8001052 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0201 	orr.w	r2, r2, #1
 800102e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001030:	4b4c      	ldr	r3, [pc, #304]	; (8001164 <HAL_ADC_Start+0x174>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a4c      	ldr	r2, [pc, #304]	; (8001168 <HAL_ADC_Start+0x178>)
 8001036:	fba2 2303 	umull	r2, r3, r2, r3
 800103a:	0c9a      	lsrs	r2, r3, #18
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001044:	e002      	b.n	800104c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	3b01      	subs	r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f9      	bne.n	8001046 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b01      	cmp	r3, #1
 800105e:	d179      	bne.n	8001154 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001068:	f023 0301 	bic.w	r3, r3, #1
 800106c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800107e:	2b00      	cmp	r3, #0
 8001080:	d007      	beq.n	8001092 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800108a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800109a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800109e:	d106      	bne.n	80010ae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a4:	f023 0206 	bic.w	r2, r3, #6
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	645a      	str	r2, [r3, #68]	; 0x44
 80010ac:	e002      	b.n	80010b4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010bc:	4b2b      	ldr	r3, [pc, #172]	; (800116c <HAL_ADC_Start+0x17c>)
 80010be:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010c8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 031f 	and.w	r3, r3, #31
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d12a      	bne.n	800112c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a25      	ldr	r2, [pc, #148]	; (8001170 <HAL_ADC_Start+0x180>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d015      	beq.n	800110c <HAL_ADC_Start+0x11c>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a23      	ldr	r2, [pc, #140]	; (8001174 <HAL_ADC_Start+0x184>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d105      	bne.n	80010f6 <HAL_ADC_Start+0x106>
 80010ea:	4b20      	ldr	r3, [pc, #128]	; (800116c <HAL_ADC_Start+0x17c>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 031f 	and.w	r3, r3, #31
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00a      	beq.n	800110c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a1f      	ldr	r2, [pc, #124]	; (8001178 <HAL_ADC_Start+0x188>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d129      	bne.n	8001154 <HAL_ADC_Start+0x164>
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <HAL_ADC_Start+0x17c>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 031f 	and.w	r3, r3, #31
 8001108:	2b0f      	cmp	r3, #15
 800110a:	d823      	bhi.n	8001154 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d11c      	bne.n	8001154 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	e013      	b.n	8001154 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0f      	ldr	r2, [pc, #60]	; (8001170 <HAL_ADC_Start+0x180>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d10e      	bne.n	8001154 <HAL_ADC_Start+0x164>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d107      	bne.n	8001154 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001152:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000008 	.word	0x20000008
 8001168:	431bde83 	.word	0x431bde83
 800116c:	40012300 	.word	0x40012300
 8001170:	40012000 	.word	0x40012000
 8001174:	40012100 	.word	0x40012100
 8001178:	40012200 	.word	0x40012200

0800117c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800118a:	2b01      	cmp	r3, #1
 800118c:	d101      	bne.n	8001192 <HAL_ADC_Stop+0x16>
 800118e:	2302      	movs	r3, #2
 8001190:	e021      	b.n	80011d6 <HAL_ADC_Stop+0x5a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0201 	bic.w	r2, r2, #1
 80011a8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d109      	bne.n	80011cc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011c0:	f023 0301 	bic.w	r3, r3, #1
 80011c4:	f043 0201 	orr.w	r2, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b084      	sub	sp, #16
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fe:	d113      	bne.n	8001228 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800120a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800120e:	d10b      	bne.n	8001228 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	f043 0220 	orr.w	r2, r3, #32
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e05c      	b.n	80012e2 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001228:	f7ff fe70 	bl	8000f0c <HAL_GetTick>
 800122c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800122e:	e01a      	b.n	8001266 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001236:	d016      	beq.n	8001266 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d007      	beq.n	800124e <HAL_ADC_PollForConversion+0x6c>
 800123e:	f7ff fe65 	bl	8000f0c <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	429a      	cmp	r2, r3
 800124c:	d20b      	bcs.n	8001266 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f043 0204 	orr.w	r2, r3, #4
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e03d      	b.n	80012e2 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b02      	cmp	r3, #2
 8001272:	d1dd      	bne.n	8001230 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f06f 0212 	mvn.w	r2, #18
 800127c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d123      	bne.n	80012e0 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800129c:	2b00      	cmp	r3, #0
 800129e:	d11f      	bne.n	80012e0 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d006      	beq.n	80012bc <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d111      	bne.n	80012e0 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d105      	bne.n	80012e0 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f043 0201 	orr.w	r2, r3, #1
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001318:	2b01      	cmp	r3, #1
 800131a:	d101      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x1c>
 800131c:	2302      	movs	r3, #2
 800131e:	e113      	b.n	8001548 <HAL_ADC_ConfigChannel+0x244>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b09      	cmp	r3, #9
 800132e:	d925      	bls.n	800137c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68d9      	ldr	r1, [r3, #12]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	b29b      	uxth	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	3b1e      	subs	r3, #30
 8001346:	2207      	movs	r2, #7
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43da      	mvns	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	400a      	ands	r2, r1
 8001354:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68d9      	ldr	r1, [r3, #12]
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	b29b      	uxth	r3, r3
 8001366:	4618      	mov	r0, r3
 8001368:	4603      	mov	r3, r0
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4403      	add	r3, r0
 800136e:	3b1e      	subs	r3, #30
 8001370:	409a      	lsls	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	e022      	b.n	80013c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6919      	ldr	r1, [r3, #16]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	b29b      	uxth	r3, r3
 8001388:	461a      	mov	r2, r3
 800138a:	4613      	mov	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	2207      	movs	r2, #7
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	400a      	ands	r2, r1
 800139e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6919      	ldr	r1, [r3, #16]
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	4618      	mov	r0, r3
 80013b2:	4603      	mov	r3, r0
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4403      	add	r3, r0
 80013b8:	409a      	lsls	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	430a      	orrs	r2, r1
 80013c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d824      	bhi.n	8001414 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	3b05      	subs	r3, #5
 80013dc:	221f      	movs	r2, #31
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	400a      	ands	r2, r1
 80013ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	3b05      	subs	r3, #5
 8001406:	fa00 f203 	lsl.w	r2, r0, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	430a      	orrs	r2, r1
 8001410:	635a      	str	r2, [r3, #52]	; 0x34
 8001412:	e04c      	b.n	80014ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b0c      	cmp	r3, #12
 800141a:	d824      	bhi.n	8001466 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	3b23      	subs	r3, #35	; 0x23
 800142e:	221f      	movs	r2, #31
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43da      	mvns	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	400a      	ands	r2, r1
 800143c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	b29b      	uxth	r3, r3
 800144a:	4618      	mov	r0, r3
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	3b23      	subs	r3, #35	; 0x23
 8001458:	fa00 f203 	lsl.w	r2, r0, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	631a      	str	r2, [r3, #48]	; 0x30
 8001464:	e023      	b.n	80014ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	3b41      	subs	r3, #65	; 0x41
 8001478:	221f      	movs	r2, #31
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	400a      	ands	r2, r1
 8001486:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	3b41      	subs	r3, #65	; 0x41
 80014a2:	fa00 f203 	lsl.w	r2, r0, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014ae:	4b29      	ldr	r3, [pc, #164]	; (8001554 <HAL_ADC_ConfigChannel+0x250>)
 80014b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a28      	ldr	r2, [pc, #160]	; (8001558 <HAL_ADC_ConfigChannel+0x254>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d10f      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x1d8>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b12      	cmp	r3, #18
 80014c2:	d10b      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <HAL_ADC_ConfigChannel+0x254>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d12b      	bne.n	800153e <HAL_ADC_ConfigChannel+0x23a>
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a1c      	ldr	r2, [pc, #112]	; (800155c <HAL_ADC_ConfigChannel+0x258>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d003      	beq.n	80014f8 <HAL_ADC_ConfigChannel+0x1f4>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b11      	cmp	r3, #17
 80014f6:	d122      	bne.n	800153e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a11      	ldr	r2, [pc, #68]	; (800155c <HAL_ADC_ConfigChannel+0x258>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d111      	bne.n	800153e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_ADC_ConfigChannel+0x25c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a11      	ldr	r2, [pc, #68]	; (8001564 <HAL_ADC_ConfigChannel+0x260>)
 8001520:	fba2 2303 	umull	r2, r3, r2, r3
 8001524:	0c9a      	lsrs	r2, r3, #18
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001530:	e002      	b.n	8001538 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	3b01      	subs	r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f9      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40012300 	.word	0x40012300
 8001558:	40012000 	.word	0x40012000
 800155c:	10000012 	.word	0x10000012
 8001560:	20000008 	.word	0x20000008
 8001564:	431bde83 	.word	0x431bde83

08001568 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001570:	4b79      	ldr	r3, [pc, #484]	; (8001758 <ADC_Init+0x1f0>)
 8001572:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	431a      	orrs	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800159c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6859      	ldr	r1, [r3, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	021a      	lsls	r2, r3, #8
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6859      	ldr	r1, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6899      	ldr	r1, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	4a58      	ldr	r2, [pc, #352]	; (800175c <ADC_Init+0x1f4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d022      	beq.n	8001646 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800160e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6899      	ldr	r1, [r3, #8]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001630:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6899      	ldr	r1, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	e00f      	b.n	8001666 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001654:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001664:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0202 	bic.w	r2, r2, #2
 8001674:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6899      	ldr	r1, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7e1b      	ldrb	r3, [r3, #24]
 8001680:	005a      	lsls	r2, r3, #1
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d01b      	beq.n	80016cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6859      	ldr	r1, [r3, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	3b01      	subs	r3, #1
 80016c0:	035a      	lsls	r2, r3, #13
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	e007      	b.n	80016dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	051a      	lsls	r2, r3, #20
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001710:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6899      	ldr	r1, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800171e:	025a      	lsls	r2, r3, #9
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001736:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6899      	ldr	r1, [r3, #8]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	029a      	lsls	r2, r3, #10
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	609a      	str	r2, [r3, #8]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	40012300 	.word	0x40012300
 800175c:	0f000001 	.word	0x0f000001

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800178c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4907      	ldr	r1, [pc, #28]	; (80017fc <__NVIC_EnableIRQ+0x38>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	; (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	; (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
         );
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018cc:	d301      	bcc.n	80018d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00f      	b.n	80018f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <SysTick_Config+0x40>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018da:	210f      	movs	r1, #15
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018e0:	f7ff ff8e 	bl	8001800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <SysTick_Config+0x40>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ea:	4b04      	ldr	r3, [pc, #16]	; (80018fc <SysTick_Config+0x40>)
 80018ec:	2207      	movs	r2, #7
 80018ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	e000e010 	.word	0xe000e010

08001900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff29 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001928:	f7ff ff3e 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 800192c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	6978      	ldr	r0, [r7, #20]
 8001934:	f7ff ff8e 	bl	8001854 <NVIC_EncodePriority>
 8001938:	4602      	mov	r2, r0
 800193a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff5d 	bl	8001800 <__NVIC_SetPriority>
}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff31 	bl	80017c4 <__NVIC_EnableIRQ>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffa2 	bl	80018bc <SysTick_Config>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	; 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	e165      	b.n	8001c6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019a0:	2201      	movs	r2, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	f040 8154 	bne.w	8001c66 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_Init+0x4a>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b12      	cmp	r3, #18
 80019cc:	d123      	bne.n	8001a16 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	08da      	lsrs	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3208      	adds	r2, #8
 80019d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	220f      	movs	r2, #15
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	691a      	ldr	r2, [r3, #16]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	08da      	lsrs	r2, r3, #3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3208      	adds	r2, #8
 8001a10:	69b9      	ldr	r1, [r7, #24]
 8001a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	2203      	movs	r2, #3
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 0203 	and.w	r2, r3, #3
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d00b      	beq.n	8001a6a <HAL_GPIO_Init+0xe6>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d007      	beq.n	8001a6a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a5e:	2b11      	cmp	r3, #17
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b12      	cmp	r3, #18
 8001a68:	d130      	bne.n	8001acc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	2203      	movs	r2, #3
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 0201 	and.w	r2, r3, #1
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 80ae 	beq.w	8001c66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b5c      	ldr	r3, [pc, #368]	; (8001c80 <HAL_GPIO_Init+0x2fc>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4a5b      	ldr	r2, [pc, #364]	; (8001c80 <HAL_GPIO_Init+0x2fc>)
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b59      	ldr	r3, [pc, #356]	; (8001c80 <HAL_GPIO_Init+0x2fc>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b26:	4a57      	ldr	r2, [pc, #348]	; (8001c84 <HAL_GPIO_Init+0x300>)
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a4e      	ldr	r2, [pc, #312]	; (8001c88 <HAL_GPIO_Init+0x304>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d025      	beq.n	8001b9e <HAL_GPIO_Init+0x21a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a4d      	ldr	r2, [pc, #308]	; (8001c8c <HAL_GPIO_Init+0x308>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d01f      	beq.n	8001b9a <HAL_GPIO_Init+0x216>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a4c      	ldr	r2, [pc, #304]	; (8001c90 <HAL_GPIO_Init+0x30c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d019      	beq.n	8001b96 <HAL_GPIO_Init+0x212>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4b      	ldr	r2, [pc, #300]	; (8001c94 <HAL_GPIO_Init+0x310>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d013      	beq.n	8001b92 <HAL_GPIO_Init+0x20e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a4a      	ldr	r2, [pc, #296]	; (8001c98 <HAL_GPIO_Init+0x314>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d00d      	beq.n	8001b8e <HAL_GPIO_Init+0x20a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a49      	ldr	r2, [pc, #292]	; (8001c9c <HAL_GPIO_Init+0x318>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d007      	beq.n	8001b8a <HAL_GPIO_Init+0x206>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a48      	ldr	r2, [pc, #288]	; (8001ca0 <HAL_GPIO_Init+0x31c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d101      	bne.n	8001b86 <HAL_GPIO_Init+0x202>
 8001b82:	2306      	movs	r3, #6
 8001b84:	e00c      	b.n	8001ba0 <HAL_GPIO_Init+0x21c>
 8001b86:	2307      	movs	r3, #7
 8001b88:	e00a      	b.n	8001ba0 <HAL_GPIO_Init+0x21c>
 8001b8a:	2305      	movs	r3, #5
 8001b8c:	e008      	b.n	8001ba0 <HAL_GPIO_Init+0x21c>
 8001b8e:	2304      	movs	r3, #4
 8001b90:	e006      	b.n	8001ba0 <HAL_GPIO_Init+0x21c>
 8001b92:	2303      	movs	r3, #3
 8001b94:	e004      	b.n	8001ba0 <HAL_GPIO_Init+0x21c>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e002      	b.n	8001ba0 <HAL_GPIO_Init+0x21c>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <HAL_GPIO_Init+0x21c>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	69fa      	ldr	r2, [r7, #28]
 8001ba2:	f002 0203 	and.w	r2, r2, #3
 8001ba6:	0092      	lsls	r2, r2, #2
 8001ba8:	4093      	lsls	r3, r2
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bb0:	4934      	ldr	r1, [pc, #208]	; (8001c84 <HAL_GPIO_Init+0x300>)
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	089b      	lsrs	r3, r3, #2
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bbe:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <HAL_GPIO_Init+0x320>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001be2:	4a30      	ldr	r2, [pc, #192]	; (8001ca4 <HAL_GPIO_Init+0x320>)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001be8:	4b2e      	ldr	r3, [pc, #184]	; (8001ca4 <HAL_GPIO_Init+0x320>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c0c:	4a25      	ldr	r2, [pc, #148]	; (8001ca4 <HAL_GPIO_Init+0x320>)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c12:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <HAL_GPIO_Init+0x320>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c36:	4a1b      	ldr	r2, [pc, #108]	; (8001ca4 <HAL_GPIO_Init+0x320>)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c3c:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <HAL_GPIO_Init+0x320>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c60:	4a10      	ldr	r2, [pc, #64]	; (8001ca4 <HAL_GPIO_Init+0x320>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	61fb      	str	r3, [r7, #28]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	2b0f      	cmp	r3, #15
 8001c70:	f67f ae96 	bls.w	80019a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c74:	bf00      	nop
 8001c76:	3724      	adds	r7, #36	; 0x24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40013800 	.word	0x40013800
 8001c88:	40020000 	.word	0x40020000
 8001c8c:	40020400 	.word	0x40020400
 8001c90:	40020800 	.word	0x40020800
 8001c94:	40020c00 	.word	0x40020c00
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40021400 	.word	0x40021400
 8001ca0:	40021800 	.word	0x40021800
 8001ca4:	40013c00 	.word	0x40013c00

08001ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	807b      	strh	r3, [r7, #2]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cb8:	787b      	ldrb	r3, [r7, #1]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cbe:	887a      	ldrh	r2, [r7, #2]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cc4:	e003      	b.n	8001cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cc6:	887b      	ldrh	r3, [r7, #2]
 8001cc8:	041a      	lsls	r2, r3, #16
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	619a      	str	r2, [r3, #24]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e10f      	b.n	8001f0e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d106      	bne.n	8001d08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f001 ffba 	bl	8003c7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2224      	movs	r2, #36	; 0x24
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0201 	bic.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d20:	f000 f9f2 	bl	8002108 <HAL_RCC_GetPCLK1Freq>
 8001d24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4a7b      	ldr	r2, [pc, #492]	; (8001f18 <HAL_I2C_Init+0x23c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d807      	bhi.n	8001d40 <HAL_I2C_Init+0x64>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4a7a      	ldr	r2, [pc, #488]	; (8001f1c <HAL_I2C_Init+0x240>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	bf94      	ite	ls
 8001d38:	2301      	movls	r3, #1
 8001d3a:	2300      	movhi	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	e006      	b.n	8001d4e <HAL_I2C_Init+0x72>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4a77      	ldr	r2, [pc, #476]	; (8001f20 <HAL_I2C_Init+0x244>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	bf94      	ite	ls
 8001d48:	2301      	movls	r3, #1
 8001d4a:	2300      	movhi	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0db      	b.n	8001f0e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4a72      	ldr	r2, [pc, #456]	; (8001f24 <HAL_I2C_Init+0x248>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	0c9b      	lsrs	r3, r3, #18
 8001d60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68ba      	ldr	r2, [r7, #8]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	4a64      	ldr	r2, [pc, #400]	; (8001f18 <HAL_I2C_Init+0x23c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d802      	bhi.n	8001d90 <HAL_I2C_Init+0xb4>
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	e009      	b.n	8001da4 <HAL_I2C_Init+0xc8>
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d96:	fb02 f303 	mul.w	r3, r2, r3
 8001d9a:	4a63      	ldr	r2, [pc, #396]	; (8001f28 <HAL_I2C_Init+0x24c>)
 8001d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001da0:	099b      	lsrs	r3, r3, #6
 8001da2:	3301      	adds	r3, #1
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	430b      	orrs	r3, r1
 8001daa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001db6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	4956      	ldr	r1, [pc, #344]	; (8001f18 <HAL_I2C_Init+0x23c>)
 8001dc0:	428b      	cmp	r3, r1
 8001dc2:	d80d      	bhi.n	8001de0 <HAL_I2C_Init+0x104>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1e59      	subs	r1, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	bf38      	it	cc
 8001ddc:	2304      	movcc	r3, #4
 8001dde:	e04f      	b.n	8001e80 <HAL_I2C_Init+0x1a4>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d111      	bne.n	8001e0c <HAL_I2C_Init+0x130>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1e58      	subs	r0, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	440b      	add	r3, r1
 8001df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf0c      	ite	eq
 8001e04:	2301      	moveq	r3, #1
 8001e06:	2300      	movne	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	e012      	b.n	8001e32 <HAL_I2C_Init+0x156>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1e58      	subs	r0, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6859      	ldr	r1, [r3, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	0099      	lsls	r1, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_I2C_Init+0x15e>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e022      	b.n	8001e80 <HAL_I2C_Init+0x1a4>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10e      	bne.n	8001e60 <HAL_I2C_Init+0x184>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1e58      	subs	r0, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6859      	ldr	r1, [r3, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	440b      	add	r3, r1
 8001e50:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e54:	3301      	adds	r3, #1
 8001e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e5e:	e00f      	b.n	8001e80 <HAL_I2C_Init+0x1a4>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	1e58      	subs	r0, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6859      	ldr	r1, [r3, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	0099      	lsls	r1, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e76:	3301      	adds	r3, #1
 8001e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	6809      	ldr	r1, [r1, #0]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69da      	ldr	r2, [r3, #28]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001eae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6911      	ldr	r1, [r2, #16]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68d2      	ldr	r2, [r2, #12]
 8001eba:	4311      	orrs	r1, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	000186a0 	.word	0x000186a0
 8001f1c:	001e847f 	.word	0x001e847f
 8001f20:	003d08ff 	.word	0x003d08ff
 8001f24:	431bde83 	.word	0x431bde83
 8001f28:	10624dd3 	.word	0x10624dd3

08001f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0ca      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f40:	4b67      	ldr	r3, [pc, #412]	; (80020e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 030f 	and.w	r3, r3, #15
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d90c      	bls.n	8001f68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4e:	4b64      	ldr	r3, [pc, #400]	; (80020e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b62      	ldr	r3, [pc, #392]	; (80020e0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0b6      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d020      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f80:	4b58      	ldr	r3, [pc, #352]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4a57      	ldr	r2, [pc, #348]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f98:	4b52      	ldr	r3, [pc, #328]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4a51      	ldr	r2, [pc, #324]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa4:	4b4f      	ldr	r3, [pc, #316]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	494c      	ldr	r1, [pc, #304]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d044      	beq.n	800204c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	4b46      	ldr	r3, [pc, #280]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d119      	bne.n	800200a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e07d      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fea:	4b3e      	ldr	r3, [pc, #248]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e06d      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffa:	4b3a      	ldr	r3, [pc, #232]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e065      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800200a:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f023 0203 	bic.w	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4933      	ldr	r1, [pc, #204]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002018:	4313      	orrs	r3, r2
 800201a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800201c:	f7fe ff76 	bl	8000f0c <HAL_GetTick>
 8002020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002022:	e00a      	b.n	800203a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002024:	f7fe ff72 	bl	8000f0c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e04d      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 020c 	and.w	r2, r3, #12
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	429a      	cmp	r2, r3
 800204a:	d1eb      	bne.n	8002024 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800204c:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_RCC_ClockConfig+0x1b4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 030f 	and.w	r3, r3, #15
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d20c      	bcs.n	8002074 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <HAL_RCC_ClockConfig+0x1b4>)
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b1f      	ldr	r3, [pc, #124]	; (80020e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e030      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002080:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4915      	ldr	r1, [pc, #84]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	490d      	ldr	r1, [pc, #52]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020b2:	f000 f83d 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80020b6:	4601      	mov	r1, r0
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	4a09      	ldr	r2, [pc, #36]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020c4:	5cd3      	ldrb	r3, [r2, r3]
 80020c6:	fa21 f303 	lsr.w	r3, r1, r3
 80020ca:	4a08      	ldr	r2, [pc, #32]	; (80020ec <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80020ce:	2000      	movs	r0, #0
 80020d0:	f7fe fed8 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023c00 	.word	0x40023c00
 80020e4:	40023800 	.word	0x40023800
 80020e8:	0800682c 	.word	0x0800682c
 80020ec:	20000008 	.word	0x20000008

080020f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <HAL_RCC_GetHCLKFreq+0x14>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	20000008 	.word	0x20000008

08002108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800210c:	f7ff fff0 	bl	80020f0 <HAL_RCC_GetHCLKFreq>
 8002110:	4601      	mov	r1, r0
 8002112:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	0a9b      	lsrs	r3, r3, #10
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	4a03      	ldr	r2, [pc, #12]	; (800212c <HAL_RCC_GetPCLK1Freq+0x24>)
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002124:	4618      	mov	r0, r3
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40023800 	.word	0x40023800
 800212c:	0800683c 	.word	0x0800683c

08002130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800214a:	4b9f      	ldr	r3, [pc, #636]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x298>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b0c      	cmp	r3, #12
 8002154:	f200 8130 	bhi.w	80023b8 <HAL_RCC_GetSysClockFreq+0x288>
 8002158:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <HAL_RCC_GetSysClockFreq+0x30>)
 800215a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215e:	bf00      	nop
 8002160:	08002195 	.word	0x08002195
 8002164:	080023b9 	.word	0x080023b9
 8002168:	080023b9 	.word	0x080023b9
 800216c:	080023b9 	.word	0x080023b9
 8002170:	0800219b 	.word	0x0800219b
 8002174:	080023b9 	.word	0x080023b9
 8002178:	080023b9 	.word	0x080023b9
 800217c:	080023b9 	.word	0x080023b9
 8002180:	080021a1 	.word	0x080021a1
 8002184:	080023b9 	.word	0x080023b9
 8002188:	080023b9 	.word	0x080023b9
 800218c:	080023b9 	.word	0x080023b9
 8002190:	080022af 	.word	0x080022af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002194:	4b8d      	ldr	r3, [pc, #564]	; (80023cc <HAL_RCC_GetSysClockFreq+0x29c>)
 8002196:	613b      	str	r3, [r7, #16]
       break;
 8002198:	e111      	b.n	80023be <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800219a:	4b8d      	ldr	r3, [pc, #564]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800219c:	613b      	str	r3, [r7, #16]
      break;
 800219e:	e10e      	b.n	80023be <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021a0:	4b89      	ldr	r3, [pc, #548]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x298>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021a8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021aa:	4b87      	ldr	r3, [pc, #540]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x298>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d023      	beq.n	80021fe <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b6:	4b84      	ldr	r3, [pc, #528]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x298>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	099b      	lsrs	r3, r3, #6
 80021bc:	f04f 0400 	mov.w	r4, #0
 80021c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	ea03 0501 	and.w	r5, r3, r1
 80021cc:	ea04 0602 	and.w	r6, r4, r2
 80021d0:	4a7f      	ldr	r2, [pc, #508]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80021d2:	fb02 f106 	mul.w	r1, r2, r6
 80021d6:	2200      	movs	r2, #0
 80021d8:	fb02 f205 	mul.w	r2, r2, r5
 80021dc:	440a      	add	r2, r1
 80021de:	497c      	ldr	r1, [pc, #496]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80021e0:	fba5 0101 	umull	r0, r1, r5, r1
 80021e4:	1853      	adds	r3, r2, r1
 80021e6:	4619      	mov	r1, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f04f 0400 	mov.w	r4, #0
 80021ee:	461a      	mov	r2, r3
 80021f0:	4623      	mov	r3, r4
 80021f2:	f7fe fca5 	bl	8000b40 <__aeabi_uldivmod>
 80021f6:	4603      	mov	r3, r0
 80021f8:	460c      	mov	r4, r1
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	e049      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fe:	4b72      	ldr	r3, [pc, #456]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x298>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	099b      	lsrs	r3, r3, #6
 8002204:	f04f 0400 	mov.w	r4, #0
 8002208:	f240 11ff 	movw	r1, #511	; 0x1ff
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	ea03 0501 	and.w	r5, r3, r1
 8002214:	ea04 0602 	and.w	r6, r4, r2
 8002218:	4629      	mov	r1, r5
 800221a:	4632      	mov	r2, r6
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	f04f 0400 	mov.w	r4, #0
 8002224:	0154      	lsls	r4, r2, #5
 8002226:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800222a:	014b      	lsls	r3, r1, #5
 800222c:	4619      	mov	r1, r3
 800222e:	4622      	mov	r2, r4
 8002230:	1b49      	subs	r1, r1, r5
 8002232:	eb62 0206 	sbc.w	r2, r2, r6
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	f04f 0400 	mov.w	r4, #0
 800223e:	0194      	lsls	r4, r2, #6
 8002240:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002244:	018b      	lsls	r3, r1, #6
 8002246:	1a5b      	subs	r3, r3, r1
 8002248:	eb64 0402 	sbc.w	r4, r4, r2
 800224c:	f04f 0100 	mov.w	r1, #0
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	00e2      	lsls	r2, r4, #3
 8002256:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800225a:	00d9      	lsls	r1, r3, #3
 800225c:	460b      	mov	r3, r1
 800225e:	4614      	mov	r4, r2
 8002260:	195b      	adds	r3, r3, r5
 8002262:	eb44 0406 	adc.w	r4, r4, r6
 8002266:	f04f 0100 	mov.w	r1, #0
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	02a2      	lsls	r2, r4, #10
 8002270:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002274:	0299      	lsls	r1, r3, #10
 8002276:	460b      	mov	r3, r1
 8002278:	4614      	mov	r4, r2
 800227a:	4618      	mov	r0, r3
 800227c:	4621      	mov	r1, r4
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f04f 0400 	mov.w	r4, #0
 8002284:	461a      	mov	r2, r3
 8002286:	4623      	mov	r3, r4
 8002288:	f7fe fc5a 	bl	8000b40 <__aeabi_uldivmod>
 800228c:	4603      	mov	r3, r0
 800228e:	460c      	mov	r4, r1
 8002290:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002292:	4b4d      	ldr	r3, [pc, #308]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x298>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	0c1b      	lsrs	r3, r3, #16
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	3301      	adds	r3, #1
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022aa:	613b      	str	r3, [r7, #16]
      break;
 80022ac:	e087      	b.n	80023be <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022ae:	4b46      	ldr	r3, [pc, #280]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x298>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022b6:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022b8:	4b43      	ldr	r3, [pc, #268]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x298>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d023      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c4:	4b40      	ldr	r3, [pc, #256]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x298>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	099b      	lsrs	r3, r3, #6
 80022ca:	f04f 0400 	mov.w	r4, #0
 80022ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	ea03 0501 	and.w	r5, r3, r1
 80022da:	ea04 0602 	and.w	r6, r4, r2
 80022de:	4a3c      	ldr	r2, [pc, #240]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80022e0:	fb02 f106 	mul.w	r1, r2, r6
 80022e4:	2200      	movs	r2, #0
 80022e6:	fb02 f205 	mul.w	r2, r2, r5
 80022ea:	440a      	add	r2, r1
 80022ec:	4938      	ldr	r1, [pc, #224]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80022ee:	fba5 0101 	umull	r0, r1, r5, r1
 80022f2:	1853      	adds	r3, r2, r1
 80022f4:	4619      	mov	r1, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f04f 0400 	mov.w	r4, #0
 80022fc:	461a      	mov	r2, r3
 80022fe:	4623      	mov	r3, r4
 8002300:	f7fe fc1e 	bl	8000b40 <__aeabi_uldivmod>
 8002304:	4603      	mov	r3, r0
 8002306:	460c      	mov	r4, r1
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e049      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800230c:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x298>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	099b      	lsrs	r3, r3, #6
 8002312:	f04f 0400 	mov.w	r4, #0
 8002316:	f240 11ff 	movw	r1, #511	; 0x1ff
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	ea03 0501 	and.w	r5, r3, r1
 8002322:	ea04 0602 	and.w	r6, r4, r2
 8002326:	4629      	mov	r1, r5
 8002328:	4632      	mov	r2, r6
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	f04f 0400 	mov.w	r4, #0
 8002332:	0154      	lsls	r4, r2, #5
 8002334:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002338:	014b      	lsls	r3, r1, #5
 800233a:	4619      	mov	r1, r3
 800233c:	4622      	mov	r2, r4
 800233e:	1b49      	subs	r1, r1, r5
 8002340:	eb62 0206 	sbc.w	r2, r2, r6
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	f04f 0400 	mov.w	r4, #0
 800234c:	0194      	lsls	r4, r2, #6
 800234e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002352:	018b      	lsls	r3, r1, #6
 8002354:	1a5b      	subs	r3, r3, r1
 8002356:	eb64 0402 	sbc.w	r4, r4, r2
 800235a:	f04f 0100 	mov.w	r1, #0
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	00e2      	lsls	r2, r4, #3
 8002364:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002368:	00d9      	lsls	r1, r3, #3
 800236a:	460b      	mov	r3, r1
 800236c:	4614      	mov	r4, r2
 800236e:	195b      	adds	r3, r3, r5
 8002370:	eb44 0406 	adc.w	r4, r4, r6
 8002374:	f04f 0100 	mov.w	r1, #0
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	02a2      	lsls	r2, r4, #10
 800237e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002382:	0299      	lsls	r1, r3, #10
 8002384:	460b      	mov	r3, r1
 8002386:	4614      	mov	r4, r2
 8002388:	4618      	mov	r0, r3
 800238a:	4621      	mov	r1, r4
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f04f 0400 	mov.w	r4, #0
 8002392:	461a      	mov	r2, r3
 8002394:	4623      	mov	r3, r4
 8002396:	f7fe fbd3 	bl	8000b40 <__aeabi_uldivmod>
 800239a:	4603      	mov	r3, r0
 800239c:	460c      	mov	r4, r1
 800239e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x298>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	0f1b      	lsrs	r3, r3, #28
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	613b      	str	r3, [r7, #16]
      break;
 80023b6:	e002      	b.n	80023be <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <HAL_RCC_GetSysClockFreq+0x29c>)
 80023ba:	613b      	str	r3, [r7, #16]
      break;
 80023bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023be:	693b      	ldr	r3, [r7, #16]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	371c      	adds	r7, #28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023c8:	40023800 	.word	0x40023800
 80023cc:	00f42400 	.word	0x00f42400
 80023d0:	017d7840 	.word	0x017d7840

080023d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 8083 	beq.w	80024f4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023ee:	4b95      	ldr	r3, [pc, #596]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d019      	beq.n	800242e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023fa:	4b92      	ldr	r3, [pc, #584]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002402:	2b08      	cmp	r3, #8
 8002404:	d106      	bne.n	8002414 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002406:	4b8f      	ldr	r3, [pc, #572]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002412:	d00c      	beq.n	800242e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002414:	4b8b      	ldr	r3, [pc, #556]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800241c:	2b0c      	cmp	r3, #12
 800241e:	d112      	bne.n	8002446 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002420:	4b88      	ldr	r3, [pc, #544]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800242c:	d10b      	bne.n	8002446 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242e:	4b85      	ldr	r3, [pc, #532]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d05b      	beq.n	80024f2 <HAL_RCC_OscConfig+0x11e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d157      	bne.n	80024f2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e216      	b.n	8002874 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800244e:	d106      	bne.n	800245e <HAL_RCC_OscConfig+0x8a>
 8002450:	4b7c      	ldr	r3, [pc, #496]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a7b      	ldr	r2, [pc, #492]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	e01d      	b.n	800249a <HAL_RCC_OscConfig+0xc6>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002466:	d10c      	bne.n	8002482 <HAL_RCC_OscConfig+0xae>
 8002468:	4b76      	ldr	r3, [pc, #472]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a75      	ldr	r2, [pc, #468]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 800246e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b73      	ldr	r3, [pc, #460]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a72      	ldr	r2, [pc, #456]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 800247a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	e00b      	b.n	800249a <HAL_RCC_OscConfig+0xc6>
 8002482:	4b70      	ldr	r3, [pc, #448]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a6f      	ldr	r2, [pc, #444]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	4b6d      	ldr	r3, [pc, #436]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a6c      	ldr	r2, [pc, #432]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002494:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002498:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d013      	beq.n	80024ca <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a2:	f7fe fd33 	bl	8000f0c <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024aa:	f7fe fd2f 	bl	8000f0c <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b64      	cmp	r3, #100	; 0x64
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e1db      	b.n	8002874 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024bc:	4b61      	ldr	r3, [pc, #388]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0xd6>
 80024c8:	e014      	b.n	80024f4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ca:	f7fe fd1f 	bl	8000f0c <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d2:	f7fe fd1b 	bl	8000f0c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b64      	cmp	r3, #100	; 0x64
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e1c7      	b.n	8002874 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e4:	4b57      	ldr	r3, [pc, #348]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0xfe>
 80024f0:	e000      	b.n	80024f4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d06f      	beq.n	80025e0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002500:	4b50      	ldr	r3, [pc, #320]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b00      	cmp	r3, #0
 800250a:	d017      	beq.n	800253c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800250c:	4b4d      	ldr	r3, [pc, #308]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002514:	2b08      	cmp	r3, #8
 8002516:	d105      	bne.n	8002524 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002518:	4b4a      	ldr	r3, [pc, #296]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00b      	beq.n	800253c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002524:	4b47      	ldr	r3, [pc, #284]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800252c:	2b0c      	cmp	r3, #12
 800252e:	d11c      	bne.n	800256a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002530:	4b44      	ldr	r3, [pc, #272]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d116      	bne.n	800256a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253c:	4b41      	ldr	r3, [pc, #260]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_RCC_OscConfig+0x180>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d001      	beq.n	8002554 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e18f      	b.n	8002874 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002554:	4b3b      	ldr	r3, [pc, #236]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4938      	ldr	r1, [pc, #224]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002564:	4313      	orrs	r3, r2
 8002566:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002568:	e03a      	b.n	80025e0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d020      	beq.n	80025b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002572:	4b35      	ldr	r3, [pc, #212]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 8002574:	2201      	movs	r2, #1
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe fcc8 	bl	8000f0c <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002580:	f7fe fcc4 	bl	8000f0c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e170      	b.n	8002874 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002592:	4b2c      	ldr	r3, [pc, #176]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259e:	4b29      	ldr	r3, [pc, #164]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4925      	ldr	r1, [pc, #148]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	600b      	str	r3, [r1, #0]
 80025b2:	e015      	b.n	80025e0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025b4:	4b24      	ldr	r3, [pc, #144]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7fe fca7 	bl	8000f0c <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025c2:	f7fe fca3 	bl	8000f0c <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e14f      	b.n	8002874 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f0      	bne.n	80025c2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d037      	beq.n	800265c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d016      	beq.n	8002622 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025f4:	4b15      	ldr	r3, [pc, #84]	; (800264c <HAL_RCC_OscConfig+0x278>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fa:	f7fe fc87 	bl	8000f0c <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002602:	f7fe fc83 	bl	8000f0c <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e12f      	b.n	8002874 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x22e>
 8002620:	e01c      	b.n	800265c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_RCC_OscConfig+0x278>)
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7fe fc70 	bl	8000f0c <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262e:	e00f      	b.n	8002650 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002630:	f7fe fc6c 	bl	8000f0c <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d908      	bls.n	8002650 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e118      	b.n	8002874 <HAL_RCC_OscConfig+0x4a0>
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800
 8002648:	42470000 	.word	0x42470000
 800264c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002650:	4b8a      	ldr	r3, [pc, #552]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 8002652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1e9      	bne.n	8002630 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 8097 	beq.w	8002798 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266a:	2300      	movs	r3, #0
 800266c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266e:	4b83      	ldr	r3, [pc, #524]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10f      	bne.n	800269a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	4b7f      	ldr	r3, [pc, #508]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	4a7e      	ldr	r2, [pc, #504]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 8002684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002688:	6413      	str	r3, [r2, #64]	; 0x40
 800268a:	4b7c      	ldr	r3, [pc, #496]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002696:	2301      	movs	r3, #1
 8002698:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269a:	4b79      	ldr	r3, [pc, #484]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d118      	bne.n	80026d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a6:	4b76      	ldr	r3, [pc, #472]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a75      	ldr	r2, [pc, #468]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 80026ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b2:	f7fe fc2b 	bl	8000f0c <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ba:	f7fe fc27 	bl	8000f0c <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e0d3      	b.n	8002874 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026cc:	4b6c      	ldr	r3, [pc, #432]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d106      	bne.n	80026ee <HAL_RCC_OscConfig+0x31a>
 80026e0:	4b66      	ldr	r3, [pc, #408]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 80026e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e4:	4a65      	ldr	r2, [pc, #404]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	6713      	str	r3, [r2, #112]	; 0x70
 80026ec:	e01c      	b.n	8002728 <HAL_RCC_OscConfig+0x354>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b05      	cmp	r3, #5
 80026f4:	d10c      	bne.n	8002710 <HAL_RCC_OscConfig+0x33c>
 80026f6:	4b61      	ldr	r3, [pc, #388]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fa:	4a60      	ldr	r2, [pc, #384]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 80026fc:	f043 0304 	orr.w	r3, r3, #4
 8002700:	6713      	str	r3, [r2, #112]	; 0x70
 8002702:	4b5e      	ldr	r3, [pc, #376]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002706:	4a5d      	ldr	r2, [pc, #372]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6713      	str	r3, [r2, #112]	; 0x70
 800270e:	e00b      	b.n	8002728 <HAL_RCC_OscConfig+0x354>
 8002710:	4b5a      	ldr	r3, [pc, #360]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	4a59      	ldr	r2, [pc, #356]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 8002716:	f023 0301 	bic.w	r3, r3, #1
 800271a:	6713      	str	r3, [r2, #112]	; 0x70
 800271c:	4b57      	ldr	r3, [pc, #348]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 800271e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002720:	4a56      	ldr	r2, [pc, #344]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 8002722:	f023 0304 	bic.w	r3, r3, #4
 8002726:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d015      	beq.n	800275c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002730:	f7fe fbec 	bl	8000f0c <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002736:	e00a      	b.n	800274e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002738:	f7fe fbe8 	bl	8000f0c <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	; 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e092      	b.n	8002874 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274e:	4b4b      	ldr	r3, [pc, #300]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0ee      	beq.n	8002738 <HAL_RCC_OscConfig+0x364>
 800275a:	e014      	b.n	8002786 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7fe fbd6 	bl	8000f0c <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002762:	e00a      	b.n	800277a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002764:	f7fe fbd2 	bl	8000f0c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e07c      	b.n	8002874 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277a:	4b40      	ldr	r3, [pc, #256]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 800277c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1ee      	bne.n	8002764 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002786:	7dfb      	ldrb	r3, [r7, #23]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278c:	4b3b      	ldr	r3, [pc, #236]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	4a3a      	ldr	r2, [pc, #232]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 8002792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002796:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d068      	beq.n	8002872 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027a0:	4b36      	ldr	r3, [pc, #216]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 030c 	and.w	r3, r3, #12
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d060      	beq.n	800286e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d145      	bne.n	8002840 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b4:	4b33      	ldr	r3, [pc, #204]	; (8002884 <HAL_RCC_OscConfig+0x4b0>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ba:	f7fe fba7 	bl	8000f0c <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c2:	f7fe fba3 	bl	8000f0c <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e04f      	b.n	8002874 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d4:	4b29      	ldr	r3, [pc, #164]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f0      	bne.n	80027c2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69da      	ldr	r2, [r3, #28]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	019b      	lsls	r3, r3, #6
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f6:	085b      	lsrs	r3, r3, #1
 80027f8:	3b01      	subs	r3, #1
 80027fa:	041b      	lsls	r3, r3, #16
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	061b      	lsls	r3, r3, #24
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	071b      	lsls	r3, r3, #28
 800280c:	491b      	ldr	r1, [pc, #108]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002812:	4b1c      	ldr	r3, [pc, #112]	; (8002884 <HAL_RCC_OscConfig+0x4b0>)
 8002814:	2201      	movs	r2, #1
 8002816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7fe fb78 	bl	8000f0c <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002820:	f7fe fb74 	bl	8000f0c <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e020      	b.n	8002874 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002832:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x44c>
 800283e:	e018      	b.n	8002872 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002840:	4b10      	ldr	r3, [pc, #64]	; (8002884 <HAL_RCC_OscConfig+0x4b0>)
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002846:	f7fe fb61 	bl	8000f0c <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800284e:	f7fe fb5d 	bl	8000f0c <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e009      	b.n	8002874 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_RCC_OscConfig+0x4a8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f0      	bne.n	800284e <HAL_RCC_OscConfig+0x47a>
 800286c:	e001      	b.n	8002872 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40023800 	.word	0x40023800
 8002880:	40007000 	.word	0x40007000
 8002884:	42470060 	.word	0x42470060

08002888 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e056      	b.n	8002948 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d106      	bne.n	80028ba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f001 fe31 	bl	800451c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2202      	movs	r2, #2
 80028be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	ea42 0103 	orr.w	r1, r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	0c1b      	lsrs	r3, r3, #16
 8002918:	f003 0104 	and.w	r1, r3, #4
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002936:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	4613      	mov	r3, r2
 800295e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_SPI_Transmit+0x22>
 800296e:	2302      	movs	r3, #2
 8002970:	e11e      	b.n	8002bb0 <HAL_SPI_Transmit+0x260>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800297a:	f7fe fac7 	bl	8000f0c <HAL_GetTick>
 800297e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d002      	beq.n	8002996 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002990:	2302      	movs	r3, #2
 8002992:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002994:	e103      	b.n	8002b9e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <HAL_SPI_Transmit+0x52>
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d102      	bne.n	80029a8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029a6:	e0fa      	b.n	8002b9e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2203      	movs	r2, #3
 80029ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	88fa      	ldrh	r2, [r7, #6]
 80029c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	88fa      	ldrh	r2, [r7, #6]
 80029c6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ee:	d107      	bne.n	8002a00 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	2b40      	cmp	r3, #64	; 0x40
 8002a0c:	d007      	beq.n	8002a1e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a26:	d14b      	bne.n	8002ac0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <HAL_SPI_Transmit+0xe6>
 8002a30:	8afb      	ldrh	r3, [r7, #22]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d13e      	bne.n	8002ab4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	881a      	ldrh	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	1c9a      	adds	r2, r3, #2
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a5a:	e02b      	b.n	8002ab4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d112      	bne.n	8002a90 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	881a      	ldrh	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	1c9a      	adds	r2, r3, #2
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a8e:	e011      	b.n	8002ab4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a90:	f7fe fa3c 	bl	8000f0c <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d803      	bhi.n	8002aa8 <HAL_SPI_Transmit+0x158>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002aa6:	d102      	bne.n	8002aae <HAL_SPI_Transmit+0x15e>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d102      	bne.n	8002ab4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ab2:	e074      	b.n	8002b9e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1ce      	bne.n	8002a5c <HAL_SPI_Transmit+0x10c>
 8002abe:	e04c      	b.n	8002b5a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_SPI_Transmit+0x17e>
 8002ac8:	8afb      	ldrh	r3, [r7, #22]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d140      	bne.n	8002b50 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	330c      	adds	r3, #12
 8002ad8:	7812      	ldrb	r2, [r2, #0]
 8002ada:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002af4:	e02c      	b.n	8002b50 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d113      	bne.n	8002b2c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	330c      	adds	r3, #12
 8002b0e:	7812      	ldrb	r2, [r2, #0]
 8002b10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b2a:	e011      	b.n	8002b50 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b2c:	f7fe f9ee 	bl	8000f0c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d803      	bhi.n	8002b44 <HAL_SPI_Transmit+0x1f4>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b42:	d102      	bne.n	8002b4a <HAL_SPI_Transmit+0x1fa>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d102      	bne.n	8002b50 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b4e:	e026      	b.n	8002b9e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1cd      	bne.n	8002af6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	6839      	ldr	r1, [r7, #0]
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f894 	bl	8002c8c <SPI_EndRxTxTransaction>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10a      	bne.n	8002b8e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b78:	2300      	movs	r3, #0
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	77fb      	strb	r3, [r7, #31]
 8002b9a:	e000      	b.n	8002b9e <HAL_SPI_Transmit+0x24e>
  }

error:
 8002b9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bae:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3720      	adds	r7, #32
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	603b      	str	r3, [r7, #0]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bc8:	e04c      	b.n	8002c64 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bd0:	d048      	beq.n	8002c64 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002bd2:	f7fe f99b 	bl	8000f0c <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d902      	bls.n	8002be8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d13d      	bne.n	8002c64 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bf6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c00:	d111      	bne.n	8002c26 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c0a:	d004      	beq.n	8002c16 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c14:	d107      	bne.n	8002c26 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c2e:	d10f      	bne.n	8002c50 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e00f      	b.n	8002c84 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	bf0c      	ite	eq
 8002c74:	2301      	moveq	r3, #1
 8002c76:	2300      	movne	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d1a3      	bne.n	8002bca <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c98:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <SPI_EndRxTxTransaction+0x7c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1b      	ldr	r2, [pc, #108]	; (8002d0c <SPI_EndRxTxTransaction+0x80>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	0d5b      	lsrs	r3, r3, #21
 8002ca4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ca8:	fb02 f303 	mul.w	r3, r2, r3
 8002cac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cb6:	d112      	bne.n	8002cde <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2180      	movs	r1, #128	; 0x80
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f7ff ff78 	bl	8002bb8 <SPI_WaitFlagStateUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d016      	beq.n	8002cfc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd2:	f043 0220 	orr.w	r2, r3, #32
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e00f      	b.n	8002cfe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00a      	beq.n	8002cfa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	2b80      	cmp	r3, #128	; 0x80
 8002cf6:	d0f2      	beq.n	8002cde <SPI_EndRxTxTransaction+0x52>
 8002cf8:	e000      	b.n	8002cfc <SPI_EndRxTxTransaction+0x70>
        break;
 8002cfa:	bf00      	nop
  }

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000008 	.word	0x20000008
 8002d0c:	165e9f81 	.word	0x165e9f81

08002d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e01d      	b.n	8002d5e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f001 fd9e 	bl	8004878 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4610      	mov	r0, r2
 8002d50:	f000 fa1e 	bl	8003190 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b085      	sub	sp, #20
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 0201 	orr.w	r2, r2, #1
 8002d7c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b06      	cmp	r3, #6
 8002d8e:	d007      	beq.n	8002da0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0201 	orr.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e01d      	b.n	8002dfc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d106      	bne.n	8002dda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f815 	bl	8002e04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3304      	adds	r3, #4
 8002dea:	4619      	mov	r1, r3
 8002dec:	4610      	mov	r0, r2
 8002dee:	f000 f9cf 	bl	8003190 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2201      	movs	r2, #1
 8002e28:	6839      	ldr	r1, [r7, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fc9a 	bl	8003764 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a15      	ldr	r2, [pc, #84]	; (8002e8c <HAL_TIM_PWM_Start+0x74>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d004      	beq.n	8002e44 <HAL_TIM_PWM_Start+0x2c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a14      	ldr	r2, [pc, #80]	; (8002e90 <HAL_TIM_PWM_Start+0x78>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d101      	bne.n	8002e48 <HAL_TIM_PWM_Start+0x30>
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <HAL_TIM_PWM_Start+0x32>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2b06      	cmp	r3, #6
 8002e6e:	d007      	beq.n	8002e80 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40010000 	.word	0x40010000
 8002e90:	40010400 	.word	0x40010400

08002e94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e0b4      	b.n	8003018 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b0c      	cmp	r3, #12
 8002ec2:	f200 809f 	bhi.w	8003004 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002ec6:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ecc:	08002f01 	.word	0x08002f01
 8002ed0:	08003005 	.word	0x08003005
 8002ed4:	08003005 	.word	0x08003005
 8002ed8:	08003005 	.word	0x08003005
 8002edc:	08002f41 	.word	0x08002f41
 8002ee0:	08003005 	.word	0x08003005
 8002ee4:	08003005 	.word	0x08003005
 8002ee8:	08003005 	.word	0x08003005
 8002eec:	08002f83 	.word	0x08002f83
 8002ef0:	08003005 	.word	0x08003005
 8002ef4:	08003005 	.word	0x08003005
 8002ef8:	08003005 	.word	0x08003005
 8002efc:	08002fc3 	.word	0x08002fc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 f9e2 	bl	80032d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0208 	orr.w	r2, r2, #8
 8002f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0204 	bic.w	r2, r2, #4
 8002f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6999      	ldr	r1, [r3, #24]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	619a      	str	r2, [r3, #24]
      break;
 8002f3e:	e062      	b.n	8003006 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68b9      	ldr	r1, [r7, #8]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fa32 	bl	80033b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699a      	ldr	r2, [r3, #24]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699a      	ldr	r2, [r3, #24]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6999      	ldr	r1, [r3, #24]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	021a      	lsls	r2, r3, #8
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	619a      	str	r2, [r3, #24]
      break;
 8002f80:	e041      	b.n	8003006 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 fa87 	bl	800349c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69da      	ldr	r2, [r3, #28]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0208 	orr.w	r2, r2, #8
 8002f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69da      	ldr	r2, [r3, #28]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0204 	bic.w	r2, r2, #4
 8002fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69d9      	ldr	r1, [r3, #28]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	61da      	str	r2, [r3, #28]
      break;
 8002fc0:	e021      	b.n	8003006 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68b9      	ldr	r1, [r7, #8]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 fadb 	bl	8003584 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69da      	ldr	r2, [r3, #28]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69da      	ldr	r2, [r3, #28]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69d9      	ldr	r1, [r3, #28]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	021a      	lsls	r2, r3, #8
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	61da      	str	r2, [r3, #28]
      break;
 8003002:	e000      	b.n	8003006 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003004:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_TIM_ConfigClockSource+0x18>
 8003034:	2302      	movs	r3, #2
 8003036:	e0a6      	b.n	8003186 <HAL_TIM_ConfigClockSource+0x166>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003056:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800305e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b40      	cmp	r3, #64	; 0x40
 800306e:	d067      	beq.n	8003140 <HAL_TIM_ConfigClockSource+0x120>
 8003070:	2b40      	cmp	r3, #64	; 0x40
 8003072:	d80b      	bhi.n	800308c <HAL_TIM_ConfigClockSource+0x6c>
 8003074:	2b10      	cmp	r3, #16
 8003076:	d073      	beq.n	8003160 <HAL_TIM_ConfigClockSource+0x140>
 8003078:	2b10      	cmp	r3, #16
 800307a:	d802      	bhi.n	8003082 <HAL_TIM_ConfigClockSource+0x62>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d06f      	beq.n	8003160 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003080:	e078      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003082:	2b20      	cmp	r3, #32
 8003084:	d06c      	beq.n	8003160 <HAL_TIM_ConfigClockSource+0x140>
 8003086:	2b30      	cmp	r3, #48	; 0x30
 8003088:	d06a      	beq.n	8003160 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800308a:	e073      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800308c:	2b70      	cmp	r3, #112	; 0x70
 800308e:	d00d      	beq.n	80030ac <HAL_TIM_ConfigClockSource+0x8c>
 8003090:	2b70      	cmp	r3, #112	; 0x70
 8003092:	d804      	bhi.n	800309e <HAL_TIM_ConfigClockSource+0x7e>
 8003094:	2b50      	cmp	r3, #80	; 0x50
 8003096:	d033      	beq.n	8003100 <HAL_TIM_ConfigClockSource+0xe0>
 8003098:	2b60      	cmp	r3, #96	; 0x60
 800309a:	d041      	beq.n	8003120 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800309c:	e06a      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800309e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a2:	d066      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0x152>
 80030a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a8:	d017      	beq.n	80030da <HAL_TIM_ConfigClockSource+0xba>
      break;
 80030aa:	e063      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6818      	ldr	r0, [r3, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	6899      	ldr	r1, [r3, #8]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f000 fb32 	bl	8003724 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	609a      	str	r2, [r3, #8]
      break;
 80030d8:	e04c      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6899      	ldr	r1, [r3, #8]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f000 fb1b 	bl	8003724 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030fc:	609a      	str	r2, [r3, #8]
      break;
 80030fe:	e039      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	461a      	mov	r2, r3
 800310e:	f000 fa8f 	bl	8003630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2150      	movs	r1, #80	; 0x50
 8003118:	4618      	mov	r0, r3
 800311a:	f000 fae8 	bl	80036ee <TIM_ITRx_SetConfig>
      break;
 800311e:	e029      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	461a      	mov	r2, r3
 800312e:	f000 faae 	bl	800368e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2160      	movs	r1, #96	; 0x60
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fad8 	bl	80036ee <TIM_ITRx_SetConfig>
      break;
 800313e:	e019      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6818      	ldr	r0, [r3, #0]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	461a      	mov	r2, r3
 800314e:	f000 fa6f 	bl	8003630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2140      	movs	r1, #64	; 0x40
 8003158:	4618      	mov	r0, r3
 800315a:	f000 fac8 	bl	80036ee <TIM_ITRx_SetConfig>
      break;
 800315e:	e009      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4619      	mov	r1, r3
 800316a:	4610      	mov	r0, r2
 800316c:	f000 fabf 	bl	80036ee <TIM_ITRx_SetConfig>
      break;
 8003170:	e000      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a40      	ldr	r2, [pc, #256]	; (80032a4 <TIM_Base_SetConfig+0x114>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d013      	beq.n	80031d0 <TIM_Base_SetConfig+0x40>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ae:	d00f      	beq.n	80031d0 <TIM_Base_SetConfig+0x40>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a3d      	ldr	r2, [pc, #244]	; (80032a8 <TIM_Base_SetConfig+0x118>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00b      	beq.n	80031d0 <TIM_Base_SetConfig+0x40>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a3c      	ldr	r2, [pc, #240]	; (80032ac <TIM_Base_SetConfig+0x11c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d007      	beq.n	80031d0 <TIM_Base_SetConfig+0x40>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a3b      	ldr	r2, [pc, #236]	; (80032b0 <TIM_Base_SetConfig+0x120>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d003      	beq.n	80031d0 <TIM_Base_SetConfig+0x40>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a3a      	ldr	r2, [pc, #232]	; (80032b4 <TIM_Base_SetConfig+0x124>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d108      	bne.n	80031e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a2f      	ldr	r2, [pc, #188]	; (80032a4 <TIM_Base_SetConfig+0x114>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d02b      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f0:	d027      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a2c      	ldr	r2, [pc, #176]	; (80032a8 <TIM_Base_SetConfig+0x118>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d023      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a2b      	ldr	r2, [pc, #172]	; (80032ac <TIM_Base_SetConfig+0x11c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01f      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a2a      	ldr	r2, [pc, #168]	; (80032b0 <TIM_Base_SetConfig+0x120>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d01b      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a29      	ldr	r2, [pc, #164]	; (80032b4 <TIM_Base_SetConfig+0x124>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d017      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a28      	ldr	r2, [pc, #160]	; (80032b8 <TIM_Base_SetConfig+0x128>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a27      	ldr	r2, [pc, #156]	; (80032bc <TIM_Base_SetConfig+0x12c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00f      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a26      	ldr	r2, [pc, #152]	; (80032c0 <TIM_Base_SetConfig+0x130>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00b      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a25      	ldr	r2, [pc, #148]	; (80032c4 <TIM_Base_SetConfig+0x134>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d007      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a24      	ldr	r2, [pc, #144]	; (80032c8 <TIM_Base_SetConfig+0x138>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d003      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a23      	ldr	r2, [pc, #140]	; (80032cc <TIM_Base_SetConfig+0x13c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d108      	bne.n	8003254 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4313      	orrs	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a0a      	ldr	r2, [pc, #40]	; (80032a4 <TIM_Base_SetConfig+0x114>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d003      	beq.n	8003288 <TIM_Base_SetConfig+0xf8>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a0c      	ldr	r2, [pc, #48]	; (80032b4 <TIM_Base_SetConfig+0x124>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d103      	bne.n	8003290 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	615a      	str	r2, [r3, #20]
}
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40010000 	.word	0x40010000
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000800 	.word	0x40000800
 80032b0:	40000c00 	.word	0x40000c00
 80032b4:	40010400 	.word	0x40010400
 80032b8:	40014000 	.word	0x40014000
 80032bc:	40014400 	.word	0x40014400
 80032c0:	40014800 	.word	0x40014800
 80032c4:	40001800 	.word	0x40001800
 80032c8:	40001c00 	.word	0x40001c00
 80032cc:	40002000 	.word	0x40002000

080032d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	f023 0201 	bic.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0303 	bic.w	r3, r3, #3
 8003306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f023 0302 	bic.w	r3, r3, #2
 8003318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a20      	ldr	r2, [pc, #128]	; (80033a8 <TIM_OC1_SetConfig+0xd8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d003      	beq.n	8003334 <TIM_OC1_SetConfig+0x64>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a1f      	ldr	r2, [pc, #124]	; (80033ac <TIM_OC1_SetConfig+0xdc>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d10c      	bne.n	800334e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f023 0308 	bic.w	r3, r3, #8
 800333a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f023 0304 	bic.w	r3, r3, #4
 800334c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a15      	ldr	r2, [pc, #84]	; (80033a8 <TIM_OC1_SetConfig+0xd8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d003      	beq.n	800335e <TIM_OC1_SetConfig+0x8e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a14      	ldr	r2, [pc, #80]	; (80033ac <TIM_OC1_SetConfig+0xdc>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d111      	bne.n	8003382 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800336c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	621a      	str	r2, [r3, #32]
}
 800339c:	bf00      	nop
 800339e:	371c      	adds	r7, #28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	40010000 	.word	0x40010000
 80033ac:	40010400 	.word	0x40010400

080033b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f023 0210 	bic.w	r2, r3, #16
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f023 0320 	bic.w	r3, r3, #32
 80033fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a22      	ldr	r2, [pc, #136]	; (8003494 <TIM_OC2_SetConfig+0xe4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d003      	beq.n	8003418 <TIM_OC2_SetConfig+0x68>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a21      	ldr	r2, [pc, #132]	; (8003498 <TIM_OC2_SetConfig+0xe8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d10d      	bne.n	8003434 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800341e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003432:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a17      	ldr	r2, [pc, #92]	; (8003494 <TIM_OC2_SetConfig+0xe4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d003      	beq.n	8003444 <TIM_OC2_SetConfig+0x94>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a16      	ldr	r2, [pc, #88]	; (8003498 <TIM_OC2_SetConfig+0xe8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d113      	bne.n	800346c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800344a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003452:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	621a      	str	r2, [r3, #32]
}
 8003486:	bf00      	nop
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40010000 	.word	0x40010000
 8003498:	40010400 	.word	0x40010400

0800349c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0303 	bic.w	r3, r3, #3
 80034d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	021b      	lsls	r3, r3, #8
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a21      	ldr	r2, [pc, #132]	; (800357c <TIM_OC3_SetConfig+0xe0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d003      	beq.n	8003502 <TIM_OC3_SetConfig+0x66>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a20      	ldr	r2, [pc, #128]	; (8003580 <TIM_OC3_SetConfig+0xe4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d10d      	bne.n	800351e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003508:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	021b      	lsls	r3, r3, #8
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	4313      	orrs	r3, r2
 8003514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800351c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a16      	ldr	r2, [pc, #88]	; (800357c <TIM_OC3_SetConfig+0xe0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d003      	beq.n	800352e <TIM_OC3_SetConfig+0x92>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a15      	ldr	r2, [pc, #84]	; (8003580 <TIM_OC3_SetConfig+0xe4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d113      	bne.n	8003556 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800353c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	621a      	str	r2, [r3, #32]
}
 8003570:	bf00      	nop
 8003572:	371c      	adds	r7, #28
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	40010000 	.word	0x40010000
 8003580:	40010400 	.word	0x40010400

08003584 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	021b      	lsls	r3, r3, #8
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	031b      	lsls	r3, r3, #12
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a12      	ldr	r2, [pc, #72]	; (8003628 <TIM_OC4_SetConfig+0xa4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d003      	beq.n	80035ec <TIM_OC4_SetConfig+0x68>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a11      	ldr	r2, [pc, #68]	; (800362c <TIM_OC4_SetConfig+0xa8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d109      	bne.n	8003600 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	019b      	lsls	r3, r3, #6
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	621a      	str	r2, [r3, #32]
}
 800361a:	bf00      	nop
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40010000 	.word	0x40010000
 800362c:	40010400 	.word	0x40010400

08003630 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	f023 0201 	bic.w	r2, r3, #1
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800365a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f023 030a 	bic.w	r3, r3, #10
 800366c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4313      	orrs	r3, r2
 8003674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	621a      	str	r2, [r3, #32]
}
 8003682:	bf00      	nop
 8003684:	371c      	adds	r7, #28
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800368e:	b480      	push	{r7}
 8003690:	b087      	sub	sp, #28
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	f023 0210 	bic.w	r2, r3, #16
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	031b      	lsls	r3, r3, #12
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	621a      	str	r2, [r3, #32]
}
 80036e2:	bf00      	nop
 80036e4:	371c      	adds	r7, #28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b085      	sub	sp, #20
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003704:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	f043 0307 	orr.w	r3, r3, #7
 8003710:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	609a      	str	r2, [r3, #8]
}
 8003718:	bf00      	nop
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800373e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	021a      	lsls	r2, r3, #8
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	431a      	orrs	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4313      	orrs	r3, r2
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	609a      	str	r2, [r3, #8]
}
 8003758:	bf00      	nop
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	2201      	movs	r2, #1
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a1a      	ldr	r2, [r3, #32]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	43db      	mvns	r3, r3
 8003786:	401a      	ands	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a1a      	ldr	r2, [r3, #32]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	fa01 f303 	lsl.w	r3, r1, r3
 800379c:	431a      	orrs	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	621a      	str	r2, [r3, #32]
}
 80037a2:	bf00      	nop
 80037a4:	371c      	adds	r7, #28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b085      	sub	sp, #20
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e032      	b.n	800382c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2202      	movs	r2, #2
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037fe:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	4313      	orrs	r3, r2
 8003808:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC0 init function */
void MX_ADC1_Init(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800383e:	463b      	mov	r3, r7
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800384a:	4b21      	ldr	r3, [pc, #132]	; (80038d0 <MX_ADC1_Init+0x98>)
 800384c:	4a21      	ldr	r2, [pc, #132]	; (80038d4 <MX_ADC1_Init+0x9c>)
 800384e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003850:	4b1f      	ldr	r3, [pc, #124]	; (80038d0 <MX_ADC1_Init+0x98>)
 8003852:	2200      	movs	r2, #0
 8003854:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003856:	4b1e      	ldr	r3, [pc, #120]	; (80038d0 <MX_ADC1_Init+0x98>)
 8003858:	2200      	movs	r2, #0
 800385a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800385c:	4b1c      	ldr	r3, [pc, #112]	; (80038d0 <MX_ADC1_Init+0x98>)
 800385e:	2200      	movs	r2, #0
 8003860:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003862:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <MX_ADC1_Init+0x98>)
 8003864:	2201      	movs	r2, #1
 8003866:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003868:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <MX_ADC1_Init+0x98>)
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003870:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <MX_ADC1_Init+0x98>)
 8003872:	2200      	movs	r2, #0
 8003874:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003876:	4b16      	ldr	r3, [pc, #88]	; (80038d0 <MX_ADC1_Init+0x98>)
 8003878:	4a17      	ldr	r2, [pc, #92]	; (80038d8 <MX_ADC1_Init+0xa0>)
 800387a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800387c:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <MX_ADC1_Init+0x98>)
 800387e:	2200      	movs	r2, #0
 8003880:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003882:	4b13      	ldr	r3, [pc, #76]	; (80038d0 <MX_ADC1_Init+0x98>)
 8003884:	2201      	movs	r2, #1
 8003886:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003888:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <MX_ADC1_Init+0x98>)
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003890:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <MX_ADC1_Init+0x98>)
 8003892:	2201      	movs	r2, #1
 8003894:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003896:	480e      	ldr	r0, [pc, #56]	; (80038d0 <MX_ADC1_Init+0x98>)
 8003898:	f7fd fb66 	bl	8000f68 <HAL_ADC_Init>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80038a2:	f000 fdf3 	bl	800448c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80038a6:	2301      	movs	r3, #1
 80038a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80038aa:	2301      	movs	r3, #1
 80038ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80038ae:	2300      	movs	r3, #0
 80038b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038b2:	463b      	mov	r3, r7
 80038b4:	4619      	mov	r1, r3
 80038b6:	4806      	ldr	r0, [pc, #24]	; (80038d0 <MX_ADC1_Init+0x98>)
 80038b8:	f7fd fd24 	bl	8001304 <HAL_ADC_ConfigChannel>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80038c2:	f000 fde3 	bl	800448c <Error_Handler>
  }

}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000454 	.word	0x20000454
 80038d4:	40012000 	.word	0x40012000
 80038d8:	0f000001 	.word	0x0f000001

080038dc <MX_ADC2_Init>:

/* ADC1 init function */
void MX_ADC2_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80038e2:	463b      	mov	r3, r7
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC2;
 80038ee:	4b21      	ldr	r3, [pc, #132]	; (8003974 <MX_ADC2_Init+0x98>)
 80038f0:	4a21      	ldr	r2, [pc, #132]	; (8003978 <MX_ADC2_Init+0x9c>)
 80038f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80038f4:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <MX_ADC2_Init+0x98>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80038fa:	4b1e      	ldr	r3, [pc, #120]	; (8003974 <MX_ADC2_Init+0x98>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003900:	4b1c      	ldr	r3, [pc, #112]	; (8003974 <MX_ADC2_Init+0x98>)
 8003902:	2200      	movs	r2, #0
 8003904:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003906:	4b1b      	ldr	r3, [pc, #108]	; (8003974 <MX_ADC2_Init+0x98>)
 8003908:	2201      	movs	r2, #1
 800390a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800390c:	4b19      	ldr	r3, [pc, #100]	; (8003974 <MX_ADC2_Init+0x98>)
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003914:	4b17      	ldr	r3, [pc, #92]	; (8003974 <MX_ADC2_Init+0x98>)
 8003916:	2200      	movs	r2, #0
 8003918:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800391a:	4b16      	ldr	r3, [pc, #88]	; (8003974 <MX_ADC2_Init+0x98>)
 800391c:	4a17      	ldr	r2, [pc, #92]	; (800397c <MX_ADC2_Init+0xa0>)
 800391e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003920:	4b14      	ldr	r3, [pc, #80]	; (8003974 <MX_ADC2_Init+0x98>)
 8003922:	2200      	movs	r2, #0
 8003924:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003926:	4b13      	ldr	r3, [pc, #76]	; (8003974 <MX_ADC2_Init+0x98>)
 8003928:	2201      	movs	r2, #1
 800392a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <MX_ADC2_Init+0x98>)
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003934:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <MX_ADC2_Init+0x98>)
 8003936:	2201      	movs	r2, #1
 8003938:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800393a:	480e      	ldr	r0, [pc, #56]	; (8003974 <MX_ADC2_Init+0x98>)
 800393c:	f7fd fb14 	bl	8000f68 <HAL_ADC_Init>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8003946:	f000 fda1 	bl	800448c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800394a:	2302      	movs	r3, #2
 800394c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800394e:	2301      	movs	r3, #1
 8003950:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003956:	463b      	mov	r3, r7
 8003958:	4619      	mov	r1, r3
 800395a:	4806      	ldr	r0, [pc, #24]	; (8003974 <MX_ADC2_Init+0x98>)
 800395c:	f7fd fcd2 	bl	8001304 <HAL_ADC_ConfigChannel>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8003966:	f000 fd91 	bl	800448c <Error_Handler>
  }

}
 800396a:	bf00      	nop
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20000454 	.word	0x20000454
 8003978:	40012100 	.word	0x40012100
 800397c:	0f000001 	.word	0x0f000001

08003980 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08c      	sub	sp, #48	; 0x30
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003988:	f107 031c 	add.w	r3, r7, #28
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	605a      	str	r2, [r3, #4]
 8003992:	609a      	str	r2, [r3, #8]
 8003994:	60da      	str	r2, [r3, #12]
 8003996:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a2e      	ldr	r2, [pc, #184]	; (8003a58 <HAL_ADC_MspInit+0xd8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d128      	bne.n	80039f4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	4b2d      	ldr	r3, [pc, #180]	; (8003a5c <HAL_ADC_MspInit+0xdc>)
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	4a2c      	ldr	r2, [pc, #176]	; (8003a5c <HAL_ADC_MspInit+0xdc>)
 80039ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b0:	6453      	str	r3, [r2, #68]	; 0x44
 80039b2:	4b2a      	ldr	r3, [pc, #168]	; (8003a5c <HAL_ADC_MspInit+0xdc>)
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ba:	61bb      	str	r3, [r7, #24]
 80039bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	4b26      	ldr	r3, [pc, #152]	; (8003a5c <HAL_ADC_MspInit+0xdc>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	4a25      	ldr	r2, [pc, #148]	; (8003a5c <HAL_ADC_MspInit+0xdc>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6313      	str	r3, [r2, #48]	; 0x30
 80039ce:	4b23      	ldr	r3, [pc, #140]	; (8003a5c <HAL_ADC_MspInit+0xdc>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC0_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80039da:	2301      	movs	r3, #1
 80039dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039de:	2303      	movs	r3, #3
 80039e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e6:	f107 031c 	add.w	r3, r7, #28
 80039ea:	4619      	mov	r1, r3
 80039ec:	481c      	ldr	r0, [pc, #112]	; (8003a60 <HAL_ADC_MspInit+0xe0>)
 80039ee:	f7fd ffc9 	bl	8001984 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80039f2:	e02c      	b.n	8003a4e <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1a      	ldr	r2, [pc, #104]	; (8003a64 <HAL_ADC_MspInit+0xe4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d127      	bne.n	8003a4e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	4b16      	ldr	r3, [pc, #88]	; (8003a5c <HAL_ADC_MspInit+0xdc>)
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	4a15      	ldr	r2, [pc, #84]	; (8003a5c <HAL_ADC_MspInit+0xdc>)
 8003a08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a0e:	4b13      	ldr	r3, [pc, #76]	; (8003a5c <HAL_ADC_MspInit+0xdc>)
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a16:	613b      	str	r3, [r7, #16]
 8003a18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <HAL_ADC_MspInit+0xdc>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	4a0e      	ldr	r2, [pc, #56]	; (8003a5c <HAL_ADC_MspInit+0xdc>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2a:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <HAL_ADC_MspInit+0xdc>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003a36:	2302      	movs	r3, #2
 8003a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a42:	f107 031c 	add.w	r3, r7, #28
 8003a46:	4619      	mov	r1, r3
 8003a48:	4805      	ldr	r0, [pc, #20]	; (8003a60 <HAL_ADC_MspInit+0xe0>)
 8003a4a:	f7fd ff9b 	bl	8001984 <HAL_GPIO_Init>
}
 8003a4e:	bf00      	nop
 8003a50:	3730      	adds	r7, #48	; 0x30
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40012000 	.word	0x40012000
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	40020000 	.word	0x40020000
 8003a64:	40012100 	.word	0x40012100

08003a68 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a6e:	f107 030c 	add.w	r3, r7, #12
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	605a      	str	r2, [r3, #4]
 8003a78:	609a      	str	r2, [r3, #8]
 8003a7a:	60da      	str	r2, [r3, #12]
 8003a7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	4b62      	ldr	r3, [pc, #392]	; (8003c0c <MX_GPIO_Init+0x1a4>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	4a61      	ldr	r2, [pc, #388]	; (8003c0c <MX_GPIO_Init+0x1a4>)
 8003a88:	f043 0304 	orr.w	r3, r3, #4
 8003a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8e:	4b5f      	ldr	r3, [pc, #380]	; (8003c0c <MX_GPIO_Init+0x1a4>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	607b      	str	r3, [r7, #4]
 8003a9e:	4b5b      	ldr	r3, [pc, #364]	; (8003c0c <MX_GPIO_Init+0x1a4>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	4a5a      	ldr	r2, [pc, #360]	; (8003c0c <MX_GPIO_Init+0x1a4>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aaa:	4b58      	ldr	r3, [pc, #352]	; (8003c0c <MX_GPIO_Init+0x1a4>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	607b      	str	r3, [r7, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	603b      	str	r3, [r7, #0]
 8003aba:	4b54      	ldr	r3, [pc, #336]	; (8003c0c <MX_GPIO_Init+0x1a4>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	4a53      	ldr	r2, [pc, #332]	; (8003c0c <MX_GPIO_Init+0x1a4>)
 8003ac0:	f043 0302 	orr.w	r3, r3, #2
 8003ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac6:	4b51      	ldr	r3, [pc, #324]	; (8003c0c <MX_GPIO_Init+0x1a4>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_Pin|LCD_RESET_Pin|LCD_A0_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f240 3141 	movw	r1, #833	; 0x341
 8003ad8:	484d      	ldr	r0, [pc, #308]	; (8003c10 <MX_GPIO_Init+0x1a8>)
 8003ada:	f7fe f8e5 	bl	8001ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, GPIO_PIN_RESET);
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2140      	movs	r1, #64	; 0x40
 8003ae2:	484c      	ldr	r0, [pc, #304]	; (8003c14 <MX_GPIO_Init+0x1ac>)
 8003ae4:	f7fe f8e0 	bl	8001ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8003ae8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003aec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003aee:	2300      	movs	r3, #0
 8003af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8003af6:	f107 030c 	add.w	r3, r7, #12
 8003afa:	4619      	mov	r1, r3
 8003afc:	4846      	ldr	r0, [pc, #280]	; (8003c18 <MX_GPIO_Init+0x1b0>)
 8003afe:	f7fd ff41 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_RESET_Pin|LCD_A0_Pin;
 8003b02:	f240 1341 	movw	r3, #321	; 0x141
 8003b06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b14:	f107 030c 	add.w	r3, r7, #12
 8003b18:	4619      	mov	r1, r3
 8003b1a:	483d      	ldr	r0, [pc, #244]	; (8003c10 <MX_GPIO_Init+0x1a8>)
 8003b1c:	f7fd ff32 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8003b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b26:	2301      	movs	r3, #1
 8003b28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8003b32:	f107 030c 	add.w	r3, r7, #12
 8003b36:	4619      	mov	r1, r3
 8003b38:	4835      	ldr	r0, [pc, #212]	; (8003c10 <MX_GPIO_Init+0x1a8>)
 8003b3a:	f7fd ff23 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_N_Pin;
 8003b3e:	2340      	movs	r3, #64	; 0x40
 8003b40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b42:	2301      	movs	r3, #1
 8003b44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_N_GPIO_Port, &GPIO_InitStruct);
 8003b4e:	f107 030c 	add.w	r3, r7, #12
 8003b52:	4619      	mov	r1, r3
 8003b54:	482f      	ldr	r0, [pc, #188]	; (8003c14 <MX_GPIO_Init+0x1ac>)
 8003b56:	f7fd ff15 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 red */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b5a:	2310      	movs	r3, #16
 8003b5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b66:	f107 030c 	add.w	r3, r7, #12
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4829      	ldr	r0, [pc, #164]	; (8003c14 <MX_GPIO_Init+0x1ac>)
 8003b6e:	f7fd ff09 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 green*/
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b76:	2301      	movs	r3, #1
 8003b78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b7e:	f107 030c 	add.w	r3, r7, #12
 8003b82:	4619      	mov	r1, r3
 8003b84:	4824      	ldr	r0, [pc, #144]	; (8003c18 <MX_GPIO_Init+0x1b0>)
 8003b86:	f7fd fefd 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 blue */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b90:	2301      	movs	r3, #1
 8003b92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b98:	f107 030c 	add.w	r3, r7, #12
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	481c      	ldr	r0, [pc, #112]	; (8003c10 <MX_GPIO_Init+0x1a8>)
 8003ba0:	f7fd fef0 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ba8:	4b1c      	ldr	r3, [pc, #112]	; (8003c1c <MX_GPIO_Init+0x1b4>)
 8003baa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb0:	f107 030c 	add.w	r3, r7, #12
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4816      	ldr	r0, [pc, #88]	; (8003c10 <MX_GPIO_Init+0x1a8>)
 8003bb8:	f7fd fee4 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8003bbc:	2321      	movs	r3, #33	; 0x21
 8003bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bc0:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <MX_GPIO_Init+0x1b4>)
 8003bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bc8:	f107 030c 	add.w	r3, r7, #12
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4811      	ldr	r0, [pc, #68]	; (8003c14 <MX_GPIO_Init+0x1ac>)
 8003bd0:	f7fd fed8 	bl	8001984 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2106      	movs	r1, #6
 8003bd8:	2006      	movs	r0, #6
 8003bda:	f7fd fe9c 	bl	8001916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003bde:	2006      	movs	r0, #6
 8003be0:	f7fd feb5 	bl	800194e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 6, 0);
 8003be4:	2200      	movs	r2, #0
 8003be6:	2106      	movs	r1, #6
 8003be8:	200a      	movs	r0, #10
 8003bea:	f7fd fe94 	bl	8001916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003bee:	200a      	movs	r0, #10
 8003bf0:	f7fd fead 	bl	800194e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2106      	movs	r1, #6
 8003bf8:	2017      	movs	r0, #23
 8003bfa:	f7fd fe8c 	bl	8001916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003bfe:	2017      	movs	r0, #23
 8003c00:	f7fd fea5 	bl	800194e <HAL_NVIC_EnableIRQ>

}
 8003c04:	bf00      	nop
 8003c06:	3720      	adds	r7, #32
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	40020000 	.word	0x40020000
 8003c14:	40020400 	.word	0x40020400
 8003c18:	40020800 	.word	0x40020800
 8003c1c:	10110000 	.word	0x10110000

08003c20 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003c24:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <MX_I2C1_Init+0x50>)
 8003c26:	4a13      	ldr	r2, [pc, #76]	; (8003c74 <MX_I2C1_Init+0x54>)
 8003c28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003c2a:	4b11      	ldr	r3, [pc, #68]	; (8003c70 <MX_I2C1_Init+0x50>)
 8003c2c:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <MX_I2C1_Init+0x58>)
 8003c2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c30:	4b0f      	ldr	r3, [pc, #60]	; (8003c70 <MX_I2C1_Init+0x50>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c36:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <MX_I2C1_Init+0x50>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <MX_I2C1_Init+0x50>)
 8003c3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c44:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <MX_I2C1_Init+0x50>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003c4a:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <MX_I2C1_Init+0x50>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c50:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <MX_I2C1_Init+0x50>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <MX_I2C1_Init+0x50>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c5c:	4804      	ldr	r0, [pc, #16]	; (8003c70 <MX_I2C1_Init+0x50>)
 8003c5e:	f7fe f83d 	bl	8001cdc <HAL_I2C_Init>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003c68:	f000 fc10 	bl	800448c <Error_Handler>
  }

}
 8003c6c:	bf00      	nop
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	2000049c 	.word	0x2000049c
 8003c74:	40005400 	.word	0x40005400
 8003c78:	00061a80 	.word	0x00061a80

08003c7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08a      	sub	sp, #40	; 0x28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	60da      	str	r2, [r3, #12]
 8003c92:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a19      	ldr	r2, [pc, #100]	; (8003d00 <HAL_I2C_MspInit+0x84>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d12c      	bne.n	8003cf8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	4b18      	ldr	r3, [pc, #96]	; (8003d04 <HAL_I2C_MspInit+0x88>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	4a17      	ldr	r2, [pc, #92]	; (8003d04 <HAL_I2C_MspInit+0x88>)
 8003ca8:	f043 0302 	orr.w	r3, r3, #2
 8003cac:	6313      	str	r3, [r2, #48]	; 0x30
 8003cae:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <HAL_I2C_MspInit+0x88>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003cba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cc0:	2312      	movs	r3, #18
 8003cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ccc:	2304      	movs	r3, #4
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd0:	f107 0314 	add.w	r3, r7, #20
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	480c      	ldr	r0, [pc, #48]	; (8003d08 <HAL_I2C_MspInit+0x8c>)
 8003cd8:	f7fd fe54 	bl	8001984 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <HAL_I2C_MspInit+0x88>)
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	4a07      	ldr	r2, [pc, #28]	; (8003d04 <HAL_I2C_MspInit+0x88>)
 8003ce6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cea:	6413      	str	r3, [r2, #64]	; 0x40
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <HAL_I2C_MspInit+0x88>)
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	3728      	adds	r7, #40	; 0x28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40005400 	.word	0x40005400
 8003d04:	40023800 	.word	0x40023800
 8003d08:	40020400 	.word	0x40020400

08003d0c <chipSelect>:
static ColumnBuffer displayBuffer[NUMBER_OF_ROWS];



static void chipSelect(bool isSelected)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, (GPIO_PinState) !isSelected); /* low active */
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	f083 0301 	eor.w	r3, r3, #1
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	2140      	movs	r1, #64	; 0x40
 8003d22:	4803      	ldr	r0, [pc, #12]	; (8003d30 <chipSelect+0x24>)
 8003d24:	f7fd ffc0 	bl	8001ca8 <HAL_GPIO_WritePin>
}
 8003d28:	bf00      	nop
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40020400 	.word	0x40020400

08003d34 <registerSelect>:

static void registerSelect(lcdRegister selectedRegister)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, (GPIO_PinState) selectedRegister);
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	461a      	mov	r2, r3
 8003d42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d46:	4803      	ldr	r0, [pc, #12]	; (8003d54 <registerSelect+0x20>)
 8003d48:	f7fd ffae 	bl	8001ca8 <HAL_GPIO_WritePin>
}
 8003d4c:	bf00      	nop
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40020000 	.word	0x40020000

08003d58 <displayReset>:

static void displayReset(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
    chipSelect(INSTRUCTION_REGISTER);
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	f7ff ffd5 	bl	8003d0c <chipSelect>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8003d62:	2200      	movs	r2, #0
 8003d64:	2140      	movs	r1, #64	; 0x40
 8003d66:	4808      	ldr	r0, [pc, #32]	; (8003d88 <displayReset+0x30>)
 8003d68:	f7fd ff9e 	bl	8001ca8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	f7fd f8d9 	bl	8000f24 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8003d72:	2201      	movs	r2, #1
 8003d74:	2140      	movs	r1, #64	; 0x40
 8003d76:	4804      	ldr	r0, [pc, #16]	; (8003d88 <displayReset+0x30>)
 8003d78:	f7fd ff96 	bl	8001ca8 <HAL_GPIO_WritePin>
    chipSelect(DATA_REGISTER);
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	f7ff ffc5 	bl	8003d0c <chipSelect>
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40020000 	.word	0x40020000

08003d8c <sendInstruction>:

static void sendInstruction(instruction command)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	71fb      	strb	r3, [r7, #7]
    registerSelect(INSTRUCTION_REGISTER);
 8003d96:	2000      	movs	r0, #0
 8003d98:	f7ff ffcc 	bl	8003d34 <registerSelect>
    chipSelect(true);
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	f7ff ffb5 	bl	8003d0c <chipSelect>
	  //$dnd (uint8_t) added
    HAL_SPI_Transmit(&hspi1, (uint8_t *) &command, 1, 1);
 8003da2:	1df9      	adds	r1, r7, #7
 8003da4:	2301      	movs	r3, #1
 8003da6:	2201      	movs	r2, #1
 8003da8:	4804      	ldr	r0, [pc, #16]	; (8003dbc <sendInstruction+0x30>)
 8003daa:	f7fe fdd1 	bl	8002950 <HAL_SPI_Transmit>
    chipSelect(false);
 8003dae:	2000      	movs	r0, #0
 8003db0:	f7ff ffac 	bl	8003d0c <chipSelect>
}
 8003db4:	bf00      	nop
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	200004f0 	.word	0x200004f0

08003dc0 <sendData>:


/*static*/ void sendData(uint8_t data)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	71fb      	strb	r3, [r7, #7]
    registerSelect(DATA_REGISTER);
 8003dca:	2001      	movs	r0, #1
 8003dcc:	f7ff ffb2 	bl	8003d34 <registerSelect>
    chipSelect(true);
 8003dd0:	2001      	movs	r0, #1
 8003dd2:	f7ff ff9b 	bl	8003d0c <chipSelect>
    HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 8003dd6:	1df9      	adds	r1, r7, #7
 8003dd8:	2301      	movs	r3, #1
 8003dda:	2201      	movs	r2, #1
 8003ddc:	4804      	ldr	r0, [pc, #16]	; (8003df0 <sendData+0x30>)
 8003dde:	f7fe fdb7 	bl	8002950 <HAL_SPI_Transmit>
    chipSelect(false);
 8003de2:	2000      	movs	r0, #0
 8003de4:	f7ff ff92 	bl	8003d0c <chipSelect>
}
 8003de8:	bf00      	nop
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	200004f0 	.word	0x200004f0

08003df4 <lcd_setContrast>:

void lcd_setContrast(uint8_t electronicVolume)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	71fb      	strb	r3, [r7, #7]
#define ELECTRONIC_VOLUME_MAXIMUM_RAITING ((uint8_t) 63)

    if (electronicVolume <= ELECTRONIC_VOLUME_MAXIMUM_RAITING) {
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	2b3f      	cmp	r3, #63	; 0x3f
 8003e02:	d806      	bhi.n	8003e12 <lcd_setContrast+0x1e>
        sendInstruction(ELECTRONIC_VOLUME_MODE_SET);
 8003e04:	2081      	movs	r0, #129	; 0x81
 8003e06:	f7ff ffc1 	bl	8003d8c <sendInstruction>
			//$dnd1 added (instruction)
        sendInstruction((instruction) electronicVolume);
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ffbd 	bl	8003d8c <sendInstruction>
    }
}
 8003e12:	bf00      	nop
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <lcd_init>:

void lcd_init(void)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	af00      	add	r7, sp, #0
    lcd_clear();
 8003e1e:	f000 f857 	bl	8003ed0 <lcd_clear>
    displayReset();
 8003e22:	f7ff ff99 	bl	8003d58 <displayReset>

    sendInstruction(ADC_NORMAL);
 8003e26:	20a0      	movs	r0, #160	; 0xa0
 8003e28:	f7ff ffb0 	bl	8003d8c <sendInstruction>
    sendInstruction(DISPLAY_OFF);
 8003e2c:	20ae      	movs	r0, #174	; 0xae
 8003e2e:	f7ff ffad 	bl	8003d8c <sendInstruction>
    sendInstruction(COMMON_OUTPUT_MODE_REVERSE);
 8003e32:	20c8      	movs	r0, #200	; 0xc8
 8003e34:	f7ff ffaa 	bl	8003d8c <sendInstruction>
    sendInstruction(BIAS_ONE_NINTH);
 8003e38:	20a2      	movs	r0, #162	; 0xa2
 8003e3a:	f7ff ffa7 	bl	8003d8c <sendInstruction>
    sendInstruction(POWER_CONTROL_SET_7);
 8003e3e:	202f      	movs	r0, #47	; 0x2f
 8003e40:	f7ff ffa4 	bl	8003d8c <sendInstruction>
    sendInstruction(INTERNAL_RESISTOR_RATIO_1);
 8003e44:	2021      	movs	r0, #33	; 0x21
 8003e46:	f7ff ffa1 	bl	8003d8c <sendInstruction>
    lcd_setContrast(40);
 8003e4a:	2028      	movs	r0, #40	; 0x28
 8003e4c:	f7ff ffd2 	bl	8003df4 <lcd_setContrast>
    sendInstruction(DISPLAY_ON);
 8003e50:	20af      	movs	r0, #175	; 0xaf
 8003e52:	f7ff ff9b 	bl	8003d8c <sendInstruction>
}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <lcd_setPixel>:

void lcd_setPixel(uint8_t xPosition, uint8_t yPosition, bool pixelIsSet)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	71fb      	strb	r3, [r7, #7]
 8003e66:	460b      	mov	r3, r1
 8003e68:	71bb      	strb	r3, [r7, #6]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	717b      	strb	r3, [r7, #5]
    if ((xPosition < NUMBER_OF_ROWS) && (yPosition < NUMBER_OF_COLUMNS)) {
 8003e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	db23      	blt.n	8003ebe <lcd_setPixel+0x62>
 8003e76:	79bb      	ldrb	r3, [r7, #6]
 8003e78:	2b1f      	cmp	r3, #31
 8003e7a:	d820      	bhi.n	8003ebe <lcd_setPixel+0x62>
        if (pixelIsSet)
 8003e7c:	797b      	ldrb	r3, [r7, #5]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00e      	beq.n	8003ea0 <lcd_setPixel+0x44>
            displayBuffer[xPosition].rawData |= (1 << yPosition);
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	4a11      	ldr	r2, [pc, #68]	; (8003ecc <lcd_setPixel+0x70>)
 8003e86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003e8a:	79bb      	ldrb	r3, [r7, #6]
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e92:	4619      	mov	r1, r3
 8003e94:	79fb      	ldrb	r3, [r7, #7]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	490c      	ldr	r1, [pc, #48]	; (8003ecc <lcd_setPixel+0x70>)
 8003e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        else
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
    }
}
 8003e9e:	e00e      	b.n	8003ebe <lcd_setPixel+0x62>
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <lcd_setPixel+0x70>)
 8003ea4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003ea8:	79bb      	ldrb	r3, [r7, #6]
 8003eaa:	2101      	movs	r1, #1
 8003eac:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	400a      	ands	r2, r1
 8003eb8:	4904      	ldr	r1, [pc, #16]	; (8003ecc <lcd_setPixel+0x70>)
 8003eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	200001f8 	.word	0x200001f8

08003ed0 <lcd_clear>:

void lcd_clear(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	71fb      	strb	r3, [r7, #7]
 8003eda:	e007      	b.n	8003eec <lcd_clear+0x1c>
        displayBuffer[rowIndex].rawData = false;
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	4a08      	ldr	r2, [pc, #32]	; (8003f00 <lcd_clear+0x30>)
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	71fb      	strb	r3, [r7, #7]
 8003eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	daf3      	bge.n	8003edc <lcd_clear+0xc>
    }
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	200001f8 	.word	0x200001f8

08003f04 <lcd_setChar>:


void lcd_setChar(uint8_t xPosition, uint8_t yPosition, unsigned char charToSet, lcd_fontSize size, bool contrastIsInverted)
{
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4604      	mov	r4, r0
 8003f0c:	4608      	mov	r0, r1
 8003f0e:	4611      	mov	r1, r2
 8003f10:	461a      	mov	r2, r3
 8003f12:	4623      	mov	r3, r4
 8003f14:	71fb      	strb	r3, [r7, #7]
 8003f16:	4603      	mov	r3, r0
 8003f18:	71bb      	strb	r3, [r7, #6]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	717b      	strb	r3, [r7, #5]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	713b      	strb	r3, [r7, #4]
#define ASCII_TABLE_OFFSET ((uint8_t) 32)

    charToSet -= ASCII_TABLE_OFFSET;
 8003f22:	797b      	ldrb	r3, [r7, #5]
 8003f24:	3b20      	subs	r3, #32
 8003f26:	717b      	strb	r3, [r7, #5]

    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 8003f28:	2300      	movs	r3, #0
 8003f2a:	73fb      	strb	r3, [r7, #15]
 8003f2c:	e049      	b.n	8003fc2 <lcd_setChar+0xbe>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 8003f2e:	2300      	movs	r3, #0
 8003f30:	73bb      	strb	r3, [r7, #14]
 8003f32:	e03b      	b.n	8003fac <lcd_setChar+0xa8>
            if (Font_6x8_h[charToSet * fontSizes[size].height + columnCounter] & (1 << rowCounter))
 8003f34:	797b      	ldrb	r3, [r7, #5]
 8003f36:	793a      	ldrb	r2, [r7, #4]
 8003f38:	4927      	ldr	r1, [pc, #156]	; (8003fd8 <lcd_setChar+0xd4>)
 8003f3a:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 8003f3e:	fb02 f203 	mul.w	r2, r2, r3
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	4413      	add	r3, r2
 8003f46:	4a25      	ldr	r2, [pc, #148]	; (8003fdc <lcd_setChar+0xd8>)
 8003f48:	5cd3      	ldrb	r3, [r2, r3]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	7bbb      	ldrb	r3, [r7, #14]
 8003f4e:	fa42 f303 	asr.w	r3, r2, r3
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d018      	beq.n	8003f8c <lcd_setChar+0x88>
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, !contrastIsInverted);
 8003f5a:	79fa      	ldrb	r2, [r7, #7]
 8003f5c:	7bbb      	ldrb	r3, [r7, #14]
 8003f5e:	4413      	add	r3, r2
 8003f60:	b2d8      	uxtb	r0, r3
 8003f62:	79ba      	ldrb	r2, [r7, #6]
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	4413      	add	r3, r2
 8003f68:	b2d9      	uxtb	r1, r3
 8003f6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	bf14      	ite	ne
 8003f72:	2301      	movne	r3, #1
 8003f74:	2300      	moveq	r3, #0
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	f083 0301 	eor.w	r3, r3, #1
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	461a      	mov	r2, r3
 8003f86:	f7ff ff69 	bl	8003e5c <lcd_setPixel>
 8003f8a:	e00c      	b.n	8003fa6 <lcd_setChar+0xa2>
            else
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, contrastIsInverted);
 8003f8c:	79fa      	ldrb	r2, [r7, #7]
 8003f8e:	7bbb      	ldrb	r3, [r7, #14]
 8003f90:	4413      	add	r3, r2
 8003f92:	b2d8      	uxtb	r0, r3
 8003f94:	79ba      	ldrb	r2, [r7, #6]
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	4413      	add	r3, r2
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	f7ff ff5b 	bl	8003e5c <lcd_setPixel>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 8003fa6:	7bbb      	ldrb	r3, [r7, #14]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	73bb      	strb	r3, [r7, #14]
 8003fac:	793b      	ldrb	r3, [r7, #4]
 8003fae:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <lcd_setChar+0xd4>)
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	4413      	add	r3, r2
 8003fb4:	785b      	ldrb	r3, [r3, #1]
 8003fb6:	7bba      	ldrb	r2, [r7, #14]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d3bb      	bcc.n	8003f34 <lcd_setChar+0x30>
    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	73fb      	strb	r3, [r7, #15]
 8003fc2:	793b      	ldrb	r3, [r7, #4]
 8003fc4:	4a04      	ldr	r2, [pc, #16]	; (8003fd8 <lcd_setChar+0xd4>)
 8003fc6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003fca:	7bfa      	ldrb	r2, [r7, #15]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d3ae      	bcc.n	8003f2e <lcd_setChar+0x2a>
        }
}
 8003fd0:	bf00      	nop
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd90      	pop	{r4, r7, pc}
 8003fd8:	08006828 	.word	0x08006828
 8003fdc:	080064a8 	.word	0x080064a8

08003fe0 <lcd_setString>:




void lcd_setString(uint8_t xPosition, uint8_t yPosition, char const * string, lcd_fontSize size, bool contrastIsInverted )
{
 8003fe0:	b590      	push	{r4, r7, lr}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	603a      	str	r2, [r7, #0]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4603      	mov	r3, r0
 8003fec:	71fb      	strb	r3, [r7, #7]
 8003fee:	460b      	mov	r3, r1
 8003ff0:	71bb      	strb	r3, [r7, #6]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	717b      	strb	r3, [r7, #5]
 if ((size <= LCD_FONT_8) && (size < LCD_NUMBER_OF_FONTS))
 8003ff6:	797b      	ldrb	r3, [r7, #5]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d11c      	bne.n	8004036 <lcd_setString+0x56>
 8003ffc:	797b      	ldrb	r3, [r7, #5]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d819      	bhi.n	8004036 <lcd_setString+0x56>
 //$dnd1 bug this works only for font enum = 0. No large fonts!
        for(; *string != '\0'; string++){
 8004002:	e014      	b.n	800402e <lcd_setString+0x4e>
            lcd_setChar(xPosition, yPosition, *string, size, contrastIsInverted);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	781a      	ldrb	r2, [r3, #0]
 8004008:	797c      	ldrb	r4, [r7, #5]
 800400a:	79b9      	ldrb	r1, [r7, #6]
 800400c:	79f8      	ldrb	r0, [r7, #7]
 800400e:	7e3b      	ldrb	r3, [r7, #24]
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	4623      	mov	r3, r4
 8004014:	f7ff ff76 	bl	8003f04 <lcd_setChar>
            xPosition += fontSizes[size].width;
 8004018:	797b      	ldrb	r3, [r7, #5]
 800401a:	4a09      	ldr	r2, [pc, #36]	; (8004040 <lcd_setString+0x60>)
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	4413      	add	r3, r2
 8004020:	785a      	ldrb	r2, [r3, #1]
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	4413      	add	r3, r2
 8004026:	71fb      	strb	r3, [r7, #7]
        for(; *string != '\0'; string++){
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	3301      	adds	r3, #1
 800402c:	603b      	str	r3, [r7, #0]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e6      	bne.n	8004004 <lcd_setString+0x24>
        }
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	bd90      	pop	{r4, r7, pc}
 800403e:	bf00      	nop
 8004040:	08006828 	.word	0x08006828

08004044 <lcd_setLine>:

// V0.4;dnd1;add;drawLine() function

void lcd_setLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t state)
{
 8004044:	b590      	push	{r4, r7, lr}
 8004046:	b08b      	sub	sp, #44	; 0x2c
 8004048:	af00      	add	r7, sp, #0
 800404a:	4604      	mov	r4, r0
 800404c:	4608      	mov	r0, r1
 800404e:	4611      	mov	r1, r2
 8004050:	461a      	mov	r2, r3
 8004052:	4623      	mov	r3, r4
 8004054:	81fb      	strh	r3, [r7, #14]
 8004056:	4603      	mov	r3, r0
 8004058:	81bb      	strh	r3, [r7, #12]
 800405a:	460b      	mov	r3, r1
 800405c:	817b      	strh	r3, [r7, #10]
 800405e:	4613      	mov	r3, r2
 8004060:	813b      	strh	r3, [r7, #8]
	int16_t i, x[2], y[2];
	float xF, yF;

	xF = x1, x[1] = 0;
 8004062:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004066:	ee07 3a90 	vmov	s15, r3
 800406a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800406e:	edc7 7a08 	vstr	s15, [r7, #32]
 8004072:	2300      	movs	r3, #0
 8004074:	837b      	strh	r3, [r7, #26]
	yF = y1, y[1] = 0;
 8004076:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800407a:	ee07 3a90 	vmov	s15, r3
 800407e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004082:	edc7 7a07 	vstr	s15, [r7, #28]
 8004086:	2300      	movs	r3, #0
 8004088:	82fb      	strh	r3, [r7, #22]

	x[0] = abs(x2-x1);
 800408a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800408e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	bfb8      	it	lt
 8004098:	425b      	neglt	r3, r3
 800409a:	b21b      	sxth	r3, r3
 800409c:	833b      	strh	r3, [r7, #24]
	y[0] = abs(y2-y1);
 800409e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80040a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bfb8      	it	lt
 80040ac:	425b      	neglt	r3, r3
 80040ae:	b21b      	sxth	r3, r3
 80040b0:	82bb      	strh	r3, [r7, #20]

	if(x[0]) x[1] = (x2-x1)/x[0];
 80040b2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <lcd_setLine+0x8c>
 80040ba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80040be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80040c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80040cc:	b21b      	sxth	r3, r3
 80040ce:	837b      	strh	r3, [r7, #26]
	if(y[0]) y[1] = (y2-y1)/y[0];
 80040d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <lcd_setLine+0xaa>
 80040d8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80040dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80040e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80040ea:	b21b      	sxth	r3, r3
 80040ec:	82fb      	strh	r3, [r7, #22]

	if(x[0] >= y[0]) {
 80040ee:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80040f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	db5f      	blt.n	80041ba <lcd_setLine+0x176>
		for(i = 0; i<x[0]; i++) {
 80040fa:	2300      	movs	r3, #0
 80040fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80040fe:	e055      	b.n	80041ac <lcd_setLine+0x168>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 8004100:	edd7 7a08 	vldr	s15, [r7, #32]
 8004104:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800410c:	db20      	blt.n	8004150 <lcd_setLine+0x10c>
 800410e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004112:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411a:	db19      	blt.n	8004150 <lcd_setLine+0x10c>
 800411c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004124:	edc7 7a01 	vstr	s15, [r7, #4]
 8004128:	793b      	ldrb	r3, [r7, #4]
 800412a:	b2d8      	uxtb	r0, r3
 800412c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004134:	edc7 7a01 	vstr	s15, [r7, #4]
 8004138:	793b      	ldrb	r3, [r7, #4]
 800413a:	b2d9      	uxtb	r1, r3
 800413c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf14      	ite	ne
 8004144:	2301      	movne	r3, #1
 8004146:	2300      	moveq	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	461a      	mov	r2, r3
 800414c:	f7ff fe86 	bl	8003e5c <lcd_setPixel>
			xF += x[1];
 8004150:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004154:	ee07 3a90 	vmov	s15, r3
 8004158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800415c:	ed97 7a08 	vldr	s14, [r7, #32]
 8004160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004164:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += ((float)y[0]/x[0])*y[1];
 8004168:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800416c:	ee07 3a90 	vmov	s15, r3
 8004170:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004174:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004178:	ee07 3a90 	vmov	s15, r3
 800417c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004180:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004184:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004188:	ee07 3a90 	vmov	s15, r3
 800418c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004194:	ed97 7a07 	vldr	s14, [r7, #28]
 8004198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800419c:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<x[0]; i++) {
 80041a0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3301      	adds	r3, #1
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80041ac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80041b0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80041b4:	429a      	cmp	r2, r3
 80041b6:	dba3      	blt.n	8004100 <lcd_setLine+0xbc>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
			xF += ((float)x[0]/y[0])*x[1];
			yF += y[1];
		}
	}
}
 80041b8:	e05e      	b.n	8004278 <lcd_setLine+0x234>
		for(i = 0; i<y[0]; i++) {
 80041ba:	2300      	movs	r3, #0
 80041bc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80041be:	e055      	b.n	800426c <lcd_setLine+0x228>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 80041c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80041c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041cc:	db20      	blt.n	8004210 <lcd_setLine+0x1cc>
 80041ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80041d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041da:	db19      	blt.n	8004210 <lcd_setLine+0x1cc>
 80041dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80041e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041e4:	edc7 7a01 	vstr	s15, [r7, #4]
 80041e8:	793b      	ldrb	r3, [r7, #4]
 80041ea:	b2d8      	uxtb	r0, r3
 80041ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80041f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80041f8:	793b      	ldrb	r3, [r7, #4]
 80041fa:	b2d9      	uxtb	r1, r3
 80041fc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	bf14      	ite	ne
 8004204:	2301      	movne	r3, #1
 8004206:	2300      	moveq	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	461a      	mov	r2, r3
 800420c:	f7ff fe26 	bl	8003e5c <lcd_setPixel>
			xF += ((float)x[0]/y[0])*x[1];
 8004210:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004214:	ee07 3a90 	vmov	s15, r3
 8004218:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800421c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004220:	ee07 3a90 	vmov	s15, r3
 8004224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800422c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004230:	ee07 3a90 	vmov	s15, r3
 8004234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800423c:	ed97 7a08 	vldr	s14, [r7, #32]
 8004240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004244:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += y[1];
 8004248:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800424c:	ee07 3a90 	vmov	s15, r3
 8004250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004254:	ed97 7a07 	vldr	s14, [r7, #28]
 8004258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800425c:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<y[0]; i++) {
 8004260:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004264:	b29b      	uxth	r3, r3
 8004266:	3301      	adds	r3, #1
 8004268:	b29b      	uxth	r3, r3
 800426a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800426c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004270:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8004274:	429a      	cmp	r2, r3
 8004276:	dba3      	blt.n	80041c0 <lcd_setLine+0x17c>
}
 8004278:	bf00      	nop
 800427a:	372c      	adds	r7, #44	; 0x2c
 800427c:	46bd      	mov	sp, r7
 800427e:	bd90      	pop	{r4, r7, pc}

08004280 <lcd_show>:

void lcd_show(void){
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 8004286:	2300      	movs	r3, #0
 8004288:	71fb      	strb	r3, [r7, #7]
 800428a:	e022      	b.n	80042d2 <lcd_show+0x52>
			  //$dnd added (instruction)
        sendInstruction((instruction) (PAGE_ADDRESS_SET_0 + pageIndex));
 800428c:	79fb      	ldrb	r3, [r7, #7]
 800428e:	3b50      	subs	r3, #80	; 0x50
 8004290:	b2db      	uxtb	r3, r3
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff fd7a 	bl	8003d8c <sendInstruction>
        sendInstruction(COLUMN_ADDRESS_SET_BIT);
 8004298:	2010      	movs	r0, #16
 800429a:	f7ff fd77 	bl	8003d8c <sendInstruction>
        sendInstruction(BOOSTER_RATIO_SET);
 800429e:	2000      	movs	r0, #0
 80042a0:	f7ff fd74 	bl	8003d8c <sendInstruction>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 80042a4:	2300      	movs	r3, #0
 80042a6:	71bb      	strb	r3, [r7, #6]
 80042a8:	e00c      	b.n	80042c4 <lcd_show+0x44>
            sendData(displayBuffer[rowIndex].pageSet[pageIndex]);
 80042aa:	79ba      	ldrb	r2, [r7, #6]
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	490c      	ldr	r1, [pc, #48]	; (80042e0 <lcd_show+0x60>)
 80042b0:	0092      	lsls	r2, r2, #2
 80042b2:	440a      	add	r2, r1
 80042b4:	4413      	add	r3, r2
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff fd81 	bl	8003dc0 <sendData>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 80042be:	79bb      	ldrb	r3, [r7, #6]
 80042c0:	3301      	adds	r3, #1
 80042c2:	71bb      	strb	r3, [r7, #6]
 80042c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	daee      	bge.n	80042aa <lcd_show+0x2a>
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	3301      	adds	r3, #1
 80042d0:	71fb      	strb	r3, [r7, #7]
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	d9d9      	bls.n	800428c <lcd_show+0xc>
    }
}
 80042d8:	bf00      	nop
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	200001f8 	.word	0x200001f8

080042e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af02      	add	r7, sp, #8


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80042ea:	f7fc fda9 	bl	8000e40 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80042ee:	f000 f86d 	bl	80043cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80042f2:	f7ff fbb9 	bl	8003a68 <MX_GPIO_Init>
	MX_SPI1_Init();
 80042f6:	f000 f8db 	bl	80044b0 <MX_SPI1_Init>
	MX_I2C1_Init();
 80042fa:	f7ff fc91 	bl	8003c20 <MX_I2C1_Init>
	MX_TIM2_Init(100);
 80042fe:	2064      	movs	r0, #100	; 0x64
 8004300:	f000 fa0c 	bl	800471c <MX_TIM2_Init>
	MX_TIM6_Init();
 8004304:	f000 fa82 	bl	800480c <MX_TIM6_Init>
	MX_ADC1_Init();
 8004308:	f7ff fa96 	bl	8003838 <MX_ADC1_Init>
	MX_ADC2_Init();
 800430c:	f7ff fae6 	bl	80038dc <MX_ADC2_Init>

	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8004310:	2201      	movs	r2, #1
 8004312:	2110      	movs	r1, #16
 8004314:	4825      	ldr	r0, [pc, #148]	; (80043ac <main+0xc8>)
 8004316:	f7fd fcc7 	bl	8001ca8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800431a:	2201      	movs	r2, #1
 800431c:	2180      	movs	r1, #128	; 0x80
 800431e:	4824      	ldr	r0, [pc, #144]	; (80043b0 <main+0xcc>)
 8004320:	f7fd fcc2 	bl	8001ca8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8004324:	2201      	movs	r2, #1
 8004326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800432a:	4822      	ldr	r0, [pc, #136]	; (80043b4 <main+0xd0>)
 800432c:	f7fd fcbc 	bl	8001ca8 <HAL_GPIO_WritePin>

	sendData(0xA5);
 8004330:	20a5      	movs	r0, #165	; 0xa5
 8004332:	f7ff fd45 	bl	8003dc0 <sendData>

	// Initialise LCD and show "Welcome" top/left justified
	lcd_init();
 8004336:	f7ff fd70 	bl	8003e1a <lcd_init>
	lcd_clear();
 800433a:	f7ff fdc9 	bl	8003ed0 <lcd_clear>

	lcd_setLine(127,0,127,31,1);
 800433e:	2301      	movs	r3, #1
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	231f      	movs	r3, #31
 8004344:	227f      	movs	r2, #127	; 0x7f
 8004346:	2100      	movs	r1, #0
 8004348:	207f      	movs	r0, #127	; 0x7f
 800434a:	f7ff fe7b 	bl	8004044 <lcd_setLine>
	lcd_setLine(0,0,0,31,1);
 800434e:	2301      	movs	r3, #1
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	231f      	movs	r3, #31
 8004354:	2200      	movs	r2, #0
 8004356:	2100      	movs	r1, #0
 8004358:	2000      	movs	r0, #0
 800435a:	f7ff fe73 	bl	8004044 <lcd_setLine>
	lcd_setString(4,16,"",LCD_FONT_8,false);
 800435e:	2300      	movs	r3, #0
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	2300      	movs	r3, #0
 8004364:	4a14      	ldr	r2, [pc, #80]	; (80043b8 <main+0xd4>)
 8004366:	2110      	movs	r1, #16
 8004368:	2004      	movs	r0, #4
 800436a:	f7ff fe39 	bl	8003fe0 <lcd_setString>
	lcd_show();
 800436e:	f7ff ff87 	bl	8004280 <lcd_show>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004372:	2108      	movs	r1, #8
 8004374:	4811      	ldr	r0, [pc, #68]	; (80043bc <main+0xd8>)
 8004376:	f7fe fd4f 	bl	8002e18 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 800437a:	4811      	ldr	r0, [pc, #68]	; (80043c0 <main+0xdc>)
 800437c:	f7fe fcf3 	bl	8002d66 <HAL_TIM_Base_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_ADC_Start(&hadc1);
 8004380:	4810      	ldr	r0, [pc, #64]	; (80043c4 <main+0xe0>)
 8004382:	f7fc fe35 	bl	8000ff0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 50);
 8004386:	2132      	movs	r1, #50	; 0x32
 8004388:	480e      	ldr	r0, [pc, #56]	; (80043c4 <main+0xe0>)
 800438a:	f7fc ff2a 	bl	80011e2 <HAL_ADC_PollForConversion>
		adc_result = HAL_ADC_GetValue(&hadc1);
 800438e:	480d      	ldr	r0, [pc, #52]	; (80043c4 <main+0xe0>)
 8004390:	f7fc ffab 	bl	80012ea <HAL_ADC_GetValue>
 8004394:	4602      	mov	r2, r0
 8004396:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <main+0xe4>)
 8004398:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 800439a:	480a      	ldr	r0, [pc, #40]	; (80043c4 <main+0xe0>)
 800439c:	f7fc feee 	bl	800117c <HAL_ADC_Stop>

		HAL_Delay(1000);
 80043a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043a4:	f7fc fdbe 	bl	8000f24 <HAL_Delay>
		HAL_ADC_Start(&hadc1);
 80043a8:	e7ea      	b.n	8004380 <main+0x9c>
 80043aa:	bf00      	nop
 80043ac:	40020400 	.word	0x40020400
 80043b0:	40020800 	.word	0x40020800
 80043b4:	40020000 	.word	0x40020000
 80043b8:	08006494 	.word	0x08006494
 80043bc:	20000588 	.word	0x20000588
 80043c0:	20000548 	.word	0x20000548
 80043c4:	20000454 	.word	0x20000454
 80043c8:	200003f8 	.word	0x200003f8

080043cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b094      	sub	sp, #80	; 0x50
 80043d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043d2:	f107 031c 	add.w	r3, r7, #28
 80043d6:	2234      	movs	r2, #52	; 0x34
 80043d8:	2100      	movs	r1, #0
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fb14 	bl	8004a08 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043e0:	f107 0308 	add.w	r3, r7, #8
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	605a      	str	r2, [r3, #4]
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	60da      	str	r2, [r3, #12]
 80043ee:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 80043f0:	2300      	movs	r3, #0
 80043f2:	607b      	str	r3, [r7, #4]
 80043f4:	4b23      	ldr	r3, [pc, #140]	; (8004484 <SystemClock_Config+0xb8>)
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	4a22      	ldr	r2, [pc, #136]	; (8004484 <SystemClock_Config+0xb8>)
 80043fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043fe:	6413      	str	r3, [r2, #64]	; 0x40
 8004400:	4b20      	ldr	r3, [pc, #128]	; (8004484 <SystemClock_Config+0xb8>)
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004408:	607b      	str	r3, [r7, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800440c:	2300      	movs	r3, #0
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	4b1d      	ldr	r3, [pc, #116]	; (8004488 <SystemClock_Config+0xbc>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004418:	4a1b      	ldr	r2, [pc, #108]	; (8004488 <SystemClock_Config+0xbc>)
 800441a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	4b19      	ldr	r3, [pc, #100]	; (8004488 <SystemClock_Config+0xbc>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004428:	603b      	str	r3, [r7, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800442c:	2302      	movs	r3, #2
 800442e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004430:	2301      	movs	r3, #1
 8004432:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004434:	2310      	movs	r3, #16
 8004436:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004438:	2300      	movs	r3, #0
 800443a:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800443c:	f107 031c 	add.w	r3, r7, #28
 8004440:	4618      	mov	r0, r3
 8004442:	f7fd ffc7 	bl	80023d4 <HAL_RCC_OscConfig>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <SystemClock_Config+0x84>
	{
	Error_Handler();
 800444c:	f000 f81e 	bl	800448c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004450:	230f      	movs	r3, #15
 8004452:	60bb      	str	r3, [r7, #8]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004458:	2300      	movs	r3, #0
 800445a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004460:	2300      	movs	r3, #0
 8004462:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004464:	f107 0308 	add.w	r3, r7, #8
 8004468:	2100      	movs	r1, #0
 800446a:	4618      	mov	r0, r3
 800446c:	f7fd fd5e 	bl	8001f2c <HAL_RCC_ClockConfig>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <SystemClock_Config+0xae>
	{
	Error_Handler();
 8004476:	f000 f809 	bl	800448c <Error_Handler>
	}
}
 800447a:	bf00      	nop
 800447c:	3750      	adds	r7, #80	; 0x50
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40023800 	.word	0x40023800
 8004488:	40007000 	.word	0x40007000

0800448c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	lcd_setString(4,16,"	ERROR OCCURED	",LCD_FONT_8,false);
 8004492:	2300      	movs	r3, #0
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	2300      	movs	r3, #0
 8004498:	4a04      	ldr	r2, [pc, #16]	; (80044ac <Error_Handler+0x20>)
 800449a:	2110      	movs	r1, #16
 800449c:	2004      	movs	r0, #4
 800449e:	f7ff fd9f 	bl	8003fe0 <lcd_setString>
	lcd_show();
 80044a2:	f7ff feed 	bl	8004280 <lcd_show>
	/* USER CODE END Error_Handler_Debug */
}
 80044a6:	bf00      	nop
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	08006498 	.word	0x08006498

080044b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80044b4:	4b17      	ldr	r3, [pc, #92]	; (8004514 <MX_SPI1_Init+0x64>)
 80044b6:	4a18      	ldr	r2, [pc, #96]	; (8004518 <MX_SPI1_Init+0x68>)
 80044b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80044ba:	4b16      	ldr	r3, [pc, #88]	; (8004514 <MX_SPI1_Init+0x64>)
 80044bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80044c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80044c2:	4b14      	ldr	r3, [pc, #80]	; (8004514 <MX_SPI1_Init+0x64>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80044c8:	4b12      	ldr	r3, [pc, #72]	; (8004514 <MX_SPI1_Init+0x64>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80044ce:	4b11      	ldr	r3, [pc, #68]	; (8004514 <MX_SPI1_Init+0x64>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80044d4:	4b0f      	ldr	r3, [pc, #60]	; (8004514 <MX_SPI1_Init+0x64>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80044da:	4b0e      	ldr	r3, [pc, #56]	; (8004514 <MX_SPI1_Init+0x64>)
 80044dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80044e2:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <MX_SPI1_Init+0x64>)
 80044e4:	2210      	movs	r2, #16
 80044e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044e8:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <MX_SPI1_Init+0x64>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80044ee:	4b09      	ldr	r3, [pc, #36]	; (8004514 <MX_SPI1_Init+0x64>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044f4:	4b07      	ldr	r3, [pc, #28]	; (8004514 <MX_SPI1_Init+0x64>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <MX_SPI1_Init+0x64>)
 80044fc:	220a      	movs	r2, #10
 80044fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004500:	4804      	ldr	r0, [pc, #16]	; (8004514 <MX_SPI1_Init+0x64>)
 8004502:	f7fe f9c1 	bl	8002888 <HAL_SPI_Init>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800450c:	f7ff ffbe 	bl	800448c <Error_Handler>
  }

}
 8004510:	bf00      	nop
 8004512:	bd80      	pop	{r7, pc}
 8004514:	200004f0 	.word	0x200004f0
 8004518:	40013000 	.word	0x40013000

0800451c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	; 0x28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004524:	f107 0314 	add.w	r3, r7, #20
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a19      	ldr	r2, [pc, #100]	; (80045a0 <HAL_SPI_MspInit+0x84>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d12b      	bne.n	8004596 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800453e:	2300      	movs	r3, #0
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	4b18      	ldr	r3, [pc, #96]	; (80045a4 <HAL_SPI_MspInit+0x88>)
 8004544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004546:	4a17      	ldr	r2, [pc, #92]	; (80045a4 <HAL_SPI_MspInit+0x88>)
 8004548:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800454c:	6453      	str	r3, [r2, #68]	; 0x44
 800454e:	4b15      	ldr	r3, [pc, #84]	; (80045a4 <HAL_SPI_MspInit+0x88>)
 8004550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	4b11      	ldr	r3, [pc, #68]	; (80045a4 <HAL_SPI_MspInit+0x88>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	4a10      	ldr	r2, [pc, #64]	; (80045a4 <HAL_SPI_MspInit+0x88>)
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	6313      	str	r3, [r2, #48]	; 0x30
 800456a:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <HAL_SPI_MspInit+0x88>)
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 8004576:	23a0      	movs	r3, #160	; 0xa0
 8004578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457a:	2302      	movs	r3, #2
 800457c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004582:	2303      	movs	r3, #3
 8004584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004586:	2305      	movs	r3, #5
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800458a:	f107 0314 	add.w	r3, r7, #20
 800458e:	4619      	mov	r1, r3
 8004590:	4805      	ldr	r0, [pc, #20]	; (80045a8 <HAL_SPI_MspInit+0x8c>)
 8004592:	f7fd f9f7 	bl	8001984 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004596:	bf00      	nop
 8004598:	3728      	adds	r7, #40	; 0x28
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40013000 	.word	0x40013000
 80045a4:	40023800 	.word	0x40023800
 80045a8:	40020000 	.word	0x40020000

080045ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045b2:	2300      	movs	r3, #0
 80045b4:	607b      	str	r3, [r7, #4]
 80045b6:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <HAL_MspInit+0x4c>)
 80045b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ba:	4a0f      	ldr	r2, [pc, #60]	; (80045f8 <HAL_MspInit+0x4c>)
 80045bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045c0:	6453      	str	r3, [r2, #68]	; 0x44
 80045c2:	4b0d      	ldr	r3, [pc, #52]	; (80045f8 <HAL_MspInit+0x4c>)
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ca:	607b      	str	r3, [r7, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045ce:	2300      	movs	r3, #0
 80045d0:	603b      	str	r3, [r7, #0]
 80045d2:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <HAL_MspInit+0x4c>)
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	4a08      	ldr	r2, [pc, #32]	; (80045f8 <HAL_MspInit+0x4c>)
 80045d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045dc:	6413      	str	r3, [r2, #64]	; 0x40
 80045de:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <HAL_MspInit+0x4c>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e6:	603b      	str	r3, [r7, #0]
 80045e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40023800 	.word	0x40023800

080045fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004600:	bf00      	nop
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800460a:	b480      	push	{r7}
 800460c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800460e:	e7fe      	b.n	800460e <HardFault_Handler+0x4>

08004610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004614:	e7fe      	b.n	8004614 <MemManage_Handler+0x4>

08004616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004616:	b480      	push	{r7}
 8004618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800461a:	e7fe      	b.n	800461a <BusFault_Handler+0x4>

0800461c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004620:	e7fe      	b.n	8004620 <UsageFault_Handler+0x4>

08004622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004622:	b480      	push	{r7}
 8004624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004626:	bf00      	nop
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004634:	bf00      	nop
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800463e:	b480      	push	{r7}
 8004640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004642:	bf00      	nop
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004650:	f7fc fc48 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004654:	bf00      	nop
 8004656:	bd80      	pop	{r7, pc}

08004658 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004660:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <_sbrk+0x50>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <_sbrk+0x16>
		heap_end = &end;
 8004668:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <_sbrk+0x50>)
 800466a:	4a10      	ldr	r2, [pc, #64]	; (80046ac <_sbrk+0x54>)
 800466c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800466e:	4b0e      	ldr	r3, [pc, #56]	; (80046a8 <_sbrk+0x50>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004674:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <_sbrk+0x50>)
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4413      	add	r3, r2
 800467c:	466a      	mov	r2, sp
 800467e:	4293      	cmp	r3, r2
 8004680:	d907      	bls.n	8004692 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004682:	f000 f997 	bl	80049b4 <__errno>
 8004686:	4602      	mov	r2, r0
 8004688:	230c      	movs	r3, #12
 800468a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800468c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004690:	e006      	b.n	80046a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8004692:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <_sbrk+0x50>)
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4413      	add	r3, r2
 800469a:	4a03      	ldr	r2, [pc, #12]	; (80046a8 <_sbrk+0x50>)
 800469c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800469e:	68fb      	ldr	r3, [r7, #12]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	200003fc 	.word	0x200003fc
 80046ac:	200005d0 	.word	0x200005d0

080046b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046b4:	4b16      	ldr	r3, [pc, #88]	; (8004710 <SystemInit+0x60>)
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ba:	4a15      	ldr	r2, [pc, #84]	; (8004710 <SystemInit+0x60>)
 80046bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80046c4:	4b13      	ldr	r3, [pc, #76]	; (8004714 <SystemInit+0x64>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a12      	ldr	r2, [pc, #72]	; (8004714 <SystemInit+0x64>)
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80046d0:	4b10      	ldr	r3, [pc, #64]	; (8004714 <SystemInit+0x64>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80046d6:	4b0f      	ldr	r3, [pc, #60]	; (8004714 <SystemInit+0x64>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a0e      	ldr	r2, [pc, #56]	; (8004714 <SystemInit+0x64>)
 80046dc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80046e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80046e6:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <SystemInit+0x64>)
 80046e8:	4a0b      	ldr	r2, [pc, #44]	; (8004718 <SystemInit+0x68>)
 80046ea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80046ec:	4b09      	ldr	r3, [pc, #36]	; (8004714 <SystemInit+0x64>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a08      	ldr	r2, [pc, #32]	; (8004714 <SystemInit+0x64>)
 80046f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80046f8:	4b06      	ldr	r3, [pc, #24]	; (8004714 <SystemInit+0x64>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80046fe:	4b04      	ldr	r3, [pc, #16]	; (8004710 <SystemInit+0x60>)
 8004700:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004704:	609a      	str	r2, [r3, #8]
#endif
}
 8004706:	bf00      	nop
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	e000ed00 	.word	0xe000ed00
 8004714:	40023800 	.word	0x40023800
 8004718:	24003010 	.word	0x24003010

0800471c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM2_Init(uint32_t prescaler)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b090      	sub	sp, #64	; 0x40
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004724:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	605a      	str	r2, [r3, #4]
 800472e:	609a      	str	r2, [r3, #8]
 8004730:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800473c:	f107 030c 	add.w	r3, r7, #12
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	605a      	str	r2, [r3, #4]
 8004746:	609a      	str	r2, [r3, #8]
 8004748:	60da      	str	r2, [r3, #12]
 800474a:	611a      	str	r2, [r3, #16]
 800474c:	615a      	str	r2, [r3, #20]
 800474e:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8004750:	4b2d      	ldr	r3, [pc, #180]	; (8004808 <MX_TIM2_Init+0xec>)
 8004752:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004756:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = prescaler;
 8004758:	4a2b      	ldr	r2, [pc, #172]	; (8004808 <MX_TIM2_Init+0xec>)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800475e:	4b2a      	ldr	r3, [pc, #168]	; (8004808 <MX_TIM2_Init+0xec>)
 8004760:	2200      	movs	r2, #0
 8004762:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 320;
 8004764:	4b28      	ldr	r3, [pc, #160]	; (8004808 <MX_TIM2_Init+0xec>)
 8004766:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800476a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800476c:	4b26      	ldr	r3, [pc, #152]	; (8004808 <MX_TIM2_Init+0xec>)
 800476e:	2200      	movs	r2, #0
 8004770:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004772:	4b25      	ldr	r3, [pc, #148]	; (8004808 <MX_TIM2_Init+0xec>)
 8004774:	2200      	movs	r2, #0
 8004776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004778:	4823      	ldr	r0, [pc, #140]	; (8004808 <MX_TIM2_Init+0xec>)
 800477a:	f7fe fac9 	bl	8002d10 <HAL_TIM_Base_Init>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8004784:	f7ff fe82 	bl	800448c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800478c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800478e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004792:	4619      	mov	r1, r3
 8004794:	481c      	ldr	r0, [pc, #112]	; (8004808 <MX_TIM2_Init+0xec>)
 8004796:	f7fe fc43 	bl	8003020 <HAL_TIM_ConfigClockSource>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80047a0:	f7ff fe74 	bl	800448c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80047a4:	4818      	ldr	r0, [pc, #96]	; (8004808 <MX_TIM2_Init+0xec>)
 80047a6:	f7fe fb02 	bl	8002dae <HAL_TIM_PWM_Init>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80047b0:	f7ff fe6c 	bl	800448c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047b4:	2300      	movs	r3, #0
 80047b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047b8:	2300      	movs	r3, #0
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80047bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047c0:	4619      	mov	r1, r3
 80047c2:	4811      	ldr	r0, [pc, #68]	; (8004808 <MX_TIM2_Init+0xec>)
 80047c4:	f7fe fff3 	bl	80037ae <HAL_TIMEx_MasterConfigSynchronization>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80047ce:	f7ff fe5d 	bl	800448c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047d2:	2360      	movs	r3, #96	; 0x60
 80047d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = 0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80047e2:	f107 030c 	add.w	r3, r7, #12
 80047e6:	2208      	movs	r2, #8
 80047e8:	4619      	mov	r1, r3
 80047ea:	4807      	ldr	r0, [pc, #28]	; (8004808 <MX_TIM2_Init+0xec>)
 80047ec:	f7fe fb52 	bl	8002e94 <HAL_TIM_PWM_ConfigChannel>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 80047f6:	f7ff fe49 	bl	800448c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80047fa:	4803      	ldr	r0, [pc, #12]	; (8004808 <MX_TIM2_Init+0xec>)
 80047fc:	f000 f878 	bl	80048f0 <HAL_TIM_MspPostInit>

}
 8004800:	bf00      	nop
 8004802:	3740      	adds	r7, #64	; 0x40
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20000588 	.word	0x20000588

0800480c <MX_TIM6_Init>:

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004812:	463b      	mov	r3, r7
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 800481a:	4b14      	ldr	r3, [pc, #80]	; (800486c <MX_TIM6_Init+0x60>)
 800481c:	4a14      	ldr	r2, [pc, #80]	; (8004870 <MX_TIM6_Init+0x64>)
 800481e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16;
 8004820:	4b12      	ldr	r3, [pc, #72]	; (800486c <MX_TIM6_Init+0x60>)
 8004822:	2210      	movs	r2, #16
 8004824:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004826:	4b11      	ldr	r3, [pc, #68]	; (800486c <MX_TIM6_Init+0x60>)
 8004828:	2200      	movs	r2, #0
 800482a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000000;
 800482c:	4b0f      	ldr	r3, [pc, #60]	; (800486c <MX_TIM6_Init+0x60>)
 800482e:	4a11      	ldr	r2, [pc, #68]	; (8004874 <MX_TIM6_Init+0x68>)
 8004830:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004832:	4b0e      	ldr	r3, [pc, #56]	; (800486c <MX_TIM6_Init+0x60>)
 8004834:	2200      	movs	r2, #0
 8004836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004838:	480c      	ldr	r0, [pc, #48]	; (800486c <MX_TIM6_Init+0x60>)
 800483a:	f7fe fa69 	bl	8002d10 <HAL_TIM_Base_Init>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8004844:	f7ff fe22 	bl	800448c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004848:	2300      	movs	r3, #0
 800484a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800484c:	2300      	movs	r3, #0
 800484e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004850:	463b      	mov	r3, r7
 8004852:	4619      	mov	r1, r3
 8004854:	4805      	ldr	r0, [pc, #20]	; (800486c <MX_TIM6_Init+0x60>)
 8004856:	f7fe ffaa 	bl	80037ae <HAL_TIMEx_MasterConfigSynchronization>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8004860:	f7ff fe14 	bl	800448c <Error_Handler>
  }

}
 8004864:	bf00      	nop
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	20000548 	.word	0x20000548
 8004870:	40001000 	.word	0x40001000
 8004874:	00989680 	.word	0x00989680

08004878 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  if(tim_baseHandle->Instance==TIM2)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004888:	d10e      	bne.n	80048a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	4b16      	ldr	r3, [pc, #88]	; (80048e8 <HAL_TIM_Base_MspInit+0x70>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	4a15      	ldr	r2, [pc, #84]	; (80048e8 <HAL_TIM_Base_MspInit+0x70>)
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	6413      	str	r3, [r2, #64]	; 0x40
 800489a:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <HAL_TIM_Base_MspInit+0x70>)
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80048a6:	e01a      	b.n	80048de <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a0f      	ldr	r2, [pc, #60]	; (80048ec <HAL_TIM_Base_MspInit+0x74>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d115      	bne.n	80048de <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80048b2:	2300      	movs	r3, #0
 80048b4:	60bb      	str	r3, [r7, #8]
 80048b6:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <HAL_TIM_Base_MspInit+0x70>)
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	4a0b      	ldr	r2, [pc, #44]	; (80048e8 <HAL_TIM_Base_MspInit+0x70>)
 80048bc:	f043 0310 	orr.w	r3, r3, #16
 80048c0:	6413      	str	r3, [r2, #64]	; 0x40
 80048c2:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <HAL_TIM_Base_MspInit+0x70>)
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	f003 0310 	and.w	r3, r3, #16
 80048ca:	60bb      	str	r3, [r7, #8]
 80048cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80048ce:	2200      	movs	r2, #0
 80048d0:	2101      	movs	r1, #1
 80048d2:	2036      	movs	r0, #54	; 0x36
 80048d4:	f7fd f81f 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80048d8:	2036      	movs	r0, #54	; 0x36
 80048da:	f7fd f838 	bl	800194e <HAL_NVIC_EnableIRQ>
}
 80048de:	bf00      	nop
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	40023800 	.word	0x40023800
 80048ec:	40001000 	.word	0x40001000

080048f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f8:	f107 030c 	add.w	r3, r7, #12
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	605a      	str	r2, [r3, #4]
 8004902:	609a      	str	r2, [r3, #8]
 8004904:	60da      	str	r2, [r3, #12]
 8004906:	611a      	str	r2, [r3, #16]

  if(timHandle->Instance==TIM2)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004910:	d11e      	bne.n	8004950 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004912:	2300      	movs	r3, #0
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	4b10      	ldr	r3, [pc, #64]	; (8004958 <HAL_TIM_MspPostInit+0x68>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	4a0f      	ldr	r2, [pc, #60]	; (8004958 <HAL_TIM_MspPostInit+0x68>)
 800491c:	f043 0302 	orr.w	r3, r3, #2
 8004920:	6313      	str	r3, [r2, #48]	; 0x30
 8004922:	4b0d      	ldr	r3, [pc, #52]	; (8004958 <HAL_TIM_MspPostInit+0x68>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	60bb      	str	r3, [r7, #8]
 800492c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10    ------> TIM2_CH3
    */

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800492e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004932:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004934:	2302      	movs	r3, #2
 8004936:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800493c:	2300      	movs	r3, #0
 800493e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004940:	2301      	movs	r3, #1
 8004942:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004944:	f107 030c 	add.w	r3, r7, #12
 8004948:	4619      	mov	r1, r3
 800494a:	4804      	ldr	r0, [pc, #16]	; (800495c <HAL_TIM_MspPostInit+0x6c>)
 800494c:	f7fd f81a 	bl	8001984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004950:	bf00      	nop
 8004952:	3720      	adds	r7, #32
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40023800 	.word	0x40023800
 800495c:	40020400 	.word	0x40020400

08004960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004998 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004964:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004966:	e003      	b.n	8004970 <LoopCopyDataInit>

08004968 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004968:	4b0c      	ldr	r3, [pc, #48]	; (800499c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800496a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800496c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800496e:	3104      	adds	r1, #4

08004970 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004970:	480b      	ldr	r0, [pc, #44]	; (80049a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004972:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004974:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004976:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004978:	d3f6      	bcc.n	8004968 <CopyDataInit>
  ldr  r2, =_sbss
 800497a:	4a0b      	ldr	r2, [pc, #44]	; (80049a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800497c:	e002      	b.n	8004984 <LoopFillZerobss>

0800497e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800497e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004980:	f842 3b04 	str.w	r3, [r2], #4

08004984 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004984:	4b09      	ldr	r3, [pc, #36]	; (80049ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004986:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004988:	d3f9      	bcc.n	800497e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800498a:	f7ff fe91 	bl	80046b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800498e:	f000 f817 	bl	80049c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004992:	f7ff fca7 	bl	80042e4 <main>
  bx  lr    
 8004996:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004998:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800499c:	08006a80 	.word	0x08006a80
  ldr  r0, =_sdata
 80049a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80049a4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80049a8:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80049ac:	200005cc 	.word	0x200005cc

080049b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049b0:	e7fe      	b.n	80049b0 <ADC_IRQHandler>
	...

080049b4 <__errno>:
 80049b4:	4b01      	ldr	r3, [pc, #4]	; (80049bc <__errno+0x8>)
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	2000000c 	.word	0x2000000c

080049c0 <__libc_init_array>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	4e0d      	ldr	r6, [pc, #52]	; (80049f8 <__libc_init_array+0x38>)
 80049c4:	4c0d      	ldr	r4, [pc, #52]	; (80049fc <__libc_init_array+0x3c>)
 80049c6:	1ba4      	subs	r4, r4, r6
 80049c8:	10a4      	asrs	r4, r4, #2
 80049ca:	2500      	movs	r5, #0
 80049cc:	42a5      	cmp	r5, r4
 80049ce:	d109      	bne.n	80049e4 <__libc_init_array+0x24>
 80049d0:	4e0b      	ldr	r6, [pc, #44]	; (8004a00 <__libc_init_array+0x40>)
 80049d2:	4c0c      	ldr	r4, [pc, #48]	; (8004a04 <__libc_init_array+0x44>)
 80049d4:	f001 fd46 	bl	8006464 <_init>
 80049d8:	1ba4      	subs	r4, r4, r6
 80049da:	10a4      	asrs	r4, r4, #2
 80049dc:	2500      	movs	r5, #0
 80049de:	42a5      	cmp	r5, r4
 80049e0:	d105      	bne.n	80049ee <__libc_init_array+0x2e>
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049e8:	4798      	blx	r3
 80049ea:	3501      	adds	r5, #1
 80049ec:	e7ee      	b.n	80049cc <__libc_init_array+0xc>
 80049ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049f2:	4798      	blx	r3
 80049f4:	3501      	adds	r5, #1
 80049f6:	e7f2      	b.n	80049de <__libc_init_array+0x1e>
 80049f8:	08006a78 	.word	0x08006a78
 80049fc:	08006a78 	.word	0x08006a78
 8004a00:	08006a78 	.word	0x08006a78
 8004a04:	08006a7c 	.word	0x08006a7c

08004a08 <memset>:
 8004a08:	4402      	add	r2, r0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d100      	bne.n	8004a12 <memset+0xa>
 8004a10:	4770      	bx	lr
 8004a12:	f803 1b01 	strb.w	r1, [r3], #1
 8004a16:	e7f9      	b.n	8004a0c <memset+0x4>

08004a18 <__cvt>:
 8004a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a1c:	ec55 4b10 	vmov	r4, r5, d0
 8004a20:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004a22:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004a26:	2d00      	cmp	r5, #0
 8004a28:	460e      	mov	r6, r1
 8004a2a:	4691      	mov	r9, r2
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	bfb8      	it	lt
 8004a30:	4622      	movlt	r2, r4
 8004a32:	462b      	mov	r3, r5
 8004a34:	f027 0720 	bic.w	r7, r7, #32
 8004a38:	bfbb      	ittet	lt
 8004a3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004a3e:	461d      	movlt	r5, r3
 8004a40:	2300      	movge	r3, #0
 8004a42:	232d      	movlt	r3, #45	; 0x2d
 8004a44:	bfb8      	it	lt
 8004a46:	4614      	movlt	r4, r2
 8004a48:	2f46      	cmp	r7, #70	; 0x46
 8004a4a:	700b      	strb	r3, [r1, #0]
 8004a4c:	d004      	beq.n	8004a58 <__cvt+0x40>
 8004a4e:	2f45      	cmp	r7, #69	; 0x45
 8004a50:	d100      	bne.n	8004a54 <__cvt+0x3c>
 8004a52:	3601      	adds	r6, #1
 8004a54:	2102      	movs	r1, #2
 8004a56:	e000      	b.n	8004a5a <__cvt+0x42>
 8004a58:	2103      	movs	r1, #3
 8004a5a:	ab03      	add	r3, sp, #12
 8004a5c:	9301      	str	r3, [sp, #4]
 8004a5e:	ab02      	add	r3, sp, #8
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	4632      	mov	r2, r6
 8004a64:	4653      	mov	r3, sl
 8004a66:	ec45 4b10 	vmov	d0, r4, r5
 8004a6a:	f000 fbad 	bl	80051c8 <_dtoa_r>
 8004a6e:	2f47      	cmp	r7, #71	; 0x47
 8004a70:	4680      	mov	r8, r0
 8004a72:	d102      	bne.n	8004a7a <__cvt+0x62>
 8004a74:	f019 0f01 	tst.w	r9, #1
 8004a78:	d026      	beq.n	8004ac8 <__cvt+0xb0>
 8004a7a:	2f46      	cmp	r7, #70	; 0x46
 8004a7c:	eb08 0906 	add.w	r9, r8, r6
 8004a80:	d111      	bne.n	8004aa6 <__cvt+0x8e>
 8004a82:	f898 3000 	ldrb.w	r3, [r8]
 8004a86:	2b30      	cmp	r3, #48	; 0x30
 8004a88:	d10a      	bne.n	8004aa0 <__cvt+0x88>
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	4620      	mov	r0, r4
 8004a90:	4629      	mov	r1, r5
 8004a92:	f7fb ffe5 	bl	8000a60 <__aeabi_dcmpeq>
 8004a96:	b918      	cbnz	r0, 8004aa0 <__cvt+0x88>
 8004a98:	f1c6 0601 	rsb	r6, r6, #1
 8004a9c:	f8ca 6000 	str.w	r6, [sl]
 8004aa0:	f8da 3000 	ldr.w	r3, [sl]
 8004aa4:	4499      	add	r9, r3
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	4620      	mov	r0, r4
 8004aac:	4629      	mov	r1, r5
 8004aae:	f7fb ffd7 	bl	8000a60 <__aeabi_dcmpeq>
 8004ab2:	b938      	cbnz	r0, 8004ac4 <__cvt+0xac>
 8004ab4:	2230      	movs	r2, #48	; 0x30
 8004ab6:	9b03      	ldr	r3, [sp, #12]
 8004ab8:	454b      	cmp	r3, r9
 8004aba:	d205      	bcs.n	8004ac8 <__cvt+0xb0>
 8004abc:	1c59      	adds	r1, r3, #1
 8004abe:	9103      	str	r1, [sp, #12]
 8004ac0:	701a      	strb	r2, [r3, #0]
 8004ac2:	e7f8      	b.n	8004ab6 <__cvt+0x9e>
 8004ac4:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ac8:	9b03      	ldr	r3, [sp, #12]
 8004aca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004acc:	eba3 0308 	sub.w	r3, r3, r8
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	b004      	add	sp, #16
 8004ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004ada <__exponent>:
 8004ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004adc:	2900      	cmp	r1, #0
 8004ade:	4604      	mov	r4, r0
 8004ae0:	bfba      	itte	lt
 8004ae2:	4249      	neglt	r1, r1
 8004ae4:	232d      	movlt	r3, #45	; 0x2d
 8004ae6:	232b      	movge	r3, #43	; 0x2b
 8004ae8:	2909      	cmp	r1, #9
 8004aea:	f804 2b02 	strb.w	r2, [r4], #2
 8004aee:	7043      	strb	r3, [r0, #1]
 8004af0:	dd20      	ble.n	8004b34 <__exponent+0x5a>
 8004af2:	f10d 0307 	add.w	r3, sp, #7
 8004af6:	461f      	mov	r7, r3
 8004af8:	260a      	movs	r6, #10
 8004afa:	fb91 f5f6 	sdiv	r5, r1, r6
 8004afe:	fb06 1115 	mls	r1, r6, r5, r1
 8004b02:	3130      	adds	r1, #48	; 0x30
 8004b04:	2d09      	cmp	r5, #9
 8004b06:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004b0a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004b0e:	4629      	mov	r1, r5
 8004b10:	dc09      	bgt.n	8004b26 <__exponent+0x4c>
 8004b12:	3130      	adds	r1, #48	; 0x30
 8004b14:	3b02      	subs	r3, #2
 8004b16:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004b1a:	42bb      	cmp	r3, r7
 8004b1c:	4622      	mov	r2, r4
 8004b1e:	d304      	bcc.n	8004b2a <__exponent+0x50>
 8004b20:	1a10      	subs	r0, r2, r0
 8004b22:	b003      	add	sp, #12
 8004b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b26:	4613      	mov	r3, r2
 8004b28:	e7e7      	b.n	8004afa <__exponent+0x20>
 8004b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b2e:	f804 2b01 	strb.w	r2, [r4], #1
 8004b32:	e7f2      	b.n	8004b1a <__exponent+0x40>
 8004b34:	2330      	movs	r3, #48	; 0x30
 8004b36:	4419      	add	r1, r3
 8004b38:	7083      	strb	r3, [r0, #2]
 8004b3a:	1d02      	adds	r2, r0, #4
 8004b3c:	70c1      	strb	r1, [r0, #3]
 8004b3e:	e7ef      	b.n	8004b20 <__exponent+0x46>

08004b40 <_printf_float>:
 8004b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b44:	b08d      	sub	sp, #52	; 0x34
 8004b46:	460c      	mov	r4, r1
 8004b48:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004b4c:	4616      	mov	r6, r2
 8004b4e:	461f      	mov	r7, r3
 8004b50:	4605      	mov	r5, r0
 8004b52:	f001 f8f1 	bl	8005d38 <_localeconv_r>
 8004b56:	6803      	ldr	r3, [r0, #0]
 8004b58:	9304      	str	r3, [sp, #16]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fb fb54 	bl	8000208 <strlen>
 8004b60:	2300      	movs	r3, #0
 8004b62:	930a      	str	r3, [sp, #40]	; 0x28
 8004b64:	f8d8 3000 	ldr.w	r3, [r8]
 8004b68:	9005      	str	r0, [sp, #20]
 8004b6a:	3307      	adds	r3, #7
 8004b6c:	f023 0307 	bic.w	r3, r3, #7
 8004b70:	f103 0208 	add.w	r2, r3, #8
 8004b74:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004b78:	f8d4 b000 	ldr.w	fp, [r4]
 8004b7c:	f8c8 2000 	str.w	r2, [r8]
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b88:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004b8c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b90:	9307      	str	r3, [sp, #28]
 8004b92:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b9a:	4ba7      	ldr	r3, [pc, #668]	; (8004e38 <_printf_float+0x2f8>)
 8004b9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ba0:	f7fb ff90 	bl	8000ac4 <__aeabi_dcmpun>
 8004ba4:	bb70      	cbnz	r0, 8004c04 <_printf_float+0xc4>
 8004ba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004baa:	4ba3      	ldr	r3, [pc, #652]	; (8004e38 <_printf_float+0x2f8>)
 8004bac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bb0:	f7fb ff6a 	bl	8000a88 <__aeabi_dcmple>
 8004bb4:	bb30      	cbnz	r0, 8004c04 <_printf_float+0xc4>
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	2300      	movs	r3, #0
 8004bba:	4640      	mov	r0, r8
 8004bbc:	4649      	mov	r1, r9
 8004bbe:	f7fb ff59 	bl	8000a74 <__aeabi_dcmplt>
 8004bc2:	b110      	cbz	r0, 8004bca <_printf_float+0x8a>
 8004bc4:	232d      	movs	r3, #45	; 0x2d
 8004bc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bca:	4a9c      	ldr	r2, [pc, #624]	; (8004e3c <_printf_float+0x2fc>)
 8004bcc:	4b9c      	ldr	r3, [pc, #624]	; (8004e40 <_printf_float+0x300>)
 8004bce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004bd2:	bf8c      	ite	hi
 8004bd4:	4690      	movhi	r8, r2
 8004bd6:	4698      	movls	r8, r3
 8004bd8:	2303      	movs	r3, #3
 8004bda:	f02b 0204 	bic.w	r2, fp, #4
 8004bde:	6123      	str	r3, [r4, #16]
 8004be0:	6022      	str	r2, [r4, #0]
 8004be2:	f04f 0900 	mov.w	r9, #0
 8004be6:	9700      	str	r7, [sp, #0]
 8004be8:	4633      	mov	r3, r6
 8004bea:	aa0b      	add	r2, sp, #44	; 0x2c
 8004bec:	4621      	mov	r1, r4
 8004bee:	4628      	mov	r0, r5
 8004bf0:	f000 f9e6 	bl	8004fc0 <_printf_common>
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	f040 808d 	bne.w	8004d14 <_printf_float+0x1d4>
 8004bfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bfe:	b00d      	add	sp, #52	; 0x34
 8004c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c04:	4642      	mov	r2, r8
 8004c06:	464b      	mov	r3, r9
 8004c08:	4640      	mov	r0, r8
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	f7fb ff5a 	bl	8000ac4 <__aeabi_dcmpun>
 8004c10:	b110      	cbz	r0, 8004c18 <_printf_float+0xd8>
 8004c12:	4a8c      	ldr	r2, [pc, #560]	; (8004e44 <_printf_float+0x304>)
 8004c14:	4b8c      	ldr	r3, [pc, #560]	; (8004e48 <_printf_float+0x308>)
 8004c16:	e7da      	b.n	8004bce <_printf_float+0x8e>
 8004c18:	6861      	ldr	r1, [r4, #4]
 8004c1a:	1c4b      	adds	r3, r1, #1
 8004c1c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004c20:	a80a      	add	r0, sp, #40	; 0x28
 8004c22:	d13e      	bne.n	8004ca2 <_printf_float+0x162>
 8004c24:	2306      	movs	r3, #6
 8004c26:	6063      	str	r3, [r4, #4]
 8004c28:	2300      	movs	r3, #0
 8004c2a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004c2e:	ab09      	add	r3, sp, #36	; 0x24
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	ec49 8b10 	vmov	d0, r8, r9
 8004c36:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004c3a:	6022      	str	r2, [r4, #0]
 8004c3c:	f8cd a004 	str.w	sl, [sp, #4]
 8004c40:	6861      	ldr	r1, [r4, #4]
 8004c42:	4628      	mov	r0, r5
 8004c44:	f7ff fee8 	bl	8004a18 <__cvt>
 8004c48:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004c4c:	2b47      	cmp	r3, #71	; 0x47
 8004c4e:	4680      	mov	r8, r0
 8004c50:	d109      	bne.n	8004c66 <_printf_float+0x126>
 8004c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c54:	1cd8      	adds	r0, r3, #3
 8004c56:	db02      	blt.n	8004c5e <_printf_float+0x11e>
 8004c58:	6862      	ldr	r2, [r4, #4]
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	dd47      	ble.n	8004cee <_printf_float+0x1ae>
 8004c5e:	f1aa 0a02 	sub.w	sl, sl, #2
 8004c62:	fa5f fa8a 	uxtb.w	sl, sl
 8004c66:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004c6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c6c:	d824      	bhi.n	8004cb8 <_printf_float+0x178>
 8004c6e:	3901      	subs	r1, #1
 8004c70:	4652      	mov	r2, sl
 8004c72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c76:	9109      	str	r1, [sp, #36]	; 0x24
 8004c78:	f7ff ff2f 	bl	8004ada <__exponent>
 8004c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c7e:	1813      	adds	r3, r2, r0
 8004c80:	2a01      	cmp	r2, #1
 8004c82:	4681      	mov	r9, r0
 8004c84:	6123      	str	r3, [r4, #16]
 8004c86:	dc02      	bgt.n	8004c8e <_printf_float+0x14e>
 8004c88:	6822      	ldr	r2, [r4, #0]
 8004c8a:	07d1      	lsls	r1, r2, #31
 8004c8c:	d501      	bpl.n	8004c92 <_printf_float+0x152>
 8004c8e:	3301      	adds	r3, #1
 8004c90:	6123      	str	r3, [r4, #16]
 8004c92:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0a5      	beq.n	8004be6 <_printf_float+0xa6>
 8004c9a:	232d      	movs	r3, #45	; 0x2d
 8004c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ca0:	e7a1      	b.n	8004be6 <_printf_float+0xa6>
 8004ca2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004ca6:	f000 8177 	beq.w	8004f98 <_printf_float+0x458>
 8004caa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004cae:	d1bb      	bne.n	8004c28 <_printf_float+0xe8>
 8004cb0:	2900      	cmp	r1, #0
 8004cb2:	d1b9      	bne.n	8004c28 <_printf_float+0xe8>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e7b6      	b.n	8004c26 <_printf_float+0xe6>
 8004cb8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004cbc:	d119      	bne.n	8004cf2 <_printf_float+0x1b2>
 8004cbe:	2900      	cmp	r1, #0
 8004cc0:	6863      	ldr	r3, [r4, #4]
 8004cc2:	dd0c      	ble.n	8004cde <_printf_float+0x19e>
 8004cc4:	6121      	str	r1, [r4, #16]
 8004cc6:	b913      	cbnz	r3, 8004cce <_printf_float+0x18e>
 8004cc8:	6822      	ldr	r2, [r4, #0]
 8004cca:	07d2      	lsls	r2, r2, #31
 8004ccc:	d502      	bpl.n	8004cd4 <_printf_float+0x194>
 8004cce:	3301      	adds	r3, #1
 8004cd0:	440b      	add	r3, r1
 8004cd2:	6123      	str	r3, [r4, #16]
 8004cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cd6:	65a3      	str	r3, [r4, #88]	; 0x58
 8004cd8:	f04f 0900 	mov.w	r9, #0
 8004cdc:	e7d9      	b.n	8004c92 <_printf_float+0x152>
 8004cde:	b913      	cbnz	r3, 8004ce6 <_printf_float+0x1a6>
 8004ce0:	6822      	ldr	r2, [r4, #0]
 8004ce2:	07d0      	lsls	r0, r2, #31
 8004ce4:	d501      	bpl.n	8004cea <_printf_float+0x1aa>
 8004ce6:	3302      	adds	r3, #2
 8004ce8:	e7f3      	b.n	8004cd2 <_printf_float+0x192>
 8004cea:	2301      	movs	r3, #1
 8004cec:	e7f1      	b.n	8004cd2 <_printf_float+0x192>
 8004cee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004cf2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	db05      	blt.n	8004d06 <_printf_float+0x1c6>
 8004cfa:	6822      	ldr	r2, [r4, #0]
 8004cfc:	6123      	str	r3, [r4, #16]
 8004cfe:	07d1      	lsls	r1, r2, #31
 8004d00:	d5e8      	bpl.n	8004cd4 <_printf_float+0x194>
 8004d02:	3301      	adds	r3, #1
 8004d04:	e7e5      	b.n	8004cd2 <_printf_float+0x192>
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	bfd4      	ite	le
 8004d0a:	f1c3 0302 	rsble	r3, r3, #2
 8004d0e:	2301      	movgt	r3, #1
 8004d10:	4413      	add	r3, r2
 8004d12:	e7de      	b.n	8004cd2 <_printf_float+0x192>
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	055a      	lsls	r2, r3, #21
 8004d18:	d407      	bmi.n	8004d2a <_printf_float+0x1ea>
 8004d1a:	6923      	ldr	r3, [r4, #16]
 8004d1c:	4642      	mov	r2, r8
 8004d1e:	4631      	mov	r1, r6
 8004d20:	4628      	mov	r0, r5
 8004d22:	47b8      	blx	r7
 8004d24:	3001      	adds	r0, #1
 8004d26:	d12b      	bne.n	8004d80 <_printf_float+0x240>
 8004d28:	e767      	b.n	8004bfa <_printf_float+0xba>
 8004d2a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004d2e:	f240 80dc 	bls.w	8004eea <_printf_float+0x3aa>
 8004d32:	2200      	movs	r2, #0
 8004d34:	2300      	movs	r3, #0
 8004d36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d3a:	f7fb fe91 	bl	8000a60 <__aeabi_dcmpeq>
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	d033      	beq.n	8004daa <_printf_float+0x26a>
 8004d42:	2301      	movs	r3, #1
 8004d44:	4a41      	ldr	r2, [pc, #260]	; (8004e4c <_printf_float+0x30c>)
 8004d46:	4631      	mov	r1, r6
 8004d48:	4628      	mov	r0, r5
 8004d4a:	47b8      	blx	r7
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	f43f af54 	beq.w	8004bfa <_printf_float+0xba>
 8004d52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d56:	429a      	cmp	r2, r3
 8004d58:	db02      	blt.n	8004d60 <_printf_float+0x220>
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	07d8      	lsls	r0, r3, #31
 8004d5e:	d50f      	bpl.n	8004d80 <_printf_float+0x240>
 8004d60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d64:	4631      	mov	r1, r6
 8004d66:	4628      	mov	r0, r5
 8004d68:	47b8      	blx	r7
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	f43f af45 	beq.w	8004bfa <_printf_float+0xba>
 8004d70:	f04f 0800 	mov.w	r8, #0
 8004d74:	f104 091a 	add.w	r9, r4, #26
 8004d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	4543      	cmp	r3, r8
 8004d7e:	dc09      	bgt.n	8004d94 <_printf_float+0x254>
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	079b      	lsls	r3, r3, #30
 8004d84:	f100 8103 	bmi.w	8004f8e <_printf_float+0x44e>
 8004d88:	68e0      	ldr	r0, [r4, #12]
 8004d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d8c:	4298      	cmp	r0, r3
 8004d8e:	bfb8      	it	lt
 8004d90:	4618      	movlt	r0, r3
 8004d92:	e734      	b.n	8004bfe <_printf_float+0xbe>
 8004d94:	2301      	movs	r3, #1
 8004d96:	464a      	mov	r2, r9
 8004d98:	4631      	mov	r1, r6
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	47b8      	blx	r7
 8004d9e:	3001      	adds	r0, #1
 8004da0:	f43f af2b 	beq.w	8004bfa <_printf_float+0xba>
 8004da4:	f108 0801 	add.w	r8, r8, #1
 8004da8:	e7e6      	b.n	8004d78 <_printf_float+0x238>
 8004daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	dc2b      	bgt.n	8004e08 <_printf_float+0x2c8>
 8004db0:	2301      	movs	r3, #1
 8004db2:	4a26      	ldr	r2, [pc, #152]	; (8004e4c <_printf_float+0x30c>)
 8004db4:	4631      	mov	r1, r6
 8004db6:	4628      	mov	r0, r5
 8004db8:	47b8      	blx	r7
 8004dba:	3001      	adds	r0, #1
 8004dbc:	f43f af1d 	beq.w	8004bfa <_printf_float+0xba>
 8004dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dc2:	b923      	cbnz	r3, 8004dce <_printf_float+0x28e>
 8004dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dc6:	b913      	cbnz	r3, 8004dce <_printf_float+0x28e>
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	07d9      	lsls	r1, r3, #31
 8004dcc:	d5d8      	bpl.n	8004d80 <_printf_float+0x240>
 8004dce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dd2:	4631      	mov	r1, r6
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	47b8      	blx	r7
 8004dd8:	3001      	adds	r0, #1
 8004dda:	f43f af0e 	beq.w	8004bfa <_printf_float+0xba>
 8004dde:	f04f 0900 	mov.w	r9, #0
 8004de2:	f104 0a1a 	add.w	sl, r4, #26
 8004de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004de8:	425b      	negs	r3, r3
 8004dea:	454b      	cmp	r3, r9
 8004dec:	dc01      	bgt.n	8004df2 <_printf_float+0x2b2>
 8004dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004df0:	e794      	b.n	8004d1c <_printf_float+0x1dc>
 8004df2:	2301      	movs	r3, #1
 8004df4:	4652      	mov	r2, sl
 8004df6:	4631      	mov	r1, r6
 8004df8:	4628      	mov	r0, r5
 8004dfa:	47b8      	blx	r7
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	f43f aefc 	beq.w	8004bfa <_printf_float+0xba>
 8004e02:	f109 0901 	add.w	r9, r9, #1
 8004e06:	e7ee      	b.n	8004de6 <_printf_float+0x2a6>
 8004e08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	bfa8      	it	ge
 8004e10:	461a      	movge	r2, r3
 8004e12:	2a00      	cmp	r2, #0
 8004e14:	4691      	mov	r9, r2
 8004e16:	dd07      	ble.n	8004e28 <_printf_float+0x2e8>
 8004e18:	4613      	mov	r3, r2
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	4628      	mov	r0, r5
 8004e20:	47b8      	blx	r7
 8004e22:	3001      	adds	r0, #1
 8004e24:	f43f aee9 	beq.w	8004bfa <_printf_float+0xba>
 8004e28:	f104 031a 	add.w	r3, r4, #26
 8004e2c:	f04f 0b00 	mov.w	fp, #0
 8004e30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e34:	9306      	str	r3, [sp, #24]
 8004e36:	e015      	b.n	8004e64 <_printf_float+0x324>
 8004e38:	7fefffff 	.word	0x7fefffff
 8004e3c:	08006848 	.word	0x08006848
 8004e40:	08006844 	.word	0x08006844
 8004e44:	08006850 	.word	0x08006850
 8004e48:	0800684c 	.word	0x0800684c
 8004e4c:	08006854 	.word	0x08006854
 8004e50:	2301      	movs	r3, #1
 8004e52:	9a06      	ldr	r2, [sp, #24]
 8004e54:	4631      	mov	r1, r6
 8004e56:	4628      	mov	r0, r5
 8004e58:	47b8      	blx	r7
 8004e5a:	3001      	adds	r0, #1
 8004e5c:	f43f aecd 	beq.w	8004bfa <_printf_float+0xba>
 8004e60:	f10b 0b01 	add.w	fp, fp, #1
 8004e64:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004e68:	ebaa 0309 	sub.w	r3, sl, r9
 8004e6c:	455b      	cmp	r3, fp
 8004e6e:	dcef      	bgt.n	8004e50 <_printf_float+0x310>
 8004e70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e74:	429a      	cmp	r2, r3
 8004e76:	44d0      	add	r8, sl
 8004e78:	db15      	blt.n	8004ea6 <_printf_float+0x366>
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	07da      	lsls	r2, r3, #31
 8004e7e:	d412      	bmi.n	8004ea6 <_printf_float+0x366>
 8004e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e84:	eba3 020a 	sub.w	r2, r3, sl
 8004e88:	eba3 0a01 	sub.w	sl, r3, r1
 8004e8c:	4592      	cmp	sl, r2
 8004e8e:	bfa8      	it	ge
 8004e90:	4692      	movge	sl, r2
 8004e92:	f1ba 0f00 	cmp.w	sl, #0
 8004e96:	dc0e      	bgt.n	8004eb6 <_printf_float+0x376>
 8004e98:	f04f 0800 	mov.w	r8, #0
 8004e9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ea0:	f104 091a 	add.w	r9, r4, #26
 8004ea4:	e019      	b.n	8004eda <_printf_float+0x39a>
 8004ea6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004eaa:	4631      	mov	r1, r6
 8004eac:	4628      	mov	r0, r5
 8004eae:	47b8      	blx	r7
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d1e5      	bne.n	8004e80 <_printf_float+0x340>
 8004eb4:	e6a1      	b.n	8004bfa <_printf_float+0xba>
 8004eb6:	4653      	mov	r3, sl
 8004eb8:	4642      	mov	r2, r8
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	47b8      	blx	r7
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d1e9      	bne.n	8004e98 <_printf_float+0x358>
 8004ec4:	e699      	b.n	8004bfa <_printf_float+0xba>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	464a      	mov	r2, r9
 8004eca:	4631      	mov	r1, r6
 8004ecc:	4628      	mov	r0, r5
 8004ece:	47b8      	blx	r7
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	f43f ae92 	beq.w	8004bfa <_printf_float+0xba>
 8004ed6:	f108 0801 	add.w	r8, r8, #1
 8004eda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	eba3 030a 	sub.w	r3, r3, sl
 8004ee4:	4543      	cmp	r3, r8
 8004ee6:	dcee      	bgt.n	8004ec6 <_printf_float+0x386>
 8004ee8:	e74a      	b.n	8004d80 <_printf_float+0x240>
 8004eea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004eec:	2a01      	cmp	r2, #1
 8004eee:	dc01      	bgt.n	8004ef4 <_printf_float+0x3b4>
 8004ef0:	07db      	lsls	r3, r3, #31
 8004ef2:	d53a      	bpl.n	8004f6a <_printf_float+0x42a>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	4642      	mov	r2, r8
 8004ef8:	4631      	mov	r1, r6
 8004efa:	4628      	mov	r0, r5
 8004efc:	47b8      	blx	r7
 8004efe:	3001      	adds	r0, #1
 8004f00:	f43f ae7b 	beq.w	8004bfa <_printf_float+0xba>
 8004f04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f08:	4631      	mov	r1, r6
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	47b8      	blx	r7
 8004f0e:	3001      	adds	r0, #1
 8004f10:	f108 0801 	add.w	r8, r8, #1
 8004f14:	f43f ae71 	beq.w	8004bfa <_printf_float+0xba>
 8004f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8004f20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f24:	2300      	movs	r3, #0
 8004f26:	f7fb fd9b 	bl	8000a60 <__aeabi_dcmpeq>
 8004f2a:	b9c8      	cbnz	r0, 8004f60 <_printf_float+0x420>
 8004f2c:	4653      	mov	r3, sl
 8004f2e:	4642      	mov	r2, r8
 8004f30:	4631      	mov	r1, r6
 8004f32:	4628      	mov	r0, r5
 8004f34:	47b8      	blx	r7
 8004f36:	3001      	adds	r0, #1
 8004f38:	d10e      	bne.n	8004f58 <_printf_float+0x418>
 8004f3a:	e65e      	b.n	8004bfa <_printf_float+0xba>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	4652      	mov	r2, sl
 8004f40:	4631      	mov	r1, r6
 8004f42:	4628      	mov	r0, r5
 8004f44:	47b8      	blx	r7
 8004f46:	3001      	adds	r0, #1
 8004f48:	f43f ae57 	beq.w	8004bfa <_printf_float+0xba>
 8004f4c:	f108 0801 	add.w	r8, r8, #1
 8004f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f52:	3b01      	subs	r3, #1
 8004f54:	4543      	cmp	r3, r8
 8004f56:	dcf1      	bgt.n	8004f3c <_printf_float+0x3fc>
 8004f58:	464b      	mov	r3, r9
 8004f5a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f5e:	e6de      	b.n	8004d1e <_printf_float+0x1de>
 8004f60:	f04f 0800 	mov.w	r8, #0
 8004f64:	f104 0a1a 	add.w	sl, r4, #26
 8004f68:	e7f2      	b.n	8004f50 <_printf_float+0x410>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e7df      	b.n	8004f2e <_printf_float+0x3ee>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	464a      	mov	r2, r9
 8004f72:	4631      	mov	r1, r6
 8004f74:	4628      	mov	r0, r5
 8004f76:	47b8      	blx	r7
 8004f78:	3001      	adds	r0, #1
 8004f7a:	f43f ae3e 	beq.w	8004bfa <_printf_float+0xba>
 8004f7e:	f108 0801 	add.w	r8, r8, #1
 8004f82:	68e3      	ldr	r3, [r4, #12]
 8004f84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f86:	1a9b      	subs	r3, r3, r2
 8004f88:	4543      	cmp	r3, r8
 8004f8a:	dcf0      	bgt.n	8004f6e <_printf_float+0x42e>
 8004f8c:	e6fc      	b.n	8004d88 <_printf_float+0x248>
 8004f8e:	f04f 0800 	mov.w	r8, #0
 8004f92:	f104 0919 	add.w	r9, r4, #25
 8004f96:	e7f4      	b.n	8004f82 <_printf_float+0x442>
 8004f98:	2900      	cmp	r1, #0
 8004f9a:	f43f ae8b 	beq.w	8004cb4 <_printf_float+0x174>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004fa4:	ab09      	add	r3, sp, #36	; 0x24
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	ec49 8b10 	vmov	d0, r8, r9
 8004fac:	6022      	str	r2, [r4, #0]
 8004fae:	f8cd a004 	str.w	sl, [sp, #4]
 8004fb2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f7ff fd2e 	bl	8004a18 <__cvt>
 8004fbc:	4680      	mov	r8, r0
 8004fbe:	e648      	b.n	8004c52 <_printf_float+0x112>

08004fc0 <_printf_common>:
 8004fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc4:	4691      	mov	r9, r2
 8004fc6:	461f      	mov	r7, r3
 8004fc8:	688a      	ldr	r2, [r1, #8]
 8004fca:	690b      	ldr	r3, [r1, #16]
 8004fcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	bfb8      	it	lt
 8004fd4:	4613      	movlt	r3, r2
 8004fd6:	f8c9 3000 	str.w	r3, [r9]
 8004fda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fde:	4606      	mov	r6, r0
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	b112      	cbz	r2, 8004fea <_printf_common+0x2a>
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	f8c9 3000 	str.w	r3, [r9]
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	0699      	lsls	r1, r3, #26
 8004fee:	bf42      	ittt	mi
 8004ff0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ff4:	3302      	addmi	r3, #2
 8004ff6:	f8c9 3000 	strmi.w	r3, [r9]
 8004ffa:	6825      	ldr	r5, [r4, #0]
 8004ffc:	f015 0506 	ands.w	r5, r5, #6
 8005000:	d107      	bne.n	8005012 <_printf_common+0x52>
 8005002:	f104 0a19 	add.w	sl, r4, #25
 8005006:	68e3      	ldr	r3, [r4, #12]
 8005008:	f8d9 2000 	ldr.w	r2, [r9]
 800500c:	1a9b      	subs	r3, r3, r2
 800500e:	42ab      	cmp	r3, r5
 8005010:	dc28      	bgt.n	8005064 <_printf_common+0xa4>
 8005012:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005016:	6822      	ldr	r2, [r4, #0]
 8005018:	3300      	adds	r3, #0
 800501a:	bf18      	it	ne
 800501c:	2301      	movne	r3, #1
 800501e:	0692      	lsls	r2, r2, #26
 8005020:	d42d      	bmi.n	800507e <_printf_common+0xbe>
 8005022:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005026:	4639      	mov	r1, r7
 8005028:	4630      	mov	r0, r6
 800502a:	47c0      	blx	r8
 800502c:	3001      	adds	r0, #1
 800502e:	d020      	beq.n	8005072 <_printf_common+0xb2>
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	68e5      	ldr	r5, [r4, #12]
 8005034:	f8d9 2000 	ldr.w	r2, [r9]
 8005038:	f003 0306 	and.w	r3, r3, #6
 800503c:	2b04      	cmp	r3, #4
 800503e:	bf08      	it	eq
 8005040:	1aad      	subeq	r5, r5, r2
 8005042:	68a3      	ldr	r3, [r4, #8]
 8005044:	6922      	ldr	r2, [r4, #16]
 8005046:	bf0c      	ite	eq
 8005048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800504c:	2500      	movne	r5, #0
 800504e:	4293      	cmp	r3, r2
 8005050:	bfc4      	itt	gt
 8005052:	1a9b      	subgt	r3, r3, r2
 8005054:	18ed      	addgt	r5, r5, r3
 8005056:	f04f 0900 	mov.w	r9, #0
 800505a:	341a      	adds	r4, #26
 800505c:	454d      	cmp	r5, r9
 800505e:	d11a      	bne.n	8005096 <_printf_common+0xd6>
 8005060:	2000      	movs	r0, #0
 8005062:	e008      	b.n	8005076 <_printf_common+0xb6>
 8005064:	2301      	movs	r3, #1
 8005066:	4652      	mov	r2, sl
 8005068:	4639      	mov	r1, r7
 800506a:	4630      	mov	r0, r6
 800506c:	47c0      	blx	r8
 800506e:	3001      	adds	r0, #1
 8005070:	d103      	bne.n	800507a <_printf_common+0xba>
 8005072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800507a:	3501      	adds	r5, #1
 800507c:	e7c3      	b.n	8005006 <_printf_common+0x46>
 800507e:	18e1      	adds	r1, r4, r3
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	2030      	movs	r0, #48	; 0x30
 8005084:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005088:	4422      	add	r2, r4
 800508a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800508e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005092:	3302      	adds	r3, #2
 8005094:	e7c5      	b.n	8005022 <_printf_common+0x62>
 8005096:	2301      	movs	r3, #1
 8005098:	4622      	mov	r2, r4
 800509a:	4639      	mov	r1, r7
 800509c:	4630      	mov	r0, r6
 800509e:	47c0      	blx	r8
 80050a0:	3001      	adds	r0, #1
 80050a2:	d0e6      	beq.n	8005072 <_printf_common+0xb2>
 80050a4:	f109 0901 	add.w	r9, r9, #1
 80050a8:	e7d8      	b.n	800505c <_printf_common+0x9c>

080050aa <quorem>:
 80050aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ae:	6903      	ldr	r3, [r0, #16]
 80050b0:	690c      	ldr	r4, [r1, #16]
 80050b2:	42a3      	cmp	r3, r4
 80050b4:	4680      	mov	r8, r0
 80050b6:	f2c0 8082 	blt.w	80051be <quorem+0x114>
 80050ba:	3c01      	subs	r4, #1
 80050bc:	f101 0714 	add.w	r7, r1, #20
 80050c0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80050c4:	f100 0614 	add.w	r6, r0, #20
 80050c8:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80050cc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80050d0:	eb06 030c 	add.w	r3, r6, ip
 80050d4:	3501      	adds	r5, #1
 80050d6:	eb07 090c 	add.w	r9, r7, ip
 80050da:	9301      	str	r3, [sp, #4]
 80050dc:	fbb0 f5f5 	udiv	r5, r0, r5
 80050e0:	b395      	cbz	r5, 8005148 <quorem+0x9e>
 80050e2:	f04f 0a00 	mov.w	sl, #0
 80050e6:	4638      	mov	r0, r7
 80050e8:	46b6      	mov	lr, r6
 80050ea:	46d3      	mov	fp, sl
 80050ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80050f0:	b293      	uxth	r3, r2
 80050f2:	fb05 a303 	mla	r3, r5, r3, sl
 80050f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	ebab 0303 	sub.w	r3, fp, r3
 8005100:	0c12      	lsrs	r2, r2, #16
 8005102:	f8de b000 	ldr.w	fp, [lr]
 8005106:	fb05 a202 	mla	r2, r5, r2, sl
 800510a:	fa13 f38b 	uxtah	r3, r3, fp
 800510e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005112:	fa1f fb82 	uxth.w	fp, r2
 8005116:	f8de 2000 	ldr.w	r2, [lr]
 800511a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800511e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005122:	b29b      	uxth	r3, r3
 8005124:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005128:	4581      	cmp	r9, r0
 800512a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800512e:	f84e 3b04 	str.w	r3, [lr], #4
 8005132:	d2db      	bcs.n	80050ec <quorem+0x42>
 8005134:	f856 300c 	ldr.w	r3, [r6, ip]
 8005138:	b933      	cbnz	r3, 8005148 <quorem+0x9e>
 800513a:	9b01      	ldr	r3, [sp, #4]
 800513c:	3b04      	subs	r3, #4
 800513e:	429e      	cmp	r6, r3
 8005140:	461a      	mov	r2, r3
 8005142:	d330      	bcc.n	80051a6 <quorem+0xfc>
 8005144:	f8c8 4010 	str.w	r4, [r8, #16]
 8005148:	4640      	mov	r0, r8
 800514a:	f001 f82b 	bl	80061a4 <__mcmp>
 800514e:	2800      	cmp	r0, #0
 8005150:	db25      	blt.n	800519e <quorem+0xf4>
 8005152:	3501      	adds	r5, #1
 8005154:	4630      	mov	r0, r6
 8005156:	f04f 0c00 	mov.w	ip, #0
 800515a:	f857 2b04 	ldr.w	r2, [r7], #4
 800515e:	f8d0 e000 	ldr.w	lr, [r0]
 8005162:	b293      	uxth	r3, r2
 8005164:	ebac 0303 	sub.w	r3, ip, r3
 8005168:	0c12      	lsrs	r2, r2, #16
 800516a:	fa13 f38e 	uxtah	r3, r3, lr
 800516e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005172:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005176:	b29b      	uxth	r3, r3
 8005178:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800517c:	45b9      	cmp	r9, r7
 800517e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005182:	f840 3b04 	str.w	r3, [r0], #4
 8005186:	d2e8      	bcs.n	800515a <quorem+0xb0>
 8005188:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800518c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005190:	b92a      	cbnz	r2, 800519e <quorem+0xf4>
 8005192:	3b04      	subs	r3, #4
 8005194:	429e      	cmp	r6, r3
 8005196:	461a      	mov	r2, r3
 8005198:	d30b      	bcc.n	80051b2 <quorem+0x108>
 800519a:	f8c8 4010 	str.w	r4, [r8, #16]
 800519e:	4628      	mov	r0, r5
 80051a0:	b003      	add	sp, #12
 80051a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a6:	6812      	ldr	r2, [r2, #0]
 80051a8:	3b04      	subs	r3, #4
 80051aa:	2a00      	cmp	r2, #0
 80051ac:	d1ca      	bne.n	8005144 <quorem+0x9a>
 80051ae:	3c01      	subs	r4, #1
 80051b0:	e7c5      	b.n	800513e <quorem+0x94>
 80051b2:	6812      	ldr	r2, [r2, #0]
 80051b4:	3b04      	subs	r3, #4
 80051b6:	2a00      	cmp	r2, #0
 80051b8:	d1ef      	bne.n	800519a <quorem+0xf0>
 80051ba:	3c01      	subs	r4, #1
 80051bc:	e7ea      	b.n	8005194 <quorem+0xea>
 80051be:	2000      	movs	r0, #0
 80051c0:	e7ee      	b.n	80051a0 <quorem+0xf6>
 80051c2:	0000      	movs	r0, r0
 80051c4:	0000      	movs	r0, r0
	...

080051c8 <_dtoa_r>:
 80051c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051cc:	ec57 6b10 	vmov	r6, r7, d0
 80051d0:	b097      	sub	sp, #92	; 0x5c
 80051d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80051d4:	9106      	str	r1, [sp, #24]
 80051d6:	4604      	mov	r4, r0
 80051d8:	920b      	str	r2, [sp, #44]	; 0x2c
 80051da:	9312      	str	r3, [sp, #72]	; 0x48
 80051dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80051e0:	e9cd 6700 	strd	r6, r7, [sp]
 80051e4:	b93d      	cbnz	r5, 80051f6 <_dtoa_r+0x2e>
 80051e6:	2010      	movs	r0, #16
 80051e8:	f000 fdb4 	bl	8005d54 <malloc>
 80051ec:	6260      	str	r0, [r4, #36]	; 0x24
 80051ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80051f2:	6005      	str	r5, [r0, #0]
 80051f4:	60c5      	str	r5, [r0, #12]
 80051f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051f8:	6819      	ldr	r1, [r3, #0]
 80051fa:	b151      	cbz	r1, 8005212 <_dtoa_r+0x4a>
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	604a      	str	r2, [r1, #4]
 8005200:	2301      	movs	r3, #1
 8005202:	4093      	lsls	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
 8005206:	4620      	mov	r0, r4
 8005208:	f000 fdeb 	bl	8005de2 <_Bfree>
 800520c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	1e3b      	subs	r3, r7, #0
 8005214:	bfbb      	ittet	lt
 8005216:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800521a:	9301      	strlt	r3, [sp, #4]
 800521c:	2300      	movge	r3, #0
 800521e:	2201      	movlt	r2, #1
 8005220:	bfac      	ite	ge
 8005222:	f8c8 3000 	strge.w	r3, [r8]
 8005226:	f8c8 2000 	strlt.w	r2, [r8]
 800522a:	4baf      	ldr	r3, [pc, #700]	; (80054e8 <_dtoa_r+0x320>)
 800522c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005230:	ea33 0308 	bics.w	r3, r3, r8
 8005234:	d114      	bne.n	8005260 <_dtoa_r+0x98>
 8005236:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005238:	f242 730f 	movw	r3, #9999	; 0x270f
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	9b00      	ldr	r3, [sp, #0]
 8005240:	b923      	cbnz	r3, 800524c <_dtoa_r+0x84>
 8005242:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005246:	2800      	cmp	r0, #0
 8005248:	f000 8542 	beq.w	8005cd0 <_dtoa_r+0xb08>
 800524c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800524e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80054fc <_dtoa_r+0x334>
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 8544 	beq.w	8005ce0 <_dtoa_r+0xb18>
 8005258:	f10b 0303 	add.w	r3, fp, #3
 800525c:	f000 bd3e 	b.w	8005cdc <_dtoa_r+0xb14>
 8005260:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005264:	2200      	movs	r2, #0
 8005266:	2300      	movs	r3, #0
 8005268:	4630      	mov	r0, r6
 800526a:	4639      	mov	r1, r7
 800526c:	f7fb fbf8 	bl	8000a60 <__aeabi_dcmpeq>
 8005270:	4681      	mov	r9, r0
 8005272:	b168      	cbz	r0, 8005290 <_dtoa_r+0xc8>
 8005274:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005276:	2301      	movs	r3, #1
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 8524 	beq.w	8005cca <_dtoa_r+0xb02>
 8005282:	4b9a      	ldr	r3, [pc, #616]	; (80054ec <_dtoa_r+0x324>)
 8005284:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005286:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	f000 bd28 	b.w	8005ce0 <_dtoa_r+0xb18>
 8005290:	aa14      	add	r2, sp, #80	; 0x50
 8005292:	a915      	add	r1, sp, #84	; 0x54
 8005294:	ec47 6b10 	vmov	d0, r6, r7
 8005298:	4620      	mov	r0, r4
 800529a:	f000 fffa 	bl	8006292 <__d2b>
 800529e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80052a2:	9004      	str	r0, [sp, #16]
 80052a4:	2d00      	cmp	r5, #0
 80052a6:	d07c      	beq.n	80053a2 <_dtoa_r+0x1da>
 80052a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80052ac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80052b0:	46b2      	mov	sl, r6
 80052b2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80052b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80052ba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80052be:	2200      	movs	r2, #0
 80052c0:	4b8b      	ldr	r3, [pc, #556]	; (80054f0 <_dtoa_r+0x328>)
 80052c2:	4650      	mov	r0, sl
 80052c4:	4659      	mov	r1, fp
 80052c6:	f7fa ffab 	bl	8000220 <__aeabi_dsub>
 80052ca:	a381      	add	r3, pc, #516	; (adr r3, 80054d0 <_dtoa_r+0x308>)
 80052cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d0:	f7fb f95e 	bl	8000590 <__aeabi_dmul>
 80052d4:	a380      	add	r3, pc, #512	; (adr r3, 80054d8 <_dtoa_r+0x310>)
 80052d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052da:	f7fa ffa3 	bl	8000224 <__adddf3>
 80052de:	4606      	mov	r6, r0
 80052e0:	4628      	mov	r0, r5
 80052e2:	460f      	mov	r7, r1
 80052e4:	f7fb f8ea 	bl	80004bc <__aeabi_i2d>
 80052e8:	a37d      	add	r3, pc, #500	; (adr r3, 80054e0 <_dtoa_r+0x318>)
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	f7fb f94f 	bl	8000590 <__aeabi_dmul>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4630      	mov	r0, r6
 80052f8:	4639      	mov	r1, r7
 80052fa:	f7fa ff93 	bl	8000224 <__adddf3>
 80052fe:	4606      	mov	r6, r0
 8005300:	460f      	mov	r7, r1
 8005302:	f7fb fbf5 	bl	8000af0 <__aeabi_d2iz>
 8005306:	2200      	movs	r2, #0
 8005308:	4682      	mov	sl, r0
 800530a:	2300      	movs	r3, #0
 800530c:	4630      	mov	r0, r6
 800530e:	4639      	mov	r1, r7
 8005310:	f7fb fbb0 	bl	8000a74 <__aeabi_dcmplt>
 8005314:	b148      	cbz	r0, 800532a <_dtoa_r+0x162>
 8005316:	4650      	mov	r0, sl
 8005318:	f7fb f8d0 	bl	80004bc <__aeabi_i2d>
 800531c:	4632      	mov	r2, r6
 800531e:	463b      	mov	r3, r7
 8005320:	f7fb fb9e 	bl	8000a60 <__aeabi_dcmpeq>
 8005324:	b908      	cbnz	r0, 800532a <_dtoa_r+0x162>
 8005326:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800532a:	f1ba 0f16 	cmp.w	sl, #22
 800532e:	d859      	bhi.n	80053e4 <_dtoa_r+0x21c>
 8005330:	4970      	ldr	r1, [pc, #448]	; (80054f4 <_dtoa_r+0x32c>)
 8005332:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005336:	e9dd 2300 	ldrd	r2, r3, [sp]
 800533a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800533e:	f7fb fbb7 	bl	8000ab0 <__aeabi_dcmpgt>
 8005342:	2800      	cmp	r0, #0
 8005344:	d050      	beq.n	80053e8 <_dtoa_r+0x220>
 8005346:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800534a:	2300      	movs	r3, #0
 800534c:	930f      	str	r3, [sp, #60]	; 0x3c
 800534e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005350:	1b5d      	subs	r5, r3, r5
 8005352:	f1b5 0801 	subs.w	r8, r5, #1
 8005356:	bf49      	itett	mi
 8005358:	f1c5 0301 	rsbmi	r3, r5, #1
 800535c:	2300      	movpl	r3, #0
 800535e:	9305      	strmi	r3, [sp, #20]
 8005360:	f04f 0800 	movmi.w	r8, #0
 8005364:	bf58      	it	pl
 8005366:	9305      	strpl	r3, [sp, #20]
 8005368:	f1ba 0f00 	cmp.w	sl, #0
 800536c:	db3e      	blt.n	80053ec <_dtoa_r+0x224>
 800536e:	2300      	movs	r3, #0
 8005370:	44d0      	add	r8, sl
 8005372:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005376:	9307      	str	r3, [sp, #28]
 8005378:	9b06      	ldr	r3, [sp, #24]
 800537a:	2b09      	cmp	r3, #9
 800537c:	f200 8090 	bhi.w	80054a0 <_dtoa_r+0x2d8>
 8005380:	2b05      	cmp	r3, #5
 8005382:	bfc4      	itt	gt
 8005384:	3b04      	subgt	r3, #4
 8005386:	9306      	strgt	r3, [sp, #24]
 8005388:	9b06      	ldr	r3, [sp, #24]
 800538a:	f1a3 0302 	sub.w	r3, r3, #2
 800538e:	bfcc      	ite	gt
 8005390:	2500      	movgt	r5, #0
 8005392:	2501      	movle	r5, #1
 8005394:	2b03      	cmp	r3, #3
 8005396:	f200 808f 	bhi.w	80054b8 <_dtoa_r+0x2f0>
 800539a:	e8df f003 	tbb	[pc, r3]
 800539e:	7f7d      	.short	0x7f7d
 80053a0:	7131      	.short	0x7131
 80053a2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80053a6:	441d      	add	r5, r3
 80053a8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80053ac:	2820      	cmp	r0, #32
 80053ae:	dd13      	ble.n	80053d8 <_dtoa_r+0x210>
 80053b0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80053b4:	9b00      	ldr	r3, [sp, #0]
 80053b6:	fa08 f800 	lsl.w	r8, r8, r0
 80053ba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80053be:	fa23 f000 	lsr.w	r0, r3, r0
 80053c2:	ea48 0000 	orr.w	r0, r8, r0
 80053c6:	f7fb f869 	bl	800049c <__aeabi_ui2d>
 80053ca:	2301      	movs	r3, #1
 80053cc:	4682      	mov	sl, r0
 80053ce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80053d2:	3d01      	subs	r5, #1
 80053d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80053d6:	e772      	b.n	80052be <_dtoa_r+0xf6>
 80053d8:	9b00      	ldr	r3, [sp, #0]
 80053da:	f1c0 0020 	rsb	r0, r0, #32
 80053de:	fa03 f000 	lsl.w	r0, r3, r0
 80053e2:	e7f0      	b.n	80053c6 <_dtoa_r+0x1fe>
 80053e4:	2301      	movs	r3, #1
 80053e6:	e7b1      	b.n	800534c <_dtoa_r+0x184>
 80053e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80053ea:	e7b0      	b.n	800534e <_dtoa_r+0x186>
 80053ec:	9b05      	ldr	r3, [sp, #20]
 80053ee:	eba3 030a 	sub.w	r3, r3, sl
 80053f2:	9305      	str	r3, [sp, #20]
 80053f4:	f1ca 0300 	rsb	r3, sl, #0
 80053f8:	9307      	str	r3, [sp, #28]
 80053fa:	2300      	movs	r3, #0
 80053fc:	930e      	str	r3, [sp, #56]	; 0x38
 80053fe:	e7bb      	b.n	8005378 <_dtoa_r+0x1b0>
 8005400:	2301      	movs	r3, #1
 8005402:	930a      	str	r3, [sp, #40]	; 0x28
 8005404:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005406:	2b00      	cmp	r3, #0
 8005408:	dd59      	ble.n	80054be <_dtoa_r+0x2f6>
 800540a:	9302      	str	r3, [sp, #8]
 800540c:	4699      	mov	r9, r3
 800540e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005410:	2200      	movs	r2, #0
 8005412:	6072      	str	r2, [r6, #4]
 8005414:	2204      	movs	r2, #4
 8005416:	f102 0014 	add.w	r0, r2, #20
 800541a:	4298      	cmp	r0, r3
 800541c:	6871      	ldr	r1, [r6, #4]
 800541e:	d953      	bls.n	80054c8 <_dtoa_r+0x300>
 8005420:	4620      	mov	r0, r4
 8005422:	f000 fcaa 	bl	8005d7a <_Balloc>
 8005426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005428:	6030      	str	r0, [r6, #0]
 800542a:	f1b9 0f0e 	cmp.w	r9, #14
 800542e:	f8d3 b000 	ldr.w	fp, [r3]
 8005432:	f200 80e6 	bhi.w	8005602 <_dtoa_r+0x43a>
 8005436:	2d00      	cmp	r5, #0
 8005438:	f000 80e3 	beq.w	8005602 <_dtoa_r+0x43a>
 800543c:	ed9d 7b00 	vldr	d7, [sp]
 8005440:	f1ba 0f00 	cmp.w	sl, #0
 8005444:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005448:	dd74      	ble.n	8005534 <_dtoa_r+0x36c>
 800544a:	4a2a      	ldr	r2, [pc, #168]	; (80054f4 <_dtoa_r+0x32c>)
 800544c:	f00a 030f 	and.w	r3, sl, #15
 8005450:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005454:	ed93 7b00 	vldr	d7, [r3]
 8005458:	ea4f 162a 	mov.w	r6, sl, asr #4
 800545c:	06f0      	lsls	r0, r6, #27
 800545e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005462:	d565      	bpl.n	8005530 <_dtoa_r+0x368>
 8005464:	4b24      	ldr	r3, [pc, #144]	; (80054f8 <_dtoa_r+0x330>)
 8005466:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800546a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800546e:	f7fb f9b9 	bl	80007e4 <__aeabi_ddiv>
 8005472:	e9cd 0100 	strd	r0, r1, [sp]
 8005476:	f006 060f 	and.w	r6, r6, #15
 800547a:	2503      	movs	r5, #3
 800547c:	4f1e      	ldr	r7, [pc, #120]	; (80054f8 <_dtoa_r+0x330>)
 800547e:	e04c      	b.n	800551a <_dtoa_r+0x352>
 8005480:	2301      	movs	r3, #1
 8005482:	930a      	str	r3, [sp, #40]	; 0x28
 8005484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005486:	4453      	add	r3, sl
 8005488:	f103 0901 	add.w	r9, r3, #1
 800548c:	9302      	str	r3, [sp, #8]
 800548e:	464b      	mov	r3, r9
 8005490:	2b01      	cmp	r3, #1
 8005492:	bfb8      	it	lt
 8005494:	2301      	movlt	r3, #1
 8005496:	e7ba      	b.n	800540e <_dtoa_r+0x246>
 8005498:	2300      	movs	r3, #0
 800549a:	e7b2      	b.n	8005402 <_dtoa_r+0x23a>
 800549c:	2300      	movs	r3, #0
 800549e:	e7f0      	b.n	8005482 <_dtoa_r+0x2ba>
 80054a0:	2501      	movs	r5, #1
 80054a2:	2300      	movs	r3, #0
 80054a4:	9306      	str	r3, [sp, #24]
 80054a6:	950a      	str	r5, [sp, #40]	; 0x28
 80054a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054ac:	9302      	str	r3, [sp, #8]
 80054ae:	4699      	mov	r9, r3
 80054b0:	2200      	movs	r2, #0
 80054b2:	2312      	movs	r3, #18
 80054b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80054b6:	e7aa      	b.n	800540e <_dtoa_r+0x246>
 80054b8:	2301      	movs	r3, #1
 80054ba:	930a      	str	r3, [sp, #40]	; 0x28
 80054bc:	e7f4      	b.n	80054a8 <_dtoa_r+0x2e0>
 80054be:	2301      	movs	r3, #1
 80054c0:	9302      	str	r3, [sp, #8]
 80054c2:	4699      	mov	r9, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	e7f5      	b.n	80054b4 <_dtoa_r+0x2ec>
 80054c8:	3101      	adds	r1, #1
 80054ca:	6071      	str	r1, [r6, #4]
 80054cc:	0052      	lsls	r2, r2, #1
 80054ce:	e7a2      	b.n	8005416 <_dtoa_r+0x24e>
 80054d0:	636f4361 	.word	0x636f4361
 80054d4:	3fd287a7 	.word	0x3fd287a7
 80054d8:	8b60c8b3 	.word	0x8b60c8b3
 80054dc:	3fc68a28 	.word	0x3fc68a28
 80054e0:	509f79fb 	.word	0x509f79fb
 80054e4:	3fd34413 	.word	0x3fd34413
 80054e8:	7ff00000 	.word	0x7ff00000
 80054ec:	08006855 	.word	0x08006855
 80054f0:	3ff80000 	.word	0x3ff80000
 80054f4:	08006890 	.word	0x08006890
 80054f8:	08006868 	.word	0x08006868
 80054fc:	0800685f 	.word	0x0800685f
 8005500:	07f1      	lsls	r1, r6, #31
 8005502:	d508      	bpl.n	8005516 <_dtoa_r+0x34e>
 8005504:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800550c:	f7fb f840 	bl	8000590 <__aeabi_dmul>
 8005510:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005514:	3501      	adds	r5, #1
 8005516:	1076      	asrs	r6, r6, #1
 8005518:	3708      	adds	r7, #8
 800551a:	2e00      	cmp	r6, #0
 800551c:	d1f0      	bne.n	8005500 <_dtoa_r+0x338>
 800551e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005522:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005526:	f7fb f95d 	bl	80007e4 <__aeabi_ddiv>
 800552a:	e9cd 0100 	strd	r0, r1, [sp]
 800552e:	e01a      	b.n	8005566 <_dtoa_r+0x39e>
 8005530:	2502      	movs	r5, #2
 8005532:	e7a3      	b.n	800547c <_dtoa_r+0x2b4>
 8005534:	f000 80a0 	beq.w	8005678 <_dtoa_r+0x4b0>
 8005538:	f1ca 0600 	rsb	r6, sl, #0
 800553c:	4b9f      	ldr	r3, [pc, #636]	; (80057bc <_dtoa_r+0x5f4>)
 800553e:	4fa0      	ldr	r7, [pc, #640]	; (80057c0 <_dtoa_r+0x5f8>)
 8005540:	f006 020f 	and.w	r2, r6, #15
 8005544:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005550:	f7fb f81e 	bl	8000590 <__aeabi_dmul>
 8005554:	e9cd 0100 	strd	r0, r1, [sp]
 8005558:	1136      	asrs	r6, r6, #4
 800555a:	2300      	movs	r3, #0
 800555c:	2502      	movs	r5, #2
 800555e:	2e00      	cmp	r6, #0
 8005560:	d17f      	bne.n	8005662 <_dtoa_r+0x49a>
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e1      	bne.n	800552a <_dtoa_r+0x362>
 8005566:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 8087 	beq.w	800567c <_dtoa_r+0x4b4>
 800556e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005572:	2200      	movs	r2, #0
 8005574:	4b93      	ldr	r3, [pc, #588]	; (80057c4 <_dtoa_r+0x5fc>)
 8005576:	4630      	mov	r0, r6
 8005578:	4639      	mov	r1, r7
 800557a:	f7fb fa7b 	bl	8000a74 <__aeabi_dcmplt>
 800557e:	2800      	cmp	r0, #0
 8005580:	d07c      	beq.n	800567c <_dtoa_r+0x4b4>
 8005582:	f1b9 0f00 	cmp.w	r9, #0
 8005586:	d079      	beq.n	800567c <_dtoa_r+0x4b4>
 8005588:	9b02      	ldr	r3, [sp, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	dd35      	ble.n	80055fa <_dtoa_r+0x432>
 800558e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005592:	9308      	str	r3, [sp, #32]
 8005594:	4639      	mov	r1, r7
 8005596:	2200      	movs	r2, #0
 8005598:	4b8b      	ldr	r3, [pc, #556]	; (80057c8 <_dtoa_r+0x600>)
 800559a:	4630      	mov	r0, r6
 800559c:	f7fa fff8 	bl	8000590 <__aeabi_dmul>
 80055a0:	e9cd 0100 	strd	r0, r1, [sp]
 80055a4:	9f02      	ldr	r7, [sp, #8]
 80055a6:	3501      	adds	r5, #1
 80055a8:	4628      	mov	r0, r5
 80055aa:	f7fa ff87 	bl	80004bc <__aeabi_i2d>
 80055ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055b2:	f7fa ffed 	bl	8000590 <__aeabi_dmul>
 80055b6:	2200      	movs	r2, #0
 80055b8:	4b84      	ldr	r3, [pc, #528]	; (80057cc <_dtoa_r+0x604>)
 80055ba:	f7fa fe33 	bl	8000224 <__adddf3>
 80055be:	4605      	mov	r5, r0
 80055c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80055c4:	2f00      	cmp	r7, #0
 80055c6:	d15d      	bne.n	8005684 <_dtoa_r+0x4bc>
 80055c8:	2200      	movs	r2, #0
 80055ca:	4b81      	ldr	r3, [pc, #516]	; (80057d0 <_dtoa_r+0x608>)
 80055cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055d0:	f7fa fe26 	bl	8000220 <__aeabi_dsub>
 80055d4:	462a      	mov	r2, r5
 80055d6:	4633      	mov	r3, r6
 80055d8:	e9cd 0100 	strd	r0, r1, [sp]
 80055dc:	f7fb fa68 	bl	8000ab0 <__aeabi_dcmpgt>
 80055e0:	2800      	cmp	r0, #0
 80055e2:	f040 8288 	bne.w	8005af6 <_dtoa_r+0x92e>
 80055e6:	462a      	mov	r2, r5
 80055e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80055ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055f0:	f7fb fa40 	bl	8000a74 <__aeabi_dcmplt>
 80055f4:	2800      	cmp	r0, #0
 80055f6:	f040 827c 	bne.w	8005af2 <_dtoa_r+0x92a>
 80055fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055fe:	e9cd 2300 	strd	r2, r3, [sp]
 8005602:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005604:	2b00      	cmp	r3, #0
 8005606:	f2c0 8150 	blt.w	80058aa <_dtoa_r+0x6e2>
 800560a:	f1ba 0f0e 	cmp.w	sl, #14
 800560e:	f300 814c 	bgt.w	80058aa <_dtoa_r+0x6e2>
 8005612:	4b6a      	ldr	r3, [pc, #424]	; (80057bc <_dtoa_r+0x5f4>)
 8005614:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005618:	ed93 7b00 	vldr	d7, [r3]
 800561c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800561e:	2b00      	cmp	r3, #0
 8005620:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005624:	f280 80d8 	bge.w	80057d8 <_dtoa_r+0x610>
 8005628:	f1b9 0f00 	cmp.w	r9, #0
 800562c:	f300 80d4 	bgt.w	80057d8 <_dtoa_r+0x610>
 8005630:	f040 825e 	bne.w	8005af0 <_dtoa_r+0x928>
 8005634:	2200      	movs	r2, #0
 8005636:	4b66      	ldr	r3, [pc, #408]	; (80057d0 <_dtoa_r+0x608>)
 8005638:	ec51 0b17 	vmov	r0, r1, d7
 800563c:	f7fa ffa8 	bl	8000590 <__aeabi_dmul>
 8005640:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005644:	f7fb fa2a 	bl	8000a9c <__aeabi_dcmpge>
 8005648:	464f      	mov	r7, r9
 800564a:	464e      	mov	r6, r9
 800564c:	2800      	cmp	r0, #0
 800564e:	f040 8234 	bne.w	8005aba <_dtoa_r+0x8f2>
 8005652:	2331      	movs	r3, #49	; 0x31
 8005654:	f10b 0501 	add.w	r5, fp, #1
 8005658:	f88b 3000 	strb.w	r3, [fp]
 800565c:	f10a 0a01 	add.w	sl, sl, #1
 8005660:	e22f      	b.n	8005ac2 <_dtoa_r+0x8fa>
 8005662:	07f2      	lsls	r2, r6, #31
 8005664:	d505      	bpl.n	8005672 <_dtoa_r+0x4aa>
 8005666:	e9d7 2300 	ldrd	r2, r3, [r7]
 800566a:	f7fa ff91 	bl	8000590 <__aeabi_dmul>
 800566e:	3501      	adds	r5, #1
 8005670:	2301      	movs	r3, #1
 8005672:	1076      	asrs	r6, r6, #1
 8005674:	3708      	adds	r7, #8
 8005676:	e772      	b.n	800555e <_dtoa_r+0x396>
 8005678:	2502      	movs	r5, #2
 800567a:	e774      	b.n	8005566 <_dtoa_r+0x39e>
 800567c:	f8cd a020 	str.w	sl, [sp, #32]
 8005680:	464f      	mov	r7, r9
 8005682:	e791      	b.n	80055a8 <_dtoa_r+0x3e0>
 8005684:	4b4d      	ldr	r3, [pc, #308]	; (80057bc <_dtoa_r+0x5f4>)
 8005686:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800568a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800568e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005690:	2b00      	cmp	r3, #0
 8005692:	d047      	beq.n	8005724 <_dtoa_r+0x55c>
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	2000      	movs	r0, #0
 800569a:	494e      	ldr	r1, [pc, #312]	; (80057d4 <_dtoa_r+0x60c>)
 800569c:	f7fb f8a2 	bl	80007e4 <__aeabi_ddiv>
 80056a0:	462a      	mov	r2, r5
 80056a2:	4633      	mov	r3, r6
 80056a4:	f7fa fdbc 	bl	8000220 <__aeabi_dsub>
 80056a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80056ac:	465d      	mov	r5, fp
 80056ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056b2:	f7fb fa1d 	bl	8000af0 <__aeabi_d2iz>
 80056b6:	4606      	mov	r6, r0
 80056b8:	f7fa ff00 	bl	80004bc <__aeabi_i2d>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056c4:	f7fa fdac 	bl	8000220 <__aeabi_dsub>
 80056c8:	3630      	adds	r6, #48	; 0x30
 80056ca:	f805 6b01 	strb.w	r6, [r5], #1
 80056ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80056d2:	e9cd 0100 	strd	r0, r1, [sp]
 80056d6:	f7fb f9cd 	bl	8000a74 <__aeabi_dcmplt>
 80056da:	2800      	cmp	r0, #0
 80056dc:	d163      	bne.n	80057a6 <_dtoa_r+0x5de>
 80056de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056e2:	2000      	movs	r0, #0
 80056e4:	4937      	ldr	r1, [pc, #220]	; (80057c4 <_dtoa_r+0x5fc>)
 80056e6:	f7fa fd9b 	bl	8000220 <__aeabi_dsub>
 80056ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80056ee:	f7fb f9c1 	bl	8000a74 <__aeabi_dcmplt>
 80056f2:	2800      	cmp	r0, #0
 80056f4:	f040 80b7 	bne.w	8005866 <_dtoa_r+0x69e>
 80056f8:	eba5 030b 	sub.w	r3, r5, fp
 80056fc:	429f      	cmp	r7, r3
 80056fe:	f77f af7c 	ble.w	80055fa <_dtoa_r+0x432>
 8005702:	2200      	movs	r2, #0
 8005704:	4b30      	ldr	r3, [pc, #192]	; (80057c8 <_dtoa_r+0x600>)
 8005706:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800570a:	f7fa ff41 	bl	8000590 <__aeabi_dmul>
 800570e:	2200      	movs	r2, #0
 8005710:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005714:	4b2c      	ldr	r3, [pc, #176]	; (80057c8 <_dtoa_r+0x600>)
 8005716:	e9dd 0100 	ldrd	r0, r1, [sp]
 800571a:	f7fa ff39 	bl	8000590 <__aeabi_dmul>
 800571e:	e9cd 0100 	strd	r0, r1, [sp]
 8005722:	e7c4      	b.n	80056ae <_dtoa_r+0x4e6>
 8005724:	462a      	mov	r2, r5
 8005726:	4633      	mov	r3, r6
 8005728:	f7fa ff32 	bl	8000590 <__aeabi_dmul>
 800572c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005730:	eb0b 0507 	add.w	r5, fp, r7
 8005734:	465e      	mov	r6, fp
 8005736:	e9dd 0100 	ldrd	r0, r1, [sp]
 800573a:	f7fb f9d9 	bl	8000af0 <__aeabi_d2iz>
 800573e:	4607      	mov	r7, r0
 8005740:	f7fa febc 	bl	80004bc <__aeabi_i2d>
 8005744:	3730      	adds	r7, #48	; 0x30
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800574e:	f7fa fd67 	bl	8000220 <__aeabi_dsub>
 8005752:	f806 7b01 	strb.w	r7, [r6], #1
 8005756:	42ae      	cmp	r6, r5
 8005758:	e9cd 0100 	strd	r0, r1, [sp]
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	d126      	bne.n	80057b0 <_dtoa_r+0x5e8>
 8005762:	4b1c      	ldr	r3, [pc, #112]	; (80057d4 <_dtoa_r+0x60c>)
 8005764:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005768:	f7fa fd5c 	bl	8000224 <__adddf3>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005774:	f7fb f99c 	bl	8000ab0 <__aeabi_dcmpgt>
 8005778:	2800      	cmp	r0, #0
 800577a:	d174      	bne.n	8005866 <_dtoa_r+0x69e>
 800577c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005780:	2000      	movs	r0, #0
 8005782:	4914      	ldr	r1, [pc, #80]	; (80057d4 <_dtoa_r+0x60c>)
 8005784:	f7fa fd4c 	bl	8000220 <__aeabi_dsub>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005790:	f7fb f970 	bl	8000a74 <__aeabi_dcmplt>
 8005794:	2800      	cmp	r0, #0
 8005796:	f43f af30 	beq.w	80055fa <_dtoa_r+0x432>
 800579a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800579e:	2b30      	cmp	r3, #48	; 0x30
 80057a0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80057a4:	d002      	beq.n	80057ac <_dtoa_r+0x5e4>
 80057a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80057aa:	e04a      	b.n	8005842 <_dtoa_r+0x67a>
 80057ac:	4615      	mov	r5, r2
 80057ae:	e7f4      	b.n	800579a <_dtoa_r+0x5d2>
 80057b0:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <_dtoa_r+0x600>)
 80057b2:	f7fa feed 	bl	8000590 <__aeabi_dmul>
 80057b6:	e9cd 0100 	strd	r0, r1, [sp]
 80057ba:	e7bc      	b.n	8005736 <_dtoa_r+0x56e>
 80057bc:	08006890 	.word	0x08006890
 80057c0:	08006868 	.word	0x08006868
 80057c4:	3ff00000 	.word	0x3ff00000
 80057c8:	40240000 	.word	0x40240000
 80057cc:	401c0000 	.word	0x401c0000
 80057d0:	40140000 	.word	0x40140000
 80057d4:	3fe00000 	.word	0x3fe00000
 80057d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80057dc:	465d      	mov	r5, fp
 80057de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057e2:	4630      	mov	r0, r6
 80057e4:	4639      	mov	r1, r7
 80057e6:	f7fa fffd 	bl	80007e4 <__aeabi_ddiv>
 80057ea:	f7fb f981 	bl	8000af0 <__aeabi_d2iz>
 80057ee:	4680      	mov	r8, r0
 80057f0:	f7fa fe64 	bl	80004bc <__aeabi_i2d>
 80057f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057f8:	f7fa feca 	bl	8000590 <__aeabi_dmul>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4630      	mov	r0, r6
 8005802:	4639      	mov	r1, r7
 8005804:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005808:	f7fa fd0a 	bl	8000220 <__aeabi_dsub>
 800580c:	f805 6b01 	strb.w	r6, [r5], #1
 8005810:	eba5 060b 	sub.w	r6, r5, fp
 8005814:	45b1      	cmp	r9, r6
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	d139      	bne.n	8005890 <_dtoa_r+0x6c8>
 800581c:	f7fa fd02 	bl	8000224 <__adddf3>
 8005820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005824:	4606      	mov	r6, r0
 8005826:	460f      	mov	r7, r1
 8005828:	f7fb f942 	bl	8000ab0 <__aeabi_dcmpgt>
 800582c:	b9c8      	cbnz	r0, 8005862 <_dtoa_r+0x69a>
 800582e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005832:	4630      	mov	r0, r6
 8005834:	4639      	mov	r1, r7
 8005836:	f7fb f913 	bl	8000a60 <__aeabi_dcmpeq>
 800583a:	b110      	cbz	r0, 8005842 <_dtoa_r+0x67a>
 800583c:	f018 0f01 	tst.w	r8, #1
 8005840:	d10f      	bne.n	8005862 <_dtoa_r+0x69a>
 8005842:	9904      	ldr	r1, [sp, #16]
 8005844:	4620      	mov	r0, r4
 8005846:	f000 facc 	bl	8005de2 <_Bfree>
 800584a:	2300      	movs	r3, #0
 800584c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800584e:	702b      	strb	r3, [r5, #0]
 8005850:	f10a 0301 	add.w	r3, sl, #1
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 8241 	beq.w	8005ce0 <_dtoa_r+0xb18>
 800585e:	601d      	str	r5, [r3, #0]
 8005860:	e23e      	b.n	8005ce0 <_dtoa_r+0xb18>
 8005862:	f8cd a020 	str.w	sl, [sp, #32]
 8005866:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800586a:	2a39      	cmp	r2, #57	; 0x39
 800586c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8005870:	d108      	bne.n	8005884 <_dtoa_r+0x6bc>
 8005872:	459b      	cmp	fp, r3
 8005874:	d10a      	bne.n	800588c <_dtoa_r+0x6c4>
 8005876:	9b08      	ldr	r3, [sp, #32]
 8005878:	3301      	adds	r3, #1
 800587a:	9308      	str	r3, [sp, #32]
 800587c:	2330      	movs	r3, #48	; 0x30
 800587e:	f88b 3000 	strb.w	r3, [fp]
 8005882:	465b      	mov	r3, fp
 8005884:	781a      	ldrb	r2, [r3, #0]
 8005886:	3201      	adds	r2, #1
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	e78c      	b.n	80057a6 <_dtoa_r+0x5de>
 800588c:	461d      	mov	r5, r3
 800588e:	e7ea      	b.n	8005866 <_dtoa_r+0x69e>
 8005890:	2200      	movs	r2, #0
 8005892:	4b9b      	ldr	r3, [pc, #620]	; (8005b00 <_dtoa_r+0x938>)
 8005894:	f7fa fe7c 	bl	8000590 <__aeabi_dmul>
 8005898:	2200      	movs	r2, #0
 800589a:	2300      	movs	r3, #0
 800589c:	4606      	mov	r6, r0
 800589e:	460f      	mov	r7, r1
 80058a0:	f7fb f8de 	bl	8000a60 <__aeabi_dcmpeq>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d09a      	beq.n	80057de <_dtoa_r+0x616>
 80058a8:	e7cb      	b.n	8005842 <_dtoa_r+0x67a>
 80058aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058ac:	2a00      	cmp	r2, #0
 80058ae:	f000 808b 	beq.w	80059c8 <_dtoa_r+0x800>
 80058b2:	9a06      	ldr	r2, [sp, #24]
 80058b4:	2a01      	cmp	r2, #1
 80058b6:	dc6e      	bgt.n	8005996 <_dtoa_r+0x7ce>
 80058b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80058ba:	2a00      	cmp	r2, #0
 80058bc:	d067      	beq.n	800598e <_dtoa_r+0x7c6>
 80058be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80058c2:	9f07      	ldr	r7, [sp, #28]
 80058c4:	9d05      	ldr	r5, [sp, #20]
 80058c6:	9a05      	ldr	r2, [sp, #20]
 80058c8:	2101      	movs	r1, #1
 80058ca:	441a      	add	r2, r3
 80058cc:	4620      	mov	r0, r4
 80058ce:	9205      	str	r2, [sp, #20]
 80058d0:	4498      	add	r8, r3
 80058d2:	f000 fb26 	bl	8005f22 <__i2b>
 80058d6:	4606      	mov	r6, r0
 80058d8:	2d00      	cmp	r5, #0
 80058da:	dd0c      	ble.n	80058f6 <_dtoa_r+0x72e>
 80058dc:	f1b8 0f00 	cmp.w	r8, #0
 80058e0:	dd09      	ble.n	80058f6 <_dtoa_r+0x72e>
 80058e2:	4545      	cmp	r5, r8
 80058e4:	9a05      	ldr	r2, [sp, #20]
 80058e6:	462b      	mov	r3, r5
 80058e8:	bfa8      	it	ge
 80058ea:	4643      	movge	r3, r8
 80058ec:	1ad2      	subs	r2, r2, r3
 80058ee:	9205      	str	r2, [sp, #20]
 80058f0:	1aed      	subs	r5, r5, r3
 80058f2:	eba8 0803 	sub.w	r8, r8, r3
 80058f6:	9b07      	ldr	r3, [sp, #28]
 80058f8:	b1eb      	cbz	r3, 8005936 <_dtoa_r+0x76e>
 80058fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d067      	beq.n	80059d0 <_dtoa_r+0x808>
 8005900:	b18f      	cbz	r7, 8005926 <_dtoa_r+0x75e>
 8005902:	4631      	mov	r1, r6
 8005904:	463a      	mov	r2, r7
 8005906:	4620      	mov	r0, r4
 8005908:	f000 fbaa 	bl	8006060 <__pow5mult>
 800590c:	9a04      	ldr	r2, [sp, #16]
 800590e:	4601      	mov	r1, r0
 8005910:	4606      	mov	r6, r0
 8005912:	4620      	mov	r0, r4
 8005914:	f000 fb0e 	bl	8005f34 <__multiply>
 8005918:	9904      	ldr	r1, [sp, #16]
 800591a:	9008      	str	r0, [sp, #32]
 800591c:	4620      	mov	r0, r4
 800591e:	f000 fa60 	bl	8005de2 <_Bfree>
 8005922:	9b08      	ldr	r3, [sp, #32]
 8005924:	9304      	str	r3, [sp, #16]
 8005926:	9b07      	ldr	r3, [sp, #28]
 8005928:	1bda      	subs	r2, r3, r7
 800592a:	d004      	beq.n	8005936 <_dtoa_r+0x76e>
 800592c:	9904      	ldr	r1, [sp, #16]
 800592e:	4620      	mov	r0, r4
 8005930:	f000 fb96 	bl	8006060 <__pow5mult>
 8005934:	9004      	str	r0, [sp, #16]
 8005936:	2101      	movs	r1, #1
 8005938:	4620      	mov	r0, r4
 800593a:	f000 faf2 	bl	8005f22 <__i2b>
 800593e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005940:	4607      	mov	r7, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 81d0 	beq.w	8005ce8 <_dtoa_r+0xb20>
 8005948:	461a      	mov	r2, r3
 800594a:	4601      	mov	r1, r0
 800594c:	4620      	mov	r0, r4
 800594e:	f000 fb87 	bl	8006060 <__pow5mult>
 8005952:	9b06      	ldr	r3, [sp, #24]
 8005954:	2b01      	cmp	r3, #1
 8005956:	4607      	mov	r7, r0
 8005958:	dc40      	bgt.n	80059dc <_dtoa_r+0x814>
 800595a:	9b00      	ldr	r3, [sp, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d139      	bne.n	80059d4 <_dtoa_r+0x80c>
 8005960:	9b01      	ldr	r3, [sp, #4]
 8005962:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005966:	2b00      	cmp	r3, #0
 8005968:	d136      	bne.n	80059d8 <_dtoa_r+0x810>
 800596a:	9b01      	ldr	r3, [sp, #4]
 800596c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005970:	0d1b      	lsrs	r3, r3, #20
 8005972:	051b      	lsls	r3, r3, #20
 8005974:	b12b      	cbz	r3, 8005982 <_dtoa_r+0x7ba>
 8005976:	9b05      	ldr	r3, [sp, #20]
 8005978:	3301      	adds	r3, #1
 800597a:	9305      	str	r3, [sp, #20]
 800597c:	f108 0801 	add.w	r8, r8, #1
 8005980:	2301      	movs	r3, #1
 8005982:	9307      	str	r3, [sp, #28]
 8005984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005986:	2b00      	cmp	r3, #0
 8005988:	d12a      	bne.n	80059e0 <_dtoa_r+0x818>
 800598a:	2001      	movs	r0, #1
 800598c:	e030      	b.n	80059f0 <_dtoa_r+0x828>
 800598e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005990:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005994:	e795      	b.n	80058c2 <_dtoa_r+0x6fa>
 8005996:	9b07      	ldr	r3, [sp, #28]
 8005998:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800599c:	42bb      	cmp	r3, r7
 800599e:	bfbf      	itttt	lt
 80059a0:	9b07      	ldrlt	r3, [sp, #28]
 80059a2:	9707      	strlt	r7, [sp, #28]
 80059a4:	1afa      	sublt	r2, r7, r3
 80059a6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80059a8:	bfbb      	ittet	lt
 80059aa:	189b      	addlt	r3, r3, r2
 80059ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80059ae:	1bdf      	subge	r7, r3, r7
 80059b0:	2700      	movlt	r7, #0
 80059b2:	f1b9 0f00 	cmp.w	r9, #0
 80059b6:	bfb5      	itete	lt
 80059b8:	9b05      	ldrlt	r3, [sp, #20]
 80059ba:	9d05      	ldrge	r5, [sp, #20]
 80059bc:	eba3 0509 	sublt.w	r5, r3, r9
 80059c0:	464b      	movge	r3, r9
 80059c2:	bfb8      	it	lt
 80059c4:	2300      	movlt	r3, #0
 80059c6:	e77e      	b.n	80058c6 <_dtoa_r+0x6fe>
 80059c8:	9f07      	ldr	r7, [sp, #28]
 80059ca:	9d05      	ldr	r5, [sp, #20]
 80059cc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80059ce:	e783      	b.n	80058d8 <_dtoa_r+0x710>
 80059d0:	9a07      	ldr	r2, [sp, #28]
 80059d2:	e7ab      	b.n	800592c <_dtoa_r+0x764>
 80059d4:	2300      	movs	r3, #0
 80059d6:	e7d4      	b.n	8005982 <_dtoa_r+0x7ba>
 80059d8:	9b00      	ldr	r3, [sp, #0]
 80059da:	e7d2      	b.n	8005982 <_dtoa_r+0x7ba>
 80059dc:	2300      	movs	r3, #0
 80059de:	9307      	str	r3, [sp, #28]
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80059e6:	6918      	ldr	r0, [r3, #16]
 80059e8:	f000 fa4d 	bl	8005e86 <__hi0bits>
 80059ec:	f1c0 0020 	rsb	r0, r0, #32
 80059f0:	4440      	add	r0, r8
 80059f2:	f010 001f 	ands.w	r0, r0, #31
 80059f6:	d047      	beq.n	8005a88 <_dtoa_r+0x8c0>
 80059f8:	f1c0 0320 	rsb	r3, r0, #32
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	dd3b      	ble.n	8005a78 <_dtoa_r+0x8b0>
 8005a00:	9b05      	ldr	r3, [sp, #20]
 8005a02:	f1c0 001c 	rsb	r0, r0, #28
 8005a06:	4403      	add	r3, r0
 8005a08:	9305      	str	r3, [sp, #20]
 8005a0a:	4405      	add	r5, r0
 8005a0c:	4480      	add	r8, r0
 8005a0e:	9b05      	ldr	r3, [sp, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	dd05      	ble.n	8005a20 <_dtoa_r+0x858>
 8005a14:	461a      	mov	r2, r3
 8005a16:	9904      	ldr	r1, [sp, #16]
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f000 fb6f 	bl	80060fc <__lshift>
 8005a1e:	9004      	str	r0, [sp, #16]
 8005a20:	f1b8 0f00 	cmp.w	r8, #0
 8005a24:	dd05      	ble.n	8005a32 <_dtoa_r+0x86a>
 8005a26:	4639      	mov	r1, r7
 8005a28:	4642      	mov	r2, r8
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f000 fb66 	bl	80060fc <__lshift>
 8005a30:	4607      	mov	r7, r0
 8005a32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a34:	b353      	cbz	r3, 8005a8c <_dtoa_r+0x8c4>
 8005a36:	4639      	mov	r1, r7
 8005a38:	9804      	ldr	r0, [sp, #16]
 8005a3a:	f000 fbb3 	bl	80061a4 <__mcmp>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	da24      	bge.n	8005a8c <_dtoa_r+0x8c4>
 8005a42:	2300      	movs	r3, #0
 8005a44:	220a      	movs	r2, #10
 8005a46:	9904      	ldr	r1, [sp, #16]
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f000 f9e1 	bl	8005e10 <__multadd>
 8005a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a50:	9004      	str	r0, [sp, #16]
 8005a52:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 814d 	beq.w	8005cf6 <_dtoa_r+0xb2e>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	4631      	mov	r1, r6
 8005a60:	220a      	movs	r2, #10
 8005a62:	4620      	mov	r0, r4
 8005a64:	f000 f9d4 	bl	8005e10 <__multadd>
 8005a68:	9b02      	ldr	r3, [sp, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	4606      	mov	r6, r0
 8005a6e:	dc4f      	bgt.n	8005b10 <_dtoa_r+0x948>
 8005a70:	9b06      	ldr	r3, [sp, #24]
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	dd4c      	ble.n	8005b10 <_dtoa_r+0x948>
 8005a76:	e011      	b.n	8005a9c <_dtoa_r+0x8d4>
 8005a78:	d0c9      	beq.n	8005a0e <_dtoa_r+0x846>
 8005a7a:	9a05      	ldr	r2, [sp, #20]
 8005a7c:	331c      	adds	r3, #28
 8005a7e:	441a      	add	r2, r3
 8005a80:	9205      	str	r2, [sp, #20]
 8005a82:	441d      	add	r5, r3
 8005a84:	4498      	add	r8, r3
 8005a86:	e7c2      	b.n	8005a0e <_dtoa_r+0x846>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	e7f6      	b.n	8005a7a <_dtoa_r+0x8b2>
 8005a8c:	f1b9 0f00 	cmp.w	r9, #0
 8005a90:	dc38      	bgt.n	8005b04 <_dtoa_r+0x93c>
 8005a92:	9b06      	ldr	r3, [sp, #24]
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	dd35      	ble.n	8005b04 <_dtoa_r+0x93c>
 8005a98:	f8cd 9008 	str.w	r9, [sp, #8]
 8005a9c:	9b02      	ldr	r3, [sp, #8]
 8005a9e:	b963      	cbnz	r3, 8005aba <_dtoa_r+0x8f2>
 8005aa0:	4639      	mov	r1, r7
 8005aa2:	2205      	movs	r2, #5
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	f000 f9b3 	bl	8005e10 <__multadd>
 8005aaa:	4601      	mov	r1, r0
 8005aac:	4607      	mov	r7, r0
 8005aae:	9804      	ldr	r0, [sp, #16]
 8005ab0:	f000 fb78 	bl	80061a4 <__mcmp>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	f73f adcc 	bgt.w	8005652 <_dtoa_r+0x48a>
 8005aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005abc:	465d      	mov	r5, fp
 8005abe:	ea6f 0a03 	mvn.w	sl, r3
 8005ac2:	f04f 0900 	mov.w	r9, #0
 8005ac6:	4639      	mov	r1, r7
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f000 f98a 	bl	8005de2 <_Bfree>
 8005ace:	2e00      	cmp	r6, #0
 8005ad0:	f43f aeb7 	beq.w	8005842 <_dtoa_r+0x67a>
 8005ad4:	f1b9 0f00 	cmp.w	r9, #0
 8005ad8:	d005      	beq.n	8005ae6 <_dtoa_r+0x91e>
 8005ada:	45b1      	cmp	r9, r6
 8005adc:	d003      	beq.n	8005ae6 <_dtoa_r+0x91e>
 8005ade:	4649      	mov	r1, r9
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f000 f97e 	bl	8005de2 <_Bfree>
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 f97a 	bl	8005de2 <_Bfree>
 8005aee:	e6a8      	b.n	8005842 <_dtoa_r+0x67a>
 8005af0:	2700      	movs	r7, #0
 8005af2:	463e      	mov	r6, r7
 8005af4:	e7e1      	b.n	8005aba <_dtoa_r+0x8f2>
 8005af6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005afa:	463e      	mov	r6, r7
 8005afc:	e5a9      	b.n	8005652 <_dtoa_r+0x48a>
 8005afe:	bf00      	nop
 8005b00:	40240000 	.word	0x40240000
 8005b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b06:	f8cd 9008 	str.w	r9, [sp, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 80fa 	beq.w	8005d04 <_dtoa_r+0xb3c>
 8005b10:	2d00      	cmp	r5, #0
 8005b12:	dd05      	ble.n	8005b20 <_dtoa_r+0x958>
 8005b14:	4631      	mov	r1, r6
 8005b16:	462a      	mov	r2, r5
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f000 faef 	bl	80060fc <__lshift>
 8005b1e:	4606      	mov	r6, r0
 8005b20:	9b07      	ldr	r3, [sp, #28]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d04c      	beq.n	8005bc0 <_dtoa_r+0x9f8>
 8005b26:	6871      	ldr	r1, [r6, #4]
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f000 f926 	bl	8005d7a <_Balloc>
 8005b2e:	6932      	ldr	r2, [r6, #16]
 8005b30:	3202      	adds	r2, #2
 8005b32:	4605      	mov	r5, r0
 8005b34:	0092      	lsls	r2, r2, #2
 8005b36:	f106 010c 	add.w	r1, r6, #12
 8005b3a:	300c      	adds	r0, #12
 8005b3c:	f000 f912 	bl	8005d64 <memcpy>
 8005b40:	2201      	movs	r2, #1
 8005b42:	4629      	mov	r1, r5
 8005b44:	4620      	mov	r0, r4
 8005b46:	f000 fad9 	bl	80060fc <__lshift>
 8005b4a:	9b00      	ldr	r3, [sp, #0]
 8005b4c:	f8cd b014 	str.w	fp, [sp, #20]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	46b1      	mov	r9, r6
 8005b56:	9307      	str	r3, [sp, #28]
 8005b58:	4606      	mov	r6, r0
 8005b5a:	4639      	mov	r1, r7
 8005b5c:	9804      	ldr	r0, [sp, #16]
 8005b5e:	f7ff faa4 	bl	80050aa <quorem>
 8005b62:	4649      	mov	r1, r9
 8005b64:	4605      	mov	r5, r0
 8005b66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005b6a:	9804      	ldr	r0, [sp, #16]
 8005b6c:	f000 fb1a 	bl	80061a4 <__mcmp>
 8005b70:	4632      	mov	r2, r6
 8005b72:	9000      	str	r0, [sp, #0]
 8005b74:	4639      	mov	r1, r7
 8005b76:	4620      	mov	r0, r4
 8005b78:	f000 fb2e 	bl	80061d8 <__mdiff>
 8005b7c:	68c3      	ldr	r3, [r0, #12]
 8005b7e:	4602      	mov	r2, r0
 8005b80:	bb03      	cbnz	r3, 8005bc4 <_dtoa_r+0x9fc>
 8005b82:	4601      	mov	r1, r0
 8005b84:	9008      	str	r0, [sp, #32]
 8005b86:	9804      	ldr	r0, [sp, #16]
 8005b88:	f000 fb0c 	bl	80061a4 <__mcmp>
 8005b8c:	9a08      	ldr	r2, [sp, #32]
 8005b8e:	4603      	mov	r3, r0
 8005b90:	4611      	mov	r1, r2
 8005b92:	4620      	mov	r0, r4
 8005b94:	9308      	str	r3, [sp, #32]
 8005b96:	f000 f924 	bl	8005de2 <_Bfree>
 8005b9a:	9b08      	ldr	r3, [sp, #32]
 8005b9c:	b9a3      	cbnz	r3, 8005bc8 <_dtoa_r+0xa00>
 8005b9e:	9a06      	ldr	r2, [sp, #24]
 8005ba0:	b992      	cbnz	r2, 8005bc8 <_dtoa_r+0xa00>
 8005ba2:	9a07      	ldr	r2, [sp, #28]
 8005ba4:	b982      	cbnz	r2, 8005bc8 <_dtoa_r+0xa00>
 8005ba6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005baa:	d029      	beq.n	8005c00 <_dtoa_r+0xa38>
 8005bac:	9b00      	ldr	r3, [sp, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	dd01      	ble.n	8005bb6 <_dtoa_r+0x9ee>
 8005bb2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005bb6:	9b05      	ldr	r3, [sp, #20]
 8005bb8:	1c5d      	adds	r5, r3, #1
 8005bba:	f883 8000 	strb.w	r8, [r3]
 8005bbe:	e782      	b.n	8005ac6 <_dtoa_r+0x8fe>
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	e7c2      	b.n	8005b4a <_dtoa_r+0x982>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e7e3      	b.n	8005b90 <_dtoa_r+0x9c8>
 8005bc8:	9a00      	ldr	r2, [sp, #0]
 8005bca:	2a00      	cmp	r2, #0
 8005bcc:	db04      	blt.n	8005bd8 <_dtoa_r+0xa10>
 8005bce:	d125      	bne.n	8005c1c <_dtoa_r+0xa54>
 8005bd0:	9a06      	ldr	r2, [sp, #24]
 8005bd2:	bb1a      	cbnz	r2, 8005c1c <_dtoa_r+0xa54>
 8005bd4:	9a07      	ldr	r2, [sp, #28]
 8005bd6:	bb0a      	cbnz	r2, 8005c1c <_dtoa_r+0xa54>
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	ddec      	ble.n	8005bb6 <_dtoa_r+0x9ee>
 8005bdc:	2201      	movs	r2, #1
 8005bde:	9904      	ldr	r1, [sp, #16]
 8005be0:	4620      	mov	r0, r4
 8005be2:	f000 fa8b 	bl	80060fc <__lshift>
 8005be6:	4639      	mov	r1, r7
 8005be8:	9004      	str	r0, [sp, #16]
 8005bea:	f000 fadb 	bl	80061a4 <__mcmp>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	dc03      	bgt.n	8005bfa <_dtoa_r+0xa32>
 8005bf2:	d1e0      	bne.n	8005bb6 <_dtoa_r+0x9ee>
 8005bf4:	f018 0f01 	tst.w	r8, #1
 8005bf8:	d0dd      	beq.n	8005bb6 <_dtoa_r+0x9ee>
 8005bfa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005bfe:	d1d8      	bne.n	8005bb2 <_dtoa_r+0x9ea>
 8005c00:	9b05      	ldr	r3, [sp, #20]
 8005c02:	9a05      	ldr	r2, [sp, #20]
 8005c04:	1c5d      	adds	r5, r3, #1
 8005c06:	2339      	movs	r3, #57	; 0x39
 8005c08:	7013      	strb	r3, [r2, #0]
 8005c0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c0e:	2b39      	cmp	r3, #57	; 0x39
 8005c10:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005c14:	d04f      	beq.n	8005cb6 <_dtoa_r+0xaee>
 8005c16:	3301      	adds	r3, #1
 8005c18:	7013      	strb	r3, [r2, #0]
 8005c1a:	e754      	b.n	8005ac6 <_dtoa_r+0x8fe>
 8005c1c:	9a05      	ldr	r2, [sp, #20]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f102 0501 	add.w	r5, r2, #1
 8005c24:	dd06      	ble.n	8005c34 <_dtoa_r+0xa6c>
 8005c26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c2a:	d0e9      	beq.n	8005c00 <_dtoa_r+0xa38>
 8005c2c:	f108 0801 	add.w	r8, r8, #1
 8005c30:	9b05      	ldr	r3, [sp, #20]
 8005c32:	e7c2      	b.n	8005bba <_dtoa_r+0x9f2>
 8005c34:	9a02      	ldr	r2, [sp, #8]
 8005c36:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005c3a:	eba5 030b 	sub.w	r3, r5, fp
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d021      	beq.n	8005c86 <_dtoa_r+0xabe>
 8005c42:	2300      	movs	r3, #0
 8005c44:	220a      	movs	r2, #10
 8005c46:	9904      	ldr	r1, [sp, #16]
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f000 f8e1 	bl	8005e10 <__multadd>
 8005c4e:	45b1      	cmp	r9, r6
 8005c50:	9004      	str	r0, [sp, #16]
 8005c52:	f04f 0300 	mov.w	r3, #0
 8005c56:	f04f 020a 	mov.w	r2, #10
 8005c5a:	4649      	mov	r1, r9
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	d105      	bne.n	8005c6c <_dtoa_r+0xaa4>
 8005c60:	f000 f8d6 	bl	8005e10 <__multadd>
 8005c64:	4681      	mov	r9, r0
 8005c66:	4606      	mov	r6, r0
 8005c68:	9505      	str	r5, [sp, #20]
 8005c6a:	e776      	b.n	8005b5a <_dtoa_r+0x992>
 8005c6c:	f000 f8d0 	bl	8005e10 <__multadd>
 8005c70:	4631      	mov	r1, r6
 8005c72:	4681      	mov	r9, r0
 8005c74:	2300      	movs	r3, #0
 8005c76:	220a      	movs	r2, #10
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f000 f8c9 	bl	8005e10 <__multadd>
 8005c7e:	4606      	mov	r6, r0
 8005c80:	e7f2      	b.n	8005c68 <_dtoa_r+0xaa0>
 8005c82:	f04f 0900 	mov.w	r9, #0
 8005c86:	2201      	movs	r2, #1
 8005c88:	9904      	ldr	r1, [sp, #16]
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f000 fa36 	bl	80060fc <__lshift>
 8005c90:	4639      	mov	r1, r7
 8005c92:	9004      	str	r0, [sp, #16]
 8005c94:	f000 fa86 	bl	80061a4 <__mcmp>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	dcb6      	bgt.n	8005c0a <_dtoa_r+0xa42>
 8005c9c:	d102      	bne.n	8005ca4 <_dtoa_r+0xadc>
 8005c9e:	f018 0f01 	tst.w	r8, #1
 8005ca2:	d1b2      	bne.n	8005c0a <_dtoa_r+0xa42>
 8005ca4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ca8:	2b30      	cmp	r3, #48	; 0x30
 8005caa:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005cae:	f47f af0a 	bne.w	8005ac6 <_dtoa_r+0x8fe>
 8005cb2:	4615      	mov	r5, r2
 8005cb4:	e7f6      	b.n	8005ca4 <_dtoa_r+0xadc>
 8005cb6:	4593      	cmp	fp, r2
 8005cb8:	d105      	bne.n	8005cc6 <_dtoa_r+0xafe>
 8005cba:	2331      	movs	r3, #49	; 0x31
 8005cbc:	f10a 0a01 	add.w	sl, sl, #1
 8005cc0:	f88b 3000 	strb.w	r3, [fp]
 8005cc4:	e6ff      	b.n	8005ac6 <_dtoa_r+0x8fe>
 8005cc6:	4615      	mov	r5, r2
 8005cc8:	e79f      	b.n	8005c0a <_dtoa_r+0xa42>
 8005cca:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005d30 <_dtoa_r+0xb68>
 8005cce:	e007      	b.n	8005ce0 <_dtoa_r+0xb18>
 8005cd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cd2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005d34 <_dtoa_r+0xb6c>
 8005cd6:	b11b      	cbz	r3, 8005ce0 <_dtoa_r+0xb18>
 8005cd8:	f10b 0308 	add.w	r3, fp, #8
 8005cdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	4658      	mov	r0, fp
 8005ce2:	b017      	add	sp, #92	; 0x5c
 8005ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce8:	9b06      	ldr	r3, [sp, #24]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	f77f ae35 	ble.w	800595a <_dtoa_r+0x792>
 8005cf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cf2:	9307      	str	r3, [sp, #28]
 8005cf4:	e649      	b.n	800598a <_dtoa_r+0x7c2>
 8005cf6:	9b02      	ldr	r3, [sp, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	dc03      	bgt.n	8005d04 <_dtoa_r+0xb3c>
 8005cfc:	9b06      	ldr	r3, [sp, #24]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	f73f aecc 	bgt.w	8005a9c <_dtoa_r+0x8d4>
 8005d04:	465d      	mov	r5, fp
 8005d06:	4639      	mov	r1, r7
 8005d08:	9804      	ldr	r0, [sp, #16]
 8005d0a:	f7ff f9ce 	bl	80050aa <quorem>
 8005d0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d12:	f805 8b01 	strb.w	r8, [r5], #1
 8005d16:	9a02      	ldr	r2, [sp, #8]
 8005d18:	eba5 030b 	sub.w	r3, r5, fp
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	ddb0      	ble.n	8005c82 <_dtoa_r+0xaba>
 8005d20:	2300      	movs	r3, #0
 8005d22:	220a      	movs	r2, #10
 8005d24:	9904      	ldr	r1, [sp, #16]
 8005d26:	4620      	mov	r0, r4
 8005d28:	f000 f872 	bl	8005e10 <__multadd>
 8005d2c:	9004      	str	r0, [sp, #16]
 8005d2e:	e7ea      	b.n	8005d06 <_dtoa_r+0xb3e>
 8005d30:	08006854 	.word	0x08006854
 8005d34:	08006856 	.word	0x08006856

08005d38 <_localeconv_r>:
 8005d38:	4b04      	ldr	r3, [pc, #16]	; (8005d4c <_localeconv_r+0x14>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6a18      	ldr	r0, [r3, #32]
 8005d3e:	4b04      	ldr	r3, [pc, #16]	; (8005d50 <_localeconv_r+0x18>)
 8005d40:	2800      	cmp	r0, #0
 8005d42:	bf08      	it	eq
 8005d44:	4618      	moveq	r0, r3
 8005d46:	30f0      	adds	r0, #240	; 0xf0
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	2000000c 	.word	0x2000000c
 8005d50:	20000070 	.word	0x20000070

08005d54 <malloc>:
 8005d54:	4b02      	ldr	r3, [pc, #8]	; (8005d60 <malloc+0xc>)
 8005d56:	4601      	mov	r1, r0
 8005d58:	6818      	ldr	r0, [r3, #0]
 8005d5a:	f000 baf7 	b.w	800634c <_malloc_r>
 8005d5e:	bf00      	nop
 8005d60:	2000000c 	.word	0x2000000c

08005d64 <memcpy>:
 8005d64:	b510      	push	{r4, lr}
 8005d66:	1e43      	subs	r3, r0, #1
 8005d68:	440a      	add	r2, r1
 8005d6a:	4291      	cmp	r1, r2
 8005d6c:	d100      	bne.n	8005d70 <memcpy+0xc>
 8005d6e:	bd10      	pop	{r4, pc}
 8005d70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d78:	e7f7      	b.n	8005d6a <memcpy+0x6>

08005d7a <_Balloc>:
 8005d7a:	b570      	push	{r4, r5, r6, lr}
 8005d7c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d7e:	4604      	mov	r4, r0
 8005d80:	460e      	mov	r6, r1
 8005d82:	b93d      	cbnz	r5, 8005d94 <_Balloc+0x1a>
 8005d84:	2010      	movs	r0, #16
 8005d86:	f7ff ffe5 	bl	8005d54 <malloc>
 8005d8a:	6260      	str	r0, [r4, #36]	; 0x24
 8005d8c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d90:	6005      	str	r5, [r0, #0]
 8005d92:	60c5      	str	r5, [r0, #12]
 8005d94:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005d96:	68eb      	ldr	r3, [r5, #12]
 8005d98:	b183      	cbz	r3, 8005dbc <_Balloc+0x42>
 8005d9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005da2:	b9b8      	cbnz	r0, 8005dd4 <_Balloc+0x5a>
 8005da4:	2101      	movs	r1, #1
 8005da6:	fa01 f506 	lsl.w	r5, r1, r6
 8005daa:	1d6a      	adds	r2, r5, #5
 8005dac:	0092      	lsls	r2, r2, #2
 8005dae:	4620      	mov	r0, r4
 8005db0:	f000 fabe 	bl	8006330 <_calloc_r>
 8005db4:	b160      	cbz	r0, 8005dd0 <_Balloc+0x56>
 8005db6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005dba:	e00e      	b.n	8005dda <_Balloc+0x60>
 8005dbc:	2221      	movs	r2, #33	; 0x21
 8005dbe:	2104      	movs	r1, #4
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f000 fab5 	bl	8006330 <_calloc_r>
 8005dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dc8:	60e8      	str	r0, [r5, #12]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e4      	bne.n	8005d9a <_Balloc+0x20>
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	bd70      	pop	{r4, r5, r6, pc}
 8005dd4:	6802      	ldr	r2, [r0, #0]
 8005dd6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005de0:	e7f7      	b.n	8005dd2 <_Balloc+0x58>

08005de2 <_Bfree>:
 8005de2:	b570      	push	{r4, r5, r6, lr}
 8005de4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005de6:	4606      	mov	r6, r0
 8005de8:	460d      	mov	r5, r1
 8005dea:	b93c      	cbnz	r4, 8005dfc <_Bfree+0x1a>
 8005dec:	2010      	movs	r0, #16
 8005dee:	f7ff ffb1 	bl	8005d54 <malloc>
 8005df2:	6270      	str	r0, [r6, #36]	; 0x24
 8005df4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005df8:	6004      	str	r4, [r0, #0]
 8005dfa:	60c4      	str	r4, [r0, #12]
 8005dfc:	b13d      	cbz	r5, 8005e0e <_Bfree+0x2c>
 8005dfe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005e00:	686a      	ldr	r2, [r5, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e08:	6029      	str	r1, [r5, #0]
 8005e0a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}

08005e10 <__multadd>:
 8005e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e14:	690d      	ldr	r5, [r1, #16]
 8005e16:	461f      	mov	r7, r3
 8005e18:	4606      	mov	r6, r0
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	f101 0c14 	add.w	ip, r1, #20
 8005e20:	2300      	movs	r3, #0
 8005e22:	f8dc 0000 	ldr.w	r0, [ip]
 8005e26:	b281      	uxth	r1, r0
 8005e28:	fb02 7101 	mla	r1, r2, r1, r7
 8005e2c:	0c0f      	lsrs	r7, r1, #16
 8005e2e:	0c00      	lsrs	r0, r0, #16
 8005e30:	fb02 7000 	mla	r0, r2, r0, r7
 8005e34:	b289      	uxth	r1, r1
 8005e36:	3301      	adds	r3, #1
 8005e38:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005e3c:	429d      	cmp	r5, r3
 8005e3e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005e42:	f84c 1b04 	str.w	r1, [ip], #4
 8005e46:	dcec      	bgt.n	8005e22 <__multadd+0x12>
 8005e48:	b1d7      	cbz	r7, 8005e80 <__multadd+0x70>
 8005e4a:	68a3      	ldr	r3, [r4, #8]
 8005e4c:	42ab      	cmp	r3, r5
 8005e4e:	dc12      	bgt.n	8005e76 <__multadd+0x66>
 8005e50:	6861      	ldr	r1, [r4, #4]
 8005e52:	4630      	mov	r0, r6
 8005e54:	3101      	adds	r1, #1
 8005e56:	f7ff ff90 	bl	8005d7a <_Balloc>
 8005e5a:	6922      	ldr	r2, [r4, #16]
 8005e5c:	3202      	adds	r2, #2
 8005e5e:	f104 010c 	add.w	r1, r4, #12
 8005e62:	4680      	mov	r8, r0
 8005e64:	0092      	lsls	r2, r2, #2
 8005e66:	300c      	adds	r0, #12
 8005e68:	f7ff ff7c 	bl	8005d64 <memcpy>
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	4630      	mov	r0, r6
 8005e70:	f7ff ffb7 	bl	8005de2 <_Bfree>
 8005e74:	4644      	mov	r4, r8
 8005e76:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e7a:	3501      	adds	r5, #1
 8005e7c:	615f      	str	r7, [r3, #20]
 8005e7e:	6125      	str	r5, [r4, #16]
 8005e80:	4620      	mov	r0, r4
 8005e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e86 <__hi0bits>:
 8005e86:	0c02      	lsrs	r2, r0, #16
 8005e88:	0412      	lsls	r2, r2, #16
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	b9b2      	cbnz	r2, 8005ebc <__hi0bits+0x36>
 8005e8e:	0403      	lsls	r3, r0, #16
 8005e90:	2010      	movs	r0, #16
 8005e92:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005e96:	bf04      	itt	eq
 8005e98:	021b      	lsleq	r3, r3, #8
 8005e9a:	3008      	addeq	r0, #8
 8005e9c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005ea0:	bf04      	itt	eq
 8005ea2:	011b      	lsleq	r3, r3, #4
 8005ea4:	3004      	addeq	r0, #4
 8005ea6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005eaa:	bf04      	itt	eq
 8005eac:	009b      	lsleq	r3, r3, #2
 8005eae:	3002      	addeq	r0, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	db06      	blt.n	8005ec2 <__hi0bits+0x3c>
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	d503      	bpl.n	8005ec0 <__hi0bits+0x3a>
 8005eb8:	3001      	adds	r0, #1
 8005eba:	4770      	bx	lr
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	e7e8      	b.n	8005e92 <__hi0bits+0xc>
 8005ec0:	2020      	movs	r0, #32
 8005ec2:	4770      	bx	lr

08005ec4 <__lo0bits>:
 8005ec4:	6803      	ldr	r3, [r0, #0]
 8005ec6:	f013 0207 	ands.w	r2, r3, #7
 8005eca:	4601      	mov	r1, r0
 8005ecc:	d00b      	beq.n	8005ee6 <__lo0bits+0x22>
 8005ece:	07da      	lsls	r2, r3, #31
 8005ed0:	d423      	bmi.n	8005f1a <__lo0bits+0x56>
 8005ed2:	0798      	lsls	r0, r3, #30
 8005ed4:	bf49      	itett	mi
 8005ed6:	085b      	lsrmi	r3, r3, #1
 8005ed8:	089b      	lsrpl	r3, r3, #2
 8005eda:	2001      	movmi	r0, #1
 8005edc:	600b      	strmi	r3, [r1, #0]
 8005ede:	bf5c      	itt	pl
 8005ee0:	600b      	strpl	r3, [r1, #0]
 8005ee2:	2002      	movpl	r0, #2
 8005ee4:	4770      	bx	lr
 8005ee6:	b298      	uxth	r0, r3
 8005ee8:	b9a8      	cbnz	r0, 8005f16 <__lo0bits+0x52>
 8005eea:	0c1b      	lsrs	r3, r3, #16
 8005eec:	2010      	movs	r0, #16
 8005eee:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005ef2:	bf04      	itt	eq
 8005ef4:	0a1b      	lsreq	r3, r3, #8
 8005ef6:	3008      	addeq	r0, #8
 8005ef8:	071a      	lsls	r2, r3, #28
 8005efa:	bf04      	itt	eq
 8005efc:	091b      	lsreq	r3, r3, #4
 8005efe:	3004      	addeq	r0, #4
 8005f00:	079a      	lsls	r2, r3, #30
 8005f02:	bf04      	itt	eq
 8005f04:	089b      	lsreq	r3, r3, #2
 8005f06:	3002      	addeq	r0, #2
 8005f08:	07da      	lsls	r2, r3, #31
 8005f0a:	d402      	bmi.n	8005f12 <__lo0bits+0x4e>
 8005f0c:	085b      	lsrs	r3, r3, #1
 8005f0e:	d006      	beq.n	8005f1e <__lo0bits+0x5a>
 8005f10:	3001      	adds	r0, #1
 8005f12:	600b      	str	r3, [r1, #0]
 8005f14:	4770      	bx	lr
 8005f16:	4610      	mov	r0, r2
 8005f18:	e7e9      	b.n	8005eee <__lo0bits+0x2a>
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	4770      	bx	lr
 8005f1e:	2020      	movs	r0, #32
 8005f20:	4770      	bx	lr

08005f22 <__i2b>:
 8005f22:	b510      	push	{r4, lr}
 8005f24:	460c      	mov	r4, r1
 8005f26:	2101      	movs	r1, #1
 8005f28:	f7ff ff27 	bl	8005d7a <_Balloc>
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	6144      	str	r4, [r0, #20]
 8005f30:	6102      	str	r2, [r0, #16]
 8005f32:	bd10      	pop	{r4, pc}

08005f34 <__multiply>:
 8005f34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f38:	4614      	mov	r4, r2
 8005f3a:	690a      	ldr	r2, [r1, #16]
 8005f3c:	6923      	ldr	r3, [r4, #16]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	bfb8      	it	lt
 8005f42:	460b      	movlt	r3, r1
 8005f44:	4688      	mov	r8, r1
 8005f46:	bfbc      	itt	lt
 8005f48:	46a0      	movlt	r8, r4
 8005f4a:	461c      	movlt	r4, r3
 8005f4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005f50:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005f54:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005f5c:	eb07 0609 	add.w	r6, r7, r9
 8005f60:	42b3      	cmp	r3, r6
 8005f62:	bfb8      	it	lt
 8005f64:	3101      	addlt	r1, #1
 8005f66:	f7ff ff08 	bl	8005d7a <_Balloc>
 8005f6a:	f100 0514 	add.w	r5, r0, #20
 8005f6e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005f72:	462b      	mov	r3, r5
 8005f74:	2200      	movs	r2, #0
 8005f76:	4573      	cmp	r3, lr
 8005f78:	d316      	bcc.n	8005fa8 <__multiply+0x74>
 8005f7a:	f104 0214 	add.w	r2, r4, #20
 8005f7e:	f108 0114 	add.w	r1, r8, #20
 8005f82:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005f86:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	9b00      	ldr	r3, [sp, #0]
 8005f8e:	9201      	str	r2, [sp, #4]
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d80c      	bhi.n	8005fae <__multiply+0x7a>
 8005f94:	2e00      	cmp	r6, #0
 8005f96:	dd03      	ble.n	8005fa0 <__multiply+0x6c>
 8005f98:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d05d      	beq.n	800605c <__multiply+0x128>
 8005fa0:	6106      	str	r6, [r0, #16]
 8005fa2:	b003      	add	sp, #12
 8005fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa8:	f843 2b04 	str.w	r2, [r3], #4
 8005fac:	e7e3      	b.n	8005f76 <__multiply+0x42>
 8005fae:	f8b2 b000 	ldrh.w	fp, [r2]
 8005fb2:	f1bb 0f00 	cmp.w	fp, #0
 8005fb6:	d023      	beq.n	8006000 <__multiply+0xcc>
 8005fb8:	4689      	mov	r9, r1
 8005fba:	46ac      	mov	ip, r5
 8005fbc:	f04f 0800 	mov.w	r8, #0
 8005fc0:	f859 4b04 	ldr.w	r4, [r9], #4
 8005fc4:	f8dc a000 	ldr.w	sl, [ip]
 8005fc8:	b2a3      	uxth	r3, r4
 8005fca:	fa1f fa8a 	uxth.w	sl, sl
 8005fce:	fb0b a303 	mla	r3, fp, r3, sl
 8005fd2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005fd6:	f8dc 4000 	ldr.w	r4, [ip]
 8005fda:	4443      	add	r3, r8
 8005fdc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005fe0:	fb0b 840a 	mla	r4, fp, sl, r8
 8005fe4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005fe8:	46e2      	mov	sl, ip
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005ff0:	454f      	cmp	r7, r9
 8005ff2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005ff6:	f84a 3b04 	str.w	r3, [sl], #4
 8005ffa:	d82b      	bhi.n	8006054 <__multiply+0x120>
 8005ffc:	f8cc 8004 	str.w	r8, [ip, #4]
 8006000:	9b01      	ldr	r3, [sp, #4]
 8006002:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006006:	3204      	adds	r2, #4
 8006008:	f1ba 0f00 	cmp.w	sl, #0
 800600c:	d020      	beq.n	8006050 <__multiply+0x11c>
 800600e:	682b      	ldr	r3, [r5, #0]
 8006010:	4689      	mov	r9, r1
 8006012:	46a8      	mov	r8, r5
 8006014:	f04f 0b00 	mov.w	fp, #0
 8006018:	f8b9 c000 	ldrh.w	ip, [r9]
 800601c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006020:	fb0a 440c 	mla	r4, sl, ip, r4
 8006024:	445c      	add	r4, fp
 8006026:	46c4      	mov	ip, r8
 8006028:	b29b      	uxth	r3, r3
 800602a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800602e:	f84c 3b04 	str.w	r3, [ip], #4
 8006032:	f859 3b04 	ldr.w	r3, [r9], #4
 8006036:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800603a:	0c1b      	lsrs	r3, r3, #16
 800603c:	fb0a b303 	mla	r3, sl, r3, fp
 8006040:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006044:	454f      	cmp	r7, r9
 8006046:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800604a:	d805      	bhi.n	8006058 <__multiply+0x124>
 800604c:	f8c8 3004 	str.w	r3, [r8, #4]
 8006050:	3504      	adds	r5, #4
 8006052:	e79b      	b.n	8005f8c <__multiply+0x58>
 8006054:	46d4      	mov	ip, sl
 8006056:	e7b3      	b.n	8005fc0 <__multiply+0x8c>
 8006058:	46e0      	mov	r8, ip
 800605a:	e7dd      	b.n	8006018 <__multiply+0xe4>
 800605c:	3e01      	subs	r6, #1
 800605e:	e799      	b.n	8005f94 <__multiply+0x60>

08006060 <__pow5mult>:
 8006060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006064:	4615      	mov	r5, r2
 8006066:	f012 0203 	ands.w	r2, r2, #3
 800606a:	4606      	mov	r6, r0
 800606c:	460f      	mov	r7, r1
 800606e:	d007      	beq.n	8006080 <__pow5mult+0x20>
 8006070:	3a01      	subs	r2, #1
 8006072:	4c21      	ldr	r4, [pc, #132]	; (80060f8 <__pow5mult+0x98>)
 8006074:	2300      	movs	r3, #0
 8006076:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800607a:	f7ff fec9 	bl	8005e10 <__multadd>
 800607e:	4607      	mov	r7, r0
 8006080:	10ad      	asrs	r5, r5, #2
 8006082:	d035      	beq.n	80060f0 <__pow5mult+0x90>
 8006084:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006086:	b93c      	cbnz	r4, 8006098 <__pow5mult+0x38>
 8006088:	2010      	movs	r0, #16
 800608a:	f7ff fe63 	bl	8005d54 <malloc>
 800608e:	6270      	str	r0, [r6, #36]	; 0x24
 8006090:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006094:	6004      	str	r4, [r0, #0]
 8006096:	60c4      	str	r4, [r0, #12]
 8006098:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800609c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060a0:	b94c      	cbnz	r4, 80060b6 <__pow5mult+0x56>
 80060a2:	f240 2171 	movw	r1, #625	; 0x271
 80060a6:	4630      	mov	r0, r6
 80060a8:	f7ff ff3b 	bl	8005f22 <__i2b>
 80060ac:	2300      	movs	r3, #0
 80060ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80060b2:	4604      	mov	r4, r0
 80060b4:	6003      	str	r3, [r0, #0]
 80060b6:	f04f 0800 	mov.w	r8, #0
 80060ba:	07eb      	lsls	r3, r5, #31
 80060bc:	d50a      	bpl.n	80060d4 <__pow5mult+0x74>
 80060be:	4639      	mov	r1, r7
 80060c0:	4622      	mov	r2, r4
 80060c2:	4630      	mov	r0, r6
 80060c4:	f7ff ff36 	bl	8005f34 <__multiply>
 80060c8:	4639      	mov	r1, r7
 80060ca:	4681      	mov	r9, r0
 80060cc:	4630      	mov	r0, r6
 80060ce:	f7ff fe88 	bl	8005de2 <_Bfree>
 80060d2:	464f      	mov	r7, r9
 80060d4:	106d      	asrs	r5, r5, #1
 80060d6:	d00b      	beq.n	80060f0 <__pow5mult+0x90>
 80060d8:	6820      	ldr	r0, [r4, #0]
 80060da:	b938      	cbnz	r0, 80060ec <__pow5mult+0x8c>
 80060dc:	4622      	mov	r2, r4
 80060de:	4621      	mov	r1, r4
 80060e0:	4630      	mov	r0, r6
 80060e2:	f7ff ff27 	bl	8005f34 <__multiply>
 80060e6:	6020      	str	r0, [r4, #0]
 80060e8:	f8c0 8000 	str.w	r8, [r0]
 80060ec:	4604      	mov	r4, r0
 80060ee:	e7e4      	b.n	80060ba <__pow5mult+0x5a>
 80060f0:	4638      	mov	r0, r7
 80060f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060f6:	bf00      	nop
 80060f8:	08006958 	.word	0x08006958

080060fc <__lshift>:
 80060fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006100:	460c      	mov	r4, r1
 8006102:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006106:	6923      	ldr	r3, [r4, #16]
 8006108:	6849      	ldr	r1, [r1, #4]
 800610a:	eb0a 0903 	add.w	r9, sl, r3
 800610e:	68a3      	ldr	r3, [r4, #8]
 8006110:	4607      	mov	r7, r0
 8006112:	4616      	mov	r6, r2
 8006114:	f109 0501 	add.w	r5, r9, #1
 8006118:	42ab      	cmp	r3, r5
 800611a:	db32      	blt.n	8006182 <__lshift+0x86>
 800611c:	4638      	mov	r0, r7
 800611e:	f7ff fe2c 	bl	8005d7a <_Balloc>
 8006122:	2300      	movs	r3, #0
 8006124:	4680      	mov	r8, r0
 8006126:	f100 0114 	add.w	r1, r0, #20
 800612a:	461a      	mov	r2, r3
 800612c:	4553      	cmp	r3, sl
 800612e:	db2b      	blt.n	8006188 <__lshift+0x8c>
 8006130:	6920      	ldr	r0, [r4, #16]
 8006132:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006136:	f104 0314 	add.w	r3, r4, #20
 800613a:	f016 021f 	ands.w	r2, r6, #31
 800613e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006142:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006146:	d025      	beq.n	8006194 <__lshift+0x98>
 8006148:	f1c2 0e20 	rsb	lr, r2, #32
 800614c:	2000      	movs	r0, #0
 800614e:	681e      	ldr	r6, [r3, #0]
 8006150:	468a      	mov	sl, r1
 8006152:	4096      	lsls	r6, r2
 8006154:	4330      	orrs	r0, r6
 8006156:	f84a 0b04 	str.w	r0, [sl], #4
 800615a:	f853 0b04 	ldr.w	r0, [r3], #4
 800615e:	459c      	cmp	ip, r3
 8006160:	fa20 f00e 	lsr.w	r0, r0, lr
 8006164:	d814      	bhi.n	8006190 <__lshift+0x94>
 8006166:	6048      	str	r0, [r1, #4]
 8006168:	b108      	cbz	r0, 800616e <__lshift+0x72>
 800616a:	f109 0502 	add.w	r5, r9, #2
 800616e:	3d01      	subs	r5, #1
 8006170:	4638      	mov	r0, r7
 8006172:	f8c8 5010 	str.w	r5, [r8, #16]
 8006176:	4621      	mov	r1, r4
 8006178:	f7ff fe33 	bl	8005de2 <_Bfree>
 800617c:	4640      	mov	r0, r8
 800617e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006182:	3101      	adds	r1, #1
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	e7c7      	b.n	8006118 <__lshift+0x1c>
 8006188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800618c:	3301      	adds	r3, #1
 800618e:	e7cd      	b.n	800612c <__lshift+0x30>
 8006190:	4651      	mov	r1, sl
 8006192:	e7dc      	b.n	800614e <__lshift+0x52>
 8006194:	3904      	subs	r1, #4
 8006196:	f853 2b04 	ldr.w	r2, [r3], #4
 800619a:	f841 2f04 	str.w	r2, [r1, #4]!
 800619e:	459c      	cmp	ip, r3
 80061a0:	d8f9      	bhi.n	8006196 <__lshift+0x9a>
 80061a2:	e7e4      	b.n	800616e <__lshift+0x72>

080061a4 <__mcmp>:
 80061a4:	6903      	ldr	r3, [r0, #16]
 80061a6:	690a      	ldr	r2, [r1, #16]
 80061a8:	1a9b      	subs	r3, r3, r2
 80061aa:	b530      	push	{r4, r5, lr}
 80061ac:	d10c      	bne.n	80061c8 <__mcmp+0x24>
 80061ae:	0092      	lsls	r2, r2, #2
 80061b0:	3014      	adds	r0, #20
 80061b2:	3114      	adds	r1, #20
 80061b4:	1884      	adds	r4, r0, r2
 80061b6:	4411      	add	r1, r2
 80061b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80061bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80061c0:	4295      	cmp	r5, r2
 80061c2:	d003      	beq.n	80061cc <__mcmp+0x28>
 80061c4:	d305      	bcc.n	80061d2 <__mcmp+0x2e>
 80061c6:	2301      	movs	r3, #1
 80061c8:	4618      	mov	r0, r3
 80061ca:	bd30      	pop	{r4, r5, pc}
 80061cc:	42a0      	cmp	r0, r4
 80061ce:	d3f3      	bcc.n	80061b8 <__mcmp+0x14>
 80061d0:	e7fa      	b.n	80061c8 <__mcmp+0x24>
 80061d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061d6:	e7f7      	b.n	80061c8 <__mcmp+0x24>

080061d8 <__mdiff>:
 80061d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061dc:	460d      	mov	r5, r1
 80061de:	4607      	mov	r7, r0
 80061e0:	4611      	mov	r1, r2
 80061e2:	4628      	mov	r0, r5
 80061e4:	4614      	mov	r4, r2
 80061e6:	f7ff ffdd 	bl	80061a4 <__mcmp>
 80061ea:	1e06      	subs	r6, r0, #0
 80061ec:	d108      	bne.n	8006200 <__mdiff+0x28>
 80061ee:	4631      	mov	r1, r6
 80061f0:	4638      	mov	r0, r7
 80061f2:	f7ff fdc2 	bl	8005d7a <_Balloc>
 80061f6:	2301      	movs	r3, #1
 80061f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80061fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006200:	bfa4      	itt	ge
 8006202:	4623      	movge	r3, r4
 8006204:	462c      	movge	r4, r5
 8006206:	4638      	mov	r0, r7
 8006208:	6861      	ldr	r1, [r4, #4]
 800620a:	bfa6      	itte	ge
 800620c:	461d      	movge	r5, r3
 800620e:	2600      	movge	r6, #0
 8006210:	2601      	movlt	r6, #1
 8006212:	f7ff fdb2 	bl	8005d7a <_Balloc>
 8006216:	692b      	ldr	r3, [r5, #16]
 8006218:	60c6      	str	r6, [r0, #12]
 800621a:	6926      	ldr	r6, [r4, #16]
 800621c:	f105 0914 	add.w	r9, r5, #20
 8006220:	f104 0214 	add.w	r2, r4, #20
 8006224:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006228:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800622c:	f100 0514 	add.w	r5, r0, #20
 8006230:	f04f 0e00 	mov.w	lr, #0
 8006234:	f852 ab04 	ldr.w	sl, [r2], #4
 8006238:	f859 4b04 	ldr.w	r4, [r9], #4
 800623c:	fa1e f18a 	uxtah	r1, lr, sl
 8006240:	b2a3      	uxth	r3, r4
 8006242:	1ac9      	subs	r1, r1, r3
 8006244:	0c23      	lsrs	r3, r4, #16
 8006246:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800624a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800624e:	b289      	uxth	r1, r1
 8006250:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006254:	45c8      	cmp	r8, r9
 8006256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800625a:	4694      	mov	ip, r2
 800625c:	f845 3b04 	str.w	r3, [r5], #4
 8006260:	d8e8      	bhi.n	8006234 <__mdiff+0x5c>
 8006262:	45bc      	cmp	ip, r7
 8006264:	d304      	bcc.n	8006270 <__mdiff+0x98>
 8006266:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800626a:	b183      	cbz	r3, 800628e <__mdiff+0xb6>
 800626c:	6106      	str	r6, [r0, #16]
 800626e:	e7c5      	b.n	80061fc <__mdiff+0x24>
 8006270:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006274:	fa1e f381 	uxtah	r3, lr, r1
 8006278:	141a      	asrs	r2, r3, #16
 800627a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800627e:	b29b      	uxth	r3, r3
 8006280:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006284:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006288:	f845 3b04 	str.w	r3, [r5], #4
 800628c:	e7e9      	b.n	8006262 <__mdiff+0x8a>
 800628e:	3e01      	subs	r6, #1
 8006290:	e7e9      	b.n	8006266 <__mdiff+0x8e>

08006292 <__d2b>:
 8006292:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006296:	460e      	mov	r6, r1
 8006298:	2101      	movs	r1, #1
 800629a:	ec59 8b10 	vmov	r8, r9, d0
 800629e:	4615      	mov	r5, r2
 80062a0:	f7ff fd6b 	bl	8005d7a <_Balloc>
 80062a4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80062a8:	4607      	mov	r7, r0
 80062aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062ae:	bb34      	cbnz	r4, 80062fe <__d2b+0x6c>
 80062b0:	9301      	str	r3, [sp, #4]
 80062b2:	f1b8 0300 	subs.w	r3, r8, #0
 80062b6:	d027      	beq.n	8006308 <__d2b+0x76>
 80062b8:	a802      	add	r0, sp, #8
 80062ba:	f840 3d08 	str.w	r3, [r0, #-8]!
 80062be:	f7ff fe01 	bl	8005ec4 <__lo0bits>
 80062c2:	9900      	ldr	r1, [sp, #0]
 80062c4:	b1f0      	cbz	r0, 8006304 <__d2b+0x72>
 80062c6:	9a01      	ldr	r2, [sp, #4]
 80062c8:	f1c0 0320 	rsb	r3, r0, #32
 80062cc:	fa02 f303 	lsl.w	r3, r2, r3
 80062d0:	430b      	orrs	r3, r1
 80062d2:	40c2      	lsrs	r2, r0
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	9201      	str	r2, [sp, #4]
 80062d8:	9b01      	ldr	r3, [sp, #4]
 80062da:	61bb      	str	r3, [r7, #24]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	bf14      	ite	ne
 80062e0:	2102      	movne	r1, #2
 80062e2:	2101      	moveq	r1, #1
 80062e4:	6139      	str	r1, [r7, #16]
 80062e6:	b1c4      	cbz	r4, 800631a <__d2b+0x88>
 80062e8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80062ec:	4404      	add	r4, r0
 80062ee:	6034      	str	r4, [r6, #0]
 80062f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80062f4:	6028      	str	r0, [r5, #0]
 80062f6:	4638      	mov	r0, r7
 80062f8:	b003      	add	sp, #12
 80062fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006302:	e7d5      	b.n	80062b0 <__d2b+0x1e>
 8006304:	6179      	str	r1, [r7, #20]
 8006306:	e7e7      	b.n	80062d8 <__d2b+0x46>
 8006308:	a801      	add	r0, sp, #4
 800630a:	f7ff fddb 	bl	8005ec4 <__lo0bits>
 800630e:	9b01      	ldr	r3, [sp, #4]
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	2101      	movs	r1, #1
 8006314:	6139      	str	r1, [r7, #16]
 8006316:	3020      	adds	r0, #32
 8006318:	e7e5      	b.n	80062e6 <__d2b+0x54>
 800631a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800631e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006322:	6030      	str	r0, [r6, #0]
 8006324:	6918      	ldr	r0, [r3, #16]
 8006326:	f7ff fdae 	bl	8005e86 <__hi0bits>
 800632a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800632e:	e7e1      	b.n	80062f4 <__d2b+0x62>

08006330 <_calloc_r>:
 8006330:	b538      	push	{r3, r4, r5, lr}
 8006332:	fb02 f401 	mul.w	r4, r2, r1
 8006336:	4621      	mov	r1, r4
 8006338:	f000 f808 	bl	800634c <_malloc_r>
 800633c:	4605      	mov	r5, r0
 800633e:	b118      	cbz	r0, 8006348 <_calloc_r+0x18>
 8006340:	4622      	mov	r2, r4
 8006342:	2100      	movs	r1, #0
 8006344:	f7fe fb60 	bl	8004a08 <memset>
 8006348:	4628      	mov	r0, r5
 800634a:	bd38      	pop	{r3, r4, r5, pc}

0800634c <_malloc_r>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	1ccd      	adds	r5, r1, #3
 8006350:	f025 0503 	bic.w	r5, r5, #3
 8006354:	3508      	adds	r5, #8
 8006356:	2d0c      	cmp	r5, #12
 8006358:	bf38      	it	cc
 800635a:	250c      	movcc	r5, #12
 800635c:	2d00      	cmp	r5, #0
 800635e:	4606      	mov	r6, r0
 8006360:	db01      	blt.n	8006366 <_malloc_r+0x1a>
 8006362:	42a9      	cmp	r1, r5
 8006364:	d903      	bls.n	800636e <_malloc_r+0x22>
 8006366:	230c      	movs	r3, #12
 8006368:	6033      	str	r3, [r6, #0]
 800636a:	2000      	movs	r0, #0
 800636c:	bd70      	pop	{r4, r5, r6, pc}
 800636e:	f000 f869 	bl	8006444 <__malloc_lock>
 8006372:	4a21      	ldr	r2, [pc, #132]	; (80063f8 <_malloc_r+0xac>)
 8006374:	6814      	ldr	r4, [r2, #0]
 8006376:	4621      	mov	r1, r4
 8006378:	b991      	cbnz	r1, 80063a0 <_malloc_r+0x54>
 800637a:	4c20      	ldr	r4, [pc, #128]	; (80063fc <_malloc_r+0xb0>)
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	b91b      	cbnz	r3, 8006388 <_malloc_r+0x3c>
 8006380:	4630      	mov	r0, r6
 8006382:	f000 f83d 	bl	8006400 <_sbrk_r>
 8006386:	6020      	str	r0, [r4, #0]
 8006388:	4629      	mov	r1, r5
 800638a:	4630      	mov	r0, r6
 800638c:	f000 f838 	bl	8006400 <_sbrk_r>
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	d124      	bne.n	80063de <_malloc_r+0x92>
 8006394:	230c      	movs	r3, #12
 8006396:	6033      	str	r3, [r6, #0]
 8006398:	4630      	mov	r0, r6
 800639a:	f000 f854 	bl	8006446 <__malloc_unlock>
 800639e:	e7e4      	b.n	800636a <_malloc_r+0x1e>
 80063a0:	680b      	ldr	r3, [r1, #0]
 80063a2:	1b5b      	subs	r3, r3, r5
 80063a4:	d418      	bmi.n	80063d8 <_malloc_r+0x8c>
 80063a6:	2b0b      	cmp	r3, #11
 80063a8:	d90f      	bls.n	80063ca <_malloc_r+0x7e>
 80063aa:	600b      	str	r3, [r1, #0]
 80063ac:	50cd      	str	r5, [r1, r3]
 80063ae:	18cc      	adds	r4, r1, r3
 80063b0:	4630      	mov	r0, r6
 80063b2:	f000 f848 	bl	8006446 <__malloc_unlock>
 80063b6:	f104 000b 	add.w	r0, r4, #11
 80063ba:	1d23      	adds	r3, r4, #4
 80063bc:	f020 0007 	bic.w	r0, r0, #7
 80063c0:	1ac3      	subs	r3, r0, r3
 80063c2:	d0d3      	beq.n	800636c <_malloc_r+0x20>
 80063c4:	425a      	negs	r2, r3
 80063c6:	50e2      	str	r2, [r4, r3]
 80063c8:	e7d0      	b.n	800636c <_malloc_r+0x20>
 80063ca:	428c      	cmp	r4, r1
 80063cc:	684b      	ldr	r3, [r1, #4]
 80063ce:	bf16      	itet	ne
 80063d0:	6063      	strne	r3, [r4, #4]
 80063d2:	6013      	streq	r3, [r2, #0]
 80063d4:	460c      	movne	r4, r1
 80063d6:	e7eb      	b.n	80063b0 <_malloc_r+0x64>
 80063d8:	460c      	mov	r4, r1
 80063da:	6849      	ldr	r1, [r1, #4]
 80063dc:	e7cc      	b.n	8006378 <_malloc_r+0x2c>
 80063de:	1cc4      	adds	r4, r0, #3
 80063e0:	f024 0403 	bic.w	r4, r4, #3
 80063e4:	42a0      	cmp	r0, r4
 80063e6:	d005      	beq.n	80063f4 <_malloc_r+0xa8>
 80063e8:	1a21      	subs	r1, r4, r0
 80063ea:	4630      	mov	r0, r6
 80063ec:	f000 f808 	bl	8006400 <_sbrk_r>
 80063f0:	3001      	adds	r0, #1
 80063f2:	d0cf      	beq.n	8006394 <_malloc_r+0x48>
 80063f4:	6025      	str	r5, [r4, #0]
 80063f6:	e7db      	b.n	80063b0 <_malloc_r+0x64>
 80063f8:	20000400 	.word	0x20000400
 80063fc:	20000404 	.word	0x20000404

08006400 <_sbrk_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4c06      	ldr	r4, [pc, #24]	; (800641c <_sbrk_r+0x1c>)
 8006404:	2300      	movs	r3, #0
 8006406:	4605      	mov	r5, r0
 8006408:	4608      	mov	r0, r1
 800640a:	6023      	str	r3, [r4, #0]
 800640c:	f7fe f924 	bl	8004658 <_sbrk>
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	d102      	bne.n	800641a <_sbrk_r+0x1a>
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	b103      	cbz	r3, 800641a <_sbrk_r+0x1a>
 8006418:	602b      	str	r3, [r5, #0]
 800641a:	bd38      	pop	{r3, r4, r5, pc}
 800641c:	200005c8 	.word	0x200005c8

08006420 <__ascii_mbtowc>:
 8006420:	b082      	sub	sp, #8
 8006422:	b901      	cbnz	r1, 8006426 <__ascii_mbtowc+0x6>
 8006424:	a901      	add	r1, sp, #4
 8006426:	b142      	cbz	r2, 800643a <__ascii_mbtowc+0x1a>
 8006428:	b14b      	cbz	r3, 800643e <__ascii_mbtowc+0x1e>
 800642a:	7813      	ldrb	r3, [r2, #0]
 800642c:	600b      	str	r3, [r1, #0]
 800642e:	7812      	ldrb	r2, [r2, #0]
 8006430:	1c10      	adds	r0, r2, #0
 8006432:	bf18      	it	ne
 8006434:	2001      	movne	r0, #1
 8006436:	b002      	add	sp, #8
 8006438:	4770      	bx	lr
 800643a:	4610      	mov	r0, r2
 800643c:	e7fb      	b.n	8006436 <__ascii_mbtowc+0x16>
 800643e:	f06f 0001 	mvn.w	r0, #1
 8006442:	e7f8      	b.n	8006436 <__ascii_mbtowc+0x16>

08006444 <__malloc_lock>:
 8006444:	4770      	bx	lr

08006446 <__malloc_unlock>:
 8006446:	4770      	bx	lr

08006448 <__ascii_wctomb>:
 8006448:	b149      	cbz	r1, 800645e <__ascii_wctomb+0x16>
 800644a:	2aff      	cmp	r2, #255	; 0xff
 800644c:	bf85      	ittet	hi
 800644e:	238a      	movhi	r3, #138	; 0x8a
 8006450:	6003      	strhi	r3, [r0, #0]
 8006452:	700a      	strbls	r2, [r1, #0]
 8006454:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006458:	bf98      	it	ls
 800645a:	2001      	movls	r0, #1
 800645c:	4770      	bx	lr
 800645e:	4608      	mov	r0, r1
 8006460:	4770      	bx	lr
	...

08006464 <_init>:
 8006464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006466:	bf00      	nop
 8006468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800646a:	bc08      	pop	{r3}
 800646c:	469e      	mov	lr, r3
 800646e:	4770      	bx	lr

08006470 <_fini>:
 8006470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006472:	bf00      	nop
 8006474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006476:	bc08      	pop	{r3}
 8006478:	469e      	mov	lr, r3
 800647a:	4770      	bx	lr
