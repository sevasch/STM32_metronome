
mico_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007228  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  080073f8  080073f8  000173f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a38  08007a38  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08007a38  08007a38  00017a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a40  08007a40  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a40  08007a40  00017a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a44  08007a44  00017a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08007a48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008ac  200001f4  08007c3c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000aa0  08007c3c  00020aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d34  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002864  00000000  00000000  00032f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010b8  00000000  00000000  000357c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f80  00000000  00000000  00036878  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002303f  00000000  00000000  000377f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea1a  00000000  00000000  0005a837  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5f5e  00000000  00000000  00069251  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f1af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fcc  00000000  00000000  0013f22c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080073e0 	.word	0x080073e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	080073e0 	.word	0x080073e0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 b972 	b.w	8000f24 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4688      	mov	r8, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14b      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4615      	mov	r5, r2
 8000c6a:	d967      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0720 	rsb	r7, r2, #32
 8000c76:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c7e:	4095      	lsls	r5, r2
 8000c80:	ea47 0803 	orr.w	r8, r7, r3
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c90:	fa1f fc85 	uxth.w	ip, r5
 8000c94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18eb      	adds	r3, r5, r3
 8000ca6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000caa:	f080 811b 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8118 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000cb4:	3f02      	subs	r7, #2
 8000cb6:	442b      	add	r3, r5
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cd6:	f080 8107 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	f240 8104 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	442c      	add	r4, r5
 8000ce4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ce8:	eba4 040c 	sub.w	r4, r4, ip
 8000cec:	2700      	movs	r7, #0
 8000cee:	b11e      	cbz	r6, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0xbe>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80eb 	beq.w	8000ede <__udivmoddi4+0x286>
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d0e:	4638      	mov	r0, r7
 8000d10:	4639      	mov	r1, r7
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f783 	clz	r7, r3
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d147      	bne.n	8000dae <__udivmoddi4+0x156>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0xd0>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80fa 	bhi.w	8000f1c <__udivmoddi4+0x2c4>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4698      	mov	r8, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d0e0      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000d36:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3a:	e7dd      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000d3c:	b902      	cbnz	r2, 8000d40 <__udivmoddi4+0xe8>
 8000d3e:	deff      	udf	#255	; 0xff
 8000d40:	fab2 f282 	clz	r2, r2
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f040 808f 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d4a:	1b49      	subs	r1, r1, r5
 8000d4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d50:	fa1f f885 	uxth.w	r8, r5
 8000d54:	2701      	movs	r7, #1
 8000d56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb08 f10c 	mul.w	r1, r8, ip
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6c:	18eb      	adds	r3, r5, r3
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4299      	cmp	r1, r3
 8000d76:	f200 80cd 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x14c>
 8000d94:	192c      	adds	r4, r5, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x14a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80b6 	bhi.w	8000f0e <__udivmoddi4+0x2b6>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e79f      	b.n	8000cee <__udivmoddi4+0x96>
 8000dae:	f1c7 0c20 	rsb	ip, r7, #32
 8000db2:	40bb      	lsls	r3, r7
 8000db4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000db8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dbc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dcc:	4325      	orrs	r5, r4
 8000dce:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd2:	0c2c      	lsrs	r4, r5, #16
 8000dd4:	fb08 3319 	mls	r3, r8, r9, r3
 8000dd8:	fa1f fa8e 	uxth.w	sl, lr
 8000ddc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de0:	fb09 f40a 	mul.w	r4, r9, sl
 8000de4:	429c      	cmp	r4, r3
 8000de6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dea:	fa00 f107 	lsl.w	r1, r0, r7
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1e 0303 	adds.w	r3, lr, r3
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000df8:	f080 8087 	bcs.w	8000f0a <__udivmoddi4+0x2b2>
 8000dfc:	429c      	cmp	r4, r3
 8000dfe:	f240 8084 	bls.w	8000f0a <__udivmoddi4+0x2b2>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4473      	add	r3, lr
 8000e08:	1b1b      	subs	r3, r3, r4
 8000e0a:	b2ad      	uxth	r5, r5
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e1c:	45a2      	cmp	sl, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1e 0404 	adds.w	r4, lr, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e28:	d26b      	bcs.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2a:	45a2      	cmp	sl, r4
 8000e2c:	d969      	bls.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4474      	add	r4, lr
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	eba4 040a 	sub.w	r4, r4, sl
 8000e3e:	454c      	cmp	r4, r9
 8000e40:	46c2      	mov	sl, r8
 8000e42:	464b      	mov	r3, r9
 8000e44:	d354      	bcc.n	8000ef0 <__udivmoddi4+0x298>
 8000e46:	d051      	beq.n	8000eec <__udivmoddi4+0x294>
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d069      	beq.n	8000f20 <__udivmoddi4+0x2c8>
 8000e4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e50:	eb64 0403 	sbc.w	r4, r4, r3
 8000e54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e58:	40fd      	lsrs	r5, r7
 8000e5a:	40fc      	lsrs	r4, r7
 8000e5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e60:	e9c6 5400 	strd	r5, r4, [r6]
 8000e64:	2700      	movs	r7, #0
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e70:	4095      	lsls	r5, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e7e:	4338      	orrs	r0, r7
 8000e80:	0c01      	lsrs	r1, r0, #16
 8000e82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e86:	fa1f f885 	uxth.w	r8, r5
 8000e8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb07 f308 	mul.w	r3, r7, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d907      	bls.n	8000eae <__udivmoddi4+0x256>
 8000e9e:	1869      	adds	r1, r5, r1
 8000ea0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ea4:	d22f      	bcs.n	8000f06 <__udivmoddi4+0x2ae>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d92d      	bls.n	8000f06 <__udivmoddi4+0x2ae>
 8000eaa:	3f02      	subs	r7, #2
 8000eac:	4429      	add	r1, r5
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	b281      	uxth	r1, r0
 8000eb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebe:	fb00 f308 	mul.w	r3, r0, r8
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x27e>
 8000ec6:	1869      	adds	r1, r5, r1
 8000ec8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ecc:	d217      	bcs.n	8000efe <__udivmoddi4+0x2a6>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d915      	bls.n	8000efe <__udivmoddi4+0x2a6>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4429      	add	r1, r5
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000edc:	e73b      	b.n	8000d56 <__udivmoddi4+0xfe>
 8000ede:	4637      	mov	r7, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e709      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee4:	4607      	mov	r7, r0
 8000ee6:	e6e7      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fb      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000eec:	4541      	cmp	r1, r8
 8000eee:	d2ab      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ef8:	3801      	subs	r0, #1
 8000efa:	4613      	mov	r3, r2
 8000efc:	e7a4      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000efe:	4660      	mov	r0, ip
 8000f00:	e7e9      	b.n	8000ed6 <__udivmoddi4+0x27e>
 8000f02:	4618      	mov	r0, r3
 8000f04:	e795      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f06:	4667      	mov	r7, ip
 8000f08:	e7d1      	b.n	8000eae <__udivmoddi4+0x256>
 8000f0a:	4681      	mov	r9, r0
 8000f0c:	e77c      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	442c      	add	r4, r5
 8000f12:	e747      	b.n	8000da4 <__udivmoddi4+0x14c>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	442b      	add	r3, r5
 8000f1a:	e72f      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	e708      	b.n	8000d32 <__udivmoddi4+0xda>
 8000f20:	4637      	mov	r7, r6
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0xa0>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <HAL_Init+0x40>)
 8000f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_Init+0x40>)
 8000f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_Init+0x40>)
 8000f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 fd49 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 f808 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5c:	f003 ffc4 	bl	8004ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023c00 	.word	0x40023c00

08000f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x54>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x58>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 fd61 	bl	8001a52 <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00e      	b.n	8000fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d80a      	bhi.n	8000fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa8:	f000 fd29 	bl	80019fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <HAL_InitTick+0x5c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000020 	.word	0x20000020
 8000fc4:	20000004 	.word	0x20000004
 8000fc8:	20000000 	.word	0x20000000

08000fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000004 	.word	0x20000004
 8000ff0:	20000428 	.word	0x20000428

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000428 	.word	0x20000428

0800100c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff ffee 	bl	8000ff4 <HAL_GetTick>
 8001018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001024:	d005      	beq.n	8001032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_Delay+0x40>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001032:	bf00      	nop
 8001034:	f7ff ffde 	bl	8000ff4 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8f7      	bhi.n	8001034 <HAL_Delay+0x28>
  {
  }
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000004 	.word	0x20000004

08001050 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e033      	b.n	80010ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	2b00      	cmp	r3, #0
 800106c:	d109      	bne.n	8001082 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f002 fe96 	bl	8003da0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f003 0310 	and.w	r3, r3, #16
 800108a:	2b00      	cmp	r3, #0
 800108c:	d118      	bne.n	80010c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001096:	f023 0302 	bic.w	r3, r3, #2
 800109a:	f043 0202 	orr.w	r2, r3, #2
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 fad4 	bl	8001650 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f023 0303 	bic.w	r3, r3, #3
 80010b6:	f043 0201 	orr.w	r2, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
 80010be:	e001      	b.n	80010c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d101      	bne.n	80010f2 <HAL_ADC_Start+0x1a>
 80010ee:	2302      	movs	r3, #2
 80010f0:	e0a5      	b.n	800123e <HAL_ADC_Start+0x166>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b01      	cmp	r3, #1
 8001106:	d018      	beq.n	800113a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 0201 	orr.w	r2, r2, #1
 8001116:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001118:	4b4c      	ldr	r3, [pc, #304]	; (800124c <HAL_ADC_Start+0x174>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a4c      	ldr	r2, [pc, #304]	; (8001250 <HAL_ADC_Start+0x178>)
 800111e:	fba2 2303 	umull	r2, r3, r2, r3
 8001122:	0c9a      	lsrs	r2, r3, #18
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800112c:	e002      	b.n	8001134 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	3b01      	subs	r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f9      	bne.n	800112e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b01      	cmp	r3, #1
 8001146:	d179      	bne.n	800123c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001150:	f023 0301 	bic.w	r3, r3, #1
 8001154:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001166:	2b00      	cmp	r3, #0
 8001168:	d007      	beq.n	800117a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001172:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001186:	d106      	bne.n	8001196 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	f023 0206 	bic.w	r2, r3, #6
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	645a      	str	r2, [r3, #68]	; 0x44
 8001194:	e002      	b.n	800119c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <HAL_ADC_Start+0x17c>)
 80011a6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011b0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d12a      	bne.n	8001214 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a25      	ldr	r2, [pc, #148]	; (8001258 <HAL_ADC_Start+0x180>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d015      	beq.n	80011f4 <HAL_ADC_Start+0x11c>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a23      	ldr	r2, [pc, #140]	; (800125c <HAL_ADC_Start+0x184>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d105      	bne.n	80011de <HAL_ADC_Start+0x106>
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <HAL_ADC_Start+0x17c>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 031f 	and.w	r3, r3, #31
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00a      	beq.n	80011f4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <HAL_ADC_Start+0x188>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d129      	bne.n	800123c <HAL_ADC_Start+0x164>
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <HAL_ADC_Start+0x17c>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 031f 	and.w	r3, r3, #31
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d823      	bhi.n	800123c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d11c      	bne.n	800123c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	e013      	b.n	800123c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <HAL_ADC_Start+0x180>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d10e      	bne.n	800123c <HAL_ADC_Start+0x164>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d107      	bne.n	800123c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800123a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000020 	.word	0x20000020
 8001250:	431bde83 	.word	0x431bde83
 8001254:	40012300 	.word	0x40012300
 8001258:	40012000 	.word	0x40012000
 800125c:	40012100 	.word	0x40012100
 8001260:	40012200 	.word	0x40012200

08001264 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_ADC_Stop+0x16>
 8001276:	2302      	movs	r3, #2
 8001278:	e021      	b.n	80012be <HAL_ADC_Stop+0x5a>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 0201 	bic.w	r2, r2, #1
 8001290:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b00      	cmp	r3, #0
 800129e:	d109      	bne.n	80012b4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012a8:	f023 0301 	bic.w	r3, r3, #1
 80012ac:	f043 0201 	orr.w	r2, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e6:	d113      	bne.n	8001310 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012f6:	d10b      	bne.n	8001310 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	f043 0220 	orr.w	r2, r3, #32
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e05c      	b.n	80013ca <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001310:	f7ff fe70 	bl	8000ff4 <HAL_GetTick>
 8001314:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001316:	e01a      	b.n	800134e <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800131e:	d016      	beq.n	800134e <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <HAL_ADC_PollForConversion+0x6c>
 8001326:	f7ff fe65 	bl	8000ff4 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d20b      	bcs.n	800134e <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f043 0204 	orr.w	r2, r3, #4
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e03d      	b.n	80013ca <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b02      	cmp	r3, #2
 800135a:	d1dd      	bne.n	8001318 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f06f 0212 	mvn.w	r2, #18
 8001364:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d123      	bne.n	80013c8 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001384:	2b00      	cmp	r3, #0
 8001386:	d11f      	bne.n	80013c8 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001392:	2b00      	cmp	r3, #0
 8001394:	d006      	beq.n	80013a4 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d111      	bne.n	80013c8 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d105      	bne.n	80013c8 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	f043 0201 	orr.w	r2, r3, #1
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001400:	2b01      	cmp	r3, #1
 8001402:	d101      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x1c>
 8001404:	2302      	movs	r3, #2
 8001406:	e113      	b.n	8001630 <HAL_ADC_ConfigChannel+0x244>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b09      	cmp	r3, #9
 8001416:	d925      	bls.n	8001464 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68d9      	ldr	r1, [r3, #12]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	b29b      	uxth	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	4613      	mov	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	3b1e      	subs	r3, #30
 800142e:	2207      	movs	r2, #7
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43da      	mvns	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	400a      	ands	r2, r1
 800143c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68d9      	ldr	r1, [r3, #12]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	4603      	mov	r3, r0
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4403      	add	r3, r0
 8001456:	3b1e      	subs	r3, #30
 8001458:	409a      	lsls	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	e022      	b.n	80014aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6919      	ldr	r1, [r3, #16]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	b29b      	uxth	r3, r3
 8001470:	461a      	mov	r2, r3
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	2207      	movs	r2, #7
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	400a      	ands	r2, r1
 8001486:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6919      	ldr	r1, [r3, #16]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	4603      	mov	r3, r0
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4403      	add	r3, r0
 80014a0:	409a      	lsls	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d824      	bhi.n	80014fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	3b05      	subs	r3, #5
 80014c4:	221f      	movs	r2, #31
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43da      	mvns	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	400a      	ands	r2, r1
 80014d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	4618      	mov	r0, r3
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	3b05      	subs	r3, #5
 80014ee:	fa00 f203 	lsl.w	r2, r0, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	635a      	str	r2, [r3, #52]	; 0x34
 80014fa:	e04c      	b.n	8001596 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b0c      	cmp	r3, #12
 8001502:	d824      	bhi.n	800154e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	3b23      	subs	r3, #35	; 0x23
 8001516:	221f      	movs	r2, #31
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43da      	mvns	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	400a      	ands	r2, r1
 8001524:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b29b      	uxth	r3, r3
 8001532:	4618      	mov	r0, r3
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	3b23      	subs	r3, #35	; 0x23
 8001540:	fa00 f203 	lsl.w	r2, r0, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	631a      	str	r2, [r3, #48]	; 0x30
 800154c:	e023      	b.n	8001596 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	3b41      	subs	r3, #65	; 0x41
 8001560:	221f      	movs	r2, #31
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43da      	mvns	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	400a      	ands	r2, r1
 800156e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	b29b      	uxth	r3, r3
 800157c:	4618      	mov	r0, r3
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	3b41      	subs	r3, #65	; 0x41
 800158a:	fa00 f203 	lsl.w	r2, r0, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001596:	4b29      	ldr	r3, [pc, #164]	; (800163c <HAL_ADC_ConfigChannel+0x250>)
 8001598:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a28      	ldr	r2, [pc, #160]	; (8001640 <HAL_ADC_ConfigChannel+0x254>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d10f      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x1d8>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b12      	cmp	r3, #18
 80015aa:	d10b      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a1d      	ldr	r2, [pc, #116]	; (8001640 <HAL_ADC_ConfigChannel+0x254>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d12b      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x23a>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <HAL_ADC_ConfigChannel+0x258>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d003      	beq.n	80015e0 <HAL_ADC_ConfigChannel+0x1f4>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b11      	cmp	r3, #17
 80015de:	d122      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a11      	ldr	r2, [pc, #68]	; (8001644 <HAL_ADC_ConfigChannel+0x258>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d111      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_ADC_ConfigChannel+0x25c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a11      	ldr	r2, [pc, #68]	; (800164c <HAL_ADC_ConfigChannel+0x260>)
 8001608:	fba2 2303 	umull	r2, r3, r2, r3
 800160c:	0c9a      	lsrs	r2, r3, #18
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001618:	e002      	b.n	8001620 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	3b01      	subs	r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f9      	bne.n	800161a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	40012300 	.word	0x40012300
 8001640:	40012000 	.word	0x40012000
 8001644:	10000012 	.word	0x10000012
 8001648:	20000020 	.word	0x20000020
 800164c:	431bde83 	.word	0x431bde83

08001650 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001658:	4b79      	ldr	r3, [pc, #484]	; (8001840 <ADC_Init+0x1f0>)
 800165a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	431a      	orrs	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001684:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6859      	ldr	r1, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	021a      	lsls	r2, r3, #8
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6859      	ldr	r1, [r3, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6899      	ldr	r1, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	4a58      	ldr	r2, [pc, #352]	; (8001844 <ADC_Init+0x1f4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d022      	beq.n	800172e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6899      	ldr	r1, [r3, #8]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001718:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6899      	ldr	r1, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	e00f      	b.n	800174e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800173c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800174c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0202 	bic.w	r2, r2, #2
 800175c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6899      	ldr	r1, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7e1b      	ldrb	r3, [r3, #24]
 8001768:	005a      	lsls	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d01b      	beq.n	80017b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800178a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800179a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6859      	ldr	r1, [r3, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	3b01      	subs	r3, #1
 80017a8:	035a      	lsls	r2, r3, #13
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	e007      	b.n	80017c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	3b01      	subs	r3, #1
 80017e0:	051a      	lsls	r2, r3, #20
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6899      	ldr	r1, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001806:	025a      	lsls	r2, r3, #9
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800181e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6899      	ldr	r1, [r3, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	029a      	lsls	r2, r3, #10
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	609a      	str	r2, [r3, #8]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	40012300 	.word	0x40012300
 8001844:	0f000001 	.word	0x0f000001

08001848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001864:	4013      	ands	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187a:	4a04      	ldr	r2, [pc, #16]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	60d3      	str	r3, [r2, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	f003 0307 	and.w	r3, r3, #7
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	db0b      	blt.n	80018d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	4907      	ldr	r1, [pc, #28]	; (80018e4 <__NVIC_EnableIRQ+0x38>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	2001      	movs	r0, #1
 80018ce:	fa00 f202 	lsl.w	r2, r0, r2
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000e100 	.word	0xe000e100

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	; (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	; 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b4:	d301      	bcc.n	80019ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00f      	b.n	80019da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <SysTick_Config+0x40>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c2:	210f      	movs	r1, #15
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019c8:	f7ff ff8e 	bl	80018e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <SysTick_Config+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <SysTick_Config+0x40>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff29 	bl	8001848 <__NVIC_SetPriorityGrouping>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a10:	f7ff ff3e 	bl	8001890 <__NVIC_GetPriorityGrouping>
 8001a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	6978      	ldr	r0, [r7, #20]
 8001a1c:	f7ff ff8e 	bl	800193c <NVIC_EncodePriority>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff5d 	bl	80018e8 <__NVIC_SetPriority>
}
 8001a2e:	bf00      	nop
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff31 	bl	80018ac <__NVIC_EnableIRQ>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ffa2 	bl	80019a4 <SysTick_Config>
 8001a60:	4603      	mov	r3, r0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	e165      	b.n	8001d54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a88:	2201      	movs	r2, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	f040 8154 	bne.w	8001d4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x4a>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b12      	cmp	r3, #18
 8001ab4:	d123      	bne.n	8001afe <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	08da      	lsrs	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3208      	adds	r2, #8
 8001abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	220f      	movs	r2, #15
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	08da      	lsrs	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3208      	adds	r2, #8
 8001af8:	69b9      	ldr	r1, [r7, #24]
 8001afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	2203      	movs	r2, #3
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0203 	and.w	r2, r3, #3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d00b      	beq.n	8001b52 <HAL_GPIO_Init+0xe6>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d007      	beq.n	8001b52 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b46:	2b11      	cmp	r3, #17
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b12      	cmp	r3, #18
 8001b50:	d130      	bne.n	8001bb4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b88:	2201      	movs	r2, #1
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 0201 	and.w	r2, r3, #1
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80ae 	beq.w	8001d4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b5c      	ldr	r3, [pc, #368]	; (8001d68 <HAL_GPIO_Init+0x2fc>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a5b      	ldr	r2, [pc, #364]	; (8001d68 <HAL_GPIO_Init+0x2fc>)
 8001bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b59      	ldr	r3, [pc, #356]	; (8001d68 <HAL_GPIO_Init+0x2fc>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c0e:	4a57      	ldr	r2, [pc, #348]	; (8001d6c <HAL_GPIO_Init+0x300>)
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	089b      	lsrs	r3, r3, #2
 8001c14:	3302      	adds	r3, #2
 8001c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	220f      	movs	r2, #15
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4e      	ldr	r2, [pc, #312]	; (8001d70 <HAL_GPIO_Init+0x304>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d025      	beq.n	8001c86 <HAL_GPIO_Init+0x21a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4d      	ldr	r2, [pc, #308]	; (8001d74 <HAL_GPIO_Init+0x308>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d01f      	beq.n	8001c82 <HAL_GPIO_Init+0x216>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4c      	ldr	r2, [pc, #304]	; (8001d78 <HAL_GPIO_Init+0x30c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d019      	beq.n	8001c7e <HAL_GPIO_Init+0x212>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4b      	ldr	r2, [pc, #300]	; (8001d7c <HAL_GPIO_Init+0x310>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <HAL_GPIO_Init+0x20e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4a      	ldr	r2, [pc, #296]	; (8001d80 <HAL_GPIO_Init+0x314>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00d      	beq.n	8001c76 <HAL_GPIO_Init+0x20a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a49      	ldr	r2, [pc, #292]	; (8001d84 <HAL_GPIO_Init+0x318>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d007      	beq.n	8001c72 <HAL_GPIO_Init+0x206>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a48      	ldr	r2, [pc, #288]	; (8001d88 <HAL_GPIO_Init+0x31c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <HAL_GPIO_Init+0x202>
 8001c6a:	2306      	movs	r3, #6
 8001c6c:	e00c      	b.n	8001c88 <HAL_GPIO_Init+0x21c>
 8001c6e:	2307      	movs	r3, #7
 8001c70:	e00a      	b.n	8001c88 <HAL_GPIO_Init+0x21c>
 8001c72:	2305      	movs	r3, #5
 8001c74:	e008      	b.n	8001c88 <HAL_GPIO_Init+0x21c>
 8001c76:	2304      	movs	r3, #4
 8001c78:	e006      	b.n	8001c88 <HAL_GPIO_Init+0x21c>
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e004      	b.n	8001c88 <HAL_GPIO_Init+0x21c>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e002      	b.n	8001c88 <HAL_GPIO_Init+0x21c>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_GPIO_Init+0x21c>
 8001c86:	2300      	movs	r3, #0
 8001c88:	69fa      	ldr	r2, [r7, #28]
 8001c8a:	f002 0203 	and.w	r2, r2, #3
 8001c8e:	0092      	lsls	r2, r2, #2
 8001c90:	4093      	lsls	r3, r2
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c98:	4934      	ldr	r1, [pc, #208]	; (8001d6c <HAL_GPIO_Init+0x300>)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca6:	4b39      	ldr	r3, [pc, #228]	; (8001d8c <HAL_GPIO_Init+0x320>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cca:	4a30      	ldr	r2, [pc, #192]	; (8001d8c <HAL_GPIO_Init+0x320>)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cd0:	4b2e      	ldr	r3, [pc, #184]	; (8001d8c <HAL_GPIO_Init+0x320>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cf4:	4a25      	ldr	r2, [pc, #148]	; (8001d8c <HAL_GPIO_Init+0x320>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cfa:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_GPIO_Init+0x320>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d1e:	4a1b      	ldr	r2, [pc, #108]	; (8001d8c <HAL_GPIO_Init+0x320>)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_GPIO_Init+0x320>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d48:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <HAL_GPIO_Init+0x320>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3301      	adds	r3, #1
 8001d52:	61fb      	str	r3, [r7, #28]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	2b0f      	cmp	r3, #15
 8001d58:	f67f ae96 	bls.w	8001a88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	3724      	adds	r7, #36	; 0x24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40013800 	.word	0x40013800
 8001d70:	40020000 	.word	0x40020000
 8001d74:	40020400 	.word	0x40020400
 8001d78:	40020800 	.word	0x40020800
 8001d7c:	40020c00 	.word	0x40020c00
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40021400 	.word	0x40021400
 8001d88:	40021800 	.word	0x40021800
 8001d8c:	40013c00 	.word	0x40013c00

08001d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da0:	787b      	ldrb	r3, [r7, #1]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dac:	e003      	b.n	8001db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dae:	887b      	ldrh	r3, [r7, #2]
 8001db0:	041a      	lsls	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	619a      	str	r2, [r3, #24]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e10f      	b.n	8001ff6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f002 f956 	bl	800409c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2224      	movs	r2, #36	; 0x24
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e08:	f000 f9f2 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 8001e0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4a7b      	ldr	r2, [pc, #492]	; (8002000 <HAL_I2C_Init+0x23c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d807      	bhi.n	8001e28 <HAL_I2C_Init+0x64>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4a7a      	ldr	r2, [pc, #488]	; (8002004 <HAL_I2C_Init+0x240>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	bf94      	ite	ls
 8001e20:	2301      	movls	r3, #1
 8001e22:	2300      	movhi	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	e006      	b.n	8001e36 <HAL_I2C_Init+0x72>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4a77      	ldr	r2, [pc, #476]	; (8002008 <HAL_I2C_Init+0x244>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	bf94      	ite	ls
 8001e30:	2301      	movls	r3, #1
 8001e32:	2300      	movhi	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e0db      	b.n	8001ff6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4a72      	ldr	r2, [pc, #456]	; (800200c <HAL_I2C_Init+0x248>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	0c9b      	lsrs	r3, r3, #18
 8001e48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4a64      	ldr	r2, [pc, #400]	; (8002000 <HAL_I2C_Init+0x23c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d802      	bhi.n	8001e78 <HAL_I2C_Init+0xb4>
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	3301      	adds	r3, #1
 8001e76:	e009      	b.n	8001e8c <HAL_I2C_Init+0xc8>
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	4a63      	ldr	r2, [pc, #396]	; (8002010 <HAL_I2C_Init+0x24c>)
 8001e84:	fba2 2303 	umull	r2, r3, r2, r3
 8001e88:	099b      	lsrs	r3, r3, #6
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	430b      	orrs	r3, r1
 8001e92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	4956      	ldr	r1, [pc, #344]	; (8002000 <HAL_I2C_Init+0x23c>)
 8001ea8:	428b      	cmp	r3, r1
 8001eaa:	d80d      	bhi.n	8001ec8 <HAL_I2C_Init+0x104>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1e59      	subs	r1, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	bf38      	it	cc
 8001ec4:	2304      	movcc	r3, #4
 8001ec6:	e04f      	b.n	8001f68 <HAL_I2C_Init+0x1a4>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d111      	bne.n	8001ef4 <HAL_I2C_Init+0x130>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	1e58      	subs	r0, r3, #1
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6859      	ldr	r1, [r3, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	440b      	add	r3, r1
 8001ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf0c      	ite	eq
 8001eec:	2301      	moveq	r3, #1
 8001eee:	2300      	movne	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	e012      	b.n	8001f1a <HAL_I2C_Init+0x156>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1e58      	subs	r0, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6859      	ldr	r1, [r3, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	0099      	lsls	r1, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	bf0c      	ite	eq
 8001f14:	2301      	moveq	r3, #1
 8001f16:	2300      	movne	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_I2C_Init+0x15e>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e022      	b.n	8001f68 <HAL_I2C_Init+0x1a4>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10e      	bne.n	8001f48 <HAL_I2C_Init+0x184>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	1e58      	subs	r0, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6859      	ldr	r1, [r3, #4]
 8001f32:	460b      	mov	r3, r1
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	440b      	add	r3, r1
 8001f38:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f46:	e00f      	b.n	8001f68 <HAL_I2C_Init+0x1a4>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1e58      	subs	r0, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6859      	ldr	r1, [r3, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	0099      	lsls	r1, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	6809      	ldr	r1, [r1, #0]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69da      	ldr	r2, [r3, #28]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6911      	ldr	r1, [r2, #16]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68d2      	ldr	r2, [r2, #12]
 8001fa2:	4311      	orrs	r1, r2
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	430b      	orrs	r3, r1
 8001faa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695a      	ldr	r2, [r3, #20]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	000186a0 	.word	0x000186a0
 8002004:	001e847f 	.word	0x001e847f
 8002008:	003d08ff 	.word	0x003d08ff
 800200c:	431bde83 	.word	0x431bde83
 8002010:	10624dd3 	.word	0x10624dd3

08002014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0ca      	b.n	80021be <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002028:	4b67      	ldr	r3, [pc, #412]	; (80021c8 <HAL_RCC_ClockConfig+0x1b4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d90c      	bls.n	8002050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002036:	4b64      	ldr	r3, [pc, #400]	; (80021c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b62      	ldr	r3, [pc, #392]	; (80021c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0b6      	b.n	80021be <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d020      	beq.n	800209e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002068:	4b58      	ldr	r3, [pc, #352]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	4a57      	ldr	r2, [pc, #348]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 800206e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002080:	4b52      	ldr	r3, [pc, #328]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4a51      	ldr	r2, [pc, #324]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800208a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208c:	4b4f      	ldr	r3, [pc, #316]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	494c      	ldr	r1, [pc, #304]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 800209a:	4313      	orrs	r3, r2
 800209c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d044      	beq.n	8002134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b2:	4b46      	ldr	r3, [pc, #280]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d119      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e07d      	b.n	80021be <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d003      	beq.n	80020d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d107      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d2:	4b3e      	ldr	r3, [pc, #248]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d109      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e06d      	b.n	80021be <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e2:	4b3a      	ldr	r3, [pc, #232]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e065      	b.n	80021be <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f2:	4b36      	ldr	r3, [pc, #216]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f023 0203 	bic.w	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4933      	ldr	r1, [pc, #204]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002100:	4313      	orrs	r3, r2
 8002102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002104:	f7fe ff76 	bl	8000ff4 <HAL_GetTick>
 8002108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210a:	e00a      	b.n	8002122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210c:	f7fe ff72 	bl	8000ff4 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e04d      	b.n	80021be <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002122:	4b2a      	ldr	r3, [pc, #168]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 020c 	and.w	r2, r3, #12
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	429a      	cmp	r2, r3
 8002132:	d1eb      	bne.n	800210c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002134:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d20c      	bcs.n	800215c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <HAL_RCC_ClockConfig+0x1b4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e030      	b.n	80021be <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002168:	4b18      	ldr	r3, [pc, #96]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4915      	ldr	r1, [pc, #84]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002186:	4b11      	ldr	r3, [pc, #68]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	490d      	ldr	r1, [pc, #52]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800219a:	f000 f83d 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 800219e:	4601      	mov	r1, r0
 80021a0:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	5cd3      	ldrb	r3, [r2, r3]
 80021ae:	fa21 f303 	lsr.w	r3, r1, r3
 80021b2:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80021b6:	2000      	movs	r0, #0
 80021b8:	f7fe fed8 	bl	8000f6c <HAL_InitTick>

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023c00 	.word	0x40023c00
 80021cc:	40023800 	.word	0x40023800
 80021d0:	080077c4 	.word	0x080077c4
 80021d4:	20000020 	.word	0x20000020

080021d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <HAL_RCC_GetHCLKFreq+0x14>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000020 	.word	0x20000020

080021f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021f4:	f7ff fff0 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 80021f8:	4601      	mov	r1, r0
 80021fa:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	0a9b      	lsrs	r3, r3, #10
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	4a03      	ldr	r2, [pc, #12]	; (8002214 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002206:	5cd3      	ldrb	r3, [r2, r3]
 8002208:	fa21 f303 	lsr.w	r3, r1, r3
}
 800220c:	4618      	mov	r0, r3
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40023800 	.word	0x40023800
 8002214:	080077d4 	.word	0x080077d4

08002218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002232:	4b9f      	ldr	r3, [pc, #636]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b0c      	cmp	r3, #12
 800223c:	f200 8130 	bhi.w	80024a0 <HAL_RCC_GetSysClockFreq+0x288>
 8002240:	a201      	add	r2, pc, #4	; (adr r2, 8002248 <HAL_RCC_GetSysClockFreq+0x30>)
 8002242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002246:	bf00      	nop
 8002248:	0800227d 	.word	0x0800227d
 800224c:	080024a1 	.word	0x080024a1
 8002250:	080024a1 	.word	0x080024a1
 8002254:	080024a1 	.word	0x080024a1
 8002258:	08002283 	.word	0x08002283
 800225c:	080024a1 	.word	0x080024a1
 8002260:	080024a1 	.word	0x080024a1
 8002264:	080024a1 	.word	0x080024a1
 8002268:	08002289 	.word	0x08002289
 800226c:	080024a1 	.word	0x080024a1
 8002270:	080024a1 	.word	0x080024a1
 8002274:	080024a1 	.word	0x080024a1
 8002278:	08002397 	.word	0x08002397
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800227c:	4b8d      	ldr	r3, [pc, #564]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x29c>)
 800227e:	613b      	str	r3, [r7, #16]
       break;
 8002280:	e111      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002282:	4b8d      	ldr	r3, [pc, #564]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002284:	613b      	str	r3, [r7, #16]
      break;
 8002286:	e10e      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002288:	4b89      	ldr	r3, [pc, #548]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x298>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002290:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002292:	4b87      	ldr	r3, [pc, #540]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d023      	beq.n	80022e6 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800229e:	4b84      	ldr	r3, [pc, #528]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x298>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	099b      	lsrs	r3, r3, #6
 80022a4:	f04f 0400 	mov.w	r4, #0
 80022a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	ea03 0501 	and.w	r5, r3, r1
 80022b4:	ea04 0602 	and.w	r6, r4, r2
 80022b8:	4a7f      	ldr	r2, [pc, #508]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80022ba:	fb02 f106 	mul.w	r1, r2, r6
 80022be:	2200      	movs	r2, #0
 80022c0:	fb02 f205 	mul.w	r2, r2, r5
 80022c4:	440a      	add	r2, r1
 80022c6:	497c      	ldr	r1, [pc, #496]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80022c8:	fba5 0101 	umull	r0, r1, r5, r1
 80022cc:	1853      	adds	r3, r2, r1
 80022ce:	4619      	mov	r1, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f04f 0400 	mov.w	r4, #0
 80022d6:	461a      	mov	r2, r3
 80022d8:	4623      	mov	r3, r4
 80022da:	f7fe fca5 	bl	8000c28 <__aeabi_uldivmod>
 80022de:	4603      	mov	r3, r0
 80022e0:	460c      	mov	r4, r1
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e049      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e6:	4b72      	ldr	r3, [pc, #456]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x298>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	099b      	lsrs	r3, r3, #6
 80022ec:	f04f 0400 	mov.w	r4, #0
 80022f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	ea03 0501 	and.w	r5, r3, r1
 80022fc:	ea04 0602 	and.w	r6, r4, r2
 8002300:	4629      	mov	r1, r5
 8002302:	4632      	mov	r2, r6
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	f04f 0400 	mov.w	r4, #0
 800230c:	0154      	lsls	r4, r2, #5
 800230e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002312:	014b      	lsls	r3, r1, #5
 8002314:	4619      	mov	r1, r3
 8002316:	4622      	mov	r2, r4
 8002318:	1b49      	subs	r1, r1, r5
 800231a:	eb62 0206 	sbc.w	r2, r2, r6
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	f04f 0400 	mov.w	r4, #0
 8002326:	0194      	lsls	r4, r2, #6
 8002328:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800232c:	018b      	lsls	r3, r1, #6
 800232e:	1a5b      	subs	r3, r3, r1
 8002330:	eb64 0402 	sbc.w	r4, r4, r2
 8002334:	f04f 0100 	mov.w	r1, #0
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	00e2      	lsls	r2, r4, #3
 800233e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002342:	00d9      	lsls	r1, r3, #3
 8002344:	460b      	mov	r3, r1
 8002346:	4614      	mov	r4, r2
 8002348:	195b      	adds	r3, r3, r5
 800234a:	eb44 0406 	adc.w	r4, r4, r6
 800234e:	f04f 0100 	mov.w	r1, #0
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	02a2      	lsls	r2, r4, #10
 8002358:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800235c:	0299      	lsls	r1, r3, #10
 800235e:	460b      	mov	r3, r1
 8002360:	4614      	mov	r4, r2
 8002362:	4618      	mov	r0, r3
 8002364:	4621      	mov	r1, r4
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f04f 0400 	mov.w	r4, #0
 800236c:	461a      	mov	r2, r3
 800236e:	4623      	mov	r3, r4
 8002370:	f7fe fc5a 	bl	8000c28 <__aeabi_uldivmod>
 8002374:	4603      	mov	r3, r0
 8002376:	460c      	mov	r4, r1
 8002378:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800237a:	4b4d      	ldr	r3, [pc, #308]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x298>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	0c1b      	lsrs	r3, r3, #16
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	3301      	adds	r3, #1
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002392:	613b      	str	r3, [r7, #16]
      break;
 8002394:	e087      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002396:	4b46      	ldr	r3, [pc, #280]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800239e:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023a0:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x298>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d023      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ac:	4b40      	ldr	r3, [pc, #256]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x298>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	099b      	lsrs	r3, r3, #6
 80023b2:	f04f 0400 	mov.w	r4, #0
 80023b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	ea03 0501 	and.w	r5, r3, r1
 80023c2:	ea04 0602 	and.w	r6, r4, r2
 80023c6:	4a3c      	ldr	r2, [pc, #240]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80023c8:	fb02 f106 	mul.w	r1, r2, r6
 80023cc:	2200      	movs	r2, #0
 80023ce:	fb02 f205 	mul.w	r2, r2, r5
 80023d2:	440a      	add	r2, r1
 80023d4:	4938      	ldr	r1, [pc, #224]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80023d6:	fba5 0101 	umull	r0, r1, r5, r1
 80023da:	1853      	adds	r3, r2, r1
 80023dc:	4619      	mov	r1, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f04f 0400 	mov.w	r4, #0
 80023e4:	461a      	mov	r2, r3
 80023e6:	4623      	mov	r3, r4
 80023e8:	f7fe fc1e 	bl	8000c28 <__aeabi_uldivmod>
 80023ec:	4603      	mov	r3, r0
 80023ee:	460c      	mov	r4, r1
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	e049      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f4:	4b2e      	ldr	r3, [pc, #184]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x298>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	099b      	lsrs	r3, r3, #6
 80023fa:	f04f 0400 	mov.w	r4, #0
 80023fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	ea03 0501 	and.w	r5, r3, r1
 800240a:	ea04 0602 	and.w	r6, r4, r2
 800240e:	4629      	mov	r1, r5
 8002410:	4632      	mov	r2, r6
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	f04f 0400 	mov.w	r4, #0
 800241a:	0154      	lsls	r4, r2, #5
 800241c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002420:	014b      	lsls	r3, r1, #5
 8002422:	4619      	mov	r1, r3
 8002424:	4622      	mov	r2, r4
 8002426:	1b49      	subs	r1, r1, r5
 8002428:	eb62 0206 	sbc.w	r2, r2, r6
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	f04f 0400 	mov.w	r4, #0
 8002434:	0194      	lsls	r4, r2, #6
 8002436:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800243a:	018b      	lsls	r3, r1, #6
 800243c:	1a5b      	subs	r3, r3, r1
 800243e:	eb64 0402 	sbc.w	r4, r4, r2
 8002442:	f04f 0100 	mov.w	r1, #0
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	00e2      	lsls	r2, r4, #3
 800244c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002450:	00d9      	lsls	r1, r3, #3
 8002452:	460b      	mov	r3, r1
 8002454:	4614      	mov	r4, r2
 8002456:	195b      	adds	r3, r3, r5
 8002458:	eb44 0406 	adc.w	r4, r4, r6
 800245c:	f04f 0100 	mov.w	r1, #0
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	02a2      	lsls	r2, r4, #10
 8002466:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800246a:	0299      	lsls	r1, r3, #10
 800246c:	460b      	mov	r3, r1
 800246e:	4614      	mov	r4, r2
 8002470:	4618      	mov	r0, r3
 8002472:	4621      	mov	r1, r4
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f04f 0400 	mov.w	r4, #0
 800247a:	461a      	mov	r2, r3
 800247c:	4623      	mov	r3, r4
 800247e:	f7fe fbd3 	bl	8000c28 <__aeabi_uldivmod>
 8002482:	4603      	mov	r3, r0
 8002484:	460c      	mov	r4, r1
 8002486:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002488:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x298>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	0f1b      	lsrs	r3, r3, #28
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	fbb2 f3f3 	udiv	r3, r2, r3
 800249c:	613b      	str	r3, [r7, #16]
      break;
 800249e:	e002      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024a0:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x29c>)
 80024a2:	613b      	str	r3, [r7, #16]
      break;
 80024a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024a6:	693b      	ldr	r3, [r7, #16]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	371c      	adds	r7, #28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024b0:	40023800 	.word	0x40023800
 80024b4:	00f42400 	.word	0x00f42400
 80024b8:	017d7840 	.word	0x017d7840

080024bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 8083 	beq.w	80025dc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024d6:	4b95      	ldr	r3, [pc, #596]	; (800272c <HAL_RCC_OscConfig+0x270>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d019      	beq.n	8002516 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024e2:	4b92      	ldr	r3, [pc, #584]	; (800272c <HAL_RCC_OscConfig+0x270>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d106      	bne.n	80024fc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024ee:	4b8f      	ldr	r3, [pc, #572]	; (800272c <HAL_RCC_OscConfig+0x270>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024fa:	d00c      	beq.n	8002516 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fc:	4b8b      	ldr	r3, [pc, #556]	; (800272c <HAL_RCC_OscConfig+0x270>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002504:	2b0c      	cmp	r3, #12
 8002506:	d112      	bne.n	800252e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002508:	4b88      	ldr	r3, [pc, #544]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002510:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002514:	d10b      	bne.n	800252e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002516:	4b85      	ldr	r3, [pc, #532]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d05b      	beq.n	80025da <HAL_RCC_OscConfig+0x11e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d157      	bne.n	80025da <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e216      	b.n	800295c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002536:	d106      	bne.n	8002546 <HAL_RCC_OscConfig+0x8a>
 8002538:	4b7c      	ldr	r3, [pc, #496]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a7b      	ldr	r2, [pc, #492]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800253e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	e01d      	b.n	8002582 <HAL_RCC_OscConfig+0xc6>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800254e:	d10c      	bne.n	800256a <HAL_RCC_OscConfig+0xae>
 8002550:	4b76      	ldr	r3, [pc, #472]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a75      	ldr	r2, [pc, #468]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002556:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	4b73      	ldr	r3, [pc, #460]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a72      	ldr	r2, [pc, #456]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	e00b      	b.n	8002582 <HAL_RCC_OscConfig+0xc6>
 800256a:	4b70      	ldr	r3, [pc, #448]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a6f      	ldr	r2, [pc, #444]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	4b6d      	ldr	r3, [pc, #436]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a6c      	ldr	r2, [pc, #432]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800257c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002580:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d013      	beq.n	80025b2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258a:	f7fe fd33 	bl	8000ff4 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002592:	f7fe fd2f 	bl	8000ff4 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b64      	cmp	r3, #100	; 0x64
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e1db      	b.n	800295c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a4:	4b61      	ldr	r3, [pc, #388]	; (800272c <HAL_RCC_OscConfig+0x270>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0xd6>
 80025b0:	e014      	b.n	80025dc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b2:	f7fe fd1f 	bl	8000ff4 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ba:	f7fe fd1b 	bl	8000ff4 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b64      	cmp	r3, #100	; 0x64
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e1c7      	b.n	800295c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025cc:	4b57      	ldr	r3, [pc, #348]	; (800272c <HAL_RCC_OscConfig+0x270>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f0      	bne.n	80025ba <HAL_RCC_OscConfig+0xfe>
 80025d8:	e000      	b.n	80025dc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d06f      	beq.n	80026c8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025e8:	4b50      	ldr	r3, [pc, #320]	; (800272c <HAL_RCC_OscConfig+0x270>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 030c 	and.w	r3, r3, #12
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d017      	beq.n	8002624 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025f4:	4b4d      	ldr	r3, [pc, #308]	; (800272c <HAL_RCC_OscConfig+0x270>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d105      	bne.n	800260c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002600:	4b4a      	ldr	r3, [pc, #296]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00b      	beq.n	8002624 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800260c:	4b47      	ldr	r3, [pc, #284]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002614:	2b0c      	cmp	r3, #12
 8002616:	d11c      	bne.n	8002652 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002618:	4b44      	ldr	r3, [pc, #272]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d116      	bne.n	8002652 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002624:	4b41      	ldr	r3, [pc, #260]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_OscConfig+0x180>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d001      	beq.n	800263c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e18f      	b.n	800295c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263c:	4b3b      	ldr	r3, [pc, #236]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4938      	ldr	r1, [pc, #224]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002650:	e03a      	b.n	80026c8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d020      	beq.n	800269c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800265a:	4b35      	ldr	r3, [pc, #212]	; (8002730 <HAL_RCC_OscConfig+0x274>)
 800265c:	2201      	movs	r2, #1
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7fe fcc8 	bl	8000ff4 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002668:	f7fe fcc4 	bl	8000ff4 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e170      	b.n	800295c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267a:	4b2c      	ldr	r3, [pc, #176]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002686:	4b29      	ldr	r3, [pc, #164]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4925      	ldr	r1, [pc, #148]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]
 800269a:	e015      	b.n	80026c8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800269c:	4b24      	ldr	r3, [pc, #144]	; (8002730 <HAL_RCC_OscConfig+0x274>)
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a2:	f7fe fca7 	bl	8000ff4 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026aa:	f7fe fca3 	bl	8000ff4 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e14f      	b.n	800295c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026bc:	4b1b      	ldr	r3, [pc, #108]	; (800272c <HAL_RCC_OscConfig+0x270>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f0      	bne.n	80026aa <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d037      	beq.n	8002744 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d016      	beq.n	800270a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <HAL_RCC_OscConfig+0x278>)
 80026de:	2201      	movs	r2, #1
 80026e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e2:	f7fe fc87 	bl	8000ff4 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ea:	f7fe fc83 	bl	8000ff4 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e12f      	b.n	800295c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_RCC_OscConfig+0x270>)
 80026fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x22e>
 8002708:	e01c      	b.n	8002744 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800270a:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <HAL_RCC_OscConfig+0x278>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002710:	f7fe fc70 	bl	8000ff4 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002716:	e00f      	b.n	8002738 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002718:	f7fe fc6c 	bl	8000ff4 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d908      	bls.n	8002738 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e118      	b.n	800295c <HAL_RCC_OscConfig+0x4a0>
 800272a:	bf00      	nop
 800272c:	40023800 	.word	0x40023800
 8002730:	42470000 	.word	0x42470000
 8002734:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002738:	4b8a      	ldr	r3, [pc, #552]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 800273a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1e9      	bne.n	8002718 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 8097 	beq.w	8002880 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002752:	2300      	movs	r3, #0
 8002754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002756:	4b83      	ldr	r3, [pc, #524]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10f      	bne.n	8002782 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	4b7f      	ldr	r3, [pc, #508]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	4a7e      	ldr	r2, [pc, #504]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 800276c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002770:	6413      	str	r3, [r2, #64]	; 0x40
 8002772:	4b7c      	ldr	r3, [pc, #496]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800277e:	2301      	movs	r3, #1
 8002780:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002782:	4b79      	ldr	r3, [pc, #484]	; (8002968 <HAL_RCC_OscConfig+0x4ac>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d118      	bne.n	80027c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800278e:	4b76      	ldr	r3, [pc, #472]	; (8002968 <HAL_RCC_OscConfig+0x4ac>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a75      	ldr	r2, [pc, #468]	; (8002968 <HAL_RCC_OscConfig+0x4ac>)
 8002794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800279a:	f7fe fc2b 	bl	8000ff4 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a2:	f7fe fc27 	bl	8000ff4 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e0d3      	b.n	800295c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b4:	4b6c      	ldr	r3, [pc, #432]	; (8002968 <HAL_RCC_OscConfig+0x4ac>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d106      	bne.n	80027d6 <HAL_RCC_OscConfig+0x31a>
 80027c8:	4b66      	ldr	r3, [pc, #408]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	4a65      	ldr	r2, [pc, #404]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6713      	str	r3, [r2, #112]	; 0x70
 80027d4:	e01c      	b.n	8002810 <HAL_RCC_OscConfig+0x354>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b05      	cmp	r3, #5
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x33c>
 80027de:	4b61      	ldr	r3, [pc, #388]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	4a60      	ldr	r2, [pc, #384]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 80027e4:	f043 0304 	orr.w	r3, r3, #4
 80027e8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ea:	4b5e      	ldr	r3, [pc, #376]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	4a5d      	ldr	r2, [pc, #372]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6713      	str	r3, [r2, #112]	; 0x70
 80027f6:	e00b      	b.n	8002810 <HAL_RCC_OscConfig+0x354>
 80027f8:	4b5a      	ldr	r3, [pc, #360]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	4a59      	ldr	r2, [pc, #356]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 80027fe:	f023 0301 	bic.w	r3, r3, #1
 8002802:	6713      	str	r3, [r2, #112]	; 0x70
 8002804:	4b57      	ldr	r3, [pc, #348]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002808:	4a56      	ldr	r2, [pc, #344]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 800280a:	f023 0304 	bic.w	r3, r3, #4
 800280e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d015      	beq.n	8002844 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002818:	f7fe fbec 	bl	8000ff4 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281e:	e00a      	b.n	8002836 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002820:	f7fe fbe8 	bl	8000ff4 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	; 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e092      	b.n	800295c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002836:	4b4b      	ldr	r3, [pc, #300]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0ee      	beq.n	8002820 <HAL_RCC_OscConfig+0x364>
 8002842:	e014      	b.n	800286e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002844:	f7fe fbd6 	bl	8000ff4 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284a:	e00a      	b.n	8002862 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800284c:	f7fe fbd2 	bl	8000ff4 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	f241 3288 	movw	r2, #5000	; 0x1388
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e07c      	b.n	800295c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002862:	4b40      	ldr	r3, [pc, #256]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1ee      	bne.n	800284c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800286e:	7dfb      	ldrb	r3, [r7, #23]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d105      	bne.n	8002880 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002874:	4b3b      	ldr	r3, [pc, #236]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	4a3a      	ldr	r2, [pc, #232]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 800287a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800287e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d068      	beq.n	800295a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002888:	4b36      	ldr	r3, [pc, #216]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 030c 	and.w	r3, r3, #12
 8002890:	2b08      	cmp	r3, #8
 8002892:	d060      	beq.n	8002956 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d145      	bne.n	8002928 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289c:	4b33      	ldr	r3, [pc, #204]	; (800296c <HAL_RCC_OscConfig+0x4b0>)
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a2:	f7fe fba7 	bl	8000ff4 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028aa:	f7fe fba3 	bl	8000ff4 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e04f      	b.n	800295c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028bc:	4b29      	ldr	r3, [pc, #164]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f0      	bne.n	80028aa <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69da      	ldr	r2, [r3, #28]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	019b      	lsls	r3, r3, #6
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028de:	085b      	lsrs	r3, r3, #1
 80028e0:	3b01      	subs	r3, #1
 80028e2:	041b      	lsls	r3, r3, #16
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ea:	061b      	lsls	r3, r3, #24
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	071b      	lsls	r3, r3, #28
 80028f4:	491b      	ldr	r1, [pc, #108]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028fa:	4b1c      	ldr	r3, [pc, #112]	; (800296c <HAL_RCC_OscConfig+0x4b0>)
 80028fc:	2201      	movs	r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7fe fb78 	bl	8000ff4 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002908:	f7fe fb74 	bl	8000ff4 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e020      	b.n	800295c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291a:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x44c>
 8002926:	e018      	b.n	800295a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002928:	4b10      	ldr	r3, [pc, #64]	; (800296c <HAL_RCC_OscConfig+0x4b0>)
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292e:	f7fe fb61 	bl	8000ff4 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002936:	f7fe fb5d 	bl	8000ff4 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e009      	b.n	800295c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002948:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_RCC_OscConfig+0x4a8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f0      	bne.n	8002936 <HAL_RCC_OscConfig+0x47a>
 8002954:	e001      	b.n	800295a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40023800 	.word	0x40023800
 8002968:	40007000 	.word	0x40007000
 800296c:	42470060 	.word	0x42470060

08002970 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e056      	b.n	8002a30 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d106      	bne.n	80029a2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f002 fa5b 	bl	8004e58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2202      	movs	r2, #2
 80029a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029b8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	ea42 0103 	orr.w	r1, r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	0c1b      	lsrs	r3, r3, #16
 8002a00:	f003 0104 	and.w	r1, r3, #4
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69da      	ldr	r2, [r3, #28]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	4613      	mov	r3, r2
 8002a46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_SPI_Transmit+0x22>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e11e      	b.n	8002c98 <HAL_SPI_Transmit+0x260>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a62:	f7fe fac7 	bl	8000ff4 <HAL_GetTick>
 8002a66:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a68:	88fb      	ldrh	r3, [r7, #6]
 8002a6a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d002      	beq.n	8002a7e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a7c:	e103      	b.n	8002c86 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <HAL_SPI_Transmit+0x52>
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d102      	bne.n	8002a90 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a8e:	e0fa      	b.n	8002c86 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2203      	movs	r2, #3
 8002a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	88fa      	ldrh	r2, [r7, #6]
 8002aa8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	88fa      	ldrh	r2, [r7, #6]
 8002aae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ad6:	d107      	bne.n	8002ae8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ae6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af2:	2b40      	cmp	r3, #64	; 0x40
 8002af4:	d007      	beq.n	8002b06 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b0e:	d14b      	bne.n	8002ba8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <HAL_SPI_Transmit+0xe6>
 8002b18:	8afb      	ldrh	r3, [r7, #22]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d13e      	bne.n	8002b9c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	881a      	ldrh	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	1c9a      	adds	r2, r3, #2
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b42:	e02b      	b.n	8002b9c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d112      	bne.n	8002b78 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	881a      	ldrh	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	1c9a      	adds	r2, r3, #2
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b76:	e011      	b.n	8002b9c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b78:	f7fe fa3c 	bl	8000ff4 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d803      	bhi.n	8002b90 <HAL_SPI_Transmit+0x158>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b8e:	d102      	bne.n	8002b96 <HAL_SPI_Transmit+0x15e>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d102      	bne.n	8002b9c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b9a:	e074      	b.n	8002c86 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1ce      	bne.n	8002b44 <HAL_SPI_Transmit+0x10c>
 8002ba6:	e04c      	b.n	8002c42 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_SPI_Transmit+0x17e>
 8002bb0:	8afb      	ldrh	r3, [r7, #22]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d140      	bne.n	8002c38 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	330c      	adds	r3, #12
 8002bc0:	7812      	ldrb	r2, [r2, #0]
 8002bc2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002bdc:	e02c      	b.n	8002c38 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d113      	bne.n	8002c14 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	330c      	adds	r3, #12
 8002bf6:	7812      	ldrb	r2, [r2, #0]
 8002bf8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c12:	e011      	b.n	8002c38 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c14:	f7fe f9ee 	bl	8000ff4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d803      	bhi.n	8002c2c <HAL_SPI_Transmit+0x1f4>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c2a:	d102      	bne.n	8002c32 <HAL_SPI_Transmit+0x1fa>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d102      	bne.n	8002c38 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c36:	e026      	b.n	8002c86 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1cd      	bne.n	8002bde <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	6839      	ldr	r1, [r7, #0]
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f894 	bl	8002d74 <SPI_EndRxTxTransaction>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2220      	movs	r2, #32
 8002c56:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	77fb      	strb	r3, [r7, #31]
 8002c82:	e000      	b.n	8002c86 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002c84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c96:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3720      	adds	r7, #32
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cb0:	e04c      	b.n	8002d4c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cb8:	d048      	beq.n	8002d4c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002cba:	f7fe f99b 	bl	8000ff4 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d902      	bls.n	8002cd0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d13d      	bne.n	8002d4c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cde:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ce8:	d111      	bne.n	8002d0e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cf2:	d004      	beq.n	8002cfe <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cfc:	d107      	bne.n	8002d0e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d16:	d10f      	bne.n	8002d38 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e00f      	b.n	8002d6c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	4013      	ands	r3, r2
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2301      	moveq	r3, #1
 8002d5e:	2300      	movne	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d1a3      	bne.n	8002cb2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d80:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <SPI_EndRxTxTransaction+0x7c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1b      	ldr	r2, [pc, #108]	; (8002df4 <SPI_EndRxTxTransaction+0x80>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	0d5b      	lsrs	r3, r3, #21
 8002d8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d90:	fb02 f303 	mul.w	r3, r2, r3
 8002d94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d9e:	d112      	bne.n	8002dc6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2200      	movs	r2, #0
 8002da8:	2180      	movs	r1, #128	; 0x80
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f7ff ff78 	bl	8002ca0 <SPI_WaitFlagStateUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d016      	beq.n	8002de4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dba:	f043 0220 	orr.w	r2, r3, #32
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e00f      	b.n	8002de6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ddc:	2b80      	cmp	r3, #128	; 0x80
 8002dde:	d0f2      	beq.n	8002dc6 <SPI_EndRxTxTransaction+0x52>
 8002de0:	e000      	b.n	8002de4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002de2:	bf00      	nop
  }

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000020 	.word	0x20000020
 8002df4:	165e9f81 	.word	0x165e9f81

08002df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e01d      	b.n	8002e46 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f002 f9d2 	bl	80051c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3304      	adds	r3, #4
 8002e34:	4619      	mov	r1, r3
 8002e36:	4610      	mov	r0, r2
 8002e38:	f000 fba6 	bl	8003588 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b085      	sub	sp, #20
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f042 0201 	orr.w	r2, r2, #1
 8002e64:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b06      	cmp	r3, #6
 8002e76:	d007      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e01d      	b.n	8002ee4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d106      	bne.n	8002ec2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f815 	bl	8002eec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	f000 fb57 	bl	8003588 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	6839      	ldr	r1, [r7, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fe22 	bl	8003b5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a15      	ldr	r2, [pc, #84]	; (8002f74 <HAL_TIM_PWM_Start+0x74>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d004      	beq.n	8002f2c <HAL_TIM_PWM_Start+0x2c>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a14      	ldr	r2, [pc, #80]	; (8002f78 <HAL_TIM_PWM_Start+0x78>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d101      	bne.n	8002f30 <HAL_TIM_PWM_Start+0x30>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <HAL_TIM_PWM_Start+0x32>
 8002f30:	2300      	movs	r3, #0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d007      	beq.n	8002f46 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b06      	cmp	r3, #6
 8002f56:	d007      	beq.n	8002f68 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40010000 	.word	0x40010000
 8002f78:	40010400 	.word	0x40010400

08002f7c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	6839      	ldr	r1, [r7, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 fde4 	bl	8003b5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a22      	ldr	r2, [pc, #136]	; (8003024 <HAL_TIM_PWM_Stop+0xa8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_TIM_PWM_Stop+0x2c>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a21      	ldr	r2, [pc, #132]	; (8003028 <HAL_TIM_PWM_Stop+0xac>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d101      	bne.n	8002fac <HAL_TIM_PWM_Stop+0x30>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <HAL_TIM_PWM_Stop+0x32>
 8002fac:	2300      	movs	r3, #0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d017      	beq.n	8002fe2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6a1a      	ldr	r2, [r3, #32]
 8002fb8:	f241 1311 	movw	r3, #4369	; 0x1111
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10f      	bne.n	8002fe2 <HAL_TIM_PWM_Stop+0x66>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6a1a      	ldr	r2, [r3, #32]
 8002fc8:	f240 4344 	movw	r3, #1092	; 0x444
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d107      	bne.n	8002fe2 <HAL_TIM_PWM_Stop+0x66>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fe0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6a1a      	ldr	r2, [r3, #32]
 8002fe8:	f241 1311 	movw	r3, #4369	; 0x1111
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10f      	bne.n	8003012 <HAL_TIM_PWM_Stop+0x96>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6a1a      	ldr	r2, [r3, #32]
 8002ff8:	f240 4344 	movw	r3, #1092	; 0x444
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d107      	bne.n	8003012 <HAL_TIM_PWM_Stop+0x96>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0201 	bic.w	r2, r2, #1
 8003010:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40010000 	.word	0x40010000
 8003028:	40010400 	.word	0x40010400

0800302c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b02      	cmp	r3, #2
 8003040:	d122      	bne.n	8003088 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b02      	cmp	r3, #2
 800304e:	d11b      	bne.n	8003088 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0202 	mvn.w	r2, #2
 8003058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fa6b 	bl	800354a <HAL_TIM_IC_CaptureCallback>
 8003074:	e005      	b.n	8003082 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fa5d 	bl	8003536 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fa6e 	bl	800355e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b04      	cmp	r3, #4
 8003094:	d122      	bne.n	80030dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d11b      	bne.n	80030dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0204 	mvn.w	r2, #4
 80030ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2202      	movs	r2, #2
 80030b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fa41 	bl	800354a <HAL_TIM_IC_CaptureCallback>
 80030c8:	e005      	b.n	80030d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fa33 	bl	8003536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fa44 	bl	800355e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d122      	bne.n	8003130 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d11b      	bne.n	8003130 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 0208 	mvn.w	r2, #8
 8003100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2204      	movs	r2, #4
 8003106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fa17 	bl	800354a <HAL_TIM_IC_CaptureCallback>
 800311c:	e005      	b.n	800312a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fa09 	bl	8003536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 fa1a 	bl	800355e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	2b10      	cmp	r3, #16
 800313c:	d122      	bne.n	8003184 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	2b10      	cmp	r3, #16
 800314a:	d11b      	bne.n	8003184 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0210 	mvn.w	r2, #16
 8003154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2208      	movs	r2, #8
 800315a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f9ed 	bl	800354a <HAL_TIM_IC_CaptureCallback>
 8003170:	e005      	b.n	800317e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f9df 	bl	8003536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f9f0 	bl	800355e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b01      	cmp	r3, #1
 8003190:	d10e      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b01      	cmp	r3, #1
 800319e:	d107      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0201 	mvn.w	r2, #1
 80031a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f001 faaa 	bl	8004704 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ba:	2b80      	cmp	r3, #128	; 0x80
 80031bc:	d10e      	bne.n	80031dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c8:	2b80      	cmp	r3, #128	; 0x80
 80031ca:	d107      	bne.n	80031dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fd34 	bl	8003c44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e6:	2b40      	cmp	r3, #64	; 0x40
 80031e8:	d10e      	bne.n	8003208 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f4:	2b40      	cmp	r3, #64	; 0x40
 80031f6:	d107      	bne.n	8003208 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f9b5 	bl	8003572 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b20      	cmp	r3, #32
 8003214:	d10e      	bne.n	8003234 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b20      	cmp	r3, #32
 8003222:	d107      	bne.n	8003234 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0220 	mvn.w	r2, #32
 800322c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fcfe 	bl	8003c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003234:	bf00      	nop
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003252:	2302      	movs	r3, #2
 8003254:	e0b4      	b.n	80033c0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2202      	movs	r2, #2
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b0c      	cmp	r3, #12
 800326a:	f200 809f 	bhi.w	80033ac <HAL_TIM_PWM_ConfigChannel+0x170>
 800326e:	a201      	add	r2, pc, #4	; (adr r2, 8003274 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003274:	080032a9 	.word	0x080032a9
 8003278:	080033ad 	.word	0x080033ad
 800327c:	080033ad 	.word	0x080033ad
 8003280:	080033ad 	.word	0x080033ad
 8003284:	080032e9 	.word	0x080032e9
 8003288:	080033ad 	.word	0x080033ad
 800328c:	080033ad 	.word	0x080033ad
 8003290:	080033ad 	.word	0x080033ad
 8003294:	0800332b 	.word	0x0800332b
 8003298:	080033ad 	.word	0x080033ad
 800329c:	080033ad 	.word	0x080033ad
 80032a0:	080033ad 	.word	0x080033ad
 80032a4:	0800336b 	.word	0x0800336b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fa0a 	bl	80036c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699a      	ldr	r2, [r3, #24]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0208 	orr.w	r2, r2, #8
 80032c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0204 	bic.w	r2, r2, #4
 80032d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6999      	ldr	r1, [r3, #24]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	619a      	str	r2, [r3, #24]
      break;
 80032e6:	e062      	b.n	80033ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fa5a 	bl	80037a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6999      	ldr	r1, [r3, #24]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	021a      	lsls	r2, r3, #8
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	619a      	str	r2, [r3, #24]
      break;
 8003328:	e041      	b.n	80033ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	4618      	mov	r0, r3
 8003332:	f000 faaf 	bl	8003894 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69da      	ldr	r2, [r3, #28]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0208 	orr.w	r2, r2, #8
 8003344:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69da      	ldr	r2, [r3, #28]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0204 	bic.w	r2, r2, #4
 8003354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69d9      	ldr	r1, [r3, #28]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	61da      	str	r2, [r3, #28]
      break;
 8003368:	e021      	b.n	80033ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	4618      	mov	r0, r3
 8003372:	f000 fb03 	bl	800397c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69d9      	ldr	r1, [r3, #28]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	021a      	lsls	r2, r3, #8
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	61da      	str	r2, [r3, #28]
      break;
 80033aa:	e000      	b.n	80033ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80033ac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_TIM_ConfigClockSource+0x18>
 80033dc:	2302      	movs	r3, #2
 80033de:	e0a6      	b.n	800352e <HAL_TIM_ConfigClockSource+0x166>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003406:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b40      	cmp	r3, #64	; 0x40
 8003416:	d067      	beq.n	80034e8 <HAL_TIM_ConfigClockSource+0x120>
 8003418:	2b40      	cmp	r3, #64	; 0x40
 800341a:	d80b      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x6c>
 800341c:	2b10      	cmp	r3, #16
 800341e:	d073      	beq.n	8003508 <HAL_TIM_ConfigClockSource+0x140>
 8003420:	2b10      	cmp	r3, #16
 8003422:	d802      	bhi.n	800342a <HAL_TIM_ConfigClockSource+0x62>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d06f      	beq.n	8003508 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003428:	e078      	b.n	800351c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800342a:	2b20      	cmp	r3, #32
 800342c:	d06c      	beq.n	8003508 <HAL_TIM_ConfigClockSource+0x140>
 800342e:	2b30      	cmp	r3, #48	; 0x30
 8003430:	d06a      	beq.n	8003508 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003432:	e073      	b.n	800351c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003434:	2b70      	cmp	r3, #112	; 0x70
 8003436:	d00d      	beq.n	8003454 <HAL_TIM_ConfigClockSource+0x8c>
 8003438:	2b70      	cmp	r3, #112	; 0x70
 800343a:	d804      	bhi.n	8003446 <HAL_TIM_ConfigClockSource+0x7e>
 800343c:	2b50      	cmp	r3, #80	; 0x50
 800343e:	d033      	beq.n	80034a8 <HAL_TIM_ConfigClockSource+0xe0>
 8003440:	2b60      	cmp	r3, #96	; 0x60
 8003442:	d041      	beq.n	80034c8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003444:	e06a      	b.n	800351c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344a:	d066      	beq.n	800351a <HAL_TIM_ConfigClockSource+0x152>
 800344c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003450:	d017      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003452:	e063      	b.n	800351c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6899      	ldr	r1, [r3, #8]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f000 fb5a 	bl	8003b1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003476:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	609a      	str	r2, [r3, #8]
      break;
 8003480:	e04c      	b.n	800351c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6899      	ldr	r1, [r3, #8]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f000 fb43 	bl	8003b1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034a4:	609a      	str	r2, [r3, #8]
      break;
 80034a6:	e039      	b.n	800351c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	461a      	mov	r2, r3
 80034b6:	f000 fab7 	bl	8003a28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2150      	movs	r1, #80	; 0x50
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 fb10 	bl	8003ae6 <TIM_ITRx_SetConfig>
      break;
 80034c6:	e029      	b.n	800351c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	461a      	mov	r2, r3
 80034d6:	f000 fad6 	bl	8003a86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2160      	movs	r1, #96	; 0x60
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fb00 	bl	8003ae6 <TIM_ITRx_SetConfig>
      break;
 80034e6:	e019      	b.n	800351c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6859      	ldr	r1, [r3, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	461a      	mov	r2, r3
 80034f6:	f000 fa97 	bl	8003a28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2140      	movs	r1, #64	; 0x40
 8003500:	4618      	mov	r0, r3
 8003502:	f000 faf0 	bl	8003ae6 <TIM_ITRx_SetConfig>
      break;
 8003506:	e009      	b.n	800351c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4619      	mov	r1, r3
 8003512:	4610      	mov	r0, r2
 8003514:	f000 fae7 	bl	8003ae6 <TIM_ITRx_SetConfig>
      break;
 8003518:	e000      	b.n	800351c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800351a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a40      	ldr	r2, [pc, #256]	; (800369c <TIM_Base_SetConfig+0x114>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d013      	beq.n	80035c8 <TIM_Base_SetConfig+0x40>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a6:	d00f      	beq.n	80035c8 <TIM_Base_SetConfig+0x40>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a3d      	ldr	r2, [pc, #244]	; (80036a0 <TIM_Base_SetConfig+0x118>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00b      	beq.n	80035c8 <TIM_Base_SetConfig+0x40>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a3c      	ldr	r2, [pc, #240]	; (80036a4 <TIM_Base_SetConfig+0x11c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d007      	beq.n	80035c8 <TIM_Base_SetConfig+0x40>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a3b      	ldr	r2, [pc, #236]	; (80036a8 <TIM_Base_SetConfig+0x120>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d003      	beq.n	80035c8 <TIM_Base_SetConfig+0x40>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a3a      	ldr	r2, [pc, #232]	; (80036ac <TIM_Base_SetConfig+0x124>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d108      	bne.n	80035da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a2f      	ldr	r2, [pc, #188]	; (800369c <TIM_Base_SetConfig+0x114>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d02b      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e8:	d027      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a2c      	ldr	r2, [pc, #176]	; (80036a0 <TIM_Base_SetConfig+0x118>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d023      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a2b      	ldr	r2, [pc, #172]	; (80036a4 <TIM_Base_SetConfig+0x11c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d01f      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a2a      	ldr	r2, [pc, #168]	; (80036a8 <TIM_Base_SetConfig+0x120>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01b      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a29      	ldr	r2, [pc, #164]	; (80036ac <TIM_Base_SetConfig+0x124>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d017      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a28      	ldr	r2, [pc, #160]	; (80036b0 <TIM_Base_SetConfig+0x128>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d013      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a27      	ldr	r2, [pc, #156]	; (80036b4 <TIM_Base_SetConfig+0x12c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00f      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a26      	ldr	r2, [pc, #152]	; (80036b8 <TIM_Base_SetConfig+0x130>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00b      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a25      	ldr	r2, [pc, #148]	; (80036bc <TIM_Base_SetConfig+0x134>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d007      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a24      	ldr	r2, [pc, #144]	; (80036c0 <TIM_Base_SetConfig+0x138>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d003      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a23      	ldr	r2, [pc, #140]	; (80036c4 <TIM_Base_SetConfig+0x13c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d108      	bne.n	800364c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4313      	orrs	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a0a      	ldr	r2, [pc, #40]	; (800369c <TIM_Base_SetConfig+0x114>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d003      	beq.n	8003680 <TIM_Base_SetConfig+0xf8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a0c      	ldr	r2, [pc, #48]	; (80036ac <TIM_Base_SetConfig+0x124>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d103      	bne.n	8003688 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	615a      	str	r2, [r3, #20]
}
 800368e:	bf00      	nop
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40010000 	.word	0x40010000
 80036a0:	40000400 	.word	0x40000400
 80036a4:	40000800 	.word	0x40000800
 80036a8:	40000c00 	.word	0x40000c00
 80036ac:	40010400 	.word	0x40010400
 80036b0:	40014000 	.word	0x40014000
 80036b4:	40014400 	.word	0x40014400
 80036b8:	40014800 	.word	0x40014800
 80036bc:	40001800 	.word	0x40001800
 80036c0:	40001c00 	.word	0x40001c00
 80036c4:	40002000 	.word	0x40002000

080036c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	f023 0201 	bic.w	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0303 	bic.w	r3, r3, #3
 80036fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f023 0302 	bic.w	r3, r3, #2
 8003710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a20      	ldr	r2, [pc, #128]	; (80037a0 <TIM_OC1_SetConfig+0xd8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <TIM_OC1_SetConfig+0x64>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a1f      	ldr	r2, [pc, #124]	; (80037a4 <TIM_OC1_SetConfig+0xdc>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d10c      	bne.n	8003746 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f023 0308 	bic.w	r3, r3, #8
 8003732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f023 0304 	bic.w	r3, r3, #4
 8003744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a15      	ldr	r2, [pc, #84]	; (80037a0 <TIM_OC1_SetConfig+0xd8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d003      	beq.n	8003756 <TIM_OC1_SetConfig+0x8e>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a14      	ldr	r2, [pc, #80]	; (80037a4 <TIM_OC1_SetConfig+0xdc>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d111      	bne.n	800377a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800375c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	621a      	str	r2, [r3, #32]
}
 8003794:	bf00      	nop
 8003796:	371c      	adds	r7, #28
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	40010000 	.word	0x40010000
 80037a4:	40010400 	.word	0x40010400

080037a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	f023 0210 	bic.w	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	021b      	lsls	r3, r3, #8
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f023 0320 	bic.w	r3, r3, #32
 80037f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a22      	ldr	r2, [pc, #136]	; (800388c <TIM_OC2_SetConfig+0xe4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d003      	beq.n	8003810 <TIM_OC2_SetConfig+0x68>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a21      	ldr	r2, [pc, #132]	; (8003890 <TIM_OC2_SetConfig+0xe8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d10d      	bne.n	800382c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800382a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a17      	ldr	r2, [pc, #92]	; (800388c <TIM_OC2_SetConfig+0xe4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d003      	beq.n	800383c <TIM_OC2_SetConfig+0x94>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a16      	ldr	r2, [pc, #88]	; (8003890 <TIM_OC2_SetConfig+0xe8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d113      	bne.n	8003864 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800384a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40010000 	.word	0x40010000
 8003890:	40010400 	.word	0x40010400

08003894 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0303 	bic.w	r3, r3, #3
 80038ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a21      	ldr	r2, [pc, #132]	; (8003974 <TIM_OC3_SetConfig+0xe0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d003      	beq.n	80038fa <TIM_OC3_SetConfig+0x66>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a20      	ldr	r2, [pc, #128]	; (8003978 <TIM_OC3_SetConfig+0xe4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d10d      	bne.n	8003916 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003900:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a16      	ldr	r2, [pc, #88]	; (8003974 <TIM_OC3_SetConfig+0xe0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d003      	beq.n	8003926 <TIM_OC3_SetConfig+0x92>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a15      	ldr	r2, [pc, #84]	; (8003978 <TIM_OC3_SetConfig+0xe4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d113      	bne.n	800394e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800392c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	621a      	str	r2, [r3, #32]
}
 8003968:	bf00      	nop
 800396a:	371c      	adds	r7, #28
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	40010000 	.word	0x40010000
 8003978:	40010400 	.word	0x40010400

0800397c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	021b      	lsls	r3, r3, #8
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	031b      	lsls	r3, r3, #12
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a12      	ldr	r2, [pc, #72]	; (8003a20 <TIM_OC4_SetConfig+0xa4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d003      	beq.n	80039e4 <TIM_OC4_SetConfig+0x68>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a11      	ldr	r2, [pc, #68]	; (8003a24 <TIM_OC4_SetConfig+0xa8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d109      	bne.n	80039f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	019b      	lsls	r3, r3, #6
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	621a      	str	r2, [r3, #32]
}
 8003a12:	bf00      	nop
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40010000 	.word	0x40010000
 8003a24:	40010400 	.word	0x40010400

08003a28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f023 0201 	bic.w	r2, r3, #1
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f023 030a 	bic.w	r3, r3, #10
 8003a64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b087      	sub	sp, #28
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	f023 0210 	bic.w	r2, r3, #16
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ab0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	031b      	lsls	r3, r3, #12
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ac2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	621a      	str	r2, [r3, #32]
}
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b085      	sub	sp, #20
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f043 0307 	orr.w	r3, r3, #7
 8003b08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	609a      	str	r2, [r3, #8]
}
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	021a      	lsls	r2, r3, #8
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	609a      	str	r2, [r3, #8]
}
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	2201      	movs	r2, #1
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a1a      	ldr	r2, [r3, #32]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	401a      	ands	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a1a      	ldr	r2, [r3, #32]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	fa01 f303 	lsl.w	r3, r1, r3
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	621a      	str	r2, [r3, #32]
}
 8003b9a:	bf00      	nop
 8003b9c:	371c      	adds	r7, #28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b085      	sub	sp, #20
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e032      	b.n	8003c24 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2202      	movs	r2, #2
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8003c5e:	463b      	mov	r3, r7
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	605a      	str	r2, [r3, #4]
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8003c6a:	4b21      	ldr	r3, [pc, #132]	; (8003cf0 <MX_ADC1_Init+0x98>)
 8003c6c:	4a21      	ldr	r2, [pc, #132]	; (8003cf4 <MX_ADC1_Init+0x9c>)
 8003c6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003c70:	4b1f      	ldr	r3, [pc, #124]	; (8003cf0 <MX_ADC1_Init+0x98>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003c76:	4b1e      	ldr	r3, [pc, #120]	; (8003cf0 <MX_ADC1_Init+0x98>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003c7c:	4b1c      	ldr	r3, [pc, #112]	; (8003cf0 <MX_ADC1_Init+0x98>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003c82:	4b1b      	ldr	r3, [pc, #108]	; (8003cf0 <MX_ADC1_Init+0x98>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c88:	4b19      	ldr	r3, [pc, #100]	; (8003cf0 <MX_ADC1_Init+0x98>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c90:	4b17      	ldr	r3, [pc, #92]	; (8003cf0 <MX_ADC1_Init+0x98>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c96:	4b16      	ldr	r3, [pc, #88]	; (8003cf0 <MX_ADC1_Init+0x98>)
 8003c98:	4a17      	ldr	r2, [pc, #92]	; (8003cf8 <MX_ADC1_Init+0xa0>)
 8003c9a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c9c:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <MX_ADC1_Init+0x98>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003ca2:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <MX_ADC1_Init+0x98>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003ca8:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <MX_ADC1_Init+0x98>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003cb0:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <MX_ADC1_Init+0x98>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003cb6:	480e      	ldr	r0, [pc, #56]	; (8003cf0 <MX_ADC1_Init+0x98>)
 8003cb8:	f7fd f9ca 	bl	8001050 <HAL_ADC_Init>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003cc2:	f001 f881 	bl	8004dc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cd2:	463b      	mov	r3, r7
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4806      	ldr	r0, [pc, #24]	; (8003cf0 <MX_ADC1_Init+0x98>)
 8003cd8:	f7fd fb88 	bl	80013ec <HAL_ADC_ConfigChannel>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003ce2:	f001 f871 	bl	8004dc8 <Error_Handler>
  }

}
 8003ce6:	bf00      	nop
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	20000474 	.word	0x20000474
 8003cf4:	40012000 	.word	0x40012000
 8003cf8:	0f000001 	.word	0x0f000001

08003cfc <MX_ADC2_Init>:

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8003d02:	463b      	mov	r3, r7
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	605a      	str	r2, [r3, #4]
 8003d0a:	609a      	str	r2, [r3, #8]
 8003d0c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003d0e:	4b21      	ldr	r3, [pc, #132]	; (8003d94 <MX_ADC2_Init+0x98>)
 8003d10:	4a21      	ldr	r2, [pc, #132]	; (8003d98 <MX_ADC2_Init+0x9c>)
 8003d12:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003d14:	4b1f      	ldr	r3, [pc, #124]	; (8003d94 <MX_ADC2_Init+0x98>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003d1a:	4b1e      	ldr	r3, [pc, #120]	; (8003d94 <MX_ADC2_Init+0x98>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8003d20:	4b1c      	ldr	r3, [pc, #112]	; (8003d94 <MX_ADC2_Init+0x98>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003d26:	4b1b      	ldr	r3, [pc, #108]	; (8003d94 <MX_ADC2_Init+0x98>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003d2c:	4b19      	ldr	r3, [pc, #100]	; (8003d94 <MX_ADC2_Init+0x98>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003d34:	4b17      	ldr	r3, [pc, #92]	; (8003d94 <MX_ADC2_Init+0x98>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003d3a:	4b16      	ldr	r3, [pc, #88]	; (8003d94 <MX_ADC2_Init+0x98>)
 8003d3c:	4a17      	ldr	r2, [pc, #92]	; (8003d9c <MX_ADC2_Init+0xa0>)
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d40:	4b14      	ldr	r3, [pc, #80]	; (8003d94 <MX_ADC2_Init+0x98>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8003d46:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <MX_ADC2_Init+0x98>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003d4c:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <MX_ADC2_Init+0x98>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d54:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <MX_ADC2_Init+0x98>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003d5a:	480e      	ldr	r0, [pc, #56]	; (8003d94 <MX_ADC2_Init+0x98>)
 8003d5c:	f7fd f978 	bl	8001050 <HAL_ADC_Init>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8003d66:	f001 f82f 	bl	8004dc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d76:	463b      	mov	r3, r7
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4806      	ldr	r0, [pc, #24]	; (8003d94 <MX_ADC2_Init+0x98>)
 8003d7c:	f7fd fb36 	bl	80013ec <HAL_ADC_ConfigChannel>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8003d86:	f001 f81f 	bl	8004dc8 <Error_Handler>
  }

}
 8003d8a:	bf00      	nop
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	2000042c 	.word	0x2000042c
 8003d98:	40012100 	.word	0x40012100
 8003d9c:	0f000001 	.word	0x0f000001

08003da0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08c      	sub	sp, #48	; 0x30
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da8:	f107 031c 	add.w	r3, r7, #28
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	605a      	str	r2, [r3, #4]
 8003db2:	609a      	str	r2, [r3, #8]
 8003db4:	60da      	str	r2, [r3, #12]
 8003db6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a2e      	ldr	r2, [pc, #184]	; (8003e78 <HAL_ADC_MspInit+0xd8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d128      	bne.n	8003e14 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	4b2d      	ldr	r3, [pc, #180]	; (8003e7c <HAL_ADC_MspInit+0xdc>)
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	4a2c      	ldr	r2, [pc, #176]	; (8003e7c <HAL_ADC_MspInit+0xdc>)
 8003dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8003dd2:	4b2a      	ldr	r3, [pc, #168]	; (8003e7c <HAL_ADC_MspInit+0xdc>)
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	61bb      	str	r3, [r7, #24]
 8003ddc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	4b26      	ldr	r3, [pc, #152]	; (8003e7c <HAL_ADC_MspInit+0xdc>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	4a25      	ldr	r2, [pc, #148]	; (8003e7c <HAL_ADC_MspInit+0xdc>)
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	6313      	str	r3, [r2, #48]	; 0x30
 8003dee:	4b23      	ldr	r3, [pc, #140]	; (8003e7c <HAL_ADC_MspInit+0xdc>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e06:	f107 031c 	add.w	r3, r7, #28
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	481c      	ldr	r0, [pc, #112]	; (8003e80 <HAL_ADC_MspInit+0xe0>)
 8003e0e:	f7fd fe2d 	bl	8001a6c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003e12:	e02c      	b.n	8003e6e <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1a      	ldr	r2, [pc, #104]	; (8003e84 <HAL_ADC_MspInit+0xe4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d127      	bne.n	8003e6e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003e1e:	2300      	movs	r3, #0
 8003e20:	613b      	str	r3, [r7, #16]
 8003e22:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <HAL_ADC_MspInit+0xdc>)
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	4a15      	ldr	r2, [pc, #84]	; (8003e7c <HAL_ADC_MspInit+0xdc>)
 8003e28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e2e:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <HAL_ADC_MspInit+0xdc>)
 8003e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <HAL_ADC_MspInit+0xdc>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	4a0e      	ldr	r2, [pc, #56]	; (8003e7c <HAL_ADC_MspInit+0xdc>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4a:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <HAL_ADC_MspInit+0xdc>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003e56:	2303      	movs	r3, #3
 8003e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e62:	f107 031c 	add.w	r3, r7, #28
 8003e66:	4619      	mov	r1, r3
 8003e68:	4805      	ldr	r0, [pc, #20]	; (8003e80 <HAL_ADC_MspInit+0xe0>)
 8003e6a:	f7fd fdff 	bl	8001a6c <HAL_GPIO_Init>
}
 8003e6e:	bf00      	nop
 8003e70:	3730      	adds	r7, #48	; 0x30
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40012000 	.word	0x40012000
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	40020000 	.word	0x40020000
 8003e84:	40012100 	.word	0x40012100

08003e88 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e8e:	f107 030c 	add.w	r3, r7, #12
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	605a      	str	r2, [r3, #4]
 8003e98:	609a      	str	r2, [r3, #8]
 8003e9a:	60da      	str	r2, [r3, #12]
 8003e9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	4b62      	ldr	r3, [pc, #392]	; (800402c <MX_GPIO_Init+0x1a4>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	4a61      	ldr	r2, [pc, #388]	; (800402c <MX_GPIO_Init+0x1a4>)
 8003ea8:	f043 0304 	orr.w	r3, r3, #4
 8003eac:	6313      	str	r3, [r2, #48]	; 0x30
 8003eae:	4b5f      	ldr	r3, [pc, #380]	; (800402c <MX_GPIO_Init+0x1a4>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	60bb      	str	r3, [r7, #8]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eba:	2300      	movs	r3, #0
 8003ebc:	607b      	str	r3, [r7, #4]
 8003ebe:	4b5b      	ldr	r3, [pc, #364]	; (800402c <MX_GPIO_Init+0x1a4>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	4a5a      	ldr	r2, [pc, #360]	; (800402c <MX_GPIO_Init+0x1a4>)
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eca:	4b58      	ldr	r3, [pc, #352]	; (800402c <MX_GPIO_Init+0x1a4>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	607b      	str	r3, [r7, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	603b      	str	r3, [r7, #0]
 8003eda:	4b54      	ldr	r3, [pc, #336]	; (800402c <MX_GPIO_Init+0x1a4>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	4a53      	ldr	r2, [pc, #332]	; (800402c <MX_GPIO_Init+0x1a4>)
 8003ee0:	f043 0302 	orr.w	r3, r3, #2
 8003ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee6:	4b51      	ldr	r3, [pc, #324]	; (800402c <MX_GPIO_Init+0x1a4>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_Pin|LCD_RESET_Pin|LCD_A0_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f240 3141 	movw	r1, #833	; 0x341
 8003ef8:	484d      	ldr	r0, [pc, #308]	; (8004030 <MX_GPIO_Init+0x1a8>)
 8003efa:	f7fd ff49 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, GPIO_PIN_RESET);
 8003efe:	2200      	movs	r2, #0
 8003f00:	2140      	movs	r1, #64	; 0x40
 8003f02:	484c      	ldr	r0, [pc, #304]	; (8004034 <MX_GPIO_Init+0x1ac>)
 8003f04:	f7fd ff44 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8003f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8003f16:	f107 030c 	add.w	r3, r7, #12
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4846      	ldr	r0, [pc, #280]	; (8004038 <MX_GPIO_Init+0x1b0>)
 8003f1e:	f7fd fda5 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_RESET_Pin|LCD_A0_Pin;
 8003f22:	f240 1341 	movw	r3, #321	; 0x141
 8003f26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f30:	2300      	movs	r3, #0
 8003f32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f34:	f107 030c 	add.w	r3, r7, #12
 8003f38:	4619      	mov	r1, r3
 8003f3a:	483d      	ldr	r0, [pc, #244]	; (8004030 <MX_GPIO_Init+0x1a8>)
 8003f3c:	f7fd fd96 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8003f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f46:	2301      	movs	r3, #1
 8003f48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8003f52:	f107 030c 	add.w	r3, r7, #12
 8003f56:	4619      	mov	r1, r3
 8003f58:	4835      	ldr	r0, [pc, #212]	; (8004030 <MX_GPIO_Init+0x1a8>)
 8003f5a:	f7fd fd87 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_N_Pin;
 8003f5e:	2340      	movs	r3, #64	; 0x40
 8003f60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f62:	2301      	movs	r3, #1
 8003f64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_N_GPIO_Port, &GPIO_InitStruct);
 8003f6e:	f107 030c 	add.w	r3, r7, #12
 8003f72:	4619      	mov	r1, r3
 8003f74:	482f      	ldr	r0, [pc, #188]	; (8004034 <MX_GPIO_Init+0x1ac>)
 8003f76:	f7fd fd79 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 red */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003f7a:	2310      	movs	r3, #16
 8003f7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f86:	f107 030c 	add.w	r3, r7, #12
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4829      	ldr	r0, [pc, #164]	; (8004034 <MX_GPIO_Init+0x1ac>)
 8003f8e:	f7fd fd6d 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 green*/
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003f92:	2380      	movs	r3, #128	; 0x80
 8003f94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f96:	2301      	movs	r3, #1
 8003f98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f9e:	f107 030c 	add.w	r3, r7, #12
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4824      	ldr	r0, [pc, #144]	; (8004038 <MX_GPIO_Init+0x1b0>)
 8003fa6:	f7fd fd61 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 blue */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb8:	f107 030c 	add.w	r3, r7, #12
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	481c      	ldr	r0, [pc, #112]	; (8004030 <MX_GPIO_Init+0x1a8>)
 8003fc0:	f7fd fd54 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003fc4:	2310      	movs	r3, #16
 8003fc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003fc8:	4b1c      	ldr	r3, [pc, #112]	; (800403c <MX_GPIO_Init+0x1b4>)
 8003fca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fd0:	f107 030c 	add.w	r3, r7, #12
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4816      	ldr	r0, [pc, #88]	; (8004030 <MX_GPIO_Init+0x1a8>)
 8003fd8:	f7fd fd48 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8003fdc:	2321      	movs	r3, #33	; 0x21
 8003fde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003fe0:	4b16      	ldr	r3, [pc, #88]	; (800403c <MX_GPIO_Init+0x1b4>)
 8003fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fe8:	f107 030c 	add.w	r3, r7, #12
 8003fec:	4619      	mov	r1, r3
 8003fee:	4811      	ldr	r0, [pc, #68]	; (8004034 <MX_GPIO_Init+0x1ac>)
 8003ff0:	f7fd fd3c 	bl	8001a6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2106      	movs	r1, #6
 8003ff8:	2006      	movs	r0, #6
 8003ffa:	f7fd fd00 	bl	80019fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003ffe:	2006      	movs	r0, #6
 8004000:	f7fd fd19 	bl	8001a36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 6, 0);
 8004004:	2200      	movs	r2, #0
 8004006:	2106      	movs	r1, #6
 8004008:	200a      	movs	r0, #10
 800400a:	f7fd fcf8 	bl	80019fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800400e:	200a      	movs	r0, #10
 8004010:	f7fd fd11 	bl	8001a36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 8004014:	2200      	movs	r2, #0
 8004016:	2106      	movs	r1, #6
 8004018:	2017      	movs	r0, #23
 800401a:	f7fd fcf0 	bl	80019fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800401e:	2017      	movs	r0, #23
 8004020:	f7fd fd09 	bl	8001a36 <HAL_NVIC_EnableIRQ>

}
 8004024:	bf00      	nop
 8004026:	3720      	adds	r7, #32
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40023800 	.word	0x40023800
 8004030:	40020000 	.word	0x40020000
 8004034:	40020400 	.word	0x40020400
 8004038:	40020800 	.word	0x40020800
 800403c:	10110000 	.word	0x10110000

08004040 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004044:	4b12      	ldr	r3, [pc, #72]	; (8004090 <MX_I2C1_Init+0x50>)
 8004046:	4a13      	ldr	r2, [pc, #76]	; (8004094 <MX_I2C1_Init+0x54>)
 8004048:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800404a:	4b11      	ldr	r3, [pc, #68]	; (8004090 <MX_I2C1_Init+0x50>)
 800404c:	4a12      	ldr	r2, [pc, #72]	; (8004098 <MX_I2C1_Init+0x58>)
 800404e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004050:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <MX_I2C1_Init+0x50>)
 8004052:	2200      	movs	r2, #0
 8004054:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004056:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <MX_I2C1_Init+0x50>)
 8004058:	2200      	movs	r2, #0
 800405a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800405c:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <MX_I2C1_Init+0x50>)
 800405e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004062:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004064:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <MX_I2C1_Init+0x50>)
 8004066:	2200      	movs	r2, #0
 8004068:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800406a:	4b09      	ldr	r3, [pc, #36]	; (8004090 <MX_I2C1_Init+0x50>)
 800406c:	2200      	movs	r2, #0
 800406e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004070:	4b07      	ldr	r3, [pc, #28]	; (8004090 <MX_I2C1_Init+0x50>)
 8004072:	2200      	movs	r2, #0
 8004074:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004076:	4b06      	ldr	r3, [pc, #24]	; (8004090 <MX_I2C1_Init+0x50>)
 8004078:	2200      	movs	r2, #0
 800407a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800407c:	4804      	ldr	r0, [pc, #16]	; (8004090 <MX_I2C1_Init+0x50>)
 800407e:	f7fd fea1 	bl	8001dc4 <HAL_I2C_Init>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004088:	f000 fe9e 	bl	8004dc8 <Error_Handler>
  }

}
 800408c:	bf00      	nop
 800408e:	bd80      	pop	{r7, pc}
 8004090:	200004bc 	.word	0x200004bc
 8004094:	40005400 	.word	0x40005400
 8004098:	00061a80 	.word	0x00061a80

0800409c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08a      	sub	sp, #40	; 0x28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a4:	f107 0314 	add.w	r3, r7, #20
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	60da      	str	r2, [r3, #12]
 80040b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a19      	ldr	r2, [pc, #100]	; (8004120 <HAL_I2C_MspInit+0x84>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d12c      	bne.n	8004118 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040be:	2300      	movs	r3, #0
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	4b18      	ldr	r3, [pc, #96]	; (8004124 <HAL_I2C_MspInit+0x88>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	4a17      	ldr	r2, [pc, #92]	; (8004124 <HAL_I2C_MspInit+0x88>)
 80040c8:	f043 0302 	orr.w	r3, r3, #2
 80040cc:	6313      	str	r3, [r2, #48]	; 0x30
 80040ce:	4b15      	ldr	r3, [pc, #84]	; (8004124 <HAL_I2C_MspInit+0x88>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80040da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040e0:	2312      	movs	r3, #18
 80040e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040e4:	2301      	movs	r3, #1
 80040e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e8:	2303      	movs	r3, #3
 80040ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80040ec:	2304      	movs	r3, #4
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040f0:	f107 0314 	add.w	r3, r7, #20
 80040f4:	4619      	mov	r1, r3
 80040f6:	480c      	ldr	r0, [pc, #48]	; (8004128 <HAL_I2C_MspInit+0x8c>)
 80040f8:	f7fd fcb8 	bl	8001a6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	4b08      	ldr	r3, [pc, #32]	; (8004124 <HAL_I2C_MspInit+0x88>)
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	4a07      	ldr	r2, [pc, #28]	; (8004124 <HAL_I2C_MspInit+0x88>)
 8004106:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800410a:	6413      	str	r3, [r2, #64]	; 0x40
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <HAL_I2C_MspInit+0x88>)
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004118:	bf00      	nop
 800411a:	3728      	adds	r7, #40	; 0x28
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40005400 	.word	0x40005400
 8004124:	40023800 	.word	0x40023800
 8004128:	40020400 	.word	0x40020400

0800412c <chipSelect>:
static ColumnBuffer displayBuffer[NUMBER_OF_ROWS];



static void chipSelect(bool isSelected)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, (GPIO_PinState) !isSelected); /* low active */
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	f083 0301 	eor.w	r3, r3, #1
 800413c:	b2db      	uxtb	r3, r3
 800413e:	461a      	mov	r2, r3
 8004140:	2140      	movs	r1, #64	; 0x40
 8004142:	4803      	ldr	r0, [pc, #12]	; (8004150 <chipSelect+0x24>)
 8004144:	f7fd fe24 	bl	8001d90 <HAL_GPIO_WritePin>
}
 8004148:	bf00      	nop
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40020400 	.word	0x40020400

08004154 <registerSelect>:

static void registerSelect(lcdRegister selectedRegister)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, (GPIO_PinState) selectedRegister);
 800415e:	79fb      	ldrb	r3, [r7, #7]
 8004160:	461a      	mov	r2, r3
 8004162:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004166:	4803      	ldr	r0, [pc, #12]	; (8004174 <registerSelect+0x20>)
 8004168:	f7fd fe12 	bl	8001d90 <HAL_GPIO_WritePin>
}
 800416c:	bf00      	nop
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40020000 	.word	0x40020000

08004178 <displayReset>:

static void displayReset(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
    chipSelect(INSTRUCTION_REGISTER);
 800417c:	2000      	movs	r0, #0
 800417e:	f7ff ffd5 	bl	800412c <chipSelect>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8004182:	2200      	movs	r2, #0
 8004184:	2140      	movs	r1, #64	; 0x40
 8004186:	4808      	ldr	r0, [pc, #32]	; (80041a8 <displayReset+0x30>)
 8004188:	f7fd fe02 	bl	8001d90 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800418c:	2001      	movs	r0, #1
 800418e:	f7fc ff3d 	bl	800100c <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8004192:	2201      	movs	r2, #1
 8004194:	2140      	movs	r1, #64	; 0x40
 8004196:	4804      	ldr	r0, [pc, #16]	; (80041a8 <displayReset+0x30>)
 8004198:	f7fd fdfa 	bl	8001d90 <HAL_GPIO_WritePin>
    chipSelect(DATA_REGISTER);
 800419c:	2001      	movs	r0, #1
 800419e:	f7ff ffc5 	bl	800412c <chipSelect>
}
 80041a2:	bf00      	nop
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40020000 	.word	0x40020000

080041ac <sendInstruction>:

static void sendInstruction(instruction command)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	71fb      	strb	r3, [r7, #7]
    registerSelect(INSTRUCTION_REGISTER);
 80041b6:	2000      	movs	r0, #0
 80041b8:	f7ff ffcc 	bl	8004154 <registerSelect>
    chipSelect(true);
 80041bc:	2001      	movs	r0, #1
 80041be:	f7ff ffb5 	bl	800412c <chipSelect>
	  //$dnd (uint8_t) added
    HAL_SPI_Transmit(&hspi1, (uint8_t *) &command, 1, 1);
 80041c2:	1df9      	adds	r1, r7, #7
 80041c4:	2301      	movs	r3, #1
 80041c6:	2201      	movs	r2, #1
 80041c8:	4804      	ldr	r0, [pc, #16]	; (80041dc <sendInstruction+0x30>)
 80041ca:	f7fe fc35 	bl	8002a38 <HAL_SPI_Transmit>
    chipSelect(false);
 80041ce:	2000      	movs	r0, #0
 80041d0:	f7ff ffac 	bl	800412c <chipSelect>
}
 80041d4:	bf00      	nop
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	200009c4 	.word	0x200009c4

080041e0 <sendData>:


/*static*/ void sendData(uint8_t data)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	71fb      	strb	r3, [r7, #7]
    registerSelect(DATA_REGISTER);
 80041ea:	2001      	movs	r0, #1
 80041ec:	f7ff ffb2 	bl	8004154 <registerSelect>
    chipSelect(true);
 80041f0:	2001      	movs	r0, #1
 80041f2:	f7ff ff9b 	bl	800412c <chipSelect>
    HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 80041f6:	1df9      	adds	r1, r7, #7
 80041f8:	2301      	movs	r3, #1
 80041fa:	2201      	movs	r2, #1
 80041fc:	4804      	ldr	r0, [pc, #16]	; (8004210 <sendData+0x30>)
 80041fe:	f7fe fc1b 	bl	8002a38 <HAL_SPI_Transmit>
    chipSelect(false);
 8004202:	2000      	movs	r0, #0
 8004204:	f7ff ff92 	bl	800412c <chipSelect>
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	200009c4 	.word	0x200009c4

08004214 <lcd_setContrast>:

void lcd_setContrast(uint8_t electronicVolume)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	71fb      	strb	r3, [r7, #7]
#define ELECTRONIC_VOLUME_MAXIMUM_RAITING ((uint8_t) 63)

    if (electronicVolume <= ELECTRONIC_VOLUME_MAXIMUM_RAITING) {
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	2b3f      	cmp	r3, #63	; 0x3f
 8004222:	d806      	bhi.n	8004232 <lcd_setContrast+0x1e>
        sendInstruction(ELECTRONIC_VOLUME_MODE_SET);
 8004224:	2081      	movs	r0, #129	; 0x81
 8004226:	f7ff ffc1 	bl	80041ac <sendInstruction>
			//$dnd1 added (instruction)
        sendInstruction((instruction) electronicVolume);
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff ffbd 	bl	80041ac <sendInstruction>
    }
}
 8004232:	bf00      	nop
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <lcd_init>:

void lcd_init(void)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	af00      	add	r7, sp, #0
    lcd_clear();
 800423e:	f000 f857 	bl	80042f0 <lcd_clear>
    displayReset();
 8004242:	f7ff ff99 	bl	8004178 <displayReset>

    sendInstruction(ADC_NORMAL);
 8004246:	20a0      	movs	r0, #160	; 0xa0
 8004248:	f7ff ffb0 	bl	80041ac <sendInstruction>
    sendInstruction(DISPLAY_OFF);
 800424c:	20ae      	movs	r0, #174	; 0xae
 800424e:	f7ff ffad 	bl	80041ac <sendInstruction>
    sendInstruction(COMMON_OUTPUT_MODE_REVERSE);
 8004252:	20c8      	movs	r0, #200	; 0xc8
 8004254:	f7ff ffaa 	bl	80041ac <sendInstruction>
    sendInstruction(BIAS_ONE_NINTH);
 8004258:	20a2      	movs	r0, #162	; 0xa2
 800425a:	f7ff ffa7 	bl	80041ac <sendInstruction>
    sendInstruction(POWER_CONTROL_SET_7);
 800425e:	202f      	movs	r0, #47	; 0x2f
 8004260:	f7ff ffa4 	bl	80041ac <sendInstruction>
    sendInstruction(INTERNAL_RESISTOR_RATIO_1);
 8004264:	2021      	movs	r0, #33	; 0x21
 8004266:	f7ff ffa1 	bl	80041ac <sendInstruction>
    lcd_setContrast(40);
 800426a:	2028      	movs	r0, #40	; 0x28
 800426c:	f7ff ffd2 	bl	8004214 <lcd_setContrast>
    sendInstruction(DISPLAY_ON);
 8004270:	20af      	movs	r0, #175	; 0xaf
 8004272:	f7ff ff9b 	bl	80041ac <sendInstruction>
}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <lcd_setPixel>:

void lcd_setPixel(uint8_t xPosition, uint8_t yPosition, bool pixelIsSet)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	71fb      	strb	r3, [r7, #7]
 8004286:	460b      	mov	r3, r1
 8004288:	71bb      	strb	r3, [r7, #6]
 800428a:	4613      	mov	r3, r2
 800428c:	717b      	strb	r3, [r7, #5]
    if ((xPosition < NUMBER_OF_ROWS) && (yPosition < NUMBER_OF_COLUMNS)) {
 800428e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004292:	2b00      	cmp	r3, #0
 8004294:	db23      	blt.n	80042de <lcd_setPixel+0x62>
 8004296:	79bb      	ldrb	r3, [r7, #6]
 8004298:	2b1f      	cmp	r3, #31
 800429a:	d820      	bhi.n	80042de <lcd_setPixel+0x62>
        if (pixelIsSet)
 800429c:	797b      	ldrb	r3, [r7, #5]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00e      	beq.n	80042c0 <lcd_setPixel+0x44>
            displayBuffer[xPosition].rawData |= (1 << yPosition);
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	4a11      	ldr	r2, [pc, #68]	; (80042ec <lcd_setPixel+0x70>)
 80042a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80042aa:	79bb      	ldrb	r3, [r7, #6]
 80042ac:	2101      	movs	r1, #1
 80042ae:	fa01 f303 	lsl.w	r3, r1, r3
 80042b2:	4619      	mov	r1, r3
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	490c      	ldr	r1, [pc, #48]	; (80042ec <lcd_setPixel+0x70>)
 80042ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        else
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
    }
}
 80042be:	e00e      	b.n	80042de <lcd_setPixel+0x62>
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	4a0a      	ldr	r2, [pc, #40]	; (80042ec <lcd_setPixel+0x70>)
 80042c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80042c8:	79bb      	ldrb	r3, [r7, #6]
 80042ca:	2101      	movs	r1, #1
 80042cc:	fa01 f303 	lsl.w	r3, r1, r3
 80042d0:	43db      	mvns	r3, r3
 80042d2:	4619      	mov	r1, r3
 80042d4:	79fb      	ldrb	r3, [r7, #7]
 80042d6:	400a      	ands	r2, r1
 80042d8:	4904      	ldr	r1, [pc, #16]	; (80042ec <lcd_setPixel+0x70>)
 80042da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20000210 	.word	0x20000210

080042f0 <lcd_clear>:

void lcd_clear(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 80042f6:	2300      	movs	r3, #0
 80042f8:	71fb      	strb	r3, [r7, #7]
 80042fa:	e007      	b.n	800430c <lcd_clear+0x1c>
        displayBuffer[rowIndex].rawData = false;
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	4a08      	ldr	r2, [pc, #32]	; (8004320 <lcd_clear+0x30>)
 8004300:	2100      	movs	r1, #0
 8004302:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	3301      	adds	r3, #1
 800430a:	71fb      	strb	r3, [r7, #7]
 800430c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004310:	2b00      	cmp	r3, #0
 8004312:	daf3      	bge.n	80042fc <lcd_clear+0xc>
    }
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	20000210 	.word	0x20000210

08004324 <lcd_setChar>:


void lcd_setChar(uint8_t xPosition, uint8_t yPosition, unsigned char charToSet, lcd_fontSize size, bool contrastIsInverted)
{
 8004324:	b590      	push	{r4, r7, lr}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	4604      	mov	r4, r0
 800432c:	4608      	mov	r0, r1
 800432e:	4611      	mov	r1, r2
 8004330:	461a      	mov	r2, r3
 8004332:	4623      	mov	r3, r4
 8004334:	71fb      	strb	r3, [r7, #7]
 8004336:	4603      	mov	r3, r0
 8004338:	71bb      	strb	r3, [r7, #6]
 800433a:	460b      	mov	r3, r1
 800433c:	717b      	strb	r3, [r7, #5]
 800433e:	4613      	mov	r3, r2
 8004340:	713b      	strb	r3, [r7, #4]
#define ASCII_TABLE_OFFSET ((uint8_t) 32)

    charToSet -= ASCII_TABLE_OFFSET;
 8004342:	797b      	ldrb	r3, [r7, #5]
 8004344:	3b20      	subs	r3, #32
 8004346:	717b      	strb	r3, [r7, #5]

    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 8004348:	2300      	movs	r3, #0
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	e049      	b.n	80043e2 <lcd_setChar+0xbe>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 800434e:	2300      	movs	r3, #0
 8004350:	73bb      	strb	r3, [r7, #14]
 8004352:	e03b      	b.n	80043cc <lcd_setChar+0xa8>
            if (Font_6x8_h[charToSet * fontSizes[size].height + columnCounter] & (1 << rowCounter))
 8004354:	797b      	ldrb	r3, [r7, #5]
 8004356:	793a      	ldrb	r2, [r7, #4]
 8004358:	4927      	ldr	r1, [pc, #156]	; (80043f8 <lcd_setChar+0xd4>)
 800435a:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 800435e:	fb02 f203 	mul.w	r2, r2, r3
 8004362:	7bfb      	ldrb	r3, [r7, #15]
 8004364:	4413      	add	r3, r2
 8004366:	4a25      	ldr	r2, [pc, #148]	; (80043fc <lcd_setChar+0xd8>)
 8004368:	5cd3      	ldrb	r3, [r2, r3]
 800436a:	461a      	mov	r2, r3
 800436c:	7bbb      	ldrb	r3, [r7, #14]
 800436e:	fa42 f303 	asr.w	r3, r2, r3
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d018      	beq.n	80043ac <lcd_setChar+0x88>
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, !contrastIsInverted);
 800437a:	79fa      	ldrb	r2, [r7, #7]
 800437c:	7bbb      	ldrb	r3, [r7, #14]
 800437e:	4413      	add	r3, r2
 8004380:	b2d8      	uxtb	r0, r3
 8004382:	79ba      	ldrb	r2, [r7, #6]
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	4413      	add	r3, r2
 8004388:	b2d9      	uxtb	r1, r3
 800438a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800438e:	2b00      	cmp	r3, #0
 8004390:	bf14      	ite	ne
 8004392:	2301      	movne	r3, #1
 8004394:	2300      	moveq	r3, #0
 8004396:	b2db      	uxtb	r3, r3
 8004398:	f083 0301 	eor.w	r3, r3, #1
 800439c:	b2db      	uxtb	r3, r3
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	f7ff ff69 	bl	800427c <lcd_setPixel>
 80043aa:	e00c      	b.n	80043c6 <lcd_setChar+0xa2>
            else
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, contrastIsInverted);
 80043ac:	79fa      	ldrb	r2, [r7, #7]
 80043ae:	7bbb      	ldrb	r3, [r7, #14]
 80043b0:	4413      	add	r3, r2
 80043b2:	b2d8      	uxtb	r0, r3
 80043b4:	79ba      	ldrb	r2, [r7, #6]
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
 80043b8:	4413      	add	r3, r2
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80043c0:	4619      	mov	r1, r3
 80043c2:	f7ff ff5b 	bl	800427c <lcd_setPixel>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 80043c6:	7bbb      	ldrb	r3, [r7, #14]
 80043c8:	3301      	adds	r3, #1
 80043ca:	73bb      	strb	r3, [r7, #14]
 80043cc:	793b      	ldrb	r3, [r7, #4]
 80043ce:	4a0a      	ldr	r2, [pc, #40]	; (80043f8 <lcd_setChar+0xd4>)
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	4413      	add	r3, r2
 80043d4:	785b      	ldrb	r3, [r3, #1]
 80043d6:	7bba      	ldrb	r2, [r7, #14]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d3bb      	bcc.n	8004354 <lcd_setChar+0x30>
    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	3301      	adds	r3, #1
 80043e0:	73fb      	strb	r3, [r7, #15]
 80043e2:	793b      	ldrb	r3, [r7, #4]
 80043e4:	4a04      	ldr	r2, [pc, #16]	; (80043f8 <lcd_setChar+0xd4>)
 80043e6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80043ea:	7bfa      	ldrb	r2, [r7, #15]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d3ae      	bcc.n	800434e <lcd_setChar+0x2a>
        }
}
 80043f0:	bf00      	nop
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd90      	pop	{r4, r7, pc}
 80043f8:	080077c0 	.word	0x080077c0
 80043fc:	08007440 	.word	0x08007440

08004400 <lcd_setString>:




void lcd_setString(uint8_t xPosition, uint8_t yPosition, char const * string, lcd_fontSize size, bool contrastIsInverted )
{
 8004400:	b590      	push	{r4, r7, lr}
 8004402:	b085      	sub	sp, #20
 8004404:	af02      	add	r7, sp, #8
 8004406:	603a      	str	r2, [r7, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	4603      	mov	r3, r0
 800440c:	71fb      	strb	r3, [r7, #7]
 800440e:	460b      	mov	r3, r1
 8004410:	71bb      	strb	r3, [r7, #6]
 8004412:	4613      	mov	r3, r2
 8004414:	717b      	strb	r3, [r7, #5]
 if ((size <= LCD_FONT_8) && (size < LCD_NUMBER_OF_FONTS))
 8004416:	797b      	ldrb	r3, [r7, #5]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d11c      	bne.n	8004456 <lcd_setString+0x56>
 800441c:	797b      	ldrb	r3, [r7, #5]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d819      	bhi.n	8004456 <lcd_setString+0x56>
 //$dnd1 bug this works only for font enum = 0. No large fonts!
        for(; *string != '\0'; string++){
 8004422:	e014      	b.n	800444e <lcd_setString+0x4e>
            lcd_setChar(xPosition, yPosition, *string, size, contrastIsInverted);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	781a      	ldrb	r2, [r3, #0]
 8004428:	797c      	ldrb	r4, [r7, #5]
 800442a:	79b9      	ldrb	r1, [r7, #6]
 800442c:	79f8      	ldrb	r0, [r7, #7]
 800442e:	7e3b      	ldrb	r3, [r7, #24]
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	4623      	mov	r3, r4
 8004434:	f7ff ff76 	bl	8004324 <lcd_setChar>
            xPosition += fontSizes[size].width;
 8004438:	797b      	ldrb	r3, [r7, #5]
 800443a:	4a09      	ldr	r2, [pc, #36]	; (8004460 <lcd_setString+0x60>)
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	4413      	add	r3, r2
 8004440:	785a      	ldrb	r2, [r3, #1]
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	4413      	add	r3, r2
 8004446:	71fb      	strb	r3, [r7, #7]
        for(; *string != '\0'; string++){
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	3301      	adds	r3, #1
 800444c:	603b      	str	r3, [r7, #0]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e6      	bne.n	8004424 <lcd_setString+0x24>
        }
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	bd90      	pop	{r4, r7, pc}
 800445e:	bf00      	nop
 8004460:	080077c0 	.word	0x080077c0

08004464 <lcd_setLine>:

// V0.4;dnd1;add;drawLine() function

void lcd_setLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t state)
{
 8004464:	b590      	push	{r4, r7, lr}
 8004466:	b08b      	sub	sp, #44	; 0x2c
 8004468:	af00      	add	r7, sp, #0
 800446a:	4604      	mov	r4, r0
 800446c:	4608      	mov	r0, r1
 800446e:	4611      	mov	r1, r2
 8004470:	461a      	mov	r2, r3
 8004472:	4623      	mov	r3, r4
 8004474:	81fb      	strh	r3, [r7, #14]
 8004476:	4603      	mov	r3, r0
 8004478:	81bb      	strh	r3, [r7, #12]
 800447a:	460b      	mov	r3, r1
 800447c:	817b      	strh	r3, [r7, #10]
 800447e:	4613      	mov	r3, r2
 8004480:	813b      	strh	r3, [r7, #8]
	int16_t i, x[2], y[2];
	float xF, yF;

	xF = x1, x[1] = 0;
 8004482:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800448e:	edc7 7a08 	vstr	s15, [r7, #32]
 8004492:	2300      	movs	r3, #0
 8004494:	837b      	strh	r3, [r7, #26]
	yF = y1, y[1] = 0;
 8004496:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044a2:	edc7 7a07 	vstr	s15, [r7, #28]
 80044a6:	2300      	movs	r3, #0
 80044a8:	82fb      	strh	r3, [r7, #22]

	x[0] = abs(x2-x1);
 80044aa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80044ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	bfb8      	it	lt
 80044b8:	425b      	neglt	r3, r3
 80044ba:	b21b      	sxth	r3, r3
 80044bc:	833b      	strh	r3, [r7, #24]
	y[0] = abs(y2-y1);
 80044be:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80044c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	bfb8      	it	lt
 80044cc:	425b      	neglt	r3, r3
 80044ce:	b21b      	sxth	r3, r3
 80044d0:	82bb      	strh	r3, [r7, #20]

	if(x[0]) x[1] = (x2-x1)/x[0];
 80044d2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <lcd_setLine+0x8c>
 80044da:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80044de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80044e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80044ec:	b21b      	sxth	r3, r3
 80044ee:	837b      	strh	r3, [r7, #26]
	if(y[0]) y[1] = (y2-y1)/y[0];
 80044f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <lcd_setLine+0xaa>
 80044f8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80044fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004506:	fb93 f3f2 	sdiv	r3, r3, r2
 800450a:	b21b      	sxth	r3, r3
 800450c:	82fb      	strh	r3, [r7, #22]

	if(x[0] >= y[0]) {
 800450e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004512:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004516:	429a      	cmp	r2, r3
 8004518:	db5f      	blt.n	80045da <lcd_setLine+0x176>
		for(i = 0; i<x[0]; i++) {
 800451a:	2300      	movs	r3, #0
 800451c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800451e:	e055      	b.n	80045cc <lcd_setLine+0x168>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 8004520:	edd7 7a08 	vldr	s15, [r7, #32]
 8004524:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452c:	db20      	blt.n	8004570 <lcd_setLine+0x10c>
 800452e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004532:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800453a:	db19      	blt.n	8004570 <lcd_setLine+0x10c>
 800453c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004544:	edc7 7a01 	vstr	s15, [r7, #4]
 8004548:	793b      	ldrb	r3, [r7, #4]
 800454a:	b2d8      	uxtb	r0, r3
 800454c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004554:	edc7 7a01 	vstr	s15, [r7, #4]
 8004558:	793b      	ldrb	r3, [r7, #4]
 800455a:	b2d9      	uxtb	r1, r3
 800455c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004560:	2b00      	cmp	r3, #0
 8004562:	bf14      	ite	ne
 8004564:	2301      	movne	r3, #1
 8004566:	2300      	moveq	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	461a      	mov	r2, r3
 800456c:	f7ff fe86 	bl	800427c <lcd_setPixel>
			xF += x[1];
 8004570:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004574:	ee07 3a90 	vmov	s15, r3
 8004578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800457c:	ed97 7a08 	vldr	s14, [r7, #32]
 8004580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004584:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += ((float)y[0]/x[0])*y[1];
 8004588:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800458c:	ee07 3a90 	vmov	s15, r3
 8004590:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004594:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004598:	ee07 3a90 	vmov	s15, r3
 800459c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80045a8:	ee07 3a90 	vmov	s15, r3
 80045ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80045b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045bc:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<x[0]; i++) {
 80045c0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3301      	adds	r3, #1
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 80045cc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80045d0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80045d4:	429a      	cmp	r2, r3
 80045d6:	dba3      	blt.n	8004520 <lcd_setLine+0xbc>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
			xF += ((float)x[0]/y[0])*x[1];
			yF += y[1];
		}
	}
}
 80045d8:	e05e      	b.n	8004698 <lcd_setLine+0x234>
		for(i = 0; i<y[0]; i++) {
 80045da:	2300      	movs	r3, #0
 80045dc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80045de:	e055      	b.n	800468c <lcd_setLine+0x228>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 80045e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80045e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ec:	db20      	blt.n	8004630 <lcd_setLine+0x1cc>
 80045ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80045f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045fa:	db19      	blt.n	8004630 <lcd_setLine+0x1cc>
 80045fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8004600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004604:	edc7 7a01 	vstr	s15, [r7, #4]
 8004608:	793b      	ldrb	r3, [r7, #4]
 800460a:	b2d8      	uxtb	r0, r3
 800460c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004614:	edc7 7a01 	vstr	s15, [r7, #4]
 8004618:	793b      	ldrb	r3, [r7, #4]
 800461a:	b2d9      	uxtb	r1, r3
 800461c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004620:	2b00      	cmp	r3, #0
 8004622:	bf14      	ite	ne
 8004624:	2301      	movne	r3, #1
 8004626:	2300      	moveq	r3, #0
 8004628:	b2db      	uxtb	r3, r3
 800462a:	461a      	mov	r2, r3
 800462c:	f7ff fe26 	bl	800427c <lcd_setPixel>
			xF += ((float)x[0]/y[0])*x[1];
 8004630:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004634:	ee07 3a90 	vmov	s15, r3
 8004638:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800463c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004640:	ee07 3a90 	vmov	s15, r3
 8004644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800464c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004650:	ee07 3a90 	vmov	s15, r3
 8004654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465c:	ed97 7a08 	vldr	s14, [r7, #32]
 8004660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004664:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += y[1];
 8004668:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800466c:	ee07 3a90 	vmov	s15, r3
 8004670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004674:	ed97 7a07 	vldr	s14, [r7, #28]
 8004678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800467c:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<y[0]; i++) {
 8004680:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004684:	b29b      	uxth	r3, r3
 8004686:	3301      	adds	r3, #1
 8004688:	b29b      	uxth	r3, r3
 800468a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800468c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004690:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8004694:	429a      	cmp	r2, r3
 8004696:	dba3      	blt.n	80045e0 <lcd_setLine+0x17c>
}
 8004698:	bf00      	nop
 800469a:	372c      	adds	r7, #44	; 0x2c
 800469c:	46bd      	mov	sp, r7
 800469e:	bd90      	pop	{r4, r7, pc}

080046a0 <lcd_show>:

void lcd_show(void){
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 80046a6:	2300      	movs	r3, #0
 80046a8:	71fb      	strb	r3, [r7, #7]
 80046aa:	e022      	b.n	80046f2 <lcd_show+0x52>
			  //$dnd added (instruction)
        sendInstruction((instruction) (PAGE_ADDRESS_SET_0 + pageIndex));
 80046ac:	79fb      	ldrb	r3, [r7, #7]
 80046ae:	3b50      	subs	r3, #80	; 0x50
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff fd7a 	bl	80041ac <sendInstruction>
        sendInstruction(COLUMN_ADDRESS_SET_BIT);
 80046b8:	2010      	movs	r0, #16
 80046ba:	f7ff fd77 	bl	80041ac <sendInstruction>
        sendInstruction(BOOSTER_RATIO_SET);
 80046be:	2000      	movs	r0, #0
 80046c0:	f7ff fd74 	bl	80041ac <sendInstruction>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 80046c4:	2300      	movs	r3, #0
 80046c6:	71bb      	strb	r3, [r7, #6]
 80046c8:	e00c      	b.n	80046e4 <lcd_show+0x44>
            sendData(displayBuffer[rowIndex].pageSet[pageIndex]);
 80046ca:	79ba      	ldrb	r2, [r7, #6]
 80046cc:	79fb      	ldrb	r3, [r7, #7]
 80046ce:	490c      	ldr	r1, [pc, #48]	; (8004700 <lcd_show+0x60>)
 80046d0:	0092      	lsls	r2, r2, #2
 80046d2:	440a      	add	r2, r1
 80046d4:	4413      	add	r3, r2
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff fd81 	bl	80041e0 <sendData>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 80046de:	79bb      	ldrb	r3, [r7, #6]
 80046e0:	3301      	adds	r3, #1
 80046e2:	71bb      	strb	r3, [r7, #6]
 80046e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	daee      	bge.n	80046ca <lcd_show+0x2a>
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	3301      	adds	r3, #1
 80046f0:	71fb      	strb	r3, [r7, #7]
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d9d9      	bls.n	80046ac <lcd_show+0xc>
    }
}
 80046f8:	bf00      	nop
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	20000210 	.word	0x20000210

08004704 <HAL_TIM_PeriodElapsedCallback>:
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
	}
}

// timer interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6){
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
	update_volume();
 800470c:	f000 f894 	bl	8004838 <update_volume>
	update_bpm();
 8004710:	f000 f8ca 	bl	80048a8 <update_bpm>
	update_display();
 8004714:	f000 f90e 	bl	8004934 <update_display>
//	beat_machine();
}
 8004718:	bf00      	nop
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <beep_and_blink>:

// other functions
void beep_and_blink(int duration, int pitch, float volume){
 8004720:	b5b0      	push	{r4, r5, r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	ed87 0a01 	vstr	s0, [r7, #4]
	// calculate prescaler
	uint32_t clockspeed = 16000000;
 800472e:	4b3c      	ldr	r3, [pc, #240]	; (8004820 <beep_and_blink+0x100>)
 8004730:	61fb      	str	r3, [r7, #28]
	uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim2);
 8004732:	4b3c      	ldr	r3, [pc, #240]	; (8004824 <beep_and_blink+0x104>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	61bb      	str	r3, [r7, #24]
	uint32_t prescaler = clockspeed / (pitch * period);
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	fb02 f303 	mul.w	r3, r2, r3
 8004742:	69fa      	ldr	r2, [r7, #28]
 8004744:	fbb2 f3f3 	udiv	r3, r2, r3
 8004748:	617b      	str	r3, [r7, #20]

	// calculate duty cycle
	uint32_t dc = 0;
 800474a:	2300      	movs	r3, #0
 800474c:	613b      	str	r3, [r7, #16]
	dc = ((float)volume/(float)MAX_VOL * 0.1) * period;
 800474e:	4b36      	ldr	r3, [pc, #216]	; (8004828 <beep_and_blink+0x108>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800475a:	ed97 7a01 	vldr	s14, [r7, #4]
 800475e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004762:	ee16 0a90 	vmov	r0, s13
 8004766:	f7fb ff0f 	bl	8000588 <__aeabi_f2d>
 800476a:	a32b      	add	r3, pc, #172	; (adr r3, 8004818 <beep_and_blink+0xf8>)
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	f7fb ff62 	bl	8000638 <__aeabi_dmul>
 8004774:	4603      	mov	r3, r0
 8004776:	460c      	mov	r4, r1
 8004778:	4625      	mov	r5, r4
 800477a:	461c      	mov	r4, r3
 800477c:	69b8      	ldr	r0, [r7, #24]
 800477e:	f7fb fee1 	bl	8000544 <__aeabi_ui2d>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4620      	mov	r0, r4
 8004788:	4629      	mov	r1, r5
 800478a:	f7fb ff55 	bl	8000638 <__aeabi_dmul>
 800478e:	4603      	mov	r3, r0
 8004790:	460c      	mov	r4, r1
 8004792:	4618      	mov	r0, r3
 8004794:	4621      	mov	r1, r4
 8004796:	f7fc fa27 	bl	8000be8 <__aeabi_d2uiz>
 800479a:	4603      	mov	r3, r0
 800479c:	613b      	str	r3, [r7, #16]

	// set prescaler
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800479e:	2108      	movs	r1, #8
 80047a0:	4820      	ldr	r0, [pc, #128]	; (8004824 <beep_and_blink+0x104>)
 80047a2:	f7fe fbeb 	bl	8002f7c <HAL_TIM_PWM_Stop>
	MX_TIM2_Init(prescaler);
 80047a6:	6978      	ldr	r0, [r7, #20]
 80047a8:	f000 fc60 	bl	800506c <MX_TIM2_Init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80047ac:	2108      	movs	r1, #8
 80047ae:	481d      	ldr	r0, [pc, #116]	; (8004824 <beep_and_blink+0x104>)
 80047b0:	f7fe fba6 	bl	8002f00 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, dc);
 80047b4:	4b1b      	ldr	r3, [pc, #108]	; (8004824 <beep_and_blink+0x104>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80047bc:	2200      	movs	r2, #0
 80047be:	2110      	movs	r1, #16
 80047c0:	481a      	ldr	r0, [pc, #104]	; (800482c <beep_and_blink+0x10c>)
 80047c2:	f7fd fae5 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80047c6:	2200      	movs	r2, #0
 80047c8:	2180      	movs	r1, #128	; 0x80
 80047ca:	4819      	ldr	r0, [pc, #100]	; (8004830 <beep_and_blink+0x110>)
 80047cc:	f7fd fae0 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80047d0:	2200      	movs	r2, #0
 80047d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047d6:	4817      	ldr	r0, [pc, #92]	; (8004834 <beep_and_blink+0x114>)
 80047d8:	f7fd fada 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_Delay(duration);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fc fc14 	bl	800100c <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80047e4:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <beep_and_blink+0x104>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2200      	movs	r2, #0
 80047ea:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80047ec:	2201      	movs	r2, #1
 80047ee:	2110      	movs	r1, #16
 80047f0:	480e      	ldr	r0, [pc, #56]	; (800482c <beep_and_blink+0x10c>)
 80047f2:	f7fd facd 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80047f6:	2201      	movs	r2, #1
 80047f8:	2180      	movs	r1, #128	; 0x80
 80047fa:	480d      	ldr	r0, [pc, #52]	; (8004830 <beep_and_blink+0x110>)
 80047fc:	f7fd fac8 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8004800:	2201      	movs	r2, #1
 8004802:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004806:	480b      	ldr	r0, [pc, #44]	; (8004834 <beep_and_blink+0x114>)
 8004808:	f7fd fac2 	bl	8001d90 <HAL_GPIO_WritePin>
}
 800480c:	bf00      	nop
 800480e:	3720      	adds	r7, #32
 8004810:	46bd      	mov	sp, r7
 8004812:	bdb0      	pop	{r4, r5, r7, pc}
 8004814:	f3af 8000 	nop.w
 8004818:	9999999a 	.word	0x9999999a
 800481c:	3fb99999 	.word	0x3fb99999
 8004820:	00f42400 	.word	0x00f42400
 8004824:	20000a5c 	.word	0x20000a5c
 8004828:	20000014 	.word	0x20000014
 800482c:	40020400 	.word	0x40020400
 8004830:	40020800 	.word	0x40020800
 8004834:	40020000 	.word	0x40020000

08004838 <update_volume>:


void update_volume(){
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
	// read analog signal
	HAL_ADC_Start(&hadc1);
 800483c:	4815      	ldr	r0, [pc, #84]	; (8004894 <update_volume+0x5c>)
 800483e:	f7fc fc4b 	bl	80010d8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8004842:	2132      	movs	r1, #50	; 0x32
 8004844:	4813      	ldr	r0, [pc, #76]	; (8004894 <update_volume+0x5c>)
 8004846:	f7fc fd40 	bl	80012ca <HAL_ADC_PollForConversion>
	pot1_raw = HAL_ADC_GetValue(&hadc1);
 800484a:	4812      	ldr	r0, [pc, #72]	; (8004894 <update_volume+0x5c>)
 800484c:	f7fc fdc1 	bl	80013d2 <HAL_ADC_GetValue>
 8004850:	4602      	mov	r2, r0
 8004852:	4b11      	ldr	r3, [pc, #68]	; (8004898 <update_volume+0x60>)
 8004854:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8004856:	480f      	ldr	r0, [pc, #60]	; (8004894 <update_volume+0x5c>)
 8004858:	f7fc fd04 	bl	8001264 <HAL_ADC_Stop>

	// update value
	vol = ((float)pot1_raw/(float)ADC_MAX) * (float)MAX_VOL;
 800485c:	4b0e      	ldr	r3, [pc, #56]	; (8004898 <update_volume+0x60>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	ee07 3a90 	vmov	s15, r3
 8004864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004868:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800489c <update_volume+0x64>
 800486c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004874:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <update_volume+0x68>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	ee07 3a90 	vmov	s15, r3
 800487c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004884:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004888:	ee17 2a90 	vmov	r2, s15
 800488c:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <update_volume+0x6c>)
 800488e:	601a      	str	r2, [r3, #0]

}
 8004890:	bf00      	nop
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20000474 	.word	0x20000474
 8004898:	20000414 	.word	0x20000414
 800489c:	00000fff 	.word	0x00000fff
 80048a0:	20000014 	.word	0x20000014
 80048a4:	20000410 	.word	0x20000410

080048a8 <update_bpm>:

void update_bpm(){
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
	// read analog signal
	HAL_ADC_Start(&hadc2);
 80048ac:	481b      	ldr	r0, [pc, #108]	; (800491c <update_bpm+0x74>)
 80048ae:	f7fc fc13 	bl	80010d8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 50);
 80048b2:	2132      	movs	r1, #50	; 0x32
 80048b4:	4819      	ldr	r0, [pc, #100]	; (800491c <update_bpm+0x74>)
 80048b6:	f7fc fd08 	bl	80012ca <HAL_ADC_PollForConversion>
	pot2_raw = HAL_ADC_GetValue(&hadc2);
 80048ba:	4818      	ldr	r0, [pc, #96]	; (800491c <update_bpm+0x74>)
 80048bc:	f7fc fd89 	bl	80013d2 <HAL_ADC_GetValue>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b17      	ldr	r3, [pc, #92]	; (8004920 <update_bpm+0x78>)
 80048c4:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 80048c6:	4815      	ldr	r0, [pc, #84]	; (800491c <update_bpm+0x74>)
 80048c8:	f7fc fccc 	bl	8001264 <HAL_ADC_Stop>

	// update value
	bpm = MIN_BPM + (float)pot2_raw/(float)ADC_MAX * (float)(MAX_BPM - MIN_BPM);
 80048cc:	4b15      	ldr	r3, [pc, #84]	; (8004924 <update_bpm+0x7c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	ee07 3a90 	vmov	s15, r3
 80048d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048d8:	4b11      	ldr	r3, [pc, #68]	; (8004920 <update_bpm+0x78>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	ee07 3a90 	vmov	s15, r3
 80048e0:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80048e4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8004928 <update_bpm+0x80>
 80048e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ec:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80048f0:	4b0e      	ldr	r3, [pc, #56]	; (800492c <update_bpm+0x84>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <update_bpm+0x7c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004902:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800490a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800490e:	ee17 2a90 	vmov	r2, s15
 8004912:	4b07      	ldr	r3, [pc, #28]	; (8004930 <update_bpm+0x88>)
 8004914:	601a      	str	r2, [r3, #0]
}
 8004916:	bf00      	nop
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	2000042c 	.word	0x2000042c
 8004920:	20000418 	.word	0x20000418
 8004924:	2000000c 	.word	0x2000000c
 8004928:	00000fff 	.word	0x00000fff
 800492c:	20000010 	.word	0x20000010
 8004930:	20000008 	.word	0x20000008

08004934 <update_display>:

void update_display(){
 8004934:	b590      	push	{r4, r7, lr}
 8004936:	b087      	sub	sp, #28
 8004938:	af02      	add	r7, sp, #8
	lcd_clear();
 800493a:	f7ff fcd9 	bl	80042f0 <lcd_clear>

	// add some lines
	lcd_setLine(0,0,0,31,1);
 800493e:	2301      	movs	r3, #1
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	231f      	movs	r3, #31
 8004944:	2200      	movs	r2, #0
 8004946:	2100      	movs	r1, #0
 8004948:	2000      	movs	r0, #0
 800494a:	f7ff fd8b 	bl	8004464 <lcd_setLine>
	lcd_setLine(48,0,48,31,1);
 800494e:	2301      	movs	r3, #1
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	231f      	movs	r3, #31
 8004954:	2230      	movs	r2, #48	; 0x30
 8004956:	2100      	movs	r1, #0
 8004958:	2030      	movs	r0, #48	; 0x30
 800495a:	f7ff fd83 	bl	8004464 <lcd_setLine>
	lcd_setLine(127,0,127,31,1);
 800495e:	2301      	movs	r3, #1
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	231f      	movs	r3, #31
 8004964:	227f      	movs	r2, #127	; 0x7f
 8004966:	2100      	movs	r1, #0
 8004968:	207f      	movs	r0, #127	; 0x7f
 800496a:	f7ff fd7b 	bl	8004464 <lcd_setLine>
	lcd_setLine(0,15,127,15,1);
 800496e:	2301      	movs	r3, #1
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	230f      	movs	r3, #15
 8004974:	227f      	movs	r2, #127	; 0x7f
 8004976:	210f      	movs	r1, #15
 8004978:	2000      	movs	r0, #0
 800497a:	f7ff fd73 	bl	8004464 <lcd_setLine>

	// display volume
	sprintf((char*)vol_tbuff,"vol %d", vol);
 800497e:	4b55      	ldr	r3, [pc, #340]	; (8004ad4 <update_display+0x1a0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	4954      	ldr	r1, [pc, #336]	; (8004ad8 <update_display+0x1a4>)
 8004986:	4855      	ldr	r0, [pc, #340]	; (8004adc <update_display+0x1a8>)
 8004988:	f001 f94a 	bl	8005c20 <siprintf>
	lcd_setString(4,4,(const char*)vol_tbuff,LCD_FONT_8,false);
 800498c:	2300      	movs	r3, #0
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	2300      	movs	r3, #0
 8004992:	4a52      	ldr	r2, [pc, #328]	; (8004adc <update_display+0x1a8>)
 8004994:	2104      	movs	r1, #4
 8004996:	2004      	movs	r0, #4
 8004998:	f7ff fd32 	bl	8004400 <lcd_setString>

	// display bpm
	sprintf((char*)bpm_tbuff,"%d bpm", bpm);
 800499c:	4b50      	ldr	r3, [pc, #320]	; (8004ae0 <update_display+0x1ac>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	461a      	mov	r2, r3
 80049a2:	4950      	ldr	r1, [pc, #320]	; (8004ae4 <update_display+0x1b0>)
 80049a4:	4850      	ldr	r0, [pc, #320]	; (8004ae8 <update_display+0x1b4>)
 80049a6:	f001 f93b 	bl	8005c20 <siprintf>
	lcd_setString(4,20,(const char*)bpm_tbuff, LCD_FONT_8,false);
 80049aa:	2300      	movs	r3, #0
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	2300      	movs	r3, #0
 80049b0:	4a4d      	ldr	r2, [pc, #308]	; (8004ae8 <update_display+0x1b4>)
 80049b2:	2114      	movs	r1, #20
 80049b4:	2004      	movs	r0, #4
 80049b6:	f7ff fd23 	bl	8004400 <lcd_setString>

	// display mode
	if (op_mode == STANDARD){
 80049ba:	4b4c      	ldr	r3, [pc, #304]	; (8004aec <update_display+0x1b8>)
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d106      	bne.n	80049d0 <update_display+0x9c>
		sprintf((char*)mode_tbuff,"STANDARD MODE");
 80049c2:	4a4b      	ldr	r2, [pc, #300]	; (8004af0 <update_display+0x1bc>)
 80049c4:	4b4b      	ldr	r3, [pc, #300]	; (8004af4 <update_display+0x1c0>)
 80049c6:	4614      	mov	r4, r2
 80049c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049ca:	c407      	stmia	r4!, {r0, r1, r2}
 80049cc:	8023      	strh	r3, [r4, #0]
 80049ce:	e009      	b.n	80049e4 <update_display+0xb0>
	}else if(op_mode == PRONOUNCED){
 80049d0:	4b46      	ldr	r3, [pc, #280]	; (8004aec <update_display+0x1b8>)
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d105      	bne.n	80049e4 <update_display+0xb0>
		sprintf((char*)mode_tbuff,"PRONOUNCED MODE");
 80049d8:	4a45      	ldr	r2, [pc, #276]	; (8004af0 <update_display+0x1bc>)
 80049da:	4b47      	ldr	r3, [pc, #284]	; (8004af8 <update_display+0x1c4>)
 80049dc:	4614      	mov	r4, r2
 80049de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
	lcd_setString(50,4,(const char*)mode_tbuff, LCD_FONT_8,false);
 80049e4:	2300      	movs	r3, #0
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	2300      	movs	r3, #0
 80049ea:	4a41      	ldr	r2, [pc, #260]	; (8004af0 <update_display+0x1bc>)
 80049ec:	2104      	movs	r1, #4
 80049ee:	2032      	movs	r0, #50	; 0x32
 80049f0:	f7ff fd06 	bl	8004400 <lcd_setString>

	// display beats
	int min_dist = 55;
 80049f4:	2337      	movs	r3, #55	; 0x37
 80049f6:	60bb      	str	r3, [r7, #8]
	int max_dist = 140;
 80049f8:	238c      	movs	r3, #140	; 0x8c
 80049fa:	607b      	str	r3, [r7, #4]
	int pos = 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	603b      	str	r3, [r7, #0]
	for (int b = 0; b < beats_per_rythm; ++b){
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	e02d      	b.n	8004a62 <update_display+0x12e>
		pos = min_dist + (float)b / (float)beats_per_rythm * (max_dist - min_dist);
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	ee07 3a90 	vmov	s15, r3
 8004a0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004a1a:	4b38      	ldr	r3, [pc, #224]	; (8004afc <update_display+0x1c8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a26:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	ee07 3a90 	vmov	s15, r3
 8004a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a44:	ee17 3a90 	vmov	r3, s15
 8004a48:	603b      	str	r3, [r7, #0]
		lcd_setString(pos, 18, "o", LCD_FONT_8,false);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	b2d8      	uxtb	r0, r3
 8004a4e:	2300      	movs	r3, #0
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	2300      	movs	r3, #0
 8004a54:	4a2a      	ldr	r2, [pc, #168]	; (8004b00 <update_display+0x1cc>)
 8004a56:	2112      	movs	r1, #18
 8004a58:	f7ff fcd2 	bl	8004400 <lcd_setString>
	for (int b = 0; b < beats_per_rythm; ++b){
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	4b26      	ldr	r3, [pc, #152]	; (8004afc <update_display+0x1c8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	dbcc      	blt.n	8004a06 <update_display+0xd2>
	}

	// display beat indicator
	pos = min_dist + (float)(beat-1) / (float)beats_per_rythm * (max_dist - min_dist);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a76:	4b23      	ldr	r3, [pc, #140]	; (8004b04 <update_display+0x1d0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	ee07 3a90 	vmov	s15, r3
 8004a80:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004a84:	4b1d      	ldr	r3, [pc, #116]	; (8004afc <update_display+0x1c8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	ee07 3a90 	vmov	s15, r3
 8004a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a90:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004aaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004aae:	ee17 3a90 	vmov	r3, s15
 8004ab2:	603b      	str	r3, [r7, #0]
	lcd_setString(pos, 25, "*", LCD_FONT_8,false);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	b2d8      	uxtb	r0, r3
 8004ab8:	2300      	movs	r3, #0
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	2300      	movs	r3, #0
 8004abe:	4a12      	ldr	r2, [pc, #72]	; (8004b08 <update_display+0x1d4>)
 8004ac0:	2119      	movs	r1, #25
 8004ac2:	f7ff fc9d 	bl	8004400 <lcd_setString>

	lcd_show();
 8004ac6:	f7ff fdeb 	bl	80046a0 <lcd_show>

}
 8004aca:	bf00      	nop
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd90      	pop	{r4, r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20000410 	.word	0x20000410
 8004ad8:	080073f8 	.word	0x080073f8
 8004adc:	200006a4 	.word	0x200006a4
 8004ae0:	20000008 	.word	0x20000008
 8004ae4:	08007400 	.word	0x08007400
 8004ae8:	20000834 	.word	0x20000834
 8004aec:	20000510 	.word	0x20000510
 8004af0:	20000514 	.word	0x20000514
 8004af4:	08007408 	.word	0x08007408
 8004af8:	08007418 	.word	0x08007418
 8004afc:	2000001c 	.word	0x2000001c
 8004b00:	08007428 	.word	0x08007428
 8004b04:	20000018 	.word	0x20000018
 8004b08:	0800742c 	.word	0x0800742c

08004b0c <beat_machine>:

void beat_machine(){
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
	if (op_mode == STANDARD){
 8004b10:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <beat_machine+0x24>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d102      	bne.n	8004b1e <beat_machine+0x12>
		standard_beatroutine();
 8004b18:	f000 f80c 	bl	8004b34 <standard_beatroutine>
	}else if(op_mode == PRONOUNCED){
		offbeat_beatroutine();
	}
}
 8004b1c:	e005      	b.n	8004b2a <beat_machine+0x1e>
	}else if(op_mode == PRONOUNCED){
 8004b1e:	4b04      	ldr	r3, [pc, #16]	; (8004b30 <beat_machine+0x24>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <beat_machine+0x1e>
		offbeat_beatroutine();
 8004b26:	f000 f85b 	bl	8004be0 <offbeat_beatroutine>
}
 8004b2a:	bf00      	nop
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000510 	.word	0x20000510

08004b34 <standard_beatroutine>:

void standard_beatroutine(){
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
	int beep_time = 50;
 8004b3a:	2332      	movs	r3, #50	; 0x32
 8004b3c:	607b      	str	r3, [r7, #4]
	if (beat < beats_per_rythm){
 8004b3e:	4b22      	ldr	r3, [pc, #136]	; (8004bc8 <standard_beatroutine+0x94>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4b22      	ldr	r3, [pc, #136]	; (8004bcc <standard_beatroutine+0x98>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	da12      	bge.n	8004b70 <standard_beatroutine+0x3c>
		beep_and_blink(beep_time, 1000, vol);
 8004b4a:	4b21      	ldr	r3, [pc, #132]	; (8004bd0 <standard_beatroutine+0x9c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b56:	eeb0 0a67 	vmov.f32	s0, s15
 8004b5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff fdde 	bl	8004720 <beep_and_blink>
		beat += 1;
 8004b64:	4b18      	ldr	r3, [pc, #96]	; (8004bc8 <standard_beatroutine+0x94>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	4a17      	ldr	r2, [pc, #92]	; (8004bc8 <standard_beatroutine+0x94>)
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	e00f      	b.n	8004b90 <standard_beatroutine+0x5c>
	}else{
		beep_and_blink(beep_time, 1000, vol);
 8004b70:	4b17      	ldr	r3, [pc, #92]	; (8004bd0 <standard_beatroutine+0x9c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	ee07 3a90 	vmov	s15, r3
 8004b78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8004b80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7ff fdcb 	bl	8004720 <beep_and_blink>
		beat = 1;
 8004b8a:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <standard_beatroutine+0x94>)
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]
	}
	HAL_Delay((int)(1000/((float)bpm/60))-beep_time);
 8004b90:	4b10      	ldr	r3, [pc, #64]	; (8004bd4 <standard_beatroutine+0xa0>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	ee07 3a90 	vmov	s15, r3
 8004b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b9c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8004bd8 <standard_beatroutine+0xa4>
 8004ba0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004ba4:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8004bdc <standard_beatroutine+0xa8>
 8004ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bb0:	ee17 2a90 	vmov	r2, s15
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fc fa27 	bl	800100c <HAL_Delay>
}
 8004bbe:	bf00      	nop
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000018 	.word	0x20000018
 8004bcc:	2000001c 	.word	0x2000001c
 8004bd0:	20000410 	.word	0x20000410
 8004bd4:	20000008 	.word	0x20000008
 8004bd8:	42700000 	.word	0x42700000
 8004bdc:	447a0000 	.word	0x447a0000

08004be0 <offbeat_beatroutine>:

void offbeat_beatroutine(){
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
	int beep_time = 50;
 8004be6:	2332      	movs	r3, #50	; 0x32
 8004be8:	607b      	str	r3, [r7, #4]
	if (beat < beats_per_rythm){
 8004bea:	4b22      	ldr	r3, [pc, #136]	; (8004c74 <offbeat_beatroutine+0x94>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	4b22      	ldr	r3, [pc, #136]	; (8004c78 <offbeat_beatroutine+0x98>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	da12      	bge.n	8004c1c <offbeat_beatroutine+0x3c>
		beat += 1;
 8004bf6:	4b1f      	ldr	r3, [pc, #124]	; (8004c74 <offbeat_beatroutine+0x94>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	4a1d      	ldr	r2, [pc, #116]	; (8004c74 <offbeat_beatroutine+0x94>)
 8004bfe:	6013      	str	r3, [r2, #0]
		beep_and_blink(beep_time, 1000, vol);
 8004c00:	4b1e      	ldr	r3, [pc, #120]	; (8004c7c <offbeat_beatroutine+0x9c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	ee07 3a90 	vmov	s15, r3
 8004c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8004c10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff fd83 	bl	8004720 <beep_and_blink>
 8004c1a:	e00f      	b.n	8004c3c <offbeat_beatroutine+0x5c>
	}else{
		beat = 1;
 8004c1c:	4b15      	ldr	r3, [pc, #84]	; (8004c74 <offbeat_beatroutine+0x94>)
 8004c1e:	2201      	movs	r2, #1
 8004c20:	601a      	str	r2, [r3, #0]
		beep_and_blink(beep_time, 2000, vol);
 8004c22:	4b16      	ldr	r3, [pc, #88]	; (8004c7c <offbeat_beatroutine+0x9c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8004c32:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7ff fd72 	bl	8004720 <beep_and_blink>
	}
	HAL_Delay((int)(1000/((float)bpm/60))-beep_time);
 8004c3c:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <offbeat_beatroutine+0xa0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	ee07 3a90 	vmov	s15, r3
 8004c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c48:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8004c84 <offbeat_beatroutine+0xa4>
 8004c4c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004c50:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8004c88 <offbeat_beatroutine+0xa8>
 8004c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c5c:	ee17 2a90 	vmov	r2, s15
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fc f9d1 	bl	800100c <HAL_Delay>
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000018 	.word	0x20000018
 8004c78:	2000001c 	.word	0x2000001c
 8004c7c:	20000410 	.word	0x20000410
 8004c80:	20000008 	.word	0x20000008
 8004c84:	42700000 	.word	0x42700000
 8004c88:	447a0000 	.word	0x447a0000

08004c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004c90:	f7fc f94a 	bl	8000f28 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004c94:	f000 f838 	bl	8004d08 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004c98:	f7ff f8f6 	bl	8003e88 <MX_GPIO_Init>
	MX_SPI1_Init();
 8004c9c:	f000 f8a6 	bl	8004dec <MX_SPI1_Init>
	MX_I2C1_Init();
 8004ca0:	f7ff f9ce 	bl	8004040 <MX_I2C1_Init>
	MX_TIM2_Init(100);
 8004ca4:	2064      	movs	r0, #100	; 0x64
 8004ca6:	f000 f9e1 	bl	800506c <MX_TIM2_Init>
	MX_TIM6_Init();
 8004caa:	f000 fa57 	bl	800515c <MX_TIM6_Init>
	MX_ADC1_Init();
 8004cae:	f7fe ffd3 	bl	8003c58 <MX_ADC1_Init>
	MX_ADC2_Init();
 8004cb2:	f7ff f823 	bl	8003cfc <MX_ADC2_Init>

	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	2110      	movs	r1, #16
 8004cba:	480e      	ldr	r0, [pc, #56]	; (8004cf4 <main+0x68>)
 8004cbc:	f7fd f868 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	2180      	movs	r1, #128	; 0x80
 8004cc4:	480c      	ldr	r0, [pc, #48]	; (8004cf8 <main+0x6c>)
 8004cc6:	f7fd f863 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cd0:	480a      	ldr	r0, [pc, #40]	; (8004cfc <main+0x70>)
 8004cd2:	f7fd f85d 	bl	8001d90 <HAL_GPIO_WritePin>

	// Initialise LCD and show "Welcome" top/left justified
	sendData(0xA5);
 8004cd6:	20a5      	movs	r0, #165	; 0xa5
 8004cd8:	f7ff fa82 	bl	80041e0 <sendData>
	lcd_init();
 8004cdc:	f7ff faad 	bl	800423a <lcd_init>


	// start PWM and timer interrupt
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004ce0:	2108      	movs	r1, #8
 8004ce2:	4807      	ldr	r0, [pc, #28]	; (8004d00 <main+0x74>)
 8004ce4:	f7fe f90c 	bl	8002f00 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim6);
 8004ce8:	4806      	ldr	r0, [pc, #24]	; (8004d04 <main+0x78>)
 8004cea:	f7fe f8b0 	bl	8002e4e <HAL_TIM_Base_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		beat_machine();
 8004cee:	f7ff ff0d 	bl	8004b0c <beat_machine>
 8004cf2:	e7fc      	b.n	8004cee <main+0x62>
 8004cf4:	40020400 	.word	0x40020400
 8004cf8:	40020800 	.word	0x40020800
 8004cfc:	40020000 	.word	0x40020000
 8004d00:	20000a5c 	.word	0x20000a5c
 8004d04:	20000a1c 	.word	0x20000a1c

08004d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b094      	sub	sp, #80	; 0x50
 8004d0c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d0e:	f107 031c 	add.w	r3, r7, #28
 8004d12:	2234      	movs	r2, #52	; 0x34
 8004d14:	2100      	movs	r1, #0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fb1e 	bl	8005358 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d1c:	f107 0308 	add.w	r3, r7, #8
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	605a      	str	r2, [r3, #4]
 8004d26:	609a      	str	r2, [r3, #8]
 8004d28:	60da      	str	r2, [r3, #12]
 8004d2a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	607b      	str	r3, [r7, #4]
 8004d30:	4b23      	ldr	r3, [pc, #140]	; (8004dc0 <SystemClock_Config+0xb8>)
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	4a22      	ldr	r2, [pc, #136]	; (8004dc0 <SystemClock_Config+0xb8>)
 8004d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8004d3c:	4b20      	ldr	r3, [pc, #128]	; (8004dc0 <SystemClock_Config+0xb8>)
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d44:	607b      	str	r3, [r7, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004d48:	2300      	movs	r3, #0
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	4b1d      	ldr	r3, [pc, #116]	; (8004dc4 <SystemClock_Config+0xbc>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004d54:	4a1b      	ldr	r2, [pc, #108]	; (8004dc4 <SystemClock_Config+0xbc>)
 8004d56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	4b19      	ldr	r3, [pc, #100]	; (8004dc4 <SystemClock_Config+0xbc>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d64:	603b      	str	r3, [r7, #0]
 8004d66:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004d70:	2310      	movs	r3, #16
 8004d72:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004d74:	2300      	movs	r3, #0
 8004d76:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d78:	f107 031c 	add.w	r3, r7, #28
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fd fb9d 	bl	80024bc <HAL_RCC_OscConfig>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <SystemClock_Config+0x84>
	{
	Error_Handler();
 8004d88:	f000 f81e 	bl	8004dc8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d8c:	230f      	movs	r3, #15
 8004d8e:	60bb      	str	r3, [r7, #8]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d94:	2300      	movs	r3, #0
 8004d96:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004da0:	f107 0308 	add.w	r3, r7, #8
 8004da4:	2100      	movs	r1, #0
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fd f934 	bl	8002014 <HAL_RCC_ClockConfig>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <SystemClock_Config+0xae>
	{
	Error_Handler();
 8004db2:	f000 f809 	bl	8004dc8 <Error_Handler>
	}
}
 8004db6:	bf00      	nop
 8004db8:	3750      	adds	r7, #80	; 0x50
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	40007000 	.word	0x40007000

08004dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	lcd_setString(4,16,"	ERROR OCCURED	",LCD_FONT_8,false);
 8004dce:	2300      	movs	r3, #0
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	4a04      	ldr	r2, [pc, #16]	; (8004de8 <Error_Handler+0x20>)
 8004dd6:	2110      	movs	r1, #16
 8004dd8:	2004      	movs	r0, #4
 8004dda:	f7ff fb11 	bl	8004400 <lcd_setString>
	lcd_show();
 8004dde:	f7ff fc5f 	bl	80046a0 <lcd_show>
	/* USER CODE END Error_Handler_Debug */
}
 8004de2:	bf00      	nop
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	08007430 	.word	0x08007430

08004dec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8004df0:	4b17      	ldr	r3, [pc, #92]	; (8004e50 <MX_SPI1_Init+0x64>)
 8004df2:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <MX_SPI1_Init+0x68>)
 8004df4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004df6:	4b16      	ldr	r3, [pc, #88]	; (8004e50 <MX_SPI1_Init+0x64>)
 8004df8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004dfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004dfe:	4b14      	ldr	r3, [pc, #80]	; (8004e50 <MX_SPI1_Init+0x64>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e04:	4b12      	ldr	r3, [pc, #72]	; (8004e50 <MX_SPI1_Init+0x64>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e0a:	4b11      	ldr	r3, [pc, #68]	; (8004e50 <MX_SPI1_Init+0x64>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004e10:	4b0f      	ldr	r3, [pc, #60]	; (8004e50 <MX_SPI1_Init+0x64>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004e16:	4b0e      	ldr	r3, [pc, #56]	; (8004e50 <MX_SPI1_Init+0x64>)
 8004e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004e1e:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <MX_SPI1_Init+0x64>)
 8004e20:	2210      	movs	r2, #16
 8004e22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004e24:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <MX_SPI1_Init+0x64>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004e2a:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <MX_SPI1_Init+0x64>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e30:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <MX_SPI1_Init+0x64>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004e36:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <MX_SPI1_Init+0x64>)
 8004e38:	220a      	movs	r2, #10
 8004e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004e3c:	4804      	ldr	r0, [pc, #16]	; (8004e50 <MX_SPI1_Init+0x64>)
 8004e3e:	f7fd fd97 	bl	8002970 <HAL_SPI_Init>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004e48:	f7ff ffbe 	bl	8004dc8 <Error_Handler>
  }

}
 8004e4c:	bf00      	nop
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	200009c4 	.word	0x200009c4
 8004e54:	40013000 	.word	0x40013000

08004e58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	; 0x28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e60:	f107 0314 	add.w	r3, r7, #20
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	605a      	str	r2, [r3, #4]
 8004e6a:	609a      	str	r2, [r3, #8]
 8004e6c:	60da      	str	r2, [r3, #12]
 8004e6e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a19      	ldr	r2, [pc, #100]	; (8004edc <HAL_SPI_MspInit+0x84>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d12b      	bne.n	8004ed2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	4b18      	ldr	r3, [pc, #96]	; (8004ee0 <HAL_SPI_MspInit+0x88>)
 8004e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e82:	4a17      	ldr	r2, [pc, #92]	; (8004ee0 <HAL_SPI_MspInit+0x88>)
 8004e84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e88:	6453      	str	r3, [r2, #68]	; 0x44
 8004e8a:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <HAL_SPI_MspInit+0x88>)
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	4b11      	ldr	r3, [pc, #68]	; (8004ee0 <HAL_SPI_MspInit+0x88>)
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	4a10      	ldr	r2, [pc, #64]	; (8004ee0 <HAL_SPI_MspInit+0x88>)
 8004ea0:	f043 0301 	orr.w	r3, r3, #1
 8004ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ea6:	4b0e      	ldr	r3, [pc, #56]	; (8004ee0 <HAL_SPI_MspInit+0x88>)
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 8004eb2:	23a0      	movs	r3, #160	; 0xa0
 8004eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004ec2:	2305      	movs	r3, #5
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ec6:	f107 0314 	add.w	r3, r7, #20
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4805      	ldr	r0, [pc, #20]	; (8004ee4 <HAL_SPI_MspInit+0x8c>)
 8004ece:	f7fc fdcd 	bl	8001a6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004ed2:	bf00      	nop
 8004ed4:	3728      	adds	r7, #40	; 0x28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	40013000 	.word	0x40013000
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	40020000 	.word	0x40020000

08004ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eee:	2300      	movs	r3, #0
 8004ef0:	607b      	str	r3, [r7, #4]
 8004ef2:	4b10      	ldr	r3, [pc, #64]	; (8004f34 <HAL_MspInit+0x4c>)
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef6:	4a0f      	ldr	r2, [pc, #60]	; (8004f34 <HAL_MspInit+0x4c>)
 8004ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004efc:	6453      	str	r3, [r2, #68]	; 0x44
 8004efe:	4b0d      	ldr	r3, [pc, #52]	; (8004f34 <HAL_MspInit+0x4c>)
 8004f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f06:	607b      	str	r3, [r7, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	603b      	str	r3, [r7, #0]
 8004f0e:	4b09      	ldr	r3, [pc, #36]	; (8004f34 <HAL_MspInit+0x4c>)
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	4a08      	ldr	r2, [pc, #32]	; (8004f34 <HAL_MspInit+0x4c>)
 8004f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f18:	6413      	str	r3, [r2, #64]	; 0x40
 8004f1a:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <HAL_MspInit+0x4c>)
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f22:	603b      	str	r3, [r7, #0]
 8004f24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40023800 	.word	0x40023800

08004f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004f3c:	bf00      	nop
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f46:	b480      	push	{r7}
 8004f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f4a:	e7fe      	b.n	8004f4a <HardFault_Handler+0x4>

08004f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f50:	e7fe      	b.n	8004f50 <MemManage_Handler+0x4>

08004f52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f52:	b480      	push	{r7}
 8004f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f56:	e7fe      	b.n	8004f56 <BusFault_Handler+0x4>

08004f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f5c:	e7fe      	b.n	8004f5c <UsageFault_Handler+0x4>

08004f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f62:	bf00      	nop
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f70:	bf00      	nop
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f7e:	bf00      	nop
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f8c:	f7fc f81e 	bl	8000fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f90:	bf00      	nop
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void){
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 8004f98:	4802      	ldr	r0, [pc, #8]	; (8004fa4 <TIM6_DAC_IRQHandler+0x10>)
 8004f9a:	f7fe f847 	bl	800302c <HAL_TIM_IRQHandler>
}
 8004f9e:	bf00      	nop
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000a1c 	.word	0x20000a1c

08004fa8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004fb0:	4b11      	ldr	r3, [pc, #68]	; (8004ff8 <_sbrk+0x50>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d102      	bne.n	8004fbe <_sbrk+0x16>
		heap_end = &end;
 8004fb8:	4b0f      	ldr	r3, [pc, #60]	; (8004ff8 <_sbrk+0x50>)
 8004fba:	4a10      	ldr	r2, [pc, #64]	; (8004ffc <_sbrk+0x54>)
 8004fbc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004fbe:	4b0e      	ldr	r3, [pc, #56]	; (8004ff8 <_sbrk+0x50>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004fc4:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <_sbrk+0x50>)
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4413      	add	r3, r2
 8004fcc:	466a      	mov	r2, sp
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d907      	bls.n	8004fe2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004fd2:	f000 f997 	bl	8005304 <__errno>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	230c      	movs	r3, #12
 8004fda:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004fdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fe0:	e006      	b.n	8004ff0 <_sbrk+0x48>
	}

	heap_end += incr;
 8004fe2:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <_sbrk+0x50>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4413      	add	r3, r2
 8004fea:	4a03      	ldr	r2, [pc, #12]	; (8004ff8 <_sbrk+0x50>)
 8004fec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004fee:	68fb      	ldr	r3, [r7, #12]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	2000041c 	.word	0x2000041c
 8004ffc:	20000aa0 	.word	0x20000aa0

08005000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005004:	4b16      	ldr	r3, [pc, #88]	; (8005060 <SystemInit+0x60>)
 8005006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500a:	4a15      	ldr	r2, [pc, #84]	; (8005060 <SystemInit+0x60>)
 800500c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005014:	4b13      	ldr	r3, [pc, #76]	; (8005064 <SystemInit+0x64>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a12      	ldr	r2, [pc, #72]	; (8005064 <SystemInit+0x64>)
 800501a:	f043 0301 	orr.w	r3, r3, #1
 800501e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005020:	4b10      	ldr	r3, [pc, #64]	; (8005064 <SystemInit+0x64>)
 8005022:	2200      	movs	r2, #0
 8005024:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005026:	4b0f      	ldr	r3, [pc, #60]	; (8005064 <SystemInit+0x64>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a0e      	ldr	r2, [pc, #56]	; (8005064 <SystemInit+0x64>)
 800502c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005034:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005036:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <SystemInit+0x64>)
 8005038:	4a0b      	ldr	r2, [pc, #44]	; (8005068 <SystemInit+0x68>)
 800503a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800503c:	4b09      	ldr	r3, [pc, #36]	; (8005064 <SystemInit+0x64>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a08      	ldr	r2, [pc, #32]	; (8005064 <SystemInit+0x64>)
 8005042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005046:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005048:	4b06      	ldr	r3, [pc, #24]	; (8005064 <SystemInit+0x64>)
 800504a:	2200      	movs	r2, #0
 800504c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800504e:	4b04      	ldr	r3, [pc, #16]	; (8005060 <SystemInit+0x60>)
 8005050:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005054:	609a      	str	r2, [r3, #8]
#endif
}
 8005056:	bf00      	nop
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	e000ed00 	.word	0xe000ed00
 8005064:	40023800 	.word	0x40023800
 8005068:	24003010 	.word	0x24003010

0800506c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM2_Init(uint32_t prescaler)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b090      	sub	sp, #64	; 0x40
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005074:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	605a      	str	r2, [r3, #4]
 800507e:	609a      	str	r2, [r3, #8]
 8005080:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800508c:	f107 030c 	add.w	r3, r7, #12
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	609a      	str	r2, [r3, #8]
 8005098:	60da      	str	r2, [r3, #12]
 800509a:	611a      	str	r2, [r3, #16]
 800509c:	615a      	str	r2, [r3, #20]
 800509e:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80050a0:	4b2d      	ldr	r3, [pc, #180]	; (8005158 <MX_TIM2_Init+0xec>)
 80050a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80050a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = prescaler;
 80050a8:	4a2b      	ldr	r2, [pc, #172]	; (8005158 <MX_TIM2_Init+0xec>)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050ae:	4b2a      	ldr	r3, [pc, #168]	; (8005158 <MX_TIM2_Init+0xec>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 320;
 80050b4:	4b28      	ldr	r3, [pc, #160]	; (8005158 <MX_TIM2_Init+0xec>)
 80050b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80050ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050bc:	4b26      	ldr	r3, [pc, #152]	; (8005158 <MX_TIM2_Init+0xec>)
 80050be:	2200      	movs	r2, #0
 80050c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050c2:	4b25      	ldr	r3, [pc, #148]	; (8005158 <MX_TIM2_Init+0xec>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80050c8:	4823      	ldr	r0, [pc, #140]	; (8005158 <MX_TIM2_Init+0xec>)
 80050ca:	f7fd fe95 	bl	8002df8 <HAL_TIM_Base_Init>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80050d4:	f7ff fe78 	bl	8004dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050dc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80050de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050e2:	4619      	mov	r1, r3
 80050e4:	481c      	ldr	r0, [pc, #112]	; (8005158 <MX_TIM2_Init+0xec>)
 80050e6:	f7fe f96f 	bl	80033c8 <HAL_TIM_ConfigClockSource>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80050f0:	f7ff fe6a 	bl	8004dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80050f4:	4818      	ldr	r0, [pc, #96]	; (8005158 <MX_TIM2_Init+0xec>)
 80050f6:	f7fd fece 	bl	8002e96 <HAL_TIM_PWM_Init>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8005100:	f7ff fe62 	bl	8004dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005104:	2300      	movs	r3, #0
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005108:	2300      	movs	r3, #0
 800510a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800510c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005110:	4619      	mov	r1, r3
 8005112:	4811      	ldr	r0, [pc, #68]	; (8005158 <MX_TIM2_Init+0xec>)
 8005114:	f7fe fd47 	bl	8003ba6 <HAL_TIMEx_MasterConfigSynchronization>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800511e:	f7ff fe53 	bl	8004dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005122:	2360      	movs	r3, #96	; 0x60
 8005124:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800512a:	2300      	movs	r3, #0
 800512c:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005132:	f107 030c 	add.w	r3, r7, #12
 8005136:	2208      	movs	r2, #8
 8005138:	4619      	mov	r1, r3
 800513a:	4807      	ldr	r0, [pc, #28]	; (8005158 <MX_TIM2_Init+0xec>)
 800513c:	f7fe f87e 	bl	800323c <HAL_TIM_PWM_ConfigChannel>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8005146:	f7ff fe3f 	bl	8004dc8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800514a:	4803      	ldr	r0, [pc, #12]	; (8005158 <MX_TIM2_Init+0xec>)
 800514c:	f000 f878 	bl	8005240 <HAL_TIM_MspPostInit>

}
 8005150:	bf00      	nop
 8005152:	3740      	adds	r7, #64	; 0x40
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20000a5c 	.word	0x20000a5c

0800515c <MX_TIM6_Init>:

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005162:	463b      	mov	r3, r7
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	605a      	str	r2, [r3, #4]

	htim6.Instance = TIM6;
 800516a:	4b15      	ldr	r3, [pc, #84]	; (80051c0 <MX_TIM6_Init+0x64>)
 800516c:	4a15      	ldr	r2, [pc, #84]	; (80051c4 <MX_TIM6_Init+0x68>)
 800516e:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 159;
 8005170:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <MX_TIM6_Init+0x64>)
 8005172:	229f      	movs	r2, #159	; 0x9f
 8005174:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005176:	4b12      	ldr	r3, [pc, #72]	; (80051c0 <MX_TIM6_Init+0x64>)
 8005178:	2200      	movs	r2, #0
 800517a:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 4999;
 800517c:	4b10      	ldr	r3, [pc, #64]	; (80051c0 <MX_TIM6_Init+0x64>)
 800517e:	f241 3287 	movw	r2, #4999	; 0x1387
 8005182:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005184:	4b0e      	ldr	r3, [pc, #56]	; (80051c0 <MX_TIM6_Init+0x64>)
 8005186:	2200      	movs	r2, #0
 8005188:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800518a:	480d      	ldr	r0, [pc, #52]	; (80051c0 <MX_TIM6_Init+0x64>)
 800518c:	f7fd fe34 	bl	8002df8 <HAL_TIM_Base_Init>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <MX_TIM6_Init+0x3e>
	{
		Error_Handler();
 8005196:	f7ff fe17 	bl	8004dc8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800519a:	2300      	movs	r3, #0
 800519c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800519e:	2300      	movs	r3, #0
 80051a0:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80051a2:	463b      	mov	r3, r7
 80051a4:	4619      	mov	r1, r3
 80051a6:	4806      	ldr	r0, [pc, #24]	; (80051c0 <MX_TIM6_Init+0x64>)
 80051a8:	f7fe fcfd 	bl	8003ba6 <HAL_TIMEx_MasterConfigSynchronization>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <MX_TIM6_Init+0x5a>
	{
		Error_Handler();
 80051b2:	f7ff fe09 	bl	8004dc8 <Error_Handler>
	}
}
 80051b6:	bf00      	nop
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20000a1c 	.word	0x20000a1c
 80051c4:	40001000 	.word	0x40001000

080051c8 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  if(tim_baseHandle->Instance==TIM2)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d8:	d10e      	bne.n	80051f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	4b16      	ldr	r3, [pc, #88]	; (8005238 <HAL_TIM_Base_MspInit+0x70>)
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	4a15      	ldr	r2, [pc, #84]	; (8005238 <HAL_TIM_Base_MspInit+0x70>)
 80051e4:	f043 0301 	orr.w	r3, r3, #1
 80051e8:	6413      	str	r3, [r2, #64]	; 0x40
 80051ea:	4b13      	ldr	r3, [pc, #76]	; (8005238 <HAL_TIM_Base_MspInit+0x70>)
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80051f6:	e01a      	b.n	800522e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a0f      	ldr	r2, [pc, #60]	; (800523c <HAL_TIM_Base_MspInit+0x74>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d115      	bne.n	800522e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005202:	2300      	movs	r3, #0
 8005204:	60bb      	str	r3, [r7, #8]
 8005206:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <HAL_TIM_Base_MspInit+0x70>)
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	4a0b      	ldr	r2, [pc, #44]	; (8005238 <HAL_TIM_Base_MspInit+0x70>)
 800520c:	f043 0310 	orr.w	r3, r3, #16
 8005210:	6413      	str	r3, [r2, #64]	; 0x40
 8005212:	4b09      	ldr	r3, [pc, #36]	; (8005238 <HAL_TIM_Base_MspInit+0x70>)
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	60bb      	str	r3, [r7, #8]
 800521c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800521e:	2200      	movs	r2, #0
 8005220:	2100      	movs	r1, #0
 8005222:	2036      	movs	r0, #54	; 0x36
 8005224:	f7fc fbeb 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005228:	2036      	movs	r0, #54	; 0x36
 800522a:	f7fc fc04 	bl	8001a36 <HAL_NVIC_EnableIRQ>
}
 800522e:	bf00      	nop
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40023800 	.word	0x40023800
 800523c:	40001000 	.word	0x40001000

08005240 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b088      	sub	sp, #32
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005248:	f107 030c 	add.w	r3, r7, #12
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	605a      	str	r2, [r3, #4]
 8005252:	609a      	str	r2, [r3, #8]
 8005254:	60da      	str	r2, [r3, #12]
 8005256:	611a      	str	r2, [r3, #16]

  if(timHandle->Instance==TIM2)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005260:	d11e      	bne.n	80052a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005262:	2300      	movs	r3, #0
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	4b10      	ldr	r3, [pc, #64]	; (80052a8 <HAL_TIM_MspPostInit+0x68>)
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	4a0f      	ldr	r2, [pc, #60]	; (80052a8 <HAL_TIM_MspPostInit+0x68>)
 800526c:	f043 0302 	orr.w	r3, r3, #2
 8005270:	6313      	str	r3, [r2, #48]	; 0x30
 8005272:	4b0d      	ldr	r3, [pc, #52]	; (80052a8 <HAL_TIM_MspPostInit+0x68>)
 8005274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	60bb      	str	r3, [r7, #8]
 800527c:	68bb      	ldr	r3, [r7, #8]

    /**TIM2 GPIO Configuration
    PB10    ------> TIM2_CH3
    */

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800527e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005282:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005284:	2302      	movs	r3, #2
 8005286:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800528c:	2300      	movs	r3, #0
 800528e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005290:	2301      	movs	r3, #1
 8005292:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005294:	f107 030c 	add.w	r3, r7, #12
 8005298:	4619      	mov	r1, r3
 800529a:	4804      	ldr	r0, [pc, #16]	; (80052ac <HAL_TIM_MspPostInit+0x6c>)
 800529c:	f7fc fbe6 	bl	8001a6c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
}
 80052a0:	bf00      	nop
 80052a2:	3720      	adds	r7, #32
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40023800 	.word	0x40023800
 80052ac:	40020400 	.word	0x40020400

080052b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80052b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80052b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80052b6:	e003      	b.n	80052c0 <LoopCopyDataInit>

080052b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80052b8:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80052ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80052bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80052be:	3104      	adds	r1, #4

080052c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80052c0:	480b      	ldr	r0, [pc, #44]	; (80052f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80052c2:	4b0c      	ldr	r3, [pc, #48]	; (80052f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80052c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80052c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80052c8:	d3f6      	bcc.n	80052b8 <CopyDataInit>
  ldr  r2, =_sbss
 80052ca:	4a0b      	ldr	r2, [pc, #44]	; (80052f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80052cc:	e002      	b.n	80052d4 <LoopFillZerobss>

080052ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80052ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80052d0:	f842 3b04 	str.w	r3, [r2], #4

080052d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80052d4:	4b09      	ldr	r3, [pc, #36]	; (80052fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80052d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80052d8:	d3f9      	bcc.n	80052ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80052da:	f7ff fe91 	bl	8005000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052de:	f000 f817 	bl	8005310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80052e2:	f7ff fcd3 	bl	8004c8c <main>
  bx  lr    
 80052e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80052e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80052ec:	08007a48 	.word	0x08007a48
  ldr  r0, =_sdata
 80052f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80052f4:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 80052f8:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 80052fc:	20000aa0 	.word	0x20000aa0

08005300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005300:	e7fe      	b.n	8005300 <ADC_IRQHandler>
	...

08005304 <__errno>:
 8005304:	4b01      	ldr	r3, [pc, #4]	; (800530c <__errno+0x8>)
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	20000024 	.word	0x20000024

08005310 <__libc_init_array>:
 8005310:	b570      	push	{r4, r5, r6, lr}
 8005312:	4e0d      	ldr	r6, [pc, #52]	; (8005348 <__libc_init_array+0x38>)
 8005314:	4c0d      	ldr	r4, [pc, #52]	; (800534c <__libc_init_array+0x3c>)
 8005316:	1ba4      	subs	r4, r4, r6
 8005318:	10a4      	asrs	r4, r4, #2
 800531a:	2500      	movs	r5, #0
 800531c:	42a5      	cmp	r5, r4
 800531e:	d109      	bne.n	8005334 <__libc_init_array+0x24>
 8005320:	4e0b      	ldr	r6, [pc, #44]	; (8005350 <__libc_init_array+0x40>)
 8005322:	4c0c      	ldr	r4, [pc, #48]	; (8005354 <__libc_init_array+0x44>)
 8005324:	f002 f85c 	bl	80073e0 <_init>
 8005328:	1ba4      	subs	r4, r4, r6
 800532a:	10a4      	asrs	r4, r4, #2
 800532c:	2500      	movs	r5, #0
 800532e:	42a5      	cmp	r5, r4
 8005330:	d105      	bne.n	800533e <__libc_init_array+0x2e>
 8005332:	bd70      	pop	{r4, r5, r6, pc}
 8005334:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005338:	4798      	blx	r3
 800533a:	3501      	adds	r5, #1
 800533c:	e7ee      	b.n	800531c <__libc_init_array+0xc>
 800533e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005342:	4798      	blx	r3
 8005344:	3501      	adds	r5, #1
 8005346:	e7f2      	b.n	800532e <__libc_init_array+0x1e>
 8005348:	08007a40 	.word	0x08007a40
 800534c:	08007a40 	.word	0x08007a40
 8005350:	08007a40 	.word	0x08007a40
 8005354:	08007a44 	.word	0x08007a44

08005358 <memset>:
 8005358:	4402      	add	r2, r0
 800535a:	4603      	mov	r3, r0
 800535c:	4293      	cmp	r3, r2
 800535e:	d100      	bne.n	8005362 <memset+0xa>
 8005360:	4770      	bx	lr
 8005362:	f803 1b01 	strb.w	r1, [r3], #1
 8005366:	e7f9      	b.n	800535c <memset+0x4>

08005368 <__cvt>:
 8005368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800536c:	ec55 4b10 	vmov	r4, r5, d0
 8005370:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005372:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005376:	2d00      	cmp	r5, #0
 8005378:	460e      	mov	r6, r1
 800537a:	4691      	mov	r9, r2
 800537c:	4619      	mov	r1, r3
 800537e:	bfb8      	it	lt
 8005380:	4622      	movlt	r2, r4
 8005382:	462b      	mov	r3, r5
 8005384:	f027 0720 	bic.w	r7, r7, #32
 8005388:	bfbb      	ittet	lt
 800538a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800538e:	461d      	movlt	r5, r3
 8005390:	2300      	movge	r3, #0
 8005392:	232d      	movlt	r3, #45	; 0x2d
 8005394:	bfb8      	it	lt
 8005396:	4614      	movlt	r4, r2
 8005398:	2f46      	cmp	r7, #70	; 0x46
 800539a:	700b      	strb	r3, [r1, #0]
 800539c:	d004      	beq.n	80053a8 <__cvt+0x40>
 800539e:	2f45      	cmp	r7, #69	; 0x45
 80053a0:	d100      	bne.n	80053a4 <__cvt+0x3c>
 80053a2:	3601      	adds	r6, #1
 80053a4:	2102      	movs	r1, #2
 80053a6:	e000      	b.n	80053aa <__cvt+0x42>
 80053a8:	2103      	movs	r1, #3
 80053aa:	ab03      	add	r3, sp, #12
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	ab02      	add	r3, sp, #8
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	4632      	mov	r2, r6
 80053b4:	4653      	mov	r3, sl
 80053b6:	ec45 4b10 	vmov	d0, r4, r5
 80053ba:	f000 fcdd 	bl	8005d78 <_dtoa_r>
 80053be:	2f47      	cmp	r7, #71	; 0x47
 80053c0:	4680      	mov	r8, r0
 80053c2:	d102      	bne.n	80053ca <__cvt+0x62>
 80053c4:	f019 0f01 	tst.w	r9, #1
 80053c8:	d026      	beq.n	8005418 <__cvt+0xb0>
 80053ca:	2f46      	cmp	r7, #70	; 0x46
 80053cc:	eb08 0906 	add.w	r9, r8, r6
 80053d0:	d111      	bne.n	80053f6 <__cvt+0x8e>
 80053d2:	f898 3000 	ldrb.w	r3, [r8]
 80053d6:	2b30      	cmp	r3, #48	; 0x30
 80053d8:	d10a      	bne.n	80053f0 <__cvt+0x88>
 80053da:	2200      	movs	r2, #0
 80053dc:	2300      	movs	r3, #0
 80053de:	4620      	mov	r0, r4
 80053e0:	4629      	mov	r1, r5
 80053e2:	f7fb fb91 	bl	8000b08 <__aeabi_dcmpeq>
 80053e6:	b918      	cbnz	r0, 80053f0 <__cvt+0x88>
 80053e8:	f1c6 0601 	rsb	r6, r6, #1
 80053ec:	f8ca 6000 	str.w	r6, [sl]
 80053f0:	f8da 3000 	ldr.w	r3, [sl]
 80053f4:	4499      	add	r9, r3
 80053f6:	2200      	movs	r2, #0
 80053f8:	2300      	movs	r3, #0
 80053fa:	4620      	mov	r0, r4
 80053fc:	4629      	mov	r1, r5
 80053fe:	f7fb fb83 	bl	8000b08 <__aeabi_dcmpeq>
 8005402:	b938      	cbnz	r0, 8005414 <__cvt+0xac>
 8005404:	2230      	movs	r2, #48	; 0x30
 8005406:	9b03      	ldr	r3, [sp, #12]
 8005408:	454b      	cmp	r3, r9
 800540a:	d205      	bcs.n	8005418 <__cvt+0xb0>
 800540c:	1c59      	adds	r1, r3, #1
 800540e:	9103      	str	r1, [sp, #12]
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	e7f8      	b.n	8005406 <__cvt+0x9e>
 8005414:	f8cd 900c 	str.w	r9, [sp, #12]
 8005418:	9b03      	ldr	r3, [sp, #12]
 800541a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800541c:	eba3 0308 	sub.w	r3, r3, r8
 8005420:	4640      	mov	r0, r8
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	b004      	add	sp, #16
 8005426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800542a <__exponent>:
 800542a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800542c:	2900      	cmp	r1, #0
 800542e:	4604      	mov	r4, r0
 8005430:	bfba      	itte	lt
 8005432:	4249      	neglt	r1, r1
 8005434:	232d      	movlt	r3, #45	; 0x2d
 8005436:	232b      	movge	r3, #43	; 0x2b
 8005438:	2909      	cmp	r1, #9
 800543a:	f804 2b02 	strb.w	r2, [r4], #2
 800543e:	7043      	strb	r3, [r0, #1]
 8005440:	dd20      	ble.n	8005484 <__exponent+0x5a>
 8005442:	f10d 0307 	add.w	r3, sp, #7
 8005446:	461f      	mov	r7, r3
 8005448:	260a      	movs	r6, #10
 800544a:	fb91 f5f6 	sdiv	r5, r1, r6
 800544e:	fb06 1115 	mls	r1, r6, r5, r1
 8005452:	3130      	adds	r1, #48	; 0x30
 8005454:	2d09      	cmp	r5, #9
 8005456:	f803 1c01 	strb.w	r1, [r3, #-1]
 800545a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800545e:	4629      	mov	r1, r5
 8005460:	dc09      	bgt.n	8005476 <__exponent+0x4c>
 8005462:	3130      	adds	r1, #48	; 0x30
 8005464:	3b02      	subs	r3, #2
 8005466:	f802 1c01 	strb.w	r1, [r2, #-1]
 800546a:	42bb      	cmp	r3, r7
 800546c:	4622      	mov	r2, r4
 800546e:	d304      	bcc.n	800547a <__exponent+0x50>
 8005470:	1a10      	subs	r0, r2, r0
 8005472:	b003      	add	sp, #12
 8005474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005476:	4613      	mov	r3, r2
 8005478:	e7e7      	b.n	800544a <__exponent+0x20>
 800547a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800547e:	f804 2b01 	strb.w	r2, [r4], #1
 8005482:	e7f2      	b.n	800546a <__exponent+0x40>
 8005484:	2330      	movs	r3, #48	; 0x30
 8005486:	4419      	add	r1, r3
 8005488:	7083      	strb	r3, [r0, #2]
 800548a:	1d02      	adds	r2, r0, #4
 800548c:	70c1      	strb	r1, [r0, #3]
 800548e:	e7ef      	b.n	8005470 <__exponent+0x46>

08005490 <_printf_float>:
 8005490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005494:	b08d      	sub	sp, #52	; 0x34
 8005496:	460c      	mov	r4, r1
 8005498:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800549c:	4616      	mov	r6, r2
 800549e:	461f      	mov	r7, r3
 80054a0:	4605      	mov	r5, r0
 80054a2:	f001 fa21 	bl	80068e8 <_localeconv_r>
 80054a6:	6803      	ldr	r3, [r0, #0]
 80054a8:	9304      	str	r3, [sp, #16]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fa feb0 	bl	8000210 <strlen>
 80054b0:	2300      	movs	r3, #0
 80054b2:	930a      	str	r3, [sp, #40]	; 0x28
 80054b4:	f8d8 3000 	ldr.w	r3, [r8]
 80054b8:	9005      	str	r0, [sp, #20]
 80054ba:	3307      	adds	r3, #7
 80054bc:	f023 0307 	bic.w	r3, r3, #7
 80054c0:	f103 0208 	add.w	r2, r3, #8
 80054c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80054c8:	f8d4 b000 	ldr.w	fp, [r4]
 80054cc:	f8c8 2000 	str.w	r2, [r8]
 80054d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80054d8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80054dc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80054e0:	9307      	str	r3, [sp, #28]
 80054e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80054e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054ea:	4ba7      	ldr	r3, [pc, #668]	; (8005788 <_printf_float+0x2f8>)
 80054ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054f0:	f7fb fb3c 	bl	8000b6c <__aeabi_dcmpun>
 80054f4:	bb70      	cbnz	r0, 8005554 <_printf_float+0xc4>
 80054f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054fa:	4ba3      	ldr	r3, [pc, #652]	; (8005788 <_printf_float+0x2f8>)
 80054fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005500:	f7fb fb16 	bl	8000b30 <__aeabi_dcmple>
 8005504:	bb30      	cbnz	r0, 8005554 <_printf_float+0xc4>
 8005506:	2200      	movs	r2, #0
 8005508:	2300      	movs	r3, #0
 800550a:	4640      	mov	r0, r8
 800550c:	4649      	mov	r1, r9
 800550e:	f7fb fb05 	bl	8000b1c <__aeabi_dcmplt>
 8005512:	b110      	cbz	r0, 800551a <_printf_float+0x8a>
 8005514:	232d      	movs	r3, #45	; 0x2d
 8005516:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800551a:	4a9c      	ldr	r2, [pc, #624]	; (800578c <_printf_float+0x2fc>)
 800551c:	4b9c      	ldr	r3, [pc, #624]	; (8005790 <_printf_float+0x300>)
 800551e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005522:	bf8c      	ite	hi
 8005524:	4690      	movhi	r8, r2
 8005526:	4698      	movls	r8, r3
 8005528:	2303      	movs	r3, #3
 800552a:	f02b 0204 	bic.w	r2, fp, #4
 800552e:	6123      	str	r3, [r4, #16]
 8005530:	6022      	str	r2, [r4, #0]
 8005532:	f04f 0900 	mov.w	r9, #0
 8005536:	9700      	str	r7, [sp, #0]
 8005538:	4633      	mov	r3, r6
 800553a:	aa0b      	add	r2, sp, #44	; 0x2c
 800553c:	4621      	mov	r1, r4
 800553e:	4628      	mov	r0, r5
 8005540:	f000 f9e6 	bl	8005910 <_printf_common>
 8005544:	3001      	adds	r0, #1
 8005546:	f040 808d 	bne.w	8005664 <_printf_float+0x1d4>
 800554a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800554e:	b00d      	add	sp, #52	; 0x34
 8005550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005554:	4642      	mov	r2, r8
 8005556:	464b      	mov	r3, r9
 8005558:	4640      	mov	r0, r8
 800555a:	4649      	mov	r1, r9
 800555c:	f7fb fb06 	bl	8000b6c <__aeabi_dcmpun>
 8005560:	b110      	cbz	r0, 8005568 <_printf_float+0xd8>
 8005562:	4a8c      	ldr	r2, [pc, #560]	; (8005794 <_printf_float+0x304>)
 8005564:	4b8c      	ldr	r3, [pc, #560]	; (8005798 <_printf_float+0x308>)
 8005566:	e7da      	b.n	800551e <_printf_float+0x8e>
 8005568:	6861      	ldr	r1, [r4, #4]
 800556a:	1c4b      	adds	r3, r1, #1
 800556c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005570:	a80a      	add	r0, sp, #40	; 0x28
 8005572:	d13e      	bne.n	80055f2 <_printf_float+0x162>
 8005574:	2306      	movs	r3, #6
 8005576:	6063      	str	r3, [r4, #4]
 8005578:	2300      	movs	r3, #0
 800557a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800557e:	ab09      	add	r3, sp, #36	; 0x24
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	ec49 8b10 	vmov	d0, r8, r9
 8005586:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800558a:	6022      	str	r2, [r4, #0]
 800558c:	f8cd a004 	str.w	sl, [sp, #4]
 8005590:	6861      	ldr	r1, [r4, #4]
 8005592:	4628      	mov	r0, r5
 8005594:	f7ff fee8 	bl	8005368 <__cvt>
 8005598:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800559c:	2b47      	cmp	r3, #71	; 0x47
 800559e:	4680      	mov	r8, r0
 80055a0:	d109      	bne.n	80055b6 <_printf_float+0x126>
 80055a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055a4:	1cd8      	adds	r0, r3, #3
 80055a6:	db02      	blt.n	80055ae <_printf_float+0x11e>
 80055a8:	6862      	ldr	r2, [r4, #4]
 80055aa:	4293      	cmp	r3, r2
 80055ac:	dd47      	ble.n	800563e <_printf_float+0x1ae>
 80055ae:	f1aa 0a02 	sub.w	sl, sl, #2
 80055b2:	fa5f fa8a 	uxtb.w	sl, sl
 80055b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80055ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055bc:	d824      	bhi.n	8005608 <_printf_float+0x178>
 80055be:	3901      	subs	r1, #1
 80055c0:	4652      	mov	r2, sl
 80055c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80055c6:	9109      	str	r1, [sp, #36]	; 0x24
 80055c8:	f7ff ff2f 	bl	800542a <__exponent>
 80055cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055ce:	1813      	adds	r3, r2, r0
 80055d0:	2a01      	cmp	r2, #1
 80055d2:	4681      	mov	r9, r0
 80055d4:	6123      	str	r3, [r4, #16]
 80055d6:	dc02      	bgt.n	80055de <_printf_float+0x14e>
 80055d8:	6822      	ldr	r2, [r4, #0]
 80055da:	07d1      	lsls	r1, r2, #31
 80055dc:	d501      	bpl.n	80055e2 <_printf_float+0x152>
 80055de:	3301      	adds	r3, #1
 80055e0:	6123      	str	r3, [r4, #16]
 80055e2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0a5      	beq.n	8005536 <_printf_float+0xa6>
 80055ea:	232d      	movs	r3, #45	; 0x2d
 80055ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055f0:	e7a1      	b.n	8005536 <_printf_float+0xa6>
 80055f2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80055f6:	f000 8177 	beq.w	80058e8 <_printf_float+0x458>
 80055fa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80055fe:	d1bb      	bne.n	8005578 <_printf_float+0xe8>
 8005600:	2900      	cmp	r1, #0
 8005602:	d1b9      	bne.n	8005578 <_printf_float+0xe8>
 8005604:	2301      	movs	r3, #1
 8005606:	e7b6      	b.n	8005576 <_printf_float+0xe6>
 8005608:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800560c:	d119      	bne.n	8005642 <_printf_float+0x1b2>
 800560e:	2900      	cmp	r1, #0
 8005610:	6863      	ldr	r3, [r4, #4]
 8005612:	dd0c      	ble.n	800562e <_printf_float+0x19e>
 8005614:	6121      	str	r1, [r4, #16]
 8005616:	b913      	cbnz	r3, 800561e <_printf_float+0x18e>
 8005618:	6822      	ldr	r2, [r4, #0]
 800561a:	07d2      	lsls	r2, r2, #31
 800561c:	d502      	bpl.n	8005624 <_printf_float+0x194>
 800561e:	3301      	adds	r3, #1
 8005620:	440b      	add	r3, r1
 8005622:	6123      	str	r3, [r4, #16]
 8005624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005626:	65a3      	str	r3, [r4, #88]	; 0x58
 8005628:	f04f 0900 	mov.w	r9, #0
 800562c:	e7d9      	b.n	80055e2 <_printf_float+0x152>
 800562e:	b913      	cbnz	r3, 8005636 <_printf_float+0x1a6>
 8005630:	6822      	ldr	r2, [r4, #0]
 8005632:	07d0      	lsls	r0, r2, #31
 8005634:	d501      	bpl.n	800563a <_printf_float+0x1aa>
 8005636:	3302      	adds	r3, #2
 8005638:	e7f3      	b.n	8005622 <_printf_float+0x192>
 800563a:	2301      	movs	r3, #1
 800563c:	e7f1      	b.n	8005622 <_printf_float+0x192>
 800563e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005642:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005646:	4293      	cmp	r3, r2
 8005648:	db05      	blt.n	8005656 <_printf_float+0x1c6>
 800564a:	6822      	ldr	r2, [r4, #0]
 800564c:	6123      	str	r3, [r4, #16]
 800564e:	07d1      	lsls	r1, r2, #31
 8005650:	d5e8      	bpl.n	8005624 <_printf_float+0x194>
 8005652:	3301      	adds	r3, #1
 8005654:	e7e5      	b.n	8005622 <_printf_float+0x192>
 8005656:	2b00      	cmp	r3, #0
 8005658:	bfd4      	ite	le
 800565a:	f1c3 0302 	rsble	r3, r3, #2
 800565e:	2301      	movgt	r3, #1
 8005660:	4413      	add	r3, r2
 8005662:	e7de      	b.n	8005622 <_printf_float+0x192>
 8005664:	6823      	ldr	r3, [r4, #0]
 8005666:	055a      	lsls	r2, r3, #21
 8005668:	d407      	bmi.n	800567a <_printf_float+0x1ea>
 800566a:	6923      	ldr	r3, [r4, #16]
 800566c:	4642      	mov	r2, r8
 800566e:	4631      	mov	r1, r6
 8005670:	4628      	mov	r0, r5
 8005672:	47b8      	blx	r7
 8005674:	3001      	adds	r0, #1
 8005676:	d12b      	bne.n	80056d0 <_printf_float+0x240>
 8005678:	e767      	b.n	800554a <_printf_float+0xba>
 800567a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800567e:	f240 80dc 	bls.w	800583a <_printf_float+0x3aa>
 8005682:	2200      	movs	r2, #0
 8005684:	2300      	movs	r3, #0
 8005686:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800568a:	f7fb fa3d 	bl	8000b08 <__aeabi_dcmpeq>
 800568e:	2800      	cmp	r0, #0
 8005690:	d033      	beq.n	80056fa <_printf_float+0x26a>
 8005692:	2301      	movs	r3, #1
 8005694:	4a41      	ldr	r2, [pc, #260]	; (800579c <_printf_float+0x30c>)
 8005696:	4631      	mov	r1, r6
 8005698:	4628      	mov	r0, r5
 800569a:	47b8      	blx	r7
 800569c:	3001      	adds	r0, #1
 800569e:	f43f af54 	beq.w	800554a <_printf_float+0xba>
 80056a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056a6:	429a      	cmp	r2, r3
 80056a8:	db02      	blt.n	80056b0 <_printf_float+0x220>
 80056aa:	6823      	ldr	r3, [r4, #0]
 80056ac:	07d8      	lsls	r0, r3, #31
 80056ae:	d50f      	bpl.n	80056d0 <_printf_float+0x240>
 80056b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056b4:	4631      	mov	r1, r6
 80056b6:	4628      	mov	r0, r5
 80056b8:	47b8      	blx	r7
 80056ba:	3001      	adds	r0, #1
 80056bc:	f43f af45 	beq.w	800554a <_printf_float+0xba>
 80056c0:	f04f 0800 	mov.w	r8, #0
 80056c4:	f104 091a 	add.w	r9, r4, #26
 80056c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ca:	3b01      	subs	r3, #1
 80056cc:	4543      	cmp	r3, r8
 80056ce:	dc09      	bgt.n	80056e4 <_printf_float+0x254>
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	079b      	lsls	r3, r3, #30
 80056d4:	f100 8103 	bmi.w	80058de <_printf_float+0x44e>
 80056d8:	68e0      	ldr	r0, [r4, #12]
 80056da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056dc:	4298      	cmp	r0, r3
 80056de:	bfb8      	it	lt
 80056e0:	4618      	movlt	r0, r3
 80056e2:	e734      	b.n	800554e <_printf_float+0xbe>
 80056e4:	2301      	movs	r3, #1
 80056e6:	464a      	mov	r2, r9
 80056e8:	4631      	mov	r1, r6
 80056ea:	4628      	mov	r0, r5
 80056ec:	47b8      	blx	r7
 80056ee:	3001      	adds	r0, #1
 80056f0:	f43f af2b 	beq.w	800554a <_printf_float+0xba>
 80056f4:	f108 0801 	add.w	r8, r8, #1
 80056f8:	e7e6      	b.n	80056c8 <_printf_float+0x238>
 80056fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	dc2b      	bgt.n	8005758 <_printf_float+0x2c8>
 8005700:	2301      	movs	r3, #1
 8005702:	4a26      	ldr	r2, [pc, #152]	; (800579c <_printf_float+0x30c>)
 8005704:	4631      	mov	r1, r6
 8005706:	4628      	mov	r0, r5
 8005708:	47b8      	blx	r7
 800570a:	3001      	adds	r0, #1
 800570c:	f43f af1d 	beq.w	800554a <_printf_float+0xba>
 8005710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005712:	b923      	cbnz	r3, 800571e <_printf_float+0x28e>
 8005714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005716:	b913      	cbnz	r3, 800571e <_printf_float+0x28e>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	07d9      	lsls	r1, r3, #31
 800571c:	d5d8      	bpl.n	80056d0 <_printf_float+0x240>
 800571e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005722:	4631      	mov	r1, r6
 8005724:	4628      	mov	r0, r5
 8005726:	47b8      	blx	r7
 8005728:	3001      	adds	r0, #1
 800572a:	f43f af0e 	beq.w	800554a <_printf_float+0xba>
 800572e:	f04f 0900 	mov.w	r9, #0
 8005732:	f104 0a1a 	add.w	sl, r4, #26
 8005736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005738:	425b      	negs	r3, r3
 800573a:	454b      	cmp	r3, r9
 800573c:	dc01      	bgt.n	8005742 <_printf_float+0x2b2>
 800573e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005740:	e794      	b.n	800566c <_printf_float+0x1dc>
 8005742:	2301      	movs	r3, #1
 8005744:	4652      	mov	r2, sl
 8005746:	4631      	mov	r1, r6
 8005748:	4628      	mov	r0, r5
 800574a:	47b8      	blx	r7
 800574c:	3001      	adds	r0, #1
 800574e:	f43f aefc 	beq.w	800554a <_printf_float+0xba>
 8005752:	f109 0901 	add.w	r9, r9, #1
 8005756:	e7ee      	b.n	8005736 <_printf_float+0x2a6>
 8005758:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800575a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800575c:	429a      	cmp	r2, r3
 800575e:	bfa8      	it	ge
 8005760:	461a      	movge	r2, r3
 8005762:	2a00      	cmp	r2, #0
 8005764:	4691      	mov	r9, r2
 8005766:	dd07      	ble.n	8005778 <_printf_float+0x2e8>
 8005768:	4613      	mov	r3, r2
 800576a:	4631      	mov	r1, r6
 800576c:	4642      	mov	r2, r8
 800576e:	4628      	mov	r0, r5
 8005770:	47b8      	blx	r7
 8005772:	3001      	adds	r0, #1
 8005774:	f43f aee9 	beq.w	800554a <_printf_float+0xba>
 8005778:	f104 031a 	add.w	r3, r4, #26
 800577c:	f04f 0b00 	mov.w	fp, #0
 8005780:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005784:	9306      	str	r3, [sp, #24]
 8005786:	e015      	b.n	80057b4 <_printf_float+0x324>
 8005788:	7fefffff 	.word	0x7fefffff
 800578c:	080077e0 	.word	0x080077e0
 8005790:	080077dc 	.word	0x080077dc
 8005794:	080077e8 	.word	0x080077e8
 8005798:	080077e4 	.word	0x080077e4
 800579c:	080077ec 	.word	0x080077ec
 80057a0:	2301      	movs	r3, #1
 80057a2:	9a06      	ldr	r2, [sp, #24]
 80057a4:	4631      	mov	r1, r6
 80057a6:	4628      	mov	r0, r5
 80057a8:	47b8      	blx	r7
 80057aa:	3001      	adds	r0, #1
 80057ac:	f43f aecd 	beq.w	800554a <_printf_float+0xba>
 80057b0:	f10b 0b01 	add.w	fp, fp, #1
 80057b4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80057b8:	ebaa 0309 	sub.w	r3, sl, r9
 80057bc:	455b      	cmp	r3, fp
 80057be:	dcef      	bgt.n	80057a0 <_printf_float+0x310>
 80057c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057c4:	429a      	cmp	r2, r3
 80057c6:	44d0      	add	r8, sl
 80057c8:	db15      	blt.n	80057f6 <_printf_float+0x366>
 80057ca:	6823      	ldr	r3, [r4, #0]
 80057cc:	07da      	lsls	r2, r3, #31
 80057ce:	d412      	bmi.n	80057f6 <_printf_float+0x366>
 80057d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057d4:	eba3 020a 	sub.w	r2, r3, sl
 80057d8:	eba3 0a01 	sub.w	sl, r3, r1
 80057dc:	4592      	cmp	sl, r2
 80057de:	bfa8      	it	ge
 80057e0:	4692      	movge	sl, r2
 80057e2:	f1ba 0f00 	cmp.w	sl, #0
 80057e6:	dc0e      	bgt.n	8005806 <_printf_float+0x376>
 80057e8:	f04f 0800 	mov.w	r8, #0
 80057ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80057f0:	f104 091a 	add.w	r9, r4, #26
 80057f4:	e019      	b.n	800582a <_printf_float+0x39a>
 80057f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057fa:	4631      	mov	r1, r6
 80057fc:	4628      	mov	r0, r5
 80057fe:	47b8      	blx	r7
 8005800:	3001      	adds	r0, #1
 8005802:	d1e5      	bne.n	80057d0 <_printf_float+0x340>
 8005804:	e6a1      	b.n	800554a <_printf_float+0xba>
 8005806:	4653      	mov	r3, sl
 8005808:	4642      	mov	r2, r8
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	d1e9      	bne.n	80057e8 <_printf_float+0x358>
 8005814:	e699      	b.n	800554a <_printf_float+0xba>
 8005816:	2301      	movs	r3, #1
 8005818:	464a      	mov	r2, r9
 800581a:	4631      	mov	r1, r6
 800581c:	4628      	mov	r0, r5
 800581e:	47b8      	blx	r7
 8005820:	3001      	adds	r0, #1
 8005822:	f43f ae92 	beq.w	800554a <_printf_float+0xba>
 8005826:	f108 0801 	add.w	r8, r8, #1
 800582a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	eba3 030a 	sub.w	r3, r3, sl
 8005834:	4543      	cmp	r3, r8
 8005836:	dcee      	bgt.n	8005816 <_printf_float+0x386>
 8005838:	e74a      	b.n	80056d0 <_printf_float+0x240>
 800583a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800583c:	2a01      	cmp	r2, #1
 800583e:	dc01      	bgt.n	8005844 <_printf_float+0x3b4>
 8005840:	07db      	lsls	r3, r3, #31
 8005842:	d53a      	bpl.n	80058ba <_printf_float+0x42a>
 8005844:	2301      	movs	r3, #1
 8005846:	4642      	mov	r2, r8
 8005848:	4631      	mov	r1, r6
 800584a:	4628      	mov	r0, r5
 800584c:	47b8      	blx	r7
 800584e:	3001      	adds	r0, #1
 8005850:	f43f ae7b 	beq.w	800554a <_printf_float+0xba>
 8005854:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005858:	4631      	mov	r1, r6
 800585a:	4628      	mov	r0, r5
 800585c:	47b8      	blx	r7
 800585e:	3001      	adds	r0, #1
 8005860:	f108 0801 	add.w	r8, r8, #1
 8005864:	f43f ae71 	beq.w	800554a <_printf_float+0xba>
 8005868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800586a:	2200      	movs	r2, #0
 800586c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8005870:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005874:	2300      	movs	r3, #0
 8005876:	f7fb f947 	bl	8000b08 <__aeabi_dcmpeq>
 800587a:	b9c8      	cbnz	r0, 80058b0 <_printf_float+0x420>
 800587c:	4653      	mov	r3, sl
 800587e:	4642      	mov	r2, r8
 8005880:	4631      	mov	r1, r6
 8005882:	4628      	mov	r0, r5
 8005884:	47b8      	blx	r7
 8005886:	3001      	adds	r0, #1
 8005888:	d10e      	bne.n	80058a8 <_printf_float+0x418>
 800588a:	e65e      	b.n	800554a <_printf_float+0xba>
 800588c:	2301      	movs	r3, #1
 800588e:	4652      	mov	r2, sl
 8005890:	4631      	mov	r1, r6
 8005892:	4628      	mov	r0, r5
 8005894:	47b8      	blx	r7
 8005896:	3001      	adds	r0, #1
 8005898:	f43f ae57 	beq.w	800554a <_printf_float+0xba>
 800589c:	f108 0801 	add.w	r8, r8, #1
 80058a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058a2:	3b01      	subs	r3, #1
 80058a4:	4543      	cmp	r3, r8
 80058a6:	dcf1      	bgt.n	800588c <_printf_float+0x3fc>
 80058a8:	464b      	mov	r3, r9
 80058aa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80058ae:	e6de      	b.n	800566e <_printf_float+0x1de>
 80058b0:	f04f 0800 	mov.w	r8, #0
 80058b4:	f104 0a1a 	add.w	sl, r4, #26
 80058b8:	e7f2      	b.n	80058a0 <_printf_float+0x410>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e7df      	b.n	800587e <_printf_float+0x3ee>
 80058be:	2301      	movs	r3, #1
 80058c0:	464a      	mov	r2, r9
 80058c2:	4631      	mov	r1, r6
 80058c4:	4628      	mov	r0, r5
 80058c6:	47b8      	blx	r7
 80058c8:	3001      	adds	r0, #1
 80058ca:	f43f ae3e 	beq.w	800554a <_printf_float+0xba>
 80058ce:	f108 0801 	add.w	r8, r8, #1
 80058d2:	68e3      	ldr	r3, [r4, #12]
 80058d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058d6:	1a9b      	subs	r3, r3, r2
 80058d8:	4543      	cmp	r3, r8
 80058da:	dcf0      	bgt.n	80058be <_printf_float+0x42e>
 80058dc:	e6fc      	b.n	80056d8 <_printf_float+0x248>
 80058de:	f04f 0800 	mov.w	r8, #0
 80058e2:	f104 0919 	add.w	r9, r4, #25
 80058e6:	e7f4      	b.n	80058d2 <_printf_float+0x442>
 80058e8:	2900      	cmp	r1, #0
 80058ea:	f43f ae8b 	beq.w	8005604 <_printf_float+0x174>
 80058ee:	2300      	movs	r3, #0
 80058f0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80058f4:	ab09      	add	r3, sp, #36	; 0x24
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	ec49 8b10 	vmov	d0, r8, r9
 80058fc:	6022      	str	r2, [r4, #0]
 80058fe:	f8cd a004 	str.w	sl, [sp, #4]
 8005902:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005906:	4628      	mov	r0, r5
 8005908:	f7ff fd2e 	bl	8005368 <__cvt>
 800590c:	4680      	mov	r8, r0
 800590e:	e648      	b.n	80055a2 <_printf_float+0x112>

08005910 <_printf_common>:
 8005910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005914:	4691      	mov	r9, r2
 8005916:	461f      	mov	r7, r3
 8005918:	688a      	ldr	r2, [r1, #8]
 800591a:	690b      	ldr	r3, [r1, #16]
 800591c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005920:	4293      	cmp	r3, r2
 8005922:	bfb8      	it	lt
 8005924:	4613      	movlt	r3, r2
 8005926:	f8c9 3000 	str.w	r3, [r9]
 800592a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800592e:	4606      	mov	r6, r0
 8005930:	460c      	mov	r4, r1
 8005932:	b112      	cbz	r2, 800593a <_printf_common+0x2a>
 8005934:	3301      	adds	r3, #1
 8005936:	f8c9 3000 	str.w	r3, [r9]
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	0699      	lsls	r1, r3, #26
 800593e:	bf42      	ittt	mi
 8005940:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005944:	3302      	addmi	r3, #2
 8005946:	f8c9 3000 	strmi.w	r3, [r9]
 800594a:	6825      	ldr	r5, [r4, #0]
 800594c:	f015 0506 	ands.w	r5, r5, #6
 8005950:	d107      	bne.n	8005962 <_printf_common+0x52>
 8005952:	f104 0a19 	add.w	sl, r4, #25
 8005956:	68e3      	ldr	r3, [r4, #12]
 8005958:	f8d9 2000 	ldr.w	r2, [r9]
 800595c:	1a9b      	subs	r3, r3, r2
 800595e:	42ab      	cmp	r3, r5
 8005960:	dc28      	bgt.n	80059b4 <_printf_common+0xa4>
 8005962:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005966:	6822      	ldr	r2, [r4, #0]
 8005968:	3300      	adds	r3, #0
 800596a:	bf18      	it	ne
 800596c:	2301      	movne	r3, #1
 800596e:	0692      	lsls	r2, r2, #26
 8005970:	d42d      	bmi.n	80059ce <_printf_common+0xbe>
 8005972:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005976:	4639      	mov	r1, r7
 8005978:	4630      	mov	r0, r6
 800597a:	47c0      	blx	r8
 800597c:	3001      	adds	r0, #1
 800597e:	d020      	beq.n	80059c2 <_printf_common+0xb2>
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	68e5      	ldr	r5, [r4, #12]
 8005984:	f8d9 2000 	ldr.w	r2, [r9]
 8005988:	f003 0306 	and.w	r3, r3, #6
 800598c:	2b04      	cmp	r3, #4
 800598e:	bf08      	it	eq
 8005990:	1aad      	subeq	r5, r5, r2
 8005992:	68a3      	ldr	r3, [r4, #8]
 8005994:	6922      	ldr	r2, [r4, #16]
 8005996:	bf0c      	ite	eq
 8005998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800599c:	2500      	movne	r5, #0
 800599e:	4293      	cmp	r3, r2
 80059a0:	bfc4      	itt	gt
 80059a2:	1a9b      	subgt	r3, r3, r2
 80059a4:	18ed      	addgt	r5, r5, r3
 80059a6:	f04f 0900 	mov.w	r9, #0
 80059aa:	341a      	adds	r4, #26
 80059ac:	454d      	cmp	r5, r9
 80059ae:	d11a      	bne.n	80059e6 <_printf_common+0xd6>
 80059b0:	2000      	movs	r0, #0
 80059b2:	e008      	b.n	80059c6 <_printf_common+0xb6>
 80059b4:	2301      	movs	r3, #1
 80059b6:	4652      	mov	r2, sl
 80059b8:	4639      	mov	r1, r7
 80059ba:	4630      	mov	r0, r6
 80059bc:	47c0      	blx	r8
 80059be:	3001      	adds	r0, #1
 80059c0:	d103      	bne.n	80059ca <_printf_common+0xba>
 80059c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ca:	3501      	adds	r5, #1
 80059cc:	e7c3      	b.n	8005956 <_printf_common+0x46>
 80059ce:	18e1      	adds	r1, r4, r3
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	2030      	movs	r0, #48	; 0x30
 80059d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059d8:	4422      	add	r2, r4
 80059da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059e2:	3302      	adds	r3, #2
 80059e4:	e7c5      	b.n	8005972 <_printf_common+0x62>
 80059e6:	2301      	movs	r3, #1
 80059e8:	4622      	mov	r2, r4
 80059ea:	4639      	mov	r1, r7
 80059ec:	4630      	mov	r0, r6
 80059ee:	47c0      	blx	r8
 80059f0:	3001      	adds	r0, #1
 80059f2:	d0e6      	beq.n	80059c2 <_printf_common+0xb2>
 80059f4:	f109 0901 	add.w	r9, r9, #1
 80059f8:	e7d8      	b.n	80059ac <_printf_common+0x9c>
	...

080059fc <_printf_i>:
 80059fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005a04:	460c      	mov	r4, r1
 8005a06:	7e09      	ldrb	r1, [r1, #24]
 8005a08:	b085      	sub	sp, #20
 8005a0a:	296e      	cmp	r1, #110	; 0x6e
 8005a0c:	4617      	mov	r7, r2
 8005a0e:	4606      	mov	r6, r0
 8005a10:	4698      	mov	r8, r3
 8005a12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a14:	f000 80b3 	beq.w	8005b7e <_printf_i+0x182>
 8005a18:	d822      	bhi.n	8005a60 <_printf_i+0x64>
 8005a1a:	2963      	cmp	r1, #99	; 0x63
 8005a1c:	d036      	beq.n	8005a8c <_printf_i+0x90>
 8005a1e:	d80a      	bhi.n	8005a36 <_printf_i+0x3a>
 8005a20:	2900      	cmp	r1, #0
 8005a22:	f000 80b9 	beq.w	8005b98 <_printf_i+0x19c>
 8005a26:	2958      	cmp	r1, #88	; 0x58
 8005a28:	f000 8083 	beq.w	8005b32 <_printf_i+0x136>
 8005a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005a34:	e032      	b.n	8005a9c <_printf_i+0xa0>
 8005a36:	2964      	cmp	r1, #100	; 0x64
 8005a38:	d001      	beq.n	8005a3e <_printf_i+0x42>
 8005a3a:	2969      	cmp	r1, #105	; 0x69
 8005a3c:	d1f6      	bne.n	8005a2c <_printf_i+0x30>
 8005a3e:	6820      	ldr	r0, [r4, #0]
 8005a40:	6813      	ldr	r3, [r2, #0]
 8005a42:	0605      	lsls	r5, r0, #24
 8005a44:	f103 0104 	add.w	r1, r3, #4
 8005a48:	d52a      	bpl.n	8005aa0 <_printf_i+0xa4>
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6011      	str	r1, [r2, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	da03      	bge.n	8005a5a <_printf_i+0x5e>
 8005a52:	222d      	movs	r2, #45	; 0x2d
 8005a54:	425b      	negs	r3, r3
 8005a56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005a5a:	486f      	ldr	r0, [pc, #444]	; (8005c18 <_printf_i+0x21c>)
 8005a5c:	220a      	movs	r2, #10
 8005a5e:	e039      	b.n	8005ad4 <_printf_i+0xd8>
 8005a60:	2973      	cmp	r1, #115	; 0x73
 8005a62:	f000 809d 	beq.w	8005ba0 <_printf_i+0x1a4>
 8005a66:	d808      	bhi.n	8005a7a <_printf_i+0x7e>
 8005a68:	296f      	cmp	r1, #111	; 0x6f
 8005a6a:	d020      	beq.n	8005aae <_printf_i+0xb2>
 8005a6c:	2970      	cmp	r1, #112	; 0x70
 8005a6e:	d1dd      	bne.n	8005a2c <_printf_i+0x30>
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	f043 0320 	orr.w	r3, r3, #32
 8005a76:	6023      	str	r3, [r4, #0]
 8005a78:	e003      	b.n	8005a82 <_printf_i+0x86>
 8005a7a:	2975      	cmp	r1, #117	; 0x75
 8005a7c:	d017      	beq.n	8005aae <_printf_i+0xb2>
 8005a7e:	2978      	cmp	r1, #120	; 0x78
 8005a80:	d1d4      	bne.n	8005a2c <_printf_i+0x30>
 8005a82:	2378      	movs	r3, #120	; 0x78
 8005a84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a88:	4864      	ldr	r0, [pc, #400]	; (8005c1c <_printf_i+0x220>)
 8005a8a:	e055      	b.n	8005b38 <_printf_i+0x13c>
 8005a8c:	6813      	ldr	r3, [r2, #0]
 8005a8e:	1d19      	adds	r1, r3, #4
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6011      	str	r1, [r2, #0]
 8005a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e08c      	b.n	8005bba <_printf_i+0x1be>
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6011      	str	r1, [r2, #0]
 8005aa4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005aa8:	bf18      	it	ne
 8005aaa:	b21b      	sxthne	r3, r3
 8005aac:	e7cf      	b.n	8005a4e <_printf_i+0x52>
 8005aae:	6813      	ldr	r3, [r2, #0]
 8005ab0:	6825      	ldr	r5, [r4, #0]
 8005ab2:	1d18      	adds	r0, r3, #4
 8005ab4:	6010      	str	r0, [r2, #0]
 8005ab6:	0628      	lsls	r0, r5, #24
 8005ab8:	d501      	bpl.n	8005abe <_printf_i+0xc2>
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	e002      	b.n	8005ac4 <_printf_i+0xc8>
 8005abe:	0668      	lsls	r0, r5, #25
 8005ac0:	d5fb      	bpl.n	8005aba <_printf_i+0xbe>
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	4854      	ldr	r0, [pc, #336]	; (8005c18 <_printf_i+0x21c>)
 8005ac6:	296f      	cmp	r1, #111	; 0x6f
 8005ac8:	bf14      	ite	ne
 8005aca:	220a      	movne	r2, #10
 8005acc:	2208      	moveq	r2, #8
 8005ace:	2100      	movs	r1, #0
 8005ad0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ad4:	6865      	ldr	r5, [r4, #4]
 8005ad6:	60a5      	str	r5, [r4, #8]
 8005ad8:	2d00      	cmp	r5, #0
 8005ada:	f2c0 8095 	blt.w	8005c08 <_printf_i+0x20c>
 8005ade:	6821      	ldr	r1, [r4, #0]
 8005ae0:	f021 0104 	bic.w	r1, r1, #4
 8005ae4:	6021      	str	r1, [r4, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d13d      	bne.n	8005b66 <_printf_i+0x16a>
 8005aea:	2d00      	cmp	r5, #0
 8005aec:	f040 808e 	bne.w	8005c0c <_printf_i+0x210>
 8005af0:	4665      	mov	r5, ip
 8005af2:	2a08      	cmp	r2, #8
 8005af4:	d10b      	bne.n	8005b0e <_printf_i+0x112>
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	07db      	lsls	r3, r3, #31
 8005afa:	d508      	bpl.n	8005b0e <_printf_i+0x112>
 8005afc:	6923      	ldr	r3, [r4, #16]
 8005afe:	6862      	ldr	r2, [r4, #4]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	bfde      	ittt	le
 8005b04:	2330      	movle	r3, #48	; 0x30
 8005b06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b0a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005b0e:	ebac 0305 	sub.w	r3, ip, r5
 8005b12:	6123      	str	r3, [r4, #16]
 8005b14:	f8cd 8000 	str.w	r8, [sp]
 8005b18:	463b      	mov	r3, r7
 8005b1a:	aa03      	add	r2, sp, #12
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	4630      	mov	r0, r6
 8005b20:	f7ff fef6 	bl	8005910 <_printf_common>
 8005b24:	3001      	adds	r0, #1
 8005b26:	d14d      	bne.n	8005bc4 <_printf_i+0x1c8>
 8005b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b2c:	b005      	add	sp, #20
 8005b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b32:	4839      	ldr	r0, [pc, #228]	; (8005c18 <_printf_i+0x21c>)
 8005b34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005b38:	6813      	ldr	r3, [r2, #0]
 8005b3a:	6821      	ldr	r1, [r4, #0]
 8005b3c:	1d1d      	adds	r5, r3, #4
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6015      	str	r5, [r2, #0]
 8005b42:	060a      	lsls	r2, r1, #24
 8005b44:	d50b      	bpl.n	8005b5e <_printf_i+0x162>
 8005b46:	07ca      	lsls	r2, r1, #31
 8005b48:	bf44      	itt	mi
 8005b4a:	f041 0120 	orrmi.w	r1, r1, #32
 8005b4e:	6021      	strmi	r1, [r4, #0]
 8005b50:	b91b      	cbnz	r3, 8005b5a <_printf_i+0x15e>
 8005b52:	6822      	ldr	r2, [r4, #0]
 8005b54:	f022 0220 	bic.w	r2, r2, #32
 8005b58:	6022      	str	r2, [r4, #0]
 8005b5a:	2210      	movs	r2, #16
 8005b5c:	e7b7      	b.n	8005ace <_printf_i+0xd2>
 8005b5e:	064d      	lsls	r5, r1, #25
 8005b60:	bf48      	it	mi
 8005b62:	b29b      	uxthmi	r3, r3
 8005b64:	e7ef      	b.n	8005b46 <_printf_i+0x14a>
 8005b66:	4665      	mov	r5, ip
 8005b68:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b6c:	fb02 3311 	mls	r3, r2, r1, r3
 8005b70:	5cc3      	ldrb	r3, [r0, r3]
 8005b72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005b76:	460b      	mov	r3, r1
 8005b78:	2900      	cmp	r1, #0
 8005b7a:	d1f5      	bne.n	8005b68 <_printf_i+0x16c>
 8005b7c:	e7b9      	b.n	8005af2 <_printf_i+0xf6>
 8005b7e:	6813      	ldr	r3, [r2, #0]
 8005b80:	6825      	ldr	r5, [r4, #0]
 8005b82:	6961      	ldr	r1, [r4, #20]
 8005b84:	1d18      	adds	r0, r3, #4
 8005b86:	6010      	str	r0, [r2, #0]
 8005b88:	0628      	lsls	r0, r5, #24
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	d501      	bpl.n	8005b92 <_printf_i+0x196>
 8005b8e:	6019      	str	r1, [r3, #0]
 8005b90:	e002      	b.n	8005b98 <_printf_i+0x19c>
 8005b92:	066a      	lsls	r2, r5, #25
 8005b94:	d5fb      	bpl.n	8005b8e <_printf_i+0x192>
 8005b96:	8019      	strh	r1, [r3, #0]
 8005b98:	2300      	movs	r3, #0
 8005b9a:	6123      	str	r3, [r4, #16]
 8005b9c:	4665      	mov	r5, ip
 8005b9e:	e7b9      	b.n	8005b14 <_printf_i+0x118>
 8005ba0:	6813      	ldr	r3, [r2, #0]
 8005ba2:	1d19      	adds	r1, r3, #4
 8005ba4:	6011      	str	r1, [r2, #0]
 8005ba6:	681d      	ldr	r5, [r3, #0]
 8005ba8:	6862      	ldr	r2, [r4, #4]
 8005baa:	2100      	movs	r1, #0
 8005bac:	4628      	mov	r0, r5
 8005bae:	f7fa fb37 	bl	8000220 <memchr>
 8005bb2:	b108      	cbz	r0, 8005bb8 <_printf_i+0x1bc>
 8005bb4:	1b40      	subs	r0, r0, r5
 8005bb6:	6060      	str	r0, [r4, #4]
 8005bb8:	6863      	ldr	r3, [r4, #4]
 8005bba:	6123      	str	r3, [r4, #16]
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bc2:	e7a7      	b.n	8005b14 <_printf_i+0x118>
 8005bc4:	6923      	ldr	r3, [r4, #16]
 8005bc6:	462a      	mov	r2, r5
 8005bc8:	4639      	mov	r1, r7
 8005bca:	4630      	mov	r0, r6
 8005bcc:	47c0      	blx	r8
 8005bce:	3001      	adds	r0, #1
 8005bd0:	d0aa      	beq.n	8005b28 <_printf_i+0x12c>
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	079b      	lsls	r3, r3, #30
 8005bd6:	d413      	bmi.n	8005c00 <_printf_i+0x204>
 8005bd8:	68e0      	ldr	r0, [r4, #12]
 8005bda:	9b03      	ldr	r3, [sp, #12]
 8005bdc:	4298      	cmp	r0, r3
 8005bde:	bfb8      	it	lt
 8005be0:	4618      	movlt	r0, r3
 8005be2:	e7a3      	b.n	8005b2c <_printf_i+0x130>
 8005be4:	2301      	movs	r3, #1
 8005be6:	464a      	mov	r2, r9
 8005be8:	4639      	mov	r1, r7
 8005bea:	4630      	mov	r0, r6
 8005bec:	47c0      	blx	r8
 8005bee:	3001      	adds	r0, #1
 8005bf0:	d09a      	beq.n	8005b28 <_printf_i+0x12c>
 8005bf2:	3501      	adds	r5, #1
 8005bf4:	68e3      	ldr	r3, [r4, #12]
 8005bf6:	9a03      	ldr	r2, [sp, #12]
 8005bf8:	1a9b      	subs	r3, r3, r2
 8005bfa:	42ab      	cmp	r3, r5
 8005bfc:	dcf2      	bgt.n	8005be4 <_printf_i+0x1e8>
 8005bfe:	e7eb      	b.n	8005bd8 <_printf_i+0x1dc>
 8005c00:	2500      	movs	r5, #0
 8005c02:	f104 0919 	add.w	r9, r4, #25
 8005c06:	e7f5      	b.n	8005bf4 <_printf_i+0x1f8>
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1ac      	bne.n	8005b66 <_printf_i+0x16a>
 8005c0c:	7803      	ldrb	r3, [r0, #0]
 8005c0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c16:	e76c      	b.n	8005af2 <_printf_i+0xf6>
 8005c18:	080077ee 	.word	0x080077ee
 8005c1c:	080077ff 	.word	0x080077ff

08005c20 <siprintf>:
 8005c20:	b40e      	push	{r1, r2, r3}
 8005c22:	b500      	push	{lr}
 8005c24:	b09c      	sub	sp, #112	; 0x70
 8005c26:	ab1d      	add	r3, sp, #116	; 0x74
 8005c28:	9002      	str	r0, [sp, #8]
 8005c2a:	9006      	str	r0, [sp, #24]
 8005c2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c30:	4809      	ldr	r0, [pc, #36]	; (8005c58 <siprintf+0x38>)
 8005c32:	9107      	str	r1, [sp, #28]
 8005c34:	9104      	str	r1, [sp, #16]
 8005c36:	4909      	ldr	r1, [pc, #36]	; (8005c5c <siprintf+0x3c>)
 8005c38:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c3c:	9105      	str	r1, [sp, #20]
 8005c3e:	6800      	ldr	r0, [r0, #0]
 8005c40:	9301      	str	r3, [sp, #4]
 8005c42:	a902      	add	r1, sp, #8
 8005c44:	f001 fa5c 	bl	8007100 <_svfiprintf_r>
 8005c48:	9b02      	ldr	r3, [sp, #8]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	b01c      	add	sp, #112	; 0x70
 8005c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c54:	b003      	add	sp, #12
 8005c56:	4770      	bx	lr
 8005c58:	20000024 	.word	0x20000024
 8005c5c:	ffff0208 	.word	0xffff0208

08005c60 <quorem>:
 8005c60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c64:	6903      	ldr	r3, [r0, #16]
 8005c66:	690c      	ldr	r4, [r1, #16]
 8005c68:	42a3      	cmp	r3, r4
 8005c6a:	4680      	mov	r8, r0
 8005c6c:	f2c0 8082 	blt.w	8005d74 <quorem+0x114>
 8005c70:	3c01      	subs	r4, #1
 8005c72:	f101 0714 	add.w	r7, r1, #20
 8005c76:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005c7a:	f100 0614 	add.w	r6, r0, #20
 8005c7e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005c82:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005c86:	eb06 030c 	add.w	r3, r6, ip
 8005c8a:	3501      	adds	r5, #1
 8005c8c:	eb07 090c 	add.w	r9, r7, ip
 8005c90:	9301      	str	r3, [sp, #4]
 8005c92:	fbb0 f5f5 	udiv	r5, r0, r5
 8005c96:	b395      	cbz	r5, 8005cfe <quorem+0x9e>
 8005c98:	f04f 0a00 	mov.w	sl, #0
 8005c9c:	4638      	mov	r0, r7
 8005c9e:	46b6      	mov	lr, r6
 8005ca0:	46d3      	mov	fp, sl
 8005ca2:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ca6:	b293      	uxth	r3, r2
 8005ca8:	fb05 a303 	mla	r3, r5, r3, sl
 8005cac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	ebab 0303 	sub.w	r3, fp, r3
 8005cb6:	0c12      	lsrs	r2, r2, #16
 8005cb8:	f8de b000 	ldr.w	fp, [lr]
 8005cbc:	fb05 a202 	mla	r2, r5, r2, sl
 8005cc0:	fa13 f38b 	uxtah	r3, r3, fp
 8005cc4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005cc8:	fa1f fb82 	uxth.w	fp, r2
 8005ccc:	f8de 2000 	ldr.w	r2, [lr]
 8005cd0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005cd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cde:	4581      	cmp	r9, r0
 8005ce0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005ce4:	f84e 3b04 	str.w	r3, [lr], #4
 8005ce8:	d2db      	bcs.n	8005ca2 <quorem+0x42>
 8005cea:	f856 300c 	ldr.w	r3, [r6, ip]
 8005cee:	b933      	cbnz	r3, 8005cfe <quorem+0x9e>
 8005cf0:	9b01      	ldr	r3, [sp, #4]
 8005cf2:	3b04      	subs	r3, #4
 8005cf4:	429e      	cmp	r6, r3
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	d330      	bcc.n	8005d5c <quorem+0xfc>
 8005cfa:	f8c8 4010 	str.w	r4, [r8, #16]
 8005cfe:	4640      	mov	r0, r8
 8005d00:	f001 f828 	bl	8006d54 <__mcmp>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	db25      	blt.n	8005d54 <quorem+0xf4>
 8005d08:	3501      	adds	r5, #1
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	f04f 0c00 	mov.w	ip, #0
 8005d10:	f857 2b04 	ldr.w	r2, [r7], #4
 8005d14:	f8d0 e000 	ldr.w	lr, [r0]
 8005d18:	b293      	uxth	r3, r2
 8005d1a:	ebac 0303 	sub.w	r3, ip, r3
 8005d1e:	0c12      	lsrs	r2, r2, #16
 8005d20:	fa13 f38e 	uxtah	r3, r3, lr
 8005d24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d32:	45b9      	cmp	r9, r7
 8005d34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d38:	f840 3b04 	str.w	r3, [r0], #4
 8005d3c:	d2e8      	bcs.n	8005d10 <quorem+0xb0>
 8005d3e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005d42:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005d46:	b92a      	cbnz	r2, 8005d54 <quorem+0xf4>
 8005d48:	3b04      	subs	r3, #4
 8005d4a:	429e      	cmp	r6, r3
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	d30b      	bcc.n	8005d68 <quorem+0x108>
 8005d50:	f8c8 4010 	str.w	r4, [r8, #16]
 8005d54:	4628      	mov	r0, r5
 8005d56:	b003      	add	sp, #12
 8005d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d5c:	6812      	ldr	r2, [r2, #0]
 8005d5e:	3b04      	subs	r3, #4
 8005d60:	2a00      	cmp	r2, #0
 8005d62:	d1ca      	bne.n	8005cfa <quorem+0x9a>
 8005d64:	3c01      	subs	r4, #1
 8005d66:	e7c5      	b.n	8005cf4 <quorem+0x94>
 8005d68:	6812      	ldr	r2, [r2, #0]
 8005d6a:	3b04      	subs	r3, #4
 8005d6c:	2a00      	cmp	r2, #0
 8005d6e:	d1ef      	bne.n	8005d50 <quorem+0xf0>
 8005d70:	3c01      	subs	r4, #1
 8005d72:	e7ea      	b.n	8005d4a <quorem+0xea>
 8005d74:	2000      	movs	r0, #0
 8005d76:	e7ee      	b.n	8005d56 <quorem+0xf6>

08005d78 <_dtoa_r>:
 8005d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7c:	ec57 6b10 	vmov	r6, r7, d0
 8005d80:	b097      	sub	sp, #92	; 0x5c
 8005d82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d84:	9106      	str	r1, [sp, #24]
 8005d86:	4604      	mov	r4, r0
 8005d88:	920b      	str	r2, [sp, #44]	; 0x2c
 8005d8a:	9312      	str	r3, [sp, #72]	; 0x48
 8005d8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005d90:	e9cd 6700 	strd	r6, r7, [sp]
 8005d94:	b93d      	cbnz	r5, 8005da6 <_dtoa_r+0x2e>
 8005d96:	2010      	movs	r0, #16
 8005d98:	f000 fdb4 	bl	8006904 <malloc>
 8005d9c:	6260      	str	r0, [r4, #36]	; 0x24
 8005d9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005da2:	6005      	str	r5, [r0, #0]
 8005da4:	60c5      	str	r5, [r0, #12]
 8005da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005da8:	6819      	ldr	r1, [r3, #0]
 8005daa:	b151      	cbz	r1, 8005dc2 <_dtoa_r+0x4a>
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	604a      	str	r2, [r1, #4]
 8005db0:	2301      	movs	r3, #1
 8005db2:	4093      	lsls	r3, r2
 8005db4:	608b      	str	r3, [r1, #8]
 8005db6:	4620      	mov	r0, r4
 8005db8:	f000 fdeb 	bl	8006992 <_Bfree>
 8005dbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	1e3b      	subs	r3, r7, #0
 8005dc4:	bfbb      	ittet	lt
 8005dc6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005dca:	9301      	strlt	r3, [sp, #4]
 8005dcc:	2300      	movge	r3, #0
 8005dce:	2201      	movlt	r2, #1
 8005dd0:	bfac      	ite	ge
 8005dd2:	f8c8 3000 	strge.w	r3, [r8]
 8005dd6:	f8c8 2000 	strlt.w	r2, [r8]
 8005dda:	4baf      	ldr	r3, [pc, #700]	; (8006098 <_dtoa_r+0x320>)
 8005ddc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005de0:	ea33 0308 	bics.w	r3, r3, r8
 8005de4:	d114      	bne.n	8005e10 <_dtoa_r+0x98>
 8005de6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005de8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	9b00      	ldr	r3, [sp, #0]
 8005df0:	b923      	cbnz	r3, 8005dfc <_dtoa_r+0x84>
 8005df2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005df6:	2800      	cmp	r0, #0
 8005df8:	f000 8542 	beq.w	8006880 <_dtoa_r+0xb08>
 8005dfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dfe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80060ac <_dtoa_r+0x334>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 8544 	beq.w	8006890 <_dtoa_r+0xb18>
 8005e08:	f10b 0303 	add.w	r3, fp, #3
 8005e0c:	f000 bd3e 	b.w	800688c <_dtoa_r+0xb14>
 8005e10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005e14:	2200      	movs	r2, #0
 8005e16:	2300      	movs	r3, #0
 8005e18:	4630      	mov	r0, r6
 8005e1a:	4639      	mov	r1, r7
 8005e1c:	f7fa fe74 	bl	8000b08 <__aeabi_dcmpeq>
 8005e20:	4681      	mov	r9, r0
 8005e22:	b168      	cbz	r0, 8005e40 <_dtoa_r+0xc8>
 8005e24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e26:	2301      	movs	r3, #1
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 8524 	beq.w	800687a <_dtoa_r+0xb02>
 8005e32:	4b9a      	ldr	r3, [pc, #616]	; (800609c <_dtoa_r+0x324>)
 8005e34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e36:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	f000 bd28 	b.w	8006890 <_dtoa_r+0xb18>
 8005e40:	aa14      	add	r2, sp, #80	; 0x50
 8005e42:	a915      	add	r1, sp, #84	; 0x54
 8005e44:	ec47 6b10 	vmov	d0, r6, r7
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f000 fffa 	bl	8006e42 <__d2b>
 8005e4e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005e52:	9004      	str	r0, [sp, #16]
 8005e54:	2d00      	cmp	r5, #0
 8005e56:	d07c      	beq.n	8005f52 <_dtoa_r+0x1da>
 8005e58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005e5c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005e60:	46b2      	mov	sl, r6
 8005e62:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005e66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e6a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005e6e:	2200      	movs	r2, #0
 8005e70:	4b8b      	ldr	r3, [pc, #556]	; (80060a0 <_dtoa_r+0x328>)
 8005e72:	4650      	mov	r0, sl
 8005e74:	4659      	mov	r1, fp
 8005e76:	f7fa fa27 	bl	80002c8 <__aeabi_dsub>
 8005e7a:	a381      	add	r3, pc, #516	; (adr r3, 8006080 <_dtoa_r+0x308>)
 8005e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e80:	f7fa fbda 	bl	8000638 <__aeabi_dmul>
 8005e84:	a380      	add	r3, pc, #512	; (adr r3, 8006088 <_dtoa_r+0x310>)
 8005e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8a:	f7fa fa1f 	bl	80002cc <__adddf3>
 8005e8e:	4606      	mov	r6, r0
 8005e90:	4628      	mov	r0, r5
 8005e92:	460f      	mov	r7, r1
 8005e94:	f7fa fb66 	bl	8000564 <__aeabi_i2d>
 8005e98:	a37d      	add	r3, pc, #500	; (adr r3, 8006090 <_dtoa_r+0x318>)
 8005e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9e:	f7fa fbcb 	bl	8000638 <__aeabi_dmul>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	4639      	mov	r1, r7
 8005eaa:	f7fa fa0f 	bl	80002cc <__adddf3>
 8005eae:	4606      	mov	r6, r0
 8005eb0:	460f      	mov	r7, r1
 8005eb2:	f7fa fe71 	bl	8000b98 <__aeabi_d2iz>
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	4682      	mov	sl, r0
 8005eba:	2300      	movs	r3, #0
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	4639      	mov	r1, r7
 8005ec0:	f7fa fe2c 	bl	8000b1c <__aeabi_dcmplt>
 8005ec4:	b148      	cbz	r0, 8005eda <_dtoa_r+0x162>
 8005ec6:	4650      	mov	r0, sl
 8005ec8:	f7fa fb4c 	bl	8000564 <__aeabi_i2d>
 8005ecc:	4632      	mov	r2, r6
 8005ece:	463b      	mov	r3, r7
 8005ed0:	f7fa fe1a 	bl	8000b08 <__aeabi_dcmpeq>
 8005ed4:	b908      	cbnz	r0, 8005eda <_dtoa_r+0x162>
 8005ed6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005eda:	f1ba 0f16 	cmp.w	sl, #22
 8005ede:	d859      	bhi.n	8005f94 <_dtoa_r+0x21c>
 8005ee0:	4970      	ldr	r1, [pc, #448]	; (80060a4 <_dtoa_r+0x32c>)
 8005ee2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005ee6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005eea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eee:	f7fa fe33 	bl	8000b58 <__aeabi_dcmpgt>
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d050      	beq.n	8005f98 <_dtoa_r+0x220>
 8005ef6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005efa:	2300      	movs	r3, #0
 8005efc:	930f      	str	r3, [sp, #60]	; 0x3c
 8005efe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f00:	1b5d      	subs	r5, r3, r5
 8005f02:	f1b5 0801 	subs.w	r8, r5, #1
 8005f06:	bf49      	itett	mi
 8005f08:	f1c5 0301 	rsbmi	r3, r5, #1
 8005f0c:	2300      	movpl	r3, #0
 8005f0e:	9305      	strmi	r3, [sp, #20]
 8005f10:	f04f 0800 	movmi.w	r8, #0
 8005f14:	bf58      	it	pl
 8005f16:	9305      	strpl	r3, [sp, #20]
 8005f18:	f1ba 0f00 	cmp.w	sl, #0
 8005f1c:	db3e      	blt.n	8005f9c <_dtoa_r+0x224>
 8005f1e:	2300      	movs	r3, #0
 8005f20:	44d0      	add	r8, sl
 8005f22:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005f26:	9307      	str	r3, [sp, #28]
 8005f28:	9b06      	ldr	r3, [sp, #24]
 8005f2a:	2b09      	cmp	r3, #9
 8005f2c:	f200 8090 	bhi.w	8006050 <_dtoa_r+0x2d8>
 8005f30:	2b05      	cmp	r3, #5
 8005f32:	bfc4      	itt	gt
 8005f34:	3b04      	subgt	r3, #4
 8005f36:	9306      	strgt	r3, [sp, #24]
 8005f38:	9b06      	ldr	r3, [sp, #24]
 8005f3a:	f1a3 0302 	sub.w	r3, r3, #2
 8005f3e:	bfcc      	ite	gt
 8005f40:	2500      	movgt	r5, #0
 8005f42:	2501      	movle	r5, #1
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	f200 808f 	bhi.w	8006068 <_dtoa_r+0x2f0>
 8005f4a:	e8df f003 	tbb	[pc, r3]
 8005f4e:	7f7d      	.short	0x7f7d
 8005f50:	7131      	.short	0x7131
 8005f52:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005f56:	441d      	add	r5, r3
 8005f58:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005f5c:	2820      	cmp	r0, #32
 8005f5e:	dd13      	ble.n	8005f88 <_dtoa_r+0x210>
 8005f60:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005f64:	9b00      	ldr	r3, [sp, #0]
 8005f66:	fa08 f800 	lsl.w	r8, r8, r0
 8005f6a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005f6e:	fa23 f000 	lsr.w	r0, r3, r0
 8005f72:	ea48 0000 	orr.w	r0, r8, r0
 8005f76:	f7fa fae5 	bl	8000544 <__aeabi_ui2d>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	4682      	mov	sl, r0
 8005f7e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005f82:	3d01      	subs	r5, #1
 8005f84:	9313      	str	r3, [sp, #76]	; 0x4c
 8005f86:	e772      	b.n	8005e6e <_dtoa_r+0xf6>
 8005f88:	9b00      	ldr	r3, [sp, #0]
 8005f8a:	f1c0 0020 	rsb	r0, r0, #32
 8005f8e:	fa03 f000 	lsl.w	r0, r3, r0
 8005f92:	e7f0      	b.n	8005f76 <_dtoa_r+0x1fe>
 8005f94:	2301      	movs	r3, #1
 8005f96:	e7b1      	b.n	8005efc <_dtoa_r+0x184>
 8005f98:	900f      	str	r0, [sp, #60]	; 0x3c
 8005f9a:	e7b0      	b.n	8005efe <_dtoa_r+0x186>
 8005f9c:	9b05      	ldr	r3, [sp, #20]
 8005f9e:	eba3 030a 	sub.w	r3, r3, sl
 8005fa2:	9305      	str	r3, [sp, #20]
 8005fa4:	f1ca 0300 	rsb	r3, sl, #0
 8005fa8:	9307      	str	r3, [sp, #28]
 8005faa:	2300      	movs	r3, #0
 8005fac:	930e      	str	r3, [sp, #56]	; 0x38
 8005fae:	e7bb      	b.n	8005f28 <_dtoa_r+0x1b0>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	930a      	str	r3, [sp, #40]	; 0x28
 8005fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	dd59      	ble.n	800606e <_dtoa_r+0x2f6>
 8005fba:	9302      	str	r3, [sp, #8]
 8005fbc:	4699      	mov	r9, r3
 8005fbe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	6072      	str	r2, [r6, #4]
 8005fc4:	2204      	movs	r2, #4
 8005fc6:	f102 0014 	add.w	r0, r2, #20
 8005fca:	4298      	cmp	r0, r3
 8005fcc:	6871      	ldr	r1, [r6, #4]
 8005fce:	d953      	bls.n	8006078 <_dtoa_r+0x300>
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f000 fcaa 	bl	800692a <_Balloc>
 8005fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fd8:	6030      	str	r0, [r6, #0]
 8005fda:	f1b9 0f0e 	cmp.w	r9, #14
 8005fde:	f8d3 b000 	ldr.w	fp, [r3]
 8005fe2:	f200 80e6 	bhi.w	80061b2 <_dtoa_r+0x43a>
 8005fe6:	2d00      	cmp	r5, #0
 8005fe8:	f000 80e3 	beq.w	80061b2 <_dtoa_r+0x43a>
 8005fec:	ed9d 7b00 	vldr	d7, [sp]
 8005ff0:	f1ba 0f00 	cmp.w	sl, #0
 8005ff4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005ff8:	dd74      	ble.n	80060e4 <_dtoa_r+0x36c>
 8005ffa:	4a2a      	ldr	r2, [pc, #168]	; (80060a4 <_dtoa_r+0x32c>)
 8005ffc:	f00a 030f 	and.w	r3, sl, #15
 8006000:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006004:	ed93 7b00 	vldr	d7, [r3]
 8006008:	ea4f 162a 	mov.w	r6, sl, asr #4
 800600c:	06f0      	lsls	r0, r6, #27
 800600e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006012:	d565      	bpl.n	80060e0 <_dtoa_r+0x368>
 8006014:	4b24      	ldr	r3, [pc, #144]	; (80060a8 <_dtoa_r+0x330>)
 8006016:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800601a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800601e:	f7fa fc35 	bl	800088c <__aeabi_ddiv>
 8006022:	e9cd 0100 	strd	r0, r1, [sp]
 8006026:	f006 060f 	and.w	r6, r6, #15
 800602a:	2503      	movs	r5, #3
 800602c:	4f1e      	ldr	r7, [pc, #120]	; (80060a8 <_dtoa_r+0x330>)
 800602e:	e04c      	b.n	80060ca <_dtoa_r+0x352>
 8006030:	2301      	movs	r3, #1
 8006032:	930a      	str	r3, [sp, #40]	; 0x28
 8006034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006036:	4453      	add	r3, sl
 8006038:	f103 0901 	add.w	r9, r3, #1
 800603c:	9302      	str	r3, [sp, #8]
 800603e:	464b      	mov	r3, r9
 8006040:	2b01      	cmp	r3, #1
 8006042:	bfb8      	it	lt
 8006044:	2301      	movlt	r3, #1
 8006046:	e7ba      	b.n	8005fbe <_dtoa_r+0x246>
 8006048:	2300      	movs	r3, #0
 800604a:	e7b2      	b.n	8005fb2 <_dtoa_r+0x23a>
 800604c:	2300      	movs	r3, #0
 800604e:	e7f0      	b.n	8006032 <_dtoa_r+0x2ba>
 8006050:	2501      	movs	r5, #1
 8006052:	2300      	movs	r3, #0
 8006054:	9306      	str	r3, [sp, #24]
 8006056:	950a      	str	r5, [sp, #40]	; 0x28
 8006058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800605c:	9302      	str	r3, [sp, #8]
 800605e:	4699      	mov	r9, r3
 8006060:	2200      	movs	r2, #0
 8006062:	2312      	movs	r3, #18
 8006064:	920b      	str	r2, [sp, #44]	; 0x2c
 8006066:	e7aa      	b.n	8005fbe <_dtoa_r+0x246>
 8006068:	2301      	movs	r3, #1
 800606a:	930a      	str	r3, [sp, #40]	; 0x28
 800606c:	e7f4      	b.n	8006058 <_dtoa_r+0x2e0>
 800606e:	2301      	movs	r3, #1
 8006070:	9302      	str	r3, [sp, #8]
 8006072:	4699      	mov	r9, r3
 8006074:	461a      	mov	r2, r3
 8006076:	e7f5      	b.n	8006064 <_dtoa_r+0x2ec>
 8006078:	3101      	adds	r1, #1
 800607a:	6071      	str	r1, [r6, #4]
 800607c:	0052      	lsls	r2, r2, #1
 800607e:	e7a2      	b.n	8005fc6 <_dtoa_r+0x24e>
 8006080:	636f4361 	.word	0x636f4361
 8006084:	3fd287a7 	.word	0x3fd287a7
 8006088:	8b60c8b3 	.word	0x8b60c8b3
 800608c:	3fc68a28 	.word	0x3fc68a28
 8006090:	509f79fb 	.word	0x509f79fb
 8006094:	3fd34413 	.word	0x3fd34413
 8006098:	7ff00000 	.word	0x7ff00000
 800609c:	080077ed 	.word	0x080077ed
 80060a0:	3ff80000 	.word	0x3ff80000
 80060a4:	08007848 	.word	0x08007848
 80060a8:	08007820 	.word	0x08007820
 80060ac:	08007819 	.word	0x08007819
 80060b0:	07f1      	lsls	r1, r6, #31
 80060b2:	d508      	bpl.n	80060c6 <_dtoa_r+0x34e>
 80060b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060bc:	f7fa fabc 	bl	8000638 <__aeabi_dmul>
 80060c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80060c4:	3501      	adds	r5, #1
 80060c6:	1076      	asrs	r6, r6, #1
 80060c8:	3708      	adds	r7, #8
 80060ca:	2e00      	cmp	r6, #0
 80060cc:	d1f0      	bne.n	80060b0 <_dtoa_r+0x338>
 80060ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80060d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060d6:	f7fa fbd9 	bl	800088c <__aeabi_ddiv>
 80060da:	e9cd 0100 	strd	r0, r1, [sp]
 80060de:	e01a      	b.n	8006116 <_dtoa_r+0x39e>
 80060e0:	2502      	movs	r5, #2
 80060e2:	e7a3      	b.n	800602c <_dtoa_r+0x2b4>
 80060e4:	f000 80a0 	beq.w	8006228 <_dtoa_r+0x4b0>
 80060e8:	f1ca 0600 	rsb	r6, sl, #0
 80060ec:	4b9f      	ldr	r3, [pc, #636]	; (800636c <_dtoa_r+0x5f4>)
 80060ee:	4fa0      	ldr	r7, [pc, #640]	; (8006370 <_dtoa_r+0x5f8>)
 80060f0:	f006 020f 	and.w	r2, r6, #15
 80060f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006100:	f7fa fa9a 	bl	8000638 <__aeabi_dmul>
 8006104:	e9cd 0100 	strd	r0, r1, [sp]
 8006108:	1136      	asrs	r6, r6, #4
 800610a:	2300      	movs	r3, #0
 800610c:	2502      	movs	r5, #2
 800610e:	2e00      	cmp	r6, #0
 8006110:	d17f      	bne.n	8006212 <_dtoa_r+0x49a>
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e1      	bne.n	80060da <_dtoa_r+0x362>
 8006116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 8087 	beq.w	800622c <_dtoa_r+0x4b4>
 800611e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006122:	2200      	movs	r2, #0
 8006124:	4b93      	ldr	r3, [pc, #588]	; (8006374 <_dtoa_r+0x5fc>)
 8006126:	4630      	mov	r0, r6
 8006128:	4639      	mov	r1, r7
 800612a:	f7fa fcf7 	bl	8000b1c <__aeabi_dcmplt>
 800612e:	2800      	cmp	r0, #0
 8006130:	d07c      	beq.n	800622c <_dtoa_r+0x4b4>
 8006132:	f1b9 0f00 	cmp.w	r9, #0
 8006136:	d079      	beq.n	800622c <_dtoa_r+0x4b4>
 8006138:	9b02      	ldr	r3, [sp, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	dd35      	ble.n	80061aa <_dtoa_r+0x432>
 800613e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006142:	9308      	str	r3, [sp, #32]
 8006144:	4639      	mov	r1, r7
 8006146:	2200      	movs	r2, #0
 8006148:	4b8b      	ldr	r3, [pc, #556]	; (8006378 <_dtoa_r+0x600>)
 800614a:	4630      	mov	r0, r6
 800614c:	f7fa fa74 	bl	8000638 <__aeabi_dmul>
 8006150:	e9cd 0100 	strd	r0, r1, [sp]
 8006154:	9f02      	ldr	r7, [sp, #8]
 8006156:	3501      	adds	r5, #1
 8006158:	4628      	mov	r0, r5
 800615a:	f7fa fa03 	bl	8000564 <__aeabi_i2d>
 800615e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006162:	f7fa fa69 	bl	8000638 <__aeabi_dmul>
 8006166:	2200      	movs	r2, #0
 8006168:	4b84      	ldr	r3, [pc, #528]	; (800637c <_dtoa_r+0x604>)
 800616a:	f7fa f8af 	bl	80002cc <__adddf3>
 800616e:	4605      	mov	r5, r0
 8006170:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006174:	2f00      	cmp	r7, #0
 8006176:	d15d      	bne.n	8006234 <_dtoa_r+0x4bc>
 8006178:	2200      	movs	r2, #0
 800617a:	4b81      	ldr	r3, [pc, #516]	; (8006380 <_dtoa_r+0x608>)
 800617c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006180:	f7fa f8a2 	bl	80002c8 <__aeabi_dsub>
 8006184:	462a      	mov	r2, r5
 8006186:	4633      	mov	r3, r6
 8006188:	e9cd 0100 	strd	r0, r1, [sp]
 800618c:	f7fa fce4 	bl	8000b58 <__aeabi_dcmpgt>
 8006190:	2800      	cmp	r0, #0
 8006192:	f040 8288 	bne.w	80066a6 <_dtoa_r+0x92e>
 8006196:	462a      	mov	r2, r5
 8006198:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800619c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061a0:	f7fa fcbc 	bl	8000b1c <__aeabi_dcmplt>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	f040 827c 	bne.w	80066a2 <_dtoa_r+0x92a>
 80061aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061ae:	e9cd 2300 	strd	r2, r3, [sp]
 80061b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f2c0 8150 	blt.w	800645a <_dtoa_r+0x6e2>
 80061ba:	f1ba 0f0e 	cmp.w	sl, #14
 80061be:	f300 814c 	bgt.w	800645a <_dtoa_r+0x6e2>
 80061c2:	4b6a      	ldr	r3, [pc, #424]	; (800636c <_dtoa_r+0x5f4>)
 80061c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80061c8:	ed93 7b00 	vldr	d7, [r3]
 80061cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80061d4:	f280 80d8 	bge.w	8006388 <_dtoa_r+0x610>
 80061d8:	f1b9 0f00 	cmp.w	r9, #0
 80061dc:	f300 80d4 	bgt.w	8006388 <_dtoa_r+0x610>
 80061e0:	f040 825e 	bne.w	80066a0 <_dtoa_r+0x928>
 80061e4:	2200      	movs	r2, #0
 80061e6:	4b66      	ldr	r3, [pc, #408]	; (8006380 <_dtoa_r+0x608>)
 80061e8:	ec51 0b17 	vmov	r0, r1, d7
 80061ec:	f7fa fa24 	bl	8000638 <__aeabi_dmul>
 80061f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061f4:	f7fa fca6 	bl	8000b44 <__aeabi_dcmpge>
 80061f8:	464f      	mov	r7, r9
 80061fa:	464e      	mov	r6, r9
 80061fc:	2800      	cmp	r0, #0
 80061fe:	f040 8234 	bne.w	800666a <_dtoa_r+0x8f2>
 8006202:	2331      	movs	r3, #49	; 0x31
 8006204:	f10b 0501 	add.w	r5, fp, #1
 8006208:	f88b 3000 	strb.w	r3, [fp]
 800620c:	f10a 0a01 	add.w	sl, sl, #1
 8006210:	e22f      	b.n	8006672 <_dtoa_r+0x8fa>
 8006212:	07f2      	lsls	r2, r6, #31
 8006214:	d505      	bpl.n	8006222 <_dtoa_r+0x4aa>
 8006216:	e9d7 2300 	ldrd	r2, r3, [r7]
 800621a:	f7fa fa0d 	bl	8000638 <__aeabi_dmul>
 800621e:	3501      	adds	r5, #1
 8006220:	2301      	movs	r3, #1
 8006222:	1076      	asrs	r6, r6, #1
 8006224:	3708      	adds	r7, #8
 8006226:	e772      	b.n	800610e <_dtoa_r+0x396>
 8006228:	2502      	movs	r5, #2
 800622a:	e774      	b.n	8006116 <_dtoa_r+0x39e>
 800622c:	f8cd a020 	str.w	sl, [sp, #32]
 8006230:	464f      	mov	r7, r9
 8006232:	e791      	b.n	8006158 <_dtoa_r+0x3e0>
 8006234:	4b4d      	ldr	r3, [pc, #308]	; (800636c <_dtoa_r+0x5f4>)
 8006236:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800623a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800623e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006240:	2b00      	cmp	r3, #0
 8006242:	d047      	beq.n	80062d4 <_dtoa_r+0x55c>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	2000      	movs	r0, #0
 800624a:	494e      	ldr	r1, [pc, #312]	; (8006384 <_dtoa_r+0x60c>)
 800624c:	f7fa fb1e 	bl	800088c <__aeabi_ddiv>
 8006250:	462a      	mov	r2, r5
 8006252:	4633      	mov	r3, r6
 8006254:	f7fa f838 	bl	80002c8 <__aeabi_dsub>
 8006258:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800625c:	465d      	mov	r5, fp
 800625e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006262:	f7fa fc99 	bl	8000b98 <__aeabi_d2iz>
 8006266:	4606      	mov	r6, r0
 8006268:	f7fa f97c 	bl	8000564 <__aeabi_i2d>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006274:	f7fa f828 	bl	80002c8 <__aeabi_dsub>
 8006278:	3630      	adds	r6, #48	; 0x30
 800627a:	f805 6b01 	strb.w	r6, [r5], #1
 800627e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006282:	e9cd 0100 	strd	r0, r1, [sp]
 8006286:	f7fa fc49 	bl	8000b1c <__aeabi_dcmplt>
 800628a:	2800      	cmp	r0, #0
 800628c:	d163      	bne.n	8006356 <_dtoa_r+0x5de>
 800628e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006292:	2000      	movs	r0, #0
 8006294:	4937      	ldr	r1, [pc, #220]	; (8006374 <_dtoa_r+0x5fc>)
 8006296:	f7fa f817 	bl	80002c8 <__aeabi_dsub>
 800629a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800629e:	f7fa fc3d 	bl	8000b1c <__aeabi_dcmplt>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	f040 80b7 	bne.w	8006416 <_dtoa_r+0x69e>
 80062a8:	eba5 030b 	sub.w	r3, r5, fp
 80062ac:	429f      	cmp	r7, r3
 80062ae:	f77f af7c 	ble.w	80061aa <_dtoa_r+0x432>
 80062b2:	2200      	movs	r2, #0
 80062b4:	4b30      	ldr	r3, [pc, #192]	; (8006378 <_dtoa_r+0x600>)
 80062b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062ba:	f7fa f9bd 	bl	8000638 <__aeabi_dmul>
 80062be:	2200      	movs	r2, #0
 80062c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80062c4:	4b2c      	ldr	r3, [pc, #176]	; (8006378 <_dtoa_r+0x600>)
 80062c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062ca:	f7fa f9b5 	bl	8000638 <__aeabi_dmul>
 80062ce:	e9cd 0100 	strd	r0, r1, [sp]
 80062d2:	e7c4      	b.n	800625e <_dtoa_r+0x4e6>
 80062d4:	462a      	mov	r2, r5
 80062d6:	4633      	mov	r3, r6
 80062d8:	f7fa f9ae 	bl	8000638 <__aeabi_dmul>
 80062dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80062e0:	eb0b 0507 	add.w	r5, fp, r7
 80062e4:	465e      	mov	r6, fp
 80062e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062ea:	f7fa fc55 	bl	8000b98 <__aeabi_d2iz>
 80062ee:	4607      	mov	r7, r0
 80062f0:	f7fa f938 	bl	8000564 <__aeabi_i2d>
 80062f4:	3730      	adds	r7, #48	; 0x30
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062fe:	f7f9 ffe3 	bl	80002c8 <__aeabi_dsub>
 8006302:	f806 7b01 	strb.w	r7, [r6], #1
 8006306:	42ae      	cmp	r6, r5
 8006308:	e9cd 0100 	strd	r0, r1, [sp]
 800630c:	f04f 0200 	mov.w	r2, #0
 8006310:	d126      	bne.n	8006360 <_dtoa_r+0x5e8>
 8006312:	4b1c      	ldr	r3, [pc, #112]	; (8006384 <_dtoa_r+0x60c>)
 8006314:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006318:	f7f9 ffd8 	bl	80002cc <__adddf3>
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006324:	f7fa fc18 	bl	8000b58 <__aeabi_dcmpgt>
 8006328:	2800      	cmp	r0, #0
 800632a:	d174      	bne.n	8006416 <_dtoa_r+0x69e>
 800632c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006330:	2000      	movs	r0, #0
 8006332:	4914      	ldr	r1, [pc, #80]	; (8006384 <_dtoa_r+0x60c>)
 8006334:	f7f9 ffc8 	bl	80002c8 <__aeabi_dsub>
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006340:	f7fa fbec 	bl	8000b1c <__aeabi_dcmplt>
 8006344:	2800      	cmp	r0, #0
 8006346:	f43f af30 	beq.w	80061aa <_dtoa_r+0x432>
 800634a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800634e:	2b30      	cmp	r3, #48	; 0x30
 8006350:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006354:	d002      	beq.n	800635c <_dtoa_r+0x5e4>
 8006356:	f8dd a020 	ldr.w	sl, [sp, #32]
 800635a:	e04a      	b.n	80063f2 <_dtoa_r+0x67a>
 800635c:	4615      	mov	r5, r2
 800635e:	e7f4      	b.n	800634a <_dtoa_r+0x5d2>
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <_dtoa_r+0x600>)
 8006362:	f7fa f969 	bl	8000638 <__aeabi_dmul>
 8006366:	e9cd 0100 	strd	r0, r1, [sp]
 800636a:	e7bc      	b.n	80062e6 <_dtoa_r+0x56e>
 800636c:	08007848 	.word	0x08007848
 8006370:	08007820 	.word	0x08007820
 8006374:	3ff00000 	.word	0x3ff00000
 8006378:	40240000 	.word	0x40240000
 800637c:	401c0000 	.word	0x401c0000
 8006380:	40140000 	.word	0x40140000
 8006384:	3fe00000 	.word	0x3fe00000
 8006388:	e9dd 6700 	ldrd	r6, r7, [sp]
 800638c:	465d      	mov	r5, fp
 800638e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006392:	4630      	mov	r0, r6
 8006394:	4639      	mov	r1, r7
 8006396:	f7fa fa79 	bl	800088c <__aeabi_ddiv>
 800639a:	f7fa fbfd 	bl	8000b98 <__aeabi_d2iz>
 800639e:	4680      	mov	r8, r0
 80063a0:	f7fa f8e0 	bl	8000564 <__aeabi_i2d>
 80063a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063a8:	f7fa f946 	bl	8000638 <__aeabi_dmul>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	4630      	mov	r0, r6
 80063b2:	4639      	mov	r1, r7
 80063b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80063b8:	f7f9 ff86 	bl	80002c8 <__aeabi_dsub>
 80063bc:	f805 6b01 	strb.w	r6, [r5], #1
 80063c0:	eba5 060b 	sub.w	r6, r5, fp
 80063c4:	45b1      	cmp	r9, r6
 80063c6:	4602      	mov	r2, r0
 80063c8:	460b      	mov	r3, r1
 80063ca:	d139      	bne.n	8006440 <_dtoa_r+0x6c8>
 80063cc:	f7f9 ff7e 	bl	80002cc <__adddf3>
 80063d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063d4:	4606      	mov	r6, r0
 80063d6:	460f      	mov	r7, r1
 80063d8:	f7fa fbbe 	bl	8000b58 <__aeabi_dcmpgt>
 80063dc:	b9c8      	cbnz	r0, 8006412 <_dtoa_r+0x69a>
 80063de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063e2:	4630      	mov	r0, r6
 80063e4:	4639      	mov	r1, r7
 80063e6:	f7fa fb8f 	bl	8000b08 <__aeabi_dcmpeq>
 80063ea:	b110      	cbz	r0, 80063f2 <_dtoa_r+0x67a>
 80063ec:	f018 0f01 	tst.w	r8, #1
 80063f0:	d10f      	bne.n	8006412 <_dtoa_r+0x69a>
 80063f2:	9904      	ldr	r1, [sp, #16]
 80063f4:	4620      	mov	r0, r4
 80063f6:	f000 facc 	bl	8006992 <_Bfree>
 80063fa:	2300      	movs	r3, #0
 80063fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80063fe:	702b      	strb	r3, [r5, #0]
 8006400:	f10a 0301 	add.w	r3, sl, #1
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 8241 	beq.w	8006890 <_dtoa_r+0xb18>
 800640e:	601d      	str	r5, [r3, #0]
 8006410:	e23e      	b.n	8006890 <_dtoa_r+0xb18>
 8006412:	f8cd a020 	str.w	sl, [sp, #32]
 8006416:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800641a:	2a39      	cmp	r2, #57	; 0x39
 800641c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8006420:	d108      	bne.n	8006434 <_dtoa_r+0x6bc>
 8006422:	459b      	cmp	fp, r3
 8006424:	d10a      	bne.n	800643c <_dtoa_r+0x6c4>
 8006426:	9b08      	ldr	r3, [sp, #32]
 8006428:	3301      	adds	r3, #1
 800642a:	9308      	str	r3, [sp, #32]
 800642c:	2330      	movs	r3, #48	; 0x30
 800642e:	f88b 3000 	strb.w	r3, [fp]
 8006432:	465b      	mov	r3, fp
 8006434:	781a      	ldrb	r2, [r3, #0]
 8006436:	3201      	adds	r2, #1
 8006438:	701a      	strb	r2, [r3, #0]
 800643a:	e78c      	b.n	8006356 <_dtoa_r+0x5de>
 800643c:	461d      	mov	r5, r3
 800643e:	e7ea      	b.n	8006416 <_dtoa_r+0x69e>
 8006440:	2200      	movs	r2, #0
 8006442:	4b9b      	ldr	r3, [pc, #620]	; (80066b0 <_dtoa_r+0x938>)
 8006444:	f7fa f8f8 	bl	8000638 <__aeabi_dmul>
 8006448:	2200      	movs	r2, #0
 800644a:	2300      	movs	r3, #0
 800644c:	4606      	mov	r6, r0
 800644e:	460f      	mov	r7, r1
 8006450:	f7fa fb5a 	bl	8000b08 <__aeabi_dcmpeq>
 8006454:	2800      	cmp	r0, #0
 8006456:	d09a      	beq.n	800638e <_dtoa_r+0x616>
 8006458:	e7cb      	b.n	80063f2 <_dtoa_r+0x67a>
 800645a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800645c:	2a00      	cmp	r2, #0
 800645e:	f000 808b 	beq.w	8006578 <_dtoa_r+0x800>
 8006462:	9a06      	ldr	r2, [sp, #24]
 8006464:	2a01      	cmp	r2, #1
 8006466:	dc6e      	bgt.n	8006546 <_dtoa_r+0x7ce>
 8006468:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800646a:	2a00      	cmp	r2, #0
 800646c:	d067      	beq.n	800653e <_dtoa_r+0x7c6>
 800646e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006472:	9f07      	ldr	r7, [sp, #28]
 8006474:	9d05      	ldr	r5, [sp, #20]
 8006476:	9a05      	ldr	r2, [sp, #20]
 8006478:	2101      	movs	r1, #1
 800647a:	441a      	add	r2, r3
 800647c:	4620      	mov	r0, r4
 800647e:	9205      	str	r2, [sp, #20]
 8006480:	4498      	add	r8, r3
 8006482:	f000 fb26 	bl	8006ad2 <__i2b>
 8006486:	4606      	mov	r6, r0
 8006488:	2d00      	cmp	r5, #0
 800648a:	dd0c      	ble.n	80064a6 <_dtoa_r+0x72e>
 800648c:	f1b8 0f00 	cmp.w	r8, #0
 8006490:	dd09      	ble.n	80064a6 <_dtoa_r+0x72e>
 8006492:	4545      	cmp	r5, r8
 8006494:	9a05      	ldr	r2, [sp, #20]
 8006496:	462b      	mov	r3, r5
 8006498:	bfa8      	it	ge
 800649a:	4643      	movge	r3, r8
 800649c:	1ad2      	subs	r2, r2, r3
 800649e:	9205      	str	r2, [sp, #20]
 80064a0:	1aed      	subs	r5, r5, r3
 80064a2:	eba8 0803 	sub.w	r8, r8, r3
 80064a6:	9b07      	ldr	r3, [sp, #28]
 80064a8:	b1eb      	cbz	r3, 80064e6 <_dtoa_r+0x76e>
 80064aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d067      	beq.n	8006580 <_dtoa_r+0x808>
 80064b0:	b18f      	cbz	r7, 80064d6 <_dtoa_r+0x75e>
 80064b2:	4631      	mov	r1, r6
 80064b4:	463a      	mov	r2, r7
 80064b6:	4620      	mov	r0, r4
 80064b8:	f000 fbaa 	bl	8006c10 <__pow5mult>
 80064bc:	9a04      	ldr	r2, [sp, #16]
 80064be:	4601      	mov	r1, r0
 80064c0:	4606      	mov	r6, r0
 80064c2:	4620      	mov	r0, r4
 80064c4:	f000 fb0e 	bl	8006ae4 <__multiply>
 80064c8:	9904      	ldr	r1, [sp, #16]
 80064ca:	9008      	str	r0, [sp, #32]
 80064cc:	4620      	mov	r0, r4
 80064ce:	f000 fa60 	bl	8006992 <_Bfree>
 80064d2:	9b08      	ldr	r3, [sp, #32]
 80064d4:	9304      	str	r3, [sp, #16]
 80064d6:	9b07      	ldr	r3, [sp, #28]
 80064d8:	1bda      	subs	r2, r3, r7
 80064da:	d004      	beq.n	80064e6 <_dtoa_r+0x76e>
 80064dc:	9904      	ldr	r1, [sp, #16]
 80064de:	4620      	mov	r0, r4
 80064e0:	f000 fb96 	bl	8006c10 <__pow5mult>
 80064e4:	9004      	str	r0, [sp, #16]
 80064e6:	2101      	movs	r1, #1
 80064e8:	4620      	mov	r0, r4
 80064ea:	f000 faf2 	bl	8006ad2 <__i2b>
 80064ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064f0:	4607      	mov	r7, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 81d0 	beq.w	8006898 <_dtoa_r+0xb20>
 80064f8:	461a      	mov	r2, r3
 80064fa:	4601      	mov	r1, r0
 80064fc:	4620      	mov	r0, r4
 80064fe:	f000 fb87 	bl	8006c10 <__pow5mult>
 8006502:	9b06      	ldr	r3, [sp, #24]
 8006504:	2b01      	cmp	r3, #1
 8006506:	4607      	mov	r7, r0
 8006508:	dc40      	bgt.n	800658c <_dtoa_r+0x814>
 800650a:	9b00      	ldr	r3, [sp, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d139      	bne.n	8006584 <_dtoa_r+0x80c>
 8006510:	9b01      	ldr	r3, [sp, #4]
 8006512:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006516:	2b00      	cmp	r3, #0
 8006518:	d136      	bne.n	8006588 <_dtoa_r+0x810>
 800651a:	9b01      	ldr	r3, [sp, #4]
 800651c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006520:	0d1b      	lsrs	r3, r3, #20
 8006522:	051b      	lsls	r3, r3, #20
 8006524:	b12b      	cbz	r3, 8006532 <_dtoa_r+0x7ba>
 8006526:	9b05      	ldr	r3, [sp, #20]
 8006528:	3301      	adds	r3, #1
 800652a:	9305      	str	r3, [sp, #20]
 800652c:	f108 0801 	add.w	r8, r8, #1
 8006530:	2301      	movs	r3, #1
 8006532:	9307      	str	r3, [sp, #28]
 8006534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006536:	2b00      	cmp	r3, #0
 8006538:	d12a      	bne.n	8006590 <_dtoa_r+0x818>
 800653a:	2001      	movs	r0, #1
 800653c:	e030      	b.n	80065a0 <_dtoa_r+0x828>
 800653e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006540:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006544:	e795      	b.n	8006472 <_dtoa_r+0x6fa>
 8006546:	9b07      	ldr	r3, [sp, #28]
 8006548:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800654c:	42bb      	cmp	r3, r7
 800654e:	bfbf      	itttt	lt
 8006550:	9b07      	ldrlt	r3, [sp, #28]
 8006552:	9707      	strlt	r7, [sp, #28]
 8006554:	1afa      	sublt	r2, r7, r3
 8006556:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006558:	bfbb      	ittet	lt
 800655a:	189b      	addlt	r3, r3, r2
 800655c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800655e:	1bdf      	subge	r7, r3, r7
 8006560:	2700      	movlt	r7, #0
 8006562:	f1b9 0f00 	cmp.w	r9, #0
 8006566:	bfb5      	itete	lt
 8006568:	9b05      	ldrlt	r3, [sp, #20]
 800656a:	9d05      	ldrge	r5, [sp, #20]
 800656c:	eba3 0509 	sublt.w	r5, r3, r9
 8006570:	464b      	movge	r3, r9
 8006572:	bfb8      	it	lt
 8006574:	2300      	movlt	r3, #0
 8006576:	e77e      	b.n	8006476 <_dtoa_r+0x6fe>
 8006578:	9f07      	ldr	r7, [sp, #28]
 800657a:	9d05      	ldr	r5, [sp, #20]
 800657c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800657e:	e783      	b.n	8006488 <_dtoa_r+0x710>
 8006580:	9a07      	ldr	r2, [sp, #28]
 8006582:	e7ab      	b.n	80064dc <_dtoa_r+0x764>
 8006584:	2300      	movs	r3, #0
 8006586:	e7d4      	b.n	8006532 <_dtoa_r+0x7ba>
 8006588:	9b00      	ldr	r3, [sp, #0]
 800658a:	e7d2      	b.n	8006532 <_dtoa_r+0x7ba>
 800658c:	2300      	movs	r3, #0
 800658e:	9307      	str	r3, [sp, #28]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006596:	6918      	ldr	r0, [r3, #16]
 8006598:	f000 fa4d 	bl	8006a36 <__hi0bits>
 800659c:	f1c0 0020 	rsb	r0, r0, #32
 80065a0:	4440      	add	r0, r8
 80065a2:	f010 001f 	ands.w	r0, r0, #31
 80065a6:	d047      	beq.n	8006638 <_dtoa_r+0x8c0>
 80065a8:	f1c0 0320 	rsb	r3, r0, #32
 80065ac:	2b04      	cmp	r3, #4
 80065ae:	dd3b      	ble.n	8006628 <_dtoa_r+0x8b0>
 80065b0:	9b05      	ldr	r3, [sp, #20]
 80065b2:	f1c0 001c 	rsb	r0, r0, #28
 80065b6:	4403      	add	r3, r0
 80065b8:	9305      	str	r3, [sp, #20]
 80065ba:	4405      	add	r5, r0
 80065bc:	4480      	add	r8, r0
 80065be:	9b05      	ldr	r3, [sp, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	dd05      	ble.n	80065d0 <_dtoa_r+0x858>
 80065c4:	461a      	mov	r2, r3
 80065c6:	9904      	ldr	r1, [sp, #16]
 80065c8:	4620      	mov	r0, r4
 80065ca:	f000 fb6f 	bl	8006cac <__lshift>
 80065ce:	9004      	str	r0, [sp, #16]
 80065d0:	f1b8 0f00 	cmp.w	r8, #0
 80065d4:	dd05      	ble.n	80065e2 <_dtoa_r+0x86a>
 80065d6:	4639      	mov	r1, r7
 80065d8:	4642      	mov	r2, r8
 80065da:	4620      	mov	r0, r4
 80065dc:	f000 fb66 	bl	8006cac <__lshift>
 80065e0:	4607      	mov	r7, r0
 80065e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065e4:	b353      	cbz	r3, 800663c <_dtoa_r+0x8c4>
 80065e6:	4639      	mov	r1, r7
 80065e8:	9804      	ldr	r0, [sp, #16]
 80065ea:	f000 fbb3 	bl	8006d54 <__mcmp>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	da24      	bge.n	800663c <_dtoa_r+0x8c4>
 80065f2:	2300      	movs	r3, #0
 80065f4:	220a      	movs	r2, #10
 80065f6:	9904      	ldr	r1, [sp, #16]
 80065f8:	4620      	mov	r0, r4
 80065fa:	f000 f9e1 	bl	80069c0 <__multadd>
 80065fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006600:	9004      	str	r0, [sp, #16]
 8006602:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 814d 	beq.w	80068a6 <_dtoa_r+0xb2e>
 800660c:	2300      	movs	r3, #0
 800660e:	4631      	mov	r1, r6
 8006610:	220a      	movs	r2, #10
 8006612:	4620      	mov	r0, r4
 8006614:	f000 f9d4 	bl	80069c0 <__multadd>
 8006618:	9b02      	ldr	r3, [sp, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	4606      	mov	r6, r0
 800661e:	dc4f      	bgt.n	80066c0 <_dtoa_r+0x948>
 8006620:	9b06      	ldr	r3, [sp, #24]
 8006622:	2b02      	cmp	r3, #2
 8006624:	dd4c      	ble.n	80066c0 <_dtoa_r+0x948>
 8006626:	e011      	b.n	800664c <_dtoa_r+0x8d4>
 8006628:	d0c9      	beq.n	80065be <_dtoa_r+0x846>
 800662a:	9a05      	ldr	r2, [sp, #20]
 800662c:	331c      	adds	r3, #28
 800662e:	441a      	add	r2, r3
 8006630:	9205      	str	r2, [sp, #20]
 8006632:	441d      	add	r5, r3
 8006634:	4498      	add	r8, r3
 8006636:	e7c2      	b.n	80065be <_dtoa_r+0x846>
 8006638:	4603      	mov	r3, r0
 800663a:	e7f6      	b.n	800662a <_dtoa_r+0x8b2>
 800663c:	f1b9 0f00 	cmp.w	r9, #0
 8006640:	dc38      	bgt.n	80066b4 <_dtoa_r+0x93c>
 8006642:	9b06      	ldr	r3, [sp, #24]
 8006644:	2b02      	cmp	r3, #2
 8006646:	dd35      	ble.n	80066b4 <_dtoa_r+0x93c>
 8006648:	f8cd 9008 	str.w	r9, [sp, #8]
 800664c:	9b02      	ldr	r3, [sp, #8]
 800664e:	b963      	cbnz	r3, 800666a <_dtoa_r+0x8f2>
 8006650:	4639      	mov	r1, r7
 8006652:	2205      	movs	r2, #5
 8006654:	4620      	mov	r0, r4
 8006656:	f000 f9b3 	bl	80069c0 <__multadd>
 800665a:	4601      	mov	r1, r0
 800665c:	4607      	mov	r7, r0
 800665e:	9804      	ldr	r0, [sp, #16]
 8006660:	f000 fb78 	bl	8006d54 <__mcmp>
 8006664:	2800      	cmp	r0, #0
 8006666:	f73f adcc 	bgt.w	8006202 <_dtoa_r+0x48a>
 800666a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800666c:	465d      	mov	r5, fp
 800666e:	ea6f 0a03 	mvn.w	sl, r3
 8006672:	f04f 0900 	mov.w	r9, #0
 8006676:	4639      	mov	r1, r7
 8006678:	4620      	mov	r0, r4
 800667a:	f000 f98a 	bl	8006992 <_Bfree>
 800667e:	2e00      	cmp	r6, #0
 8006680:	f43f aeb7 	beq.w	80063f2 <_dtoa_r+0x67a>
 8006684:	f1b9 0f00 	cmp.w	r9, #0
 8006688:	d005      	beq.n	8006696 <_dtoa_r+0x91e>
 800668a:	45b1      	cmp	r9, r6
 800668c:	d003      	beq.n	8006696 <_dtoa_r+0x91e>
 800668e:	4649      	mov	r1, r9
 8006690:	4620      	mov	r0, r4
 8006692:	f000 f97e 	bl	8006992 <_Bfree>
 8006696:	4631      	mov	r1, r6
 8006698:	4620      	mov	r0, r4
 800669a:	f000 f97a 	bl	8006992 <_Bfree>
 800669e:	e6a8      	b.n	80063f2 <_dtoa_r+0x67a>
 80066a0:	2700      	movs	r7, #0
 80066a2:	463e      	mov	r6, r7
 80066a4:	e7e1      	b.n	800666a <_dtoa_r+0x8f2>
 80066a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80066aa:	463e      	mov	r6, r7
 80066ac:	e5a9      	b.n	8006202 <_dtoa_r+0x48a>
 80066ae:	bf00      	nop
 80066b0:	40240000 	.word	0x40240000
 80066b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 80fa 	beq.w	80068b4 <_dtoa_r+0xb3c>
 80066c0:	2d00      	cmp	r5, #0
 80066c2:	dd05      	ble.n	80066d0 <_dtoa_r+0x958>
 80066c4:	4631      	mov	r1, r6
 80066c6:	462a      	mov	r2, r5
 80066c8:	4620      	mov	r0, r4
 80066ca:	f000 faef 	bl	8006cac <__lshift>
 80066ce:	4606      	mov	r6, r0
 80066d0:	9b07      	ldr	r3, [sp, #28]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d04c      	beq.n	8006770 <_dtoa_r+0x9f8>
 80066d6:	6871      	ldr	r1, [r6, #4]
 80066d8:	4620      	mov	r0, r4
 80066da:	f000 f926 	bl	800692a <_Balloc>
 80066de:	6932      	ldr	r2, [r6, #16]
 80066e0:	3202      	adds	r2, #2
 80066e2:	4605      	mov	r5, r0
 80066e4:	0092      	lsls	r2, r2, #2
 80066e6:	f106 010c 	add.w	r1, r6, #12
 80066ea:	300c      	adds	r0, #12
 80066ec:	f000 f912 	bl	8006914 <memcpy>
 80066f0:	2201      	movs	r2, #1
 80066f2:	4629      	mov	r1, r5
 80066f4:	4620      	mov	r0, r4
 80066f6:	f000 fad9 	bl	8006cac <__lshift>
 80066fa:	9b00      	ldr	r3, [sp, #0]
 80066fc:	f8cd b014 	str.w	fp, [sp, #20]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	46b1      	mov	r9, r6
 8006706:	9307      	str	r3, [sp, #28]
 8006708:	4606      	mov	r6, r0
 800670a:	4639      	mov	r1, r7
 800670c:	9804      	ldr	r0, [sp, #16]
 800670e:	f7ff faa7 	bl	8005c60 <quorem>
 8006712:	4649      	mov	r1, r9
 8006714:	4605      	mov	r5, r0
 8006716:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800671a:	9804      	ldr	r0, [sp, #16]
 800671c:	f000 fb1a 	bl	8006d54 <__mcmp>
 8006720:	4632      	mov	r2, r6
 8006722:	9000      	str	r0, [sp, #0]
 8006724:	4639      	mov	r1, r7
 8006726:	4620      	mov	r0, r4
 8006728:	f000 fb2e 	bl	8006d88 <__mdiff>
 800672c:	68c3      	ldr	r3, [r0, #12]
 800672e:	4602      	mov	r2, r0
 8006730:	bb03      	cbnz	r3, 8006774 <_dtoa_r+0x9fc>
 8006732:	4601      	mov	r1, r0
 8006734:	9008      	str	r0, [sp, #32]
 8006736:	9804      	ldr	r0, [sp, #16]
 8006738:	f000 fb0c 	bl	8006d54 <__mcmp>
 800673c:	9a08      	ldr	r2, [sp, #32]
 800673e:	4603      	mov	r3, r0
 8006740:	4611      	mov	r1, r2
 8006742:	4620      	mov	r0, r4
 8006744:	9308      	str	r3, [sp, #32]
 8006746:	f000 f924 	bl	8006992 <_Bfree>
 800674a:	9b08      	ldr	r3, [sp, #32]
 800674c:	b9a3      	cbnz	r3, 8006778 <_dtoa_r+0xa00>
 800674e:	9a06      	ldr	r2, [sp, #24]
 8006750:	b992      	cbnz	r2, 8006778 <_dtoa_r+0xa00>
 8006752:	9a07      	ldr	r2, [sp, #28]
 8006754:	b982      	cbnz	r2, 8006778 <_dtoa_r+0xa00>
 8006756:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800675a:	d029      	beq.n	80067b0 <_dtoa_r+0xa38>
 800675c:	9b00      	ldr	r3, [sp, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	dd01      	ble.n	8006766 <_dtoa_r+0x9ee>
 8006762:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006766:	9b05      	ldr	r3, [sp, #20]
 8006768:	1c5d      	adds	r5, r3, #1
 800676a:	f883 8000 	strb.w	r8, [r3]
 800676e:	e782      	b.n	8006676 <_dtoa_r+0x8fe>
 8006770:	4630      	mov	r0, r6
 8006772:	e7c2      	b.n	80066fa <_dtoa_r+0x982>
 8006774:	2301      	movs	r3, #1
 8006776:	e7e3      	b.n	8006740 <_dtoa_r+0x9c8>
 8006778:	9a00      	ldr	r2, [sp, #0]
 800677a:	2a00      	cmp	r2, #0
 800677c:	db04      	blt.n	8006788 <_dtoa_r+0xa10>
 800677e:	d125      	bne.n	80067cc <_dtoa_r+0xa54>
 8006780:	9a06      	ldr	r2, [sp, #24]
 8006782:	bb1a      	cbnz	r2, 80067cc <_dtoa_r+0xa54>
 8006784:	9a07      	ldr	r2, [sp, #28]
 8006786:	bb0a      	cbnz	r2, 80067cc <_dtoa_r+0xa54>
 8006788:	2b00      	cmp	r3, #0
 800678a:	ddec      	ble.n	8006766 <_dtoa_r+0x9ee>
 800678c:	2201      	movs	r2, #1
 800678e:	9904      	ldr	r1, [sp, #16]
 8006790:	4620      	mov	r0, r4
 8006792:	f000 fa8b 	bl	8006cac <__lshift>
 8006796:	4639      	mov	r1, r7
 8006798:	9004      	str	r0, [sp, #16]
 800679a:	f000 fadb 	bl	8006d54 <__mcmp>
 800679e:	2800      	cmp	r0, #0
 80067a0:	dc03      	bgt.n	80067aa <_dtoa_r+0xa32>
 80067a2:	d1e0      	bne.n	8006766 <_dtoa_r+0x9ee>
 80067a4:	f018 0f01 	tst.w	r8, #1
 80067a8:	d0dd      	beq.n	8006766 <_dtoa_r+0x9ee>
 80067aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80067ae:	d1d8      	bne.n	8006762 <_dtoa_r+0x9ea>
 80067b0:	9b05      	ldr	r3, [sp, #20]
 80067b2:	9a05      	ldr	r2, [sp, #20]
 80067b4:	1c5d      	adds	r5, r3, #1
 80067b6:	2339      	movs	r3, #57	; 0x39
 80067b8:	7013      	strb	r3, [r2, #0]
 80067ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067be:	2b39      	cmp	r3, #57	; 0x39
 80067c0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80067c4:	d04f      	beq.n	8006866 <_dtoa_r+0xaee>
 80067c6:	3301      	adds	r3, #1
 80067c8:	7013      	strb	r3, [r2, #0]
 80067ca:	e754      	b.n	8006676 <_dtoa_r+0x8fe>
 80067cc:	9a05      	ldr	r2, [sp, #20]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f102 0501 	add.w	r5, r2, #1
 80067d4:	dd06      	ble.n	80067e4 <_dtoa_r+0xa6c>
 80067d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80067da:	d0e9      	beq.n	80067b0 <_dtoa_r+0xa38>
 80067dc:	f108 0801 	add.w	r8, r8, #1
 80067e0:	9b05      	ldr	r3, [sp, #20]
 80067e2:	e7c2      	b.n	800676a <_dtoa_r+0x9f2>
 80067e4:	9a02      	ldr	r2, [sp, #8]
 80067e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80067ea:	eba5 030b 	sub.w	r3, r5, fp
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d021      	beq.n	8006836 <_dtoa_r+0xabe>
 80067f2:	2300      	movs	r3, #0
 80067f4:	220a      	movs	r2, #10
 80067f6:	9904      	ldr	r1, [sp, #16]
 80067f8:	4620      	mov	r0, r4
 80067fa:	f000 f8e1 	bl	80069c0 <__multadd>
 80067fe:	45b1      	cmp	r9, r6
 8006800:	9004      	str	r0, [sp, #16]
 8006802:	f04f 0300 	mov.w	r3, #0
 8006806:	f04f 020a 	mov.w	r2, #10
 800680a:	4649      	mov	r1, r9
 800680c:	4620      	mov	r0, r4
 800680e:	d105      	bne.n	800681c <_dtoa_r+0xaa4>
 8006810:	f000 f8d6 	bl	80069c0 <__multadd>
 8006814:	4681      	mov	r9, r0
 8006816:	4606      	mov	r6, r0
 8006818:	9505      	str	r5, [sp, #20]
 800681a:	e776      	b.n	800670a <_dtoa_r+0x992>
 800681c:	f000 f8d0 	bl	80069c0 <__multadd>
 8006820:	4631      	mov	r1, r6
 8006822:	4681      	mov	r9, r0
 8006824:	2300      	movs	r3, #0
 8006826:	220a      	movs	r2, #10
 8006828:	4620      	mov	r0, r4
 800682a:	f000 f8c9 	bl	80069c0 <__multadd>
 800682e:	4606      	mov	r6, r0
 8006830:	e7f2      	b.n	8006818 <_dtoa_r+0xaa0>
 8006832:	f04f 0900 	mov.w	r9, #0
 8006836:	2201      	movs	r2, #1
 8006838:	9904      	ldr	r1, [sp, #16]
 800683a:	4620      	mov	r0, r4
 800683c:	f000 fa36 	bl	8006cac <__lshift>
 8006840:	4639      	mov	r1, r7
 8006842:	9004      	str	r0, [sp, #16]
 8006844:	f000 fa86 	bl	8006d54 <__mcmp>
 8006848:	2800      	cmp	r0, #0
 800684a:	dcb6      	bgt.n	80067ba <_dtoa_r+0xa42>
 800684c:	d102      	bne.n	8006854 <_dtoa_r+0xadc>
 800684e:	f018 0f01 	tst.w	r8, #1
 8006852:	d1b2      	bne.n	80067ba <_dtoa_r+0xa42>
 8006854:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006858:	2b30      	cmp	r3, #48	; 0x30
 800685a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800685e:	f47f af0a 	bne.w	8006676 <_dtoa_r+0x8fe>
 8006862:	4615      	mov	r5, r2
 8006864:	e7f6      	b.n	8006854 <_dtoa_r+0xadc>
 8006866:	4593      	cmp	fp, r2
 8006868:	d105      	bne.n	8006876 <_dtoa_r+0xafe>
 800686a:	2331      	movs	r3, #49	; 0x31
 800686c:	f10a 0a01 	add.w	sl, sl, #1
 8006870:	f88b 3000 	strb.w	r3, [fp]
 8006874:	e6ff      	b.n	8006676 <_dtoa_r+0x8fe>
 8006876:	4615      	mov	r5, r2
 8006878:	e79f      	b.n	80067ba <_dtoa_r+0xa42>
 800687a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80068e0 <_dtoa_r+0xb68>
 800687e:	e007      	b.n	8006890 <_dtoa_r+0xb18>
 8006880:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006882:	f8df b060 	ldr.w	fp, [pc, #96]	; 80068e4 <_dtoa_r+0xb6c>
 8006886:	b11b      	cbz	r3, 8006890 <_dtoa_r+0xb18>
 8006888:	f10b 0308 	add.w	r3, fp, #8
 800688c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	4658      	mov	r0, fp
 8006892:	b017      	add	sp, #92	; 0x5c
 8006894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006898:	9b06      	ldr	r3, [sp, #24]
 800689a:	2b01      	cmp	r3, #1
 800689c:	f77f ae35 	ble.w	800650a <_dtoa_r+0x792>
 80068a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068a2:	9307      	str	r3, [sp, #28]
 80068a4:	e649      	b.n	800653a <_dtoa_r+0x7c2>
 80068a6:	9b02      	ldr	r3, [sp, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	dc03      	bgt.n	80068b4 <_dtoa_r+0xb3c>
 80068ac:	9b06      	ldr	r3, [sp, #24]
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	f73f aecc 	bgt.w	800664c <_dtoa_r+0x8d4>
 80068b4:	465d      	mov	r5, fp
 80068b6:	4639      	mov	r1, r7
 80068b8:	9804      	ldr	r0, [sp, #16]
 80068ba:	f7ff f9d1 	bl	8005c60 <quorem>
 80068be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80068c2:	f805 8b01 	strb.w	r8, [r5], #1
 80068c6:	9a02      	ldr	r2, [sp, #8]
 80068c8:	eba5 030b 	sub.w	r3, r5, fp
 80068cc:	429a      	cmp	r2, r3
 80068ce:	ddb0      	ble.n	8006832 <_dtoa_r+0xaba>
 80068d0:	2300      	movs	r3, #0
 80068d2:	220a      	movs	r2, #10
 80068d4:	9904      	ldr	r1, [sp, #16]
 80068d6:	4620      	mov	r0, r4
 80068d8:	f000 f872 	bl	80069c0 <__multadd>
 80068dc:	9004      	str	r0, [sp, #16]
 80068de:	e7ea      	b.n	80068b6 <_dtoa_r+0xb3e>
 80068e0:	080077ec 	.word	0x080077ec
 80068e4:	08007810 	.word	0x08007810

080068e8 <_localeconv_r>:
 80068e8:	4b04      	ldr	r3, [pc, #16]	; (80068fc <_localeconv_r+0x14>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6a18      	ldr	r0, [r3, #32]
 80068ee:	4b04      	ldr	r3, [pc, #16]	; (8006900 <_localeconv_r+0x18>)
 80068f0:	2800      	cmp	r0, #0
 80068f2:	bf08      	it	eq
 80068f4:	4618      	moveq	r0, r3
 80068f6:	30f0      	adds	r0, #240	; 0xf0
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	20000024 	.word	0x20000024
 8006900:	20000088 	.word	0x20000088

08006904 <malloc>:
 8006904:	4b02      	ldr	r3, [pc, #8]	; (8006910 <malloc+0xc>)
 8006906:	4601      	mov	r1, r0
 8006908:	6818      	ldr	r0, [r3, #0]
 800690a:	f000 bb45 	b.w	8006f98 <_malloc_r>
 800690e:	bf00      	nop
 8006910:	20000024 	.word	0x20000024

08006914 <memcpy>:
 8006914:	b510      	push	{r4, lr}
 8006916:	1e43      	subs	r3, r0, #1
 8006918:	440a      	add	r2, r1
 800691a:	4291      	cmp	r1, r2
 800691c:	d100      	bne.n	8006920 <memcpy+0xc>
 800691e:	bd10      	pop	{r4, pc}
 8006920:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006924:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006928:	e7f7      	b.n	800691a <memcpy+0x6>

0800692a <_Balloc>:
 800692a:	b570      	push	{r4, r5, r6, lr}
 800692c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800692e:	4604      	mov	r4, r0
 8006930:	460e      	mov	r6, r1
 8006932:	b93d      	cbnz	r5, 8006944 <_Balloc+0x1a>
 8006934:	2010      	movs	r0, #16
 8006936:	f7ff ffe5 	bl	8006904 <malloc>
 800693a:	6260      	str	r0, [r4, #36]	; 0x24
 800693c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006940:	6005      	str	r5, [r0, #0]
 8006942:	60c5      	str	r5, [r0, #12]
 8006944:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006946:	68eb      	ldr	r3, [r5, #12]
 8006948:	b183      	cbz	r3, 800696c <_Balloc+0x42>
 800694a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006952:	b9b8      	cbnz	r0, 8006984 <_Balloc+0x5a>
 8006954:	2101      	movs	r1, #1
 8006956:	fa01 f506 	lsl.w	r5, r1, r6
 800695a:	1d6a      	adds	r2, r5, #5
 800695c:	0092      	lsls	r2, r2, #2
 800695e:	4620      	mov	r0, r4
 8006960:	f000 fabe 	bl	8006ee0 <_calloc_r>
 8006964:	b160      	cbz	r0, 8006980 <_Balloc+0x56>
 8006966:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800696a:	e00e      	b.n	800698a <_Balloc+0x60>
 800696c:	2221      	movs	r2, #33	; 0x21
 800696e:	2104      	movs	r1, #4
 8006970:	4620      	mov	r0, r4
 8006972:	f000 fab5 	bl	8006ee0 <_calloc_r>
 8006976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006978:	60e8      	str	r0, [r5, #12]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e4      	bne.n	800694a <_Balloc+0x20>
 8006980:	2000      	movs	r0, #0
 8006982:	bd70      	pop	{r4, r5, r6, pc}
 8006984:	6802      	ldr	r2, [r0, #0]
 8006986:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800698a:	2300      	movs	r3, #0
 800698c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006990:	e7f7      	b.n	8006982 <_Balloc+0x58>

08006992 <_Bfree>:
 8006992:	b570      	push	{r4, r5, r6, lr}
 8006994:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006996:	4606      	mov	r6, r0
 8006998:	460d      	mov	r5, r1
 800699a:	b93c      	cbnz	r4, 80069ac <_Bfree+0x1a>
 800699c:	2010      	movs	r0, #16
 800699e:	f7ff ffb1 	bl	8006904 <malloc>
 80069a2:	6270      	str	r0, [r6, #36]	; 0x24
 80069a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069a8:	6004      	str	r4, [r0, #0]
 80069aa:	60c4      	str	r4, [r0, #12]
 80069ac:	b13d      	cbz	r5, 80069be <_Bfree+0x2c>
 80069ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80069b0:	686a      	ldr	r2, [r5, #4]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069b8:	6029      	str	r1, [r5, #0]
 80069ba:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80069be:	bd70      	pop	{r4, r5, r6, pc}

080069c0 <__multadd>:
 80069c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069c4:	690d      	ldr	r5, [r1, #16]
 80069c6:	461f      	mov	r7, r3
 80069c8:	4606      	mov	r6, r0
 80069ca:	460c      	mov	r4, r1
 80069cc:	f101 0c14 	add.w	ip, r1, #20
 80069d0:	2300      	movs	r3, #0
 80069d2:	f8dc 0000 	ldr.w	r0, [ip]
 80069d6:	b281      	uxth	r1, r0
 80069d8:	fb02 7101 	mla	r1, r2, r1, r7
 80069dc:	0c0f      	lsrs	r7, r1, #16
 80069de:	0c00      	lsrs	r0, r0, #16
 80069e0:	fb02 7000 	mla	r0, r2, r0, r7
 80069e4:	b289      	uxth	r1, r1
 80069e6:	3301      	adds	r3, #1
 80069e8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80069ec:	429d      	cmp	r5, r3
 80069ee:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80069f2:	f84c 1b04 	str.w	r1, [ip], #4
 80069f6:	dcec      	bgt.n	80069d2 <__multadd+0x12>
 80069f8:	b1d7      	cbz	r7, 8006a30 <__multadd+0x70>
 80069fa:	68a3      	ldr	r3, [r4, #8]
 80069fc:	42ab      	cmp	r3, r5
 80069fe:	dc12      	bgt.n	8006a26 <__multadd+0x66>
 8006a00:	6861      	ldr	r1, [r4, #4]
 8006a02:	4630      	mov	r0, r6
 8006a04:	3101      	adds	r1, #1
 8006a06:	f7ff ff90 	bl	800692a <_Balloc>
 8006a0a:	6922      	ldr	r2, [r4, #16]
 8006a0c:	3202      	adds	r2, #2
 8006a0e:	f104 010c 	add.w	r1, r4, #12
 8006a12:	4680      	mov	r8, r0
 8006a14:	0092      	lsls	r2, r2, #2
 8006a16:	300c      	adds	r0, #12
 8006a18:	f7ff ff7c 	bl	8006914 <memcpy>
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	4630      	mov	r0, r6
 8006a20:	f7ff ffb7 	bl	8006992 <_Bfree>
 8006a24:	4644      	mov	r4, r8
 8006a26:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a2a:	3501      	adds	r5, #1
 8006a2c:	615f      	str	r7, [r3, #20]
 8006a2e:	6125      	str	r5, [r4, #16]
 8006a30:	4620      	mov	r0, r4
 8006a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006a36 <__hi0bits>:
 8006a36:	0c02      	lsrs	r2, r0, #16
 8006a38:	0412      	lsls	r2, r2, #16
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	b9b2      	cbnz	r2, 8006a6c <__hi0bits+0x36>
 8006a3e:	0403      	lsls	r3, r0, #16
 8006a40:	2010      	movs	r0, #16
 8006a42:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006a46:	bf04      	itt	eq
 8006a48:	021b      	lsleq	r3, r3, #8
 8006a4a:	3008      	addeq	r0, #8
 8006a4c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006a50:	bf04      	itt	eq
 8006a52:	011b      	lsleq	r3, r3, #4
 8006a54:	3004      	addeq	r0, #4
 8006a56:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006a5a:	bf04      	itt	eq
 8006a5c:	009b      	lsleq	r3, r3, #2
 8006a5e:	3002      	addeq	r0, #2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	db06      	blt.n	8006a72 <__hi0bits+0x3c>
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	d503      	bpl.n	8006a70 <__hi0bits+0x3a>
 8006a68:	3001      	adds	r0, #1
 8006a6a:	4770      	bx	lr
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	e7e8      	b.n	8006a42 <__hi0bits+0xc>
 8006a70:	2020      	movs	r0, #32
 8006a72:	4770      	bx	lr

08006a74 <__lo0bits>:
 8006a74:	6803      	ldr	r3, [r0, #0]
 8006a76:	f013 0207 	ands.w	r2, r3, #7
 8006a7a:	4601      	mov	r1, r0
 8006a7c:	d00b      	beq.n	8006a96 <__lo0bits+0x22>
 8006a7e:	07da      	lsls	r2, r3, #31
 8006a80:	d423      	bmi.n	8006aca <__lo0bits+0x56>
 8006a82:	0798      	lsls	r0, r3, #30
 8006a84:	bf49      	itett	mi
 8006a86:	085b      	lsrmi	r3, r3, #1
 8006a88:	089b      	lsrpl	r3, r3, #2
 8006a8a:	2001      	movmi	r0, #1
 8006a8c:	600b      	strmi	r3, [r1, #0]
 8006a8e:	bf5c      	itt	pl
 8006a90:	600b      	strpl	r3, [r1, #0]
 8006a92:	2002      	movpl	r0, #2
 8006a94:	4770      	bx	lr
 8006a96:	b298      	uxth	r0, r3
 8006a98:	b9a8      	cbnz	r0, 8006ac6 <__lo0bits+0x52>
 8006a9a:	0c1b      	lsrs	r3, r3, #16
 8006a9c:	2010      	movs	r0, #16
 8006a9e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006aa2:	bf04      	itt	eq
 8006aa4:	0a1b      	lsreq	r3, r3, #8
 8006aa6:	3008      	addeq	r0, #8
 8006aa8:	071a      	lsls	r2, r3, #28
 8006aaa:	bf04      	itt	eq
 8006aac:	091b      	lsreq	r3, r3, #4
 8006aae:	3004      	addeq	r0, #4
 8006ab0:	079a      	lsls	r2, r3, #30
 8006ab2:	bf04      	itt	eq
 8006ab4:	089b      	lsreq	r3, r3, #2
 8006ab6:	3002      	addeq	r0, #2
 8006ab8:	07da      	lsls	r2, r3, #31
 8006aba:	d402      	bmi.n	8006ac2 <__lo0bits+0x4e>
 8006abc:	085b      	lsrs	r3, r3, #1
 8006abe:	d006      	beq.n	8006ace <__lo0bits+0x5a>
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	600b      	str	r3, [r1, #0]
 8006ac4:	4770      	bx	lr
 8006ac6:	4610      	mov	r0, r2
 8006ac8:	e7e9      	b.n	8006a9e <__lo0bits+0x2a>
 8006aca:	2000      	movs	r0, #0
 8006acc:	4770      	bx	lr
 8006ace:	2020      	movs	r0, #32
 8006ad0:	4770      	bx	lr

08006ad2 <__i2b>:
 8006ad2:	b510      	push	{r4, lr}
 8006ad4:	460c      	mov	r4, r1
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	f7ff ff27 	bl	800692a <_Balloc>
 8006adc:	2201      	movs	r2, #1
 8006ade:	6144      	str	r4, [r0, #20]
 8006ae0:	6102      	str	r2, [r0, #16]
 8006ae2:	bd10      	pop	{r4, pc}

08006ae4 <__multiply>:
 8006ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae8:	4614      	mov	r4, r2
 8006aea:	690a      	ldr	r2, [r1, #16]
 8006aec:	6923      	ldr	r3, [r4, #16]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	bfb8      	it	lt
 8006af2:	460b      	movlt	r3, r1
 8006af4:	4688      	mov	r8, r1
 8006af6:	bfbc      	itt	lt
 8006af8:	46a0      	movlt	r8, r4
 8006afa:	461c      	movlt	r4, r3
 8006afc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006b00:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006b04:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006b0c:	eb07 0609 	add.w	r6, r7, r9
 8006b10:	42b3      	cmp	r3, r6
 8006b12:	bfb8      	it	lt
 8006b14:	3101      	addlt	r1, #1
 8006b16:	f7ff ff08 	bl	800692a <_Balloc>
 8006b1a:	f100 0514 	add.w	r5, r0, #20
 8006b1e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006b22:	462b      	mov	r3, r5
 8006b24:	2200      	movs	r2, #0
 8006b26:	4573      	cmp	r3, lr
 8006b28:	d316      	bcc.n	8006b58 <__multiply+0x74>
 8006b2a:	f104 0214 	add.w	r2, r4, #20
 8006b2e:	f108 0114 	add.w	r1, r8, #20
 8006b32:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006b36:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	9b00      	ldr	r3, [sp, #0]
 8006b3e:	9201      	str	r2, [sp, #4]
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d80c      	bhi.n	8006b5e <__multiply+0x7a>
 8006b44:	2e00      	cmp	r6, #0
 8006b46:	dd03      	ble.n	8006b50 <__multiply+0x6c>
 8006b48:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d05d      	beq.n	8006c0c <__multiply+0x128>
 8006b50:	6106      	str	r6, [r0, #16]
 8006b52:	b003      	add	sp, #12
 8006b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b58:	f843 2b04 	str.w	r2, [r3], #4
 8006b5c:	e7e3      	b.n	8006b26 <__multiply+0x42>
 8006b5e:	f8b2 b000 	ldrh.w	fp, [r2]
 8006b62:	f1bb 0f00 	cmp.w	fp, #0
 8006b66:	d023      	beq.n	8006bb0 <__multiply+0xcc>
 8006b68:	4689      	mov	r9, r1
 8006b6a:	46ac      	mov	ip, r5
 8006b6c:	f04f 0800 	mov.w	r8, #0
 8006b70:	f859 4b04 	ldr.w	r4, [r9], #4
 8006b74:	f8dc a000 	ldr.w	sl, [ip]
 8006b78:	b2a3      	uxth	r3, r4
 8006b7a:	fa1f fa8a 	uxth.w	sl, sl
 8006b7e:	fb0b a303 	mla	r3, fp, r3, sl
 8006b82:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006b86:	f8dc 4000 	ldr.w	r4, [ip]
 8006b8a:	4443      	add	r3, r8
 8006b8c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006b90:	fb0b 840a 	mla	r4, fp, sl, r8
 8006b94:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006b98:	46e2      	mov	sl, ip
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006ba0:	454f      	cmp	r7, r9
 8006ba2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006ba6:	f84a 3b04 	str.w	r3, [sl], #4
 8006baa:	d82b      	bhi.n	8006c04 <__multiply+0x120>
 8006bac:	f8cc 8004 	str.w	r8, [ip, #4]
 8006bb0:	9b01      	ldr	r3, [sp, #4]
 8006bb2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006bb6:	3204      	adds	r2, #4
 8006bb8:	f1ba 0f00 	cmp.w	sl, #0
 8006bbc:	d020      	beq.n	8006c00 <__multiply+0x11c>
 8006bbe:	682b      	ldr	r3, [r5, #0]
 8006bc0:	4689      	mov	r9, r1
 8006bc2:	46a8      	mov	r8, r5
 8006bc4:	f04f 0b00 	mov.w	fp, #0
 8006bc8:	f8b9 c000 	ldrh.w	ip, [r9]
 8006bcc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006bd0:	fb0a 440c 	mla	r4, sl, ip, r4
 8006bd4:	445c      	add	r4, fp
 8006bd6:	46c4      	mov	ip, r8
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006bde:	f84c 3b04 	str.w	r3, [ip], #4
 8006be2:	f859 3b04 	ldr.w	r3, [r9], #4
 8006be6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006bea:	0c1b      	lsrs	r3, r3, #16
 8006bec:	fb0a b303 	mla	r3, sl, r3, fp
 8006bf0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006bf4:	454f      	cmp	r7, r9
 8006bf6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006bfa:	d805      	bhi.n	8006c08 <__multiply+0x124>
 8006bfc:	f8c8 3004 	str.w	r3, [r8, #4]
 8006c00:	3504      	adds	r5, #4
 8006c02:	e79b      	b.n	8006b3c <__multiply+0x58>
 8006c04:	46d4      	mov	ip, sl
 8006c06:	e7b3      	b.n	8006b70 <__multiply+0x8c>
 8006c08:	46e0      	mov	r8, ip
 8006c0a:	e7dd      	b.n	8006bc8 <__multiply+0xe4>
 8006c0c:	3e01      	subs	r6, #1
 8006c0e:	e799      	b.n	8006b44 <__multiply+0x60>

08006c10 <__pow5mult>:
 8006c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c14:	4615      	mov	r5, r2
 8006c16:	f012 0203 	ands.w	r2, r2, #3
 8006c1a:	4606      	mov	r6, r0
 8006c1c:	460f      	mov	r7, r1
 8006c1e:	d007      	beq.n	8006c30 <__pow5mult+0x20>
 8006c20:	3a01      	subs	r2, #1
 8006c22:	4c21      	ldr	r4, [pc, #132]	; (8006ca8 <__pow5mult+0x98>)
 8006c24:	2300      	movs	r3, #0
 8006c26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c2a:	f7ff fec9 	bl	80069c0 <__multadd>
 8006c2e:	4607      	mov	r7, r0
 8006c30:	10ad      	asrs	r5, r5, #2
 8006c32:	d035      	beq.n	8006ca0 <__pow5mult+0x90>
 8006c34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c36:	b93c      	cbnz	r4, 8006c48 <__pow5mult+0x38>
 8006c38:	2010      	movs	r0, #16
 8006c3a:	f7ff fe63 	bl	8006904 <malloc>
 8006c3e:	6270      	str	r0, [r6, #36]	; 0x24
 8006c40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c44:	6004      	str	r4, [r0, #0]
 8006c46:	60c4      	str	r4, [r0, #12]
 8006c48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006c4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c50:	b94c      	cbnz	r4, 8006c66 <__pow5mult+0x56>
 8006c52:	f240 2171 	movw	r1, #625	; 0x271
 8006c56:	4630      	mov	r0, r6
 8006c58:	f7ff ff3b 	bl	8006ad2 <__i2b>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c62:	4604      	mov	r4, r0
 8006c64:	6003      	str	r3, [r0, #0]
 8006c66:	f04f 0800 	mov.w	r8, #0
 8006c6a:	07eb      	lsls	r3, r5, #31
 8006c6c:	d50a      	bpl.n	8006c84 <__pow5mult+0x74>
 8006c6e:	4639      	mov	r1, r7
 8006c70:	4622      	mov	r2, r4
 8006c72:	4630      	mov	r0, r6
 8006c74:	f7ff ff36 	bl	8006ae4 <__multiply>
 8006c78:	4639      	mov	r1, r7
 8006c7a:	4681      	mov	r9, r0
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	f7ff fe88 	bl	8006992 <_Bfree>
 8006c82:	464f      	mov	r7, r9
 8006c84:	106d      	asrs	r5, r5, #1
 8006c86:	d00b      	beq.n	8006ca0 <__pow5mult+0x90>
 8006c88:	6820      	ldr	r0, [r4, #0]
 8006c8a:	b938      	cbnz	r0, 8006c9c <__pow5mult+0x8c>
 8006c8c:	4622      	mov	r2, r4
 8006c8e:	4621      	mov	r1, r4
 8006c90:	4630      	mov	r0, r6
 8006c92:	f7ff ff27 	bl	8006ae4 <__multiply>
 8006c96:	6020      	str	r0, [r4, #0]
 8006c98:	f8c0 8000 	str.w	r8, [r0]
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	e7e4      	b.n	8006c6a <__pow5mult+0x5a>
 8006ca0:	4638      	mov	r0, r7
 8006ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ca6:	bf00      	nop
 8006ca8:	08007910 	.word	0x08007910

08006cac <__lshift>:
 8006cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb0:	460c      	mov	r4, r1
 8006cb2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006cb6:	6923      	ldr	r3, [r4, #16]
 8006cb8:	6849      	ldr	r1, [r1, #4]
 8006cba:	eb0a 0903 	add.w	r9, sl, r3
 8006cbe:	68a3      	ldr	r3, [r4, #8]
 8006cc0:	4607      	mov	r7, r0
 8006cc2:	4616      	mov	r6, r2
 8006cc4:	f109 0501 	add.w	r5, r9, #1
 8006cc8:	42ab      	cmp	r3, r5
 8006cca:	db32      	blt.n	8006d32 <__lshift+0x86>
 8006ccc:	4638      	mov	r0, r7
 8006cce:	f7ff fe2c 	bl	800692a <_Balloc>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	4680      	mov	r8, r0
 8006cd6:	f100 0114 	add.w	r1, r0, #20
 8006cda:	461a      	mov	r2, r3
 8006cdc:	4553      	cmp	r3, sl
 8006cde:	db2b      	blt.n	8006d38 <__lshift+0x8c>
 8006ce0:	6920      	ldr	r0, [r4, #16]
 8006ce2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ce6:	f104 0314 	add.w	r3, r4, #20
 8006cea:	f016 021f 	ands.w	r2, r6, #31
 8006cee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006cf2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006cf6:	d025      	beq.n	8006d44 <__lshift+0x98>
 8006cf8:	f1c2 0e20 	rsb	lr, r2, #32
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	681e      	ldr	r6, [r3, #0]
 8006d00:	468a      	mov	sl, r1
 8006d02:	4096      	lsls	r6, r2
 8006d04:	4330      	orrs	r0, r6
 8006d06:	f84a 0b04 	str.w	r0, [sl], #4
 8006d0a:	f853 0b04 	ldr.w	r0, [r3], #4
 8006d0e:	459c      	cmp	ip, r3
 8006d10:	fa20 f00e 	lsr.w	r0, r0, lr
 8006d14:	d814      	bhi.n	8006d40 <__lshift+0x94>
 8006d16:	6048      	str	r0, [r1, #4]
 8006d18:	b108      	cbz	r0, 8006d1e <__lshift+0x72>
 8006d1a:	f109 0502 	add.w	r5, r9, #2
 8006d1e:	3d01      	subs	r5, #1
 8006d20:	4638      	mov	r0, r7
 8006d22:	f8c8 5010 	str.w	r5, [r8, #16]
 8006d26:	4621      	mov	r1, r4
 8006d28:	f7ff fe33 	bl	8006992 <_Bfree>
 8006d2c:	4640      	mov	r0, r8
 8006d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d32:	3101      	adds	r1, #1
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	e7c7      	b.n	8006cc8 <__lshift+0x1c>
 8006d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	e7cd      	b.n	8006cdc <__lshift+0x30>
 8006d40:	4651      	mov	r1, sl
 8006d42:	e7dc      	b.n	8006cfe <__lshift+0x52>
 8006d44:	3904      	subs	r1, #4
 8006d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d4a:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d4e:	459c      	cmp	ip, r3
 8006d50:	d8f9      	bhi.n	8006d46 <__lshift+0x9a>
 8006d52:	e7e4      	b.n	8006d1e <__lshift+0x72>

08006d54 <__mcmp>:
 8006d54:	6903      	ldr	r3, [r0, #16]
 8006d56:	690a      	ldr	r2, [r1, #16]
 8006d58:	1a9b      	subs	r3, r3, r2
 8006d5a:	b530      	push	{r4, r5, lr}
 8006d5c:	d10c      	bne.n	8006d78 <__mcmp+0x24>
 8006d5e:	0092      	lsls	r2, r2, #2
 8006d60:	3014      	adds	r0, #20
 8006d62:	3114      	adds	r1, #20
 8006d64:	1884      	adds	r4, r0, r2
 8006d66:	4411      	add	r1, r2
 8006d68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d70:	4295      	cmp	r5, r2
 8006d72:	d003      	beq.n	8006d7c <__mcmp+0x28>
 8006d74:	d305      	bcc.n	8006d82 <__mcmp+0x2e>
 8006d76:	2301      	movs	r3, #1
 8006d78:	4618      	mov	r0, r3
 8006d7a:	bd30      	pop	{r4, r5, pc}
 8006d7c:	42a0      	cmp	r0, r4
 8006d7e:	d3f3      	bcc.n	8006d68 <__mcmp+0x14>
 8006d80:	e7fa      	b.n	8006d78 <__mcmp+0x24>
 8006d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d86:	e7f7      	b.n	8006d78 <__mcmp+0x24>

08006d88 <__mdiff>:
 8006d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d8c:	460d      	mov	r5, r1
 8006d8e:	4607      	mov	r7, r0
 8006d90:	4611      	mov	r1, r2
 8006d92:	4628      	mov	r0, r5
 8006d94:	4614      	mov	r4, r2
 8006d96:	f7ff ffdd 	bl	8006d54 <__mcmp>
 8006d9a:	1e06      	subs	r6, r0, #0
 8006d9c:	d108      	bne.n	8006db0 <__mdiff+0x28>
 8006d9e:	4631      	mov	r1, r6
 8006da0:	4638      	mov	r0, r7
 8006da2:	f7ff fdc2 	bl	800692a <_Balloc>
 8006da6:	2301      	movs	r3, #1
 8006da8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db0:	bfa4      	itt	ge
 8006db2:	4623      	movge	r3, r4
 8006db4:	462c      	movge	r4, r5
 8006db6:	4638      	mov	r0, r7
 8006db8:	6861      	ldr	r1, [r4, #4]
 8006dba:	bfa6      	itte	ge
 8006dbc:	461d      	movge	r5, r3
 8006dbe:	2600      	movge	r6, #0
 8006dc0:	2601      	movlt	r6, #1
 8006dc2:	f7ff fdb2 	bl	800692a <_Balloc>
 8006dc6:	692b      	ldr	r3, [r5, #16]
 8006dc8:	60c6      	str	r6, [r0, #12]
 8006dca:	6926      	ldr	r6, [r4, #16]
 8006dcc:	f105 0914 	add.w	r9, r5, #20
 8006dd0:	f104 0214 	add.w	r2, r4, #20
 8006dd4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006dd8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006ddc:	f100 0514 	add.w	r5, r0, #20
 8006de0:	f04f 0e00 	mov.w	lr, #0
 8006de4:	f852 ab04 	ldr.w	sl, [r2], #4
 8006de8:	f859 4b04 	ldr.w	r4, [r9], #4
 8006dec:	fa1e f18a 	uxtah	r1, lr, sl
 8006df0:	b2a3      	uxth	r3, r4
 8006df2:	1ac9      	subs	r1, r1, r3
 8006df4:	0c23      	lsrs	r3, r4, #16
 8006df6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006dfa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006dfe:	b289      	uxth	r1, r1
 8006e00:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006e04:	45c8      	cmp	r8, r9
 8006e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006e0a:	4694      	mov	ip, r2
 8006e0c:	f845 3b04 	str.w	r3, [r5], #4
 8006e10:	d8e8      	bhi.n	8006de4 <__mdiff+0x5c>
 8006e12:	45bc      	cmp	ip, r7
 8006e14:	d304      	bcc.n	8006e20 <__mdiff+0x98>
 8006e16:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006e1a:	b183      	cbz	r3, 8006e3e <__mdiff+0xb6>
 8006e1c:	6106      	str	r6, [r0, #16]
 8006e1e:	e7c5      	b.n	8006dac <__mdiff+0x24>
 8006e20:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006e24:	fa1e f381 	uxtah	r3, lr, r1
 8006e28:	141a      	asrs	r2, r3, #16
 8006e2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e34:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006e38:	f845 3b04 	str.w	r3, [r5], #4
 8006e3c:	e7e9      	b.n	8006e12 <__mdiff+0x8a>
 8006e3e:	3e01      	subs	r6, #1
 8006e40:	e7e9      	b.n	8006e16 <__mdiff+0x8e>

08006e42 <__d2b>:
 8006e42:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e46:	460e      	mov	r6, r1
 8006e48:	2101      	movs	r1, #1
 8006e4a:	ec59 8b10 	vmov	r8, r9, d0
 8006e4e:	4615      	mov	r5, r2
 8006e50:	f7ff fd6b 	bl	800692a <_Balloc>
 8006e54:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006e58:	4607      	mov	r7, r0
 8006e5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e5e:	bb34      	cbnz	r4, 8006eae <__d2b+0x6c>
 8006e60:	9301      	str	r3, [sp, #4]
 8006e62:	f1b8 0300 	subs.w	r3, r8, #0
 8006e66:	d027      	beq.n	8006eb8 <__d2b+0x76>
 8006e68:	a802      	add	r0, sp, #8
 8006e6a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006e6e:	f7ff fe01 	bl	8006a74 <__lo0bits>
 8006e72:	9900      	ldr	r1, [sp, #0]
 8006e74:	b1f0      	cbz	r0, 8006eb4 <__d2b+0x72>
 8006e76:	9a01      	ldr	r2, [sp, #4]
 8006e78:	f1c0 0320 	rsb	r3, r0, #32
 8006e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e80:	430b      	orrs	r3, r1
 8006e82:	40c2      	lsrs	r2, r0
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	9201      	str	r2, [sp, #4]
 8006e88:	9b01      	ldr	r3, [sp, #4]
 8006e8a:	61bb      	str	r3, [r7, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	bf14      	ite	ne
 8006e90:	2102      	movne	r1, #2
 8006e92:	2101      	moveq	r1, #1
 8006e94:	6139      	str	r1, [r7, #16]
 8006e96:	b1c4      	cbz	r4, 8006eca <__d2b+0x88>
 8006e98:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006e9c:	4404      	add	r4, r0
 8006e9e:	6034      	str	r4, [r6, #0]
 8006ea0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ea4:	6028      	str	r0, [r5, #0]
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	b003      	add	sp, #12
 8006eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006eb2:	e7d5      	b.n	8006e60 <__d2b+0x1e>
 8006eb4:	6179      	str	r1, [r7, #20]
 8006eb6:	e7e7      	b.n	8006e88 <__d2b+0x46>
 8006eb8:	a801      	add	r0, sp, #4
 8006eba:	f7ff fddb 	bl	8006a74 <__lo0bits>
 8006ebe:	9b01      	ldr	r3, [sp, #4]
 8006ec0:	617b      	str	r3, [r7, #20]
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	6139      	str	r1, [r7, #16]
 8006ec6:	3020      	adds	r0, #32
 8006ec8:	e7e5      	b.n	8006e96 <__d2b+0x54>
 8006eca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006ece:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ed2:	6030      	str	r0, [r6, #0]
 8006ed4:	6918      	ldr	r0, [r3, #16]
 8006ed6:	f7ff fdae 	bl	8006a36 <__hi0bits>
 8006eda:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006ede:	e7e1      	b.n	8006ea4 <__d2b+0x62>

08006ee0 <_calloc_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	fb02 f401 	mul.w	r4, r2, r1
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	f000 f856 	bl	8006f98 <_malloc_r>
 8006eec:	4605      	mov	r5, r0
 8006eee:	b118      	cbz	r0, 8006ef8 <_calloc_r+0x18>
 8006ef0:	4622      	mov	r2, r4
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	f7fe fa30 	bl	8005358 <memset>
 8006ef8:	4628      	mov	r0, r5
 8006efa:	bd38      	pop	{r3, r4, r5, pc}

08006efc <_free_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	4605      	mov	r5, r0
 8006f00:	2900      	cmp	r1, #0
 8006f02:	d045      	beq.n	8006f90 <_free_r+0x94>
 8006f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f08:	1f0c      	subs	r4, r1, #4
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	bfb8      	it	lt
 8006f0e:	18e4      	addlt	r4, r4, r3
 8006f10:	f000 fa29 	bl	8007366 <__malloc_lock>
 8006f14:	4a1f      	ldr	r2, [pc, #124]	; (8006f94 <_free_r+0x98>)
 8006f16:	6813      	ldr	r3, [r2, #0]
 8006f18:	4610      	mov	r0, r2
 8006f1a:	b933      	cbnz	r3, 8006f2a <_free_r+0x2e>
 8006f1c:	6063      	str	r3, [r4, #4]
 8006f1e:	6014      	str	r4, [r2, #0]
 8006f20:	4628      	mov	r0, r5
 8006f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f26:	f000 ba1f 	b.w	8007368 <__malloc_unlock>
 8006f2a:	42a3      	cmp	r3, r4
 8006f2c:	d90c      	bls.n	8006f48 <_free_r+0x4c>
 8006f2e:	6821      	ldr	r1, [r4, #0]
 8006f30:	1862      	adds	r2, r4, r1
 8006f32:	4293      	cmp	r3, r2
 8006f34:	bf04      	itt	eq
 8006f36:	681a      	ldreq	r2, [r3, #0]
 8006f38:	685b      	ldreq	r3, [r3, #4]
 8006f3a:	6063      	str	r3, [r4, #4]
 8006f3c:	bf04      	itt	eq
 8006f3e:	1852      	addeq	r2, r2, r1
 8006f40:	6022      	streq	r2, [r4, #0]
 8006f42:	6004      	str	r4, [r0, #0]
 8006f44:	e7ec      	b.n	8006f20 <_free_r+0x24>
 8006f46:	4613      	mov	r3, r2
 8006f48:	685a      	ldr	r2, [r3, #4]
 8006f4a:	b10a      	cbz	r2, 8006f50 <_free_r+0x54>
 8006f4c:	42a2      	cmp	r2, r4
 8006f4e:	d9fa      	bls.n	8006f46 <_free_r+0x4a>
 8006f50:	6819      	ldr	r1, [r3, #0]
 8006f52:	1858      	adds	r0, r3, r1
 8006f54:	42a0      	cmp	r0, r4
 8006f56:	d10b      	bne.n	8006f70 <_free_r+0x74>
 8006f58:	6820      	ldr	r0, [r4, #0]
 8006f5a:	4401      	add	r1, r0
 8006f5c:	1858      	adds	r0, r3, r1
 8006f5e:	4282      	cmp	r2, r0
 8006f60:	6019      	str	r1, [r3, #0]
 8006f62:	d1dd      	bne.n	8006f20 <_free_r+0x24>
 8006f64:	6810      	ldr	r0, [r2, #0]
 8006f66:	6852      	ldr	r2, [r2, #4]
 8006f68:	605a      	str	r2, [r3, #4]
 8006f6a:	4401      	add	r1, r0
 8006f6c:	6019      	str	r1, [r3, #0]
 8006f6e:	e7d7      	b.n	8006f20 <_free_r+0x24>
 8006f70:	d902      	bls.n	8006f78 <_free_r+0x7c>
 8006f72:	230c      	movs	r3, #12
 8006f74:	602b      	str	r3, [r5, #0]
 8006f76:	e7d3      	b.n	8006f20 <_free_r+0x24>
 8006f78:	6820      	ldr	r0, [r4, #0]
 8006f7a:	1821      	adds	r1, r4, r0
 8006f7c:	428a      	cmp	r2, r1
 8006f7e:	bf04      	itt	eq
 8006f80:	6811      	ldreq	r1, [r2, #0]
 8006f82:	6852      	ldreq	r2, [r2, #4]
 8006f84:	6062      	str	r2, [r4, #4]
 8006f86:	bf04      	itt	eq
 8006f88:	1809      	addeq	r1, r1, r0
 8006f8a:	6021      	streq	r1, [r4, #0]
 8006f8c:	605c      	str	r4, [r3, #4]
 8006f8e:	e7c7      	b.n	8006f20 <_free_r+0x24>
 8006f90:	bd38      	pop	{r3, r4, r5, pc}
 8006f92:	bf00      	nop
 8006f94:	20000420 	.word	0x20000420

08006f98 <_malloc_r>:
 8006f98:	b570      	push	{r4, r5, r6, lr}
 8006f9a:	1ccd      	adds	r5, r1, #3
 8006f9c:	f025 0503 	bic.w	r5, r5, #3
 8006fa0:	3508      	adds	r5, #8
 8006fa2:	2d0c      	cmp	r5, #12
 8006fa4:	bf38      	it	cc
 8006fa6:	250c      	movcc	r5, #12
 8006fa8:	2d00      	cmp	r5, #0
 8006faa:	4606      	mov	r6, r0
 8006fac:	db01      	blt.n	8006fb2 <_malloc_r+0x1a>
 8006fae:	42a9      	cmp	r1, r5
 8006fb0:	d903      	bls.n	8006fba <_malloc_r+0x22>
 8006fb2:	230c      	movs	r3, #12
 8006fb4:	6033      	str	r3, [r6, #0]
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	bd70      	pop	{r4, r5, r6, pc}
 8006fba:	f000 f9d4 	bl	8007366 <__malloc_lock>
 8006fbe:	4a21      	ldr	r2, [pc, #132]	; (8007044 <_malloc_r+0xac>)
 8006fc0:	6814      	ldr	r4, [r2, #0]
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	b991      	cbnz	r1, 8006fec <_malloc_r+0x54>
 8006fc6:	4c20      	ldr	r4, [pc, #128]	; (8007048 <_malloc_r+0xb0>)
 8006fc8:	6823      	ldr	r3, [r4, #0]
 8006fca:	b91b      	cbnz	r3, 8006fd4 <_malloc_r+0x3c>
 8006fcc:	4630      	mov	r0, r6
 8006fce:	f000 f98f 	bl	80072f0 <_sbrk_r>
 8006fd2:	6020      	str	r0, [r4, #0]
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	f000 f98a 	bl	80072f0 <_sbrk_r>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d124      	bne.n	800702a <_malloc_r+0x92>
 8006fe0:	230c      	movs	r3, #12
 8006fe2:	6033      	str	r3, [r6, #0]
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	f000 f9bf 	bl	8007368 <__malloc_unlock>
 8006fea:	e7e4      	b.n	8006fb6 <_malloc_r+0x1e>
 8006fec:	680b      	ldr	r3, [r1, #0]
 8006fee:	1b5b      	subs	r3, r3, r5
 8006ff0:	d418      	bmi.n	8007024 <_malloc_r+0x8c>
 8006ff2:	2b0b      	cmp	r3, #11
 8006ff4:	d90f      	bls.n	8007016 <_malloc_r+0x7e>
 8006ff6:	600b      	str	r3, [r1, #0]
 8006ff8:	50cd      	str	r5, [r1, r3]
 8006ffa:	18cc      	adds	r4, r1, r3
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	f000 f9b3 	bl	8007368 <__malloc_unlock>
 8007002:	f104 000b 	add.w	r0, r4, #11
 8007006:	1d23      	adds	r3, r4, #4
 8007008:	f020 0007 	bic.w	r0, r0, #7
 800700c:	1ac3      	subs	r3, r0, r3
 800700e:	d0d3      	beq.n	8006fb8 <_malloc_r+0x20>
 8007010:	425a      	negs	r2, r3
 8007012:	50e2      	str	r2, [r4, r3]
 8007014:	e7d0      	b.n	8006fb8 <_malloc_r+0x20>
 8007016:	428c      	cmp	r4, r1
 8007018:	684b      	ldr	r3, [r1, #4]
 800701a:	bf16      	itet	ne
 800701c:	6063      	strne	r3, [r4, #4]
 800701e:	6013      	streq	r3, [r2, #0]
 8007020:	460c      	movne	r4, r1
 8007022:	e7eb      	b.n	8006ffc <_malloc_r+0x64>
 8007024:	460c      	mov	r4, r1
 8007026:	6849      	ldr	r1, [r1, #4]
 8007028:	e7cc      	b.n	8006fc4 <_malloc_r+0x2c>
 800702a:	1cc4      	adds	r4, r0, #3
 800702c:	f024 0403 	bic.w	r4, r4, #3
 8007030:	42a0      	cmp	r0, r4
 8007032:	d005      	beq.n	8007040 <_malloc_r+0xa8>
 8007034:	1a21      	subs	r1, r4, r0
 8007036:	4630      	mov	r0, r6
 8007038:	f000 f95a 	bl	80072f0 <_sbrk_r>
 800703c:	3001      	adds	r0, #1
 800703e:	d0cf      	beq.n	8006fe0 <_malloc_r+0x48>
 8007040:	6025      	str	r5, [r4, #0]
 8007042:	e7db      	b.n	8006ffc <_malloc_r+0x64>
 8007044:	20000420 	.word	0x20000420
 8007048:	20000424 	.word	0x20000424

0800704c <__ssputs_r>:
 800704c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007050:	688e      	ldr	r6, [r1, #8]
 8007052:	429e      	cmp	r6, r3
 8007054:	4682      	mov	sl, r0
 8007056:	460c      	mov	r4, r1
 8007058:	4690      	mov	r8, r2
 800705a:	4699      	mov	r9, r3
 800705c:	d837      	bhi.n	80070ce <__ssputs_r+0x82>
 800705e:	898a      	ldrh	r2, [r1, #12]
 8007060:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007064:	d031      	beq.n	80070ca <__ssputs_r+0x7e>
 8007066:	6825      	ldr	r5, [r4, #0]
 8007068:	6909      	ldr	r1, [r1, #16]
 800706a:	1a6f      	subs	r7, r5, r1
 800706c:	6965      	ldr	r5, [r4, #20]
 800706e:	2302      	movs	r3, #2
 8007070:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007074:	fb95 f5f3 	sdiv	r5, r5, r3
 8007078:	f109 0301 	add.w	r3, r9, #1
 800707c:	443b      	add	r3, r7
 800707e:	429d      	cmp	r5, r3
 8007080:	bf38      	it	cc
 8007082:	461d      	movcc	r5, r3
 8007084:	0553      	lsls	r3, r2, #21
 8007086:	d530      	bpl.n	80070ea <__ssputs_r+0x9e>
 8007088:	4629      	mov	r1, r5
 800708a:	f7ff ff85 	bl	8006f98 <_malloc_r>
 800708e:	4606      	mov	r6, r0
 8007090:	b950      	cbnz	r0, 80070a8 <__ssputs_r+0x5c>
 8007092:	230c      	movs	r3, #12
 8007094:	f8ca 3000 	str.w	r3, [sl]
 8007098:	89a3      	ldrh	r3, [r4, #12]
 800709a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800709e:	81a3      	strh	r3, [r4, #12]
 80070a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a8:	463a      	mov	r2, r7
 80070aa:	6921      	ldr	r1, [r4, #16]
 80070ac:	f7ff fc32 	bl	8006914 <memcpy>
 80070b0:	89a3      	ldrh	r3, [r4, #12]
 80070b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ba:	81a3      	strh	r3, [r4, #12]
 80070bc:	6126      	str	r6, [r4, #16]
 80070be:	6165      	str	r5, [r4, #20]
 80070c0:	443e      	add	r6, r7
 80070c2:	1bed      	subs	r5, r5, r7
 80070c4:	6026      	str	r6, [r4, #0]
 80070c6:	60a5      	str	r5, [r4, #8]
 80070c8:	464e      	mov	r6, r9
 80070ca:	454e      	cmp	r6, r9
 80070cc:	d900      	bls.n	80070d0 <__ssputs_r+0x84>
 80070ce:	464e      	mov	r6, r9
 80070d0:	4632      	mov	r2, r6
 80070d2:	4641      	mov	r1, r8
 80070d4:	6820      	ldr	r0, [r4, #0]
 80070d6:	f000 f92d 	bl	8007334 <memmove>
 80070da:	68a3      	ldr	r3, [r4, #8]
 80070dc:	1b9b      	subs	r3, r3, r6
 80070de:	60a3      	str	r3, [r4, #8]
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	441e      	add	r6, r3
 80070e4:	6026      	str	r6, [r4, #0]
 80070e6:	2000      	movs	r0, #0
 80070e8:	e7dc      	b.n	80070a4 <__ssputs_r+0x58>
 80070ea:	462a      	mov	r2, r5
 80070ec:	f000 f93d 	bl	800736a <_realloc_r>
 80070f0:	4606      	mov	r6, r0
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d1e2      	bne.n	80070bc <__ssputs_r+0x70>
 80070f6:	6921      	ldr	r1, [r4, #16]
 80070f8:	4650      	mov	r0, sl
 80070fa:	f7ff feff 	bl	8006efc <_free_r>
 80070fe:	e7c8      	b.n	8007092 <__ssputs_r+0x46>

08007100 <_svfiprintf_r>:
 8007100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007104:	461d      	mov	r5, r3
 8007106:	898b      	ldrh	r3, [r1, #12]
 8007108:	061f      	lsls	r7, r3, #24
 800710a:	b09d      	sub	sp, #116	; 0x74
 800710c:	4680      	mov	r8, r0
 800710e:	460c      	mov	r4, r1
 8007110:	4616      	mov	r6, r2
 8007112:	d50f      	bpl.n	8007134 <_svfiprintf_r+0x34>
 8007114:	690b      	ldr	r3, [r1, #16]
 8007116:	b96b      	cbnz	r3, 8007134 <_svfiprintf_r+0x34>
 8007118:	2140      	movs	r1, #64	; 0x40
 800711a:	f7ff ff3d 	bl	8006f98 <_malloc_r>
 800711e:	6020      	str	r0, [r4, #0]
 8007120:	6120      	str	r0, [r4, #16]
 8007122:	b928      	cbnz	r0, 8007130 <_svfiprintf_r+0x30>
 8007124:	230c      	movs	r3, #12
 8007126:	f8c8 3000 	str.w	r3, [r8]
 800712a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800712e:	e0c8      	b.n	80072c2 <_svfiprintf_r+0x1c2>
 8007130:	2340      	movs	r3, #64	; 0x40
 8007132:	6163      	str	r3, [r4, #20]
 8007134:	2300      	movs	r3, #0
 8007136:	9309      	str	r3, [sp, #36]	; 0x24
 8007138:	2320      	movs	r3, #32
 800713a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800713e:	2330      	movs	r3, #48	; 0x30
 8007140:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007144:	9503      	str	r5, [sp, #12]
 8007146:	f04f 0b01 	mov.w	fp, #1
 800714a:	4637      	mov	r7, r6
 800714c:	463d      	mov	r5, r7
 800714e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007152:	b10b      	cbz	r3, 8007158 <_svfiprintf_r+0x58>
 8007154:	2b25      	cmp	r3, #37	; 0x25
 8007156:	d13e      	bne.n	80071d6 <_svfiprintf_r+0xd6>
 8007158:	ebb7 0a06 	subs.w	sl, r7, r6
 800715c:	d00b      	beq.n	8007176 <_svfiprintf_r+0x76>
 800715e:	4653      	mov	r3, sl
 8007160:	4632      	mov	r2, r6
 8007162:	4621      	mov	r1, r4
 8007164:	4640      	mov	r0, r8
 8007166:	f7ff ff71 	bl	800704c <__ssputs_r>
 800716a:	3001      	adds	r0, #1
 800716c:	f000 80a4 	beq.w	80072b8 <_svfiprintf_r+0x1b8>
 8007170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007172:	4453      	add	r3, sl
 8007174:	9309      	str	r3, [sp, #36]	; 0x24
 8007176:	783b      	ldrb	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 809d 	beq.w	80072b8 <_svfiprintf_r+0x1b8>
 800717e:	2300      	movs	r3, #0
 8007180:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007188:	9304      	str	r3, [sp, #16]
 800718a:	9307      	str	r3, [sp, #28]
 800718c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007190:	931a      	str	r3, [sp, #104]	; 0x68
 8007192:	462f      	mov	r7, r5
 8007194:	2205      	movs	r2, #5
 8007196:	f817 1b01 	ldrb.w	r1, [r7], #1
 800719a:	4850      	ldr	r0, [pc, #320]	; (80072dc <_svfiprintf_r+0x1dc>)
 800719c:	f7f9 f840 	bl	8000220 <memchr>
 80071a0:	9b04      	ldr	r3, [sp, #16]
 80071a2:	b9d0      	cbnz	r0, 80071da <_svfiprintf_r+0xda>
 80071a4:	06d9      	lsls	r1, r3, #27
 80071a6:	bf44      	itt	mi
 80071a8:	2220      	movmi	r2, #32
 80071aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071ae:	071a      	lsls	r2, r3, #28
 80071b0:	bf44      	itt	mi
 80071b2:	222b      	movmi	r2, #43	; 0x2b
 80071b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071b8:	782a      	ldrb	r2, [r5, #0]
 80071ba:	2a2a      	cmp	r2, #42	; 0x2a
 80071bc:	d015      	beq.n	80071ea <_svfiprintf_r+0xea>
 80071be:	9a07      	ldr	r2, [sp, #28]
 80071c0:	462f      	mov	r7, r5
 80071c2:	2000      	movs	r0, #0
 80071c4:	250a      	movs	r5, #10
 80071c6:	4639      	mov	r1, r7
 80071c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071cc:	3b30      	subs	r3, #48	; 0x30
 80071ce:	2b09      	cmp	r3, #9
 80071d0:	d94d      	bls.n	800726e <_svfiprintf_r+0x16e>
 80071d2:	b1b8      	cbz	r0, 8007204 <_svfiprintf_r+0x104>
 80071d4:	e00f      	b.n	80071f6 <_svfiprintf_r+0xf6>
 80071d6:	462f      	mov	r7, r5
 80071d8:	e7b8      	b.n	800714c <_svfiprintf_r+0x4c>
 80071da:	4a40      	ldr	r2, [pc, #256]	; (80072dc <_svfiprintf_r+0x1dc>)
 80071dc:	1a80      	subs	r0, r0, r2
 80071de:	fa0b f000 	lsl.w	r0, fp, r0
 80071e2:	4318      	orrs	r0, r3
 80071e4:	9004      	str	r0, [sp, #16]
 80071e6:	463d      	mov	r5, r7
 80071e8:	e7d3      	b.n	8007192 <_svfiprintf_r+0x92>
 80071ea:	9a03      	ldr	r2, [sp, #12]
 80071ec:	1d11      	adds	r1, r2, #4
 80071ee:	6812      	ldr	r2, [r2, #0]
 80071f0:	9103      	str	r1, [sp, #12]
 80071f2:	2a00      	cmp	r2, #0
 80071f4:	db01      	blt.n	80071fa <_svfiprintf_r+0xfa>
 80071f6:	9207      	str	r2, [sp, #28]
 80071f8:	e004      	b.n	8007204 <_svfiprintf_r+0x104>
 80071fa:	4252      	negs	r2, r2
 80071fc:	f043 0302 	orr.w	r3, r3, #2
 8007200:	9207      	str	r2, [sp, #28]
 8007202:	9304      	str	r3, [sp, #16]
 8007204:	783b      	ldrb	r3, [r7, #0]
 8007206:	2b2e      	cmp	r3, #46	; 0x2e
 8007208:	d10c      	bne.n	8007224 <_svfiprintf_r+0x124>
 800720a:	787b      	ldrb	r3, [r7, #1]
 800720c:	2b2a      	cmp	r3, #42	; 0x2a
 800720e:	d133      	bne.n	8007278 <_svfiprintf_r+0x178>
 8007210:	9b03      	ldr	r3, [sp, #12]
 8007212:	1d1a      	adds	r2, r3, #4
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	9203      	str	r2, [sp, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	bfb8      	it	lt
 800721c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007220:	3702      	adds	r7, #2
 8007222:	9305      	str	r3, [sp, #20]
 8007224:	4d2e      	ldr	r5, [pc, #184]	; (80072e0 <_svfiprintf_r+0x1e0>)
 8007226:	7839      	ldrb	r1, [r7, #0]
 8007228:	2203      	movs	r2, #3
 800722a:	4628      	mov	r0, r5
 800722c:	f7f8 fff8 	bl	8000220 <memchr>
 8007230:	b138      	cbz	r0, 8007242 <_svfiprintf_r+0x142>
 8007232:	2340      	movs	r3, #64	; 0x40
 8007234:	1b40      	subs	r0, r0, r5
 8007236:	fa03 f000 	lsl.w	r0, r3, r0
 800723a:	9b04      	ldr	r3, [sp, #16]
 800723c:	4303      	orrs	r3, r0
 800723e:	3701      	adds	r7, #1
 8007240:	9304      	str	r3, [sp, #16]
 8007242:	7839      	ldrb	r1, [r7, #0]
 8007244:	4827      	ldr	r0, [pc, #156]	; (80072e4 <_svfiprintf_r+0x1e4>)
 8007246:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800724a:	2206      	movs	r2, #6
 800724c:	1c7e      	adds	r6, r7, #1
 800724e:	f7f8 ffe7 	bl	8000220 <memchr>
 8007252:	2800      	cmp	r0, #0
 8007254:	d038      	beq.n	80072c8 <_svfiprintf_r+0x1c8>
 8007256:	4b24      	ldr	r3, [pc, #144]	; (80072e8 <_svfiprintf_r+0x1e8>)
 8007258:	bb13      	cbnz	r3, 80072a0 <_svfiprintf_r+0x1a0>
 800725a:	9b03      	ldr	r3, [sp, #12]
 800725c:	3307      	adds	r3, #7
 800725e:	f023 0307 	bic.w	r3, r3, #7
 8007262:	3308      	adds	r3, #8
 8007264:	9303      	str	r3, [sp, #12]
 8007266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007268:	444b      	add	r3, r9
 800726a:	9309      	str	r3, [sp, #36]	; 0x24
 800726c:	e76d      	b.n	800714a <_svfiprintf_r+0x4a>
 800726e:	fb05 3202 	mla	r2, r5, r2, r3
 8007272:	2001      	movs	r0, #1
 8007274:	460f      	mov	r7, r1
 8007276:	e7a6      	b.n	80071c6 <_svfiprintf_r+0xc6>
 8007278:	2300      	movs	r3, #0
 800727a:	3701      	adds	r7, #1
 800727c:	9305      	str	r3, [sp, #20]
 800727e:	4619      	mov	r1, r3
 8007280:	250a      	movs	r5, #10
 8007282:	4638      	mov	r0, r7
 8007284:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007288:	3a30      	subs	r2, #48	; 0x30
 800728a:	2a09      	cmp	r2, #9
 800728c:	d903      	bls.n	8007296 <_svfiprintf_r+0x196>
 800728e:	2b00      	cmp	r3, #0
 8007290:	d0c8      	beq.n	8007224 <_svfiprintf_r+0x124>
 8007292:	9105      	str	r1, [sp, #20]
 8007294:	e7c6      	b.n	8007224 <_svfiprintf_r+0x124>
 8007296:	fb05 2101 	mla	r1, r5, r1, r2
 800729a:	2301      	movs	r3, #1
 800729c:	4607      	mov	r7, r0
 800729e:	e7f0      	b.n	8007282 <_svfiprintf_r+0x182>
 80072a0:	ab03      	add	r3, sp, #12
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	4622      	mov	r2, r4
 80072a6:	4b11      	ldr	r3, [pc, #68]	; (80072ec <_svfiprintf_r+0x1ec>)
 80072a8:	a904      	add	r1, sp, #16
 80072aa:	4640      	mov	r0, r8
 80072ac:	f7fe f8f0 	bl	8005490 <_printf_float>
 80072b0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80072b4:	4681      	mov	r9, r0
 80072b6:	d1d6      	bne.n	8007266 <_svfiprintf_r+0x166>
 80072b8:	89a3      	ldrh	r3, [r4, #12]
 80072ba:	065b      	lsls	r3, r3, #25
 80072bc:	f53f af35 	bmi.w	800712a <_svfiprintf_r+0x2a>
 80072c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072c2:	b01d      	add	sp, #116	; 0x74
 80072c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c8:	ab03      	add	r3, sp, #12
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	4622      	mov	r2, r4
 80072ce:	4b07      	ldr	r3, [pc, #28]	; (80072ec <_svfiprintf_r+0x1ec>)
 80072d0:	a904      	add	r1, sp, #16
 80072d2:	4640      	mov	r0, r8
 80072d4:	f7fe fb92 	bl	80059fc <_printf_i>
 80072d8:	e7ea      	b.n	80072b0 <_svfiprintf_r+0x1b0>
 80072da:	bf00      	nop
 80072dc:	0800791c 	.word	0x0800791c
 80072e0:	08007922 	.word	0x08007922
 80072e4:	08007926 	.word	0x08007926
 80072e8:	08005491 	.word	0x08005491
 80072ec:	0800704d 	.word	0x0800704d

080072f0 <_sbrk_r>:
 80072f0:	b538      	push	{r3, r4, r5, lr}
 80072f2:	4c06      	ldr	r4, [pc, #24]	; (800730c <_sbrk_r+0x1c>)
 80072f4:	2300      	movs	r3, #0
 80072f6:	4605      	mov	r5, r0
 80072f8:	4608      	mov	r0, r1
 80072fa:	6023      	str	r3, [r4, #0]
 80072fc:	f7fd fe54 	bl	8004fa8 <_sbrk>
 8007300:	1c43      	adds	r3, r0, #1
 8007302:	d102      	bne.n	800730a <_sbrk_r+0x1a>
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	b103      	cbz	r3, 800730a <_sbrk_r+0x1a>
 8007308:	602b      	str	r3, [r5, #0]
 800730a:	bd38      	pop	{r3, r4, r5, pc}
 800730c:	20000a9c 	.word	0x20000a9c

08007310 <__ascii_mbtowc>:
 8007310:	b082      	sub	sp, #8
 8007312:	b901      	cbnz	r1, 8007316 <__ascii_mbtowc+0x6>
 8007314:	a901      	add	r1, sp, #4
 8007316:	b142      	cbz	r2, 800732a <__ascii_mbtowc+0x1a>
 8007318:	b14b      	cbz	r3, 800732e <__ascii_mbtowc+0x1e>
 800731a:	7813      	ldrb	r3, [r2, #0]
 800731c:	600b      	str	r3, [r1, #0]
 800731e:	7812      	ldrb	r2, [r2, #0]
 8007320:	1c10      	adds	r0, r2, #0
 8007322:	bf18      	it	ne
 8007324:	2001      	movne	r0, #1
 8007326:	b002      	add	sp, #8
 8007328:	4770      	bx	lr
 800732a:	4610      	mov	r0, r2
 800732c:	e7fb      	b.n	8007326 <__ascii_mbtowc+0x16>
 800732e:	f06f 0001 	mvn.w	r0, #1
 8007332:	e7f8      	b.n	8007326 <__ascii_mbtowc+0x16>

08007334 <memmove>:
 8007334:	4288      	cmp	r0, r1
 8007336:	b510      	push	{r4, lr}
 8007338:	eb01 0302 	add.w	r3, r1, r2
 800733c:	d807      	bhi.n	800734e <memmove+0x1a>
 800733e:	1e42      	subs	r2, r0, #1
 8007340:	4299      	cmp	r1, r3
 8007342:	d00a      	beq.n	800735a <memmove+0x26>
 8007344:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007348:	f802 4f01 	strb.w	r4, [r2, #1]!
 800734c:	e7f8      	b.n	8007340 <memmove+0xc>
 800734e:	4283      	cmp	r3, r0
 8007350:	d9f5      	bls.n	800733e <memmove+0xa>
 8007352:	1881      	adds	r1, r0, r2
 8007354:	1ad2      	subs	r2, r2, r3
 8007356:	42d3      	cmn	r3, r2
 8007358:	d100      	bne.n	800735c <memmove+0x28>
 800735a:	bd10      	pop	{r4, pc}
 800735c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007360:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007364:	e7f7      	b.n	8007356 <memmove+0x22>

08007366 <__malloc_lock>:
 8007366:	4770      	bx	lr

08007368 <__malloc_unlock>:
 8007368:	4770      	bx	lr

0800736a <_realloc_r>:
 800736a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736c:	4607      	mov	r7, r0
 800736e:	4614      	mov	r4, r2
 8007370:	460e      	mov	r6, r1
 8007372:	b921      	cbnz	r1, 800737e <_realloc_r+0x14>
 8007374:	4611      	mov	r1, r2
 8007376:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800737a:	f7ff be0d 	b.w	8006f98 <_malloc_r>
 800737e:	b922      	cbnz	r2, 800738a <_realloc_r+0x20>
 8007380:	f7ff fdbc 	bl	8006efc <_free_r>
 8007384:	4625      	mov	r5, r4
 8007386:	4628      	mov	r0, r5
 8007388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800738a:	f000 f821 	bl	80073d0 <_malloc_usable_size_r>
 800738e:	42a0      	cmp	r0, r4
 8007390:	d20f      	bcs.n	80073b2 <_realloc_r+0x48>
 8007392:	4621      	mov	r1, r4
 8007394:	4638      	mov	r0, r7
 8007396:	f7ff fdff 	bl	8006f98 <_malloc_r>
 800739a:	4605      	mov	r5, r0
 800739c:	2800      	cmp	r0, #0
 800739e:	d0f2      	beq.n	8007386 <_realloc_r+0x1c>
 80073a0:	4631      	mov	r1, r6
 80073a2:	4622      	mov	r2, r4
 80073a4:	f7ff fab6 	bl	8006914 <memcpy>
 80073a8:	4631      	mov	r1, r6
 80073aa:	4638      	mov	r0, r7
 80073ac:	f7ff fda6 	bl	8006efc <_free_r>
 80073b0:	e7e9      	b.n	8007386 <_realloc_r+0x1c>
 80073b2:	4635      	mov	r5, r6
 80073b4:	e7e7      	b.n	8007386 <_realloc_r+0x1c>

080073b6 <__ascii_wctomb>:
 80073b6:	b149      	cbz	r1, 80073cc <__ascii_wctomb+0x16>
 80073b8:	2aff      	cmp	r2, #255	; 0xff
 80073ba:	bf85      	ittet	hi
 80073bc:	238a      	movhi	r3, #138	; 0x8a
 80073be:	6003      	strhi	r3, [r0, #0]
 80073c0:	700a      	strbls	r2, [r1, #0]
 80073c2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80073c6:	bf98      	it	ls
 80073c8:	2001      	movls	r0, #1
 80073ca:	4770      	bx	lr
 80073cc:	4608      	mov	r0, r1
 80073ce:	4770      	bx	lr

080073d0 <_malloc_usable_size_r>:
 80073d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073d4:	1f18      	subs	r0, r3, #4
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	bfbc      	itt	lt
 80073da:	580b      	ldrlt	r3, [r1, r0]
 80073dc:	18c0      	addlt	r0, r0, r3
 80073de:	4770      	bx	lr

080073e0 <_init>:
 80073e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e2:	bf00      	nop
 80073e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073e6:	bc08      	pop	{r3}
 80073e8:	469e      	mov	lr, r3
 80073ea:	4770      	bx	lr

080073ec <_fini>:
 80073ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ee:	bf00      	nop
 80073f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f2:	bc08      	pop	{r3}
 80073f4:	469e      	mov	lr, r3
 80073f6:	4770      	bx	lr
