
mico_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  080074a8  080074a8  000174a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ae0  08007ae0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08007ae0  08007ae0  00017ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ae8  08007ae8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ae8  08007ae8  00017ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aec  08007aec  00017aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08007af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b0  200001f4  08007ce4  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aa4  08007ce4  00020aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ddc  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002896  00000000  00000000  00033000  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010d0  00000000  00000000  00035898  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f98  00000000  00000000  00036968  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002375a  00000000  00000000  00037900  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea6f  00000000  00000000  0005b05a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5f90  00000000  00000000  00069ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013fa59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005024  00000000  00000000  0013fad4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007490 	.word	0x08007490

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	08007490 	.word	0x08007490

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 b972 	b.w	8000f24 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4688      	mov	r8, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14b      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4615      	mov	r5, r2
 8000c6a:	d967      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0720 	rsb	r7, r2, #32
 8000c76:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c7e:	4095      	lsls	r5, r2
 8000c80:	ea47 0803 	orr.w	r8, r7, r3
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c90:	fa1f fc85 	uxth.w	ip, r5
 8000c94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18eb      	adds	r3, r5, r3
 8000ca6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000caa:	f080 811b 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8118 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000cb4:	3f02      	subs	r7, #2
 8000cb6:	442b      	add	r3, r5
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cd6:	f080 8107 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	f240 8104 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	442c      	add	r4, r5
 8000ce4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ce8:	eba4 040c 	sub.w	r4, r4, ip
 8000cec:	2700      	movs	r7, #0
 8000cee:	b11e      	cbz	r6, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0xbe>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80eb 	beq.w	8000ede <__udivmoddi4+0x286>
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d0e:	4638      	mov	r0, r7
 8000d10:	4639      	mov	r1, r7
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f783 	clz	r7, r3
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d147      	bne.n	8000dae <__udivmoddi4+0x156>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0xd0>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80fa 	bhi.w	8000f1c <__udivmoddi4+0x2c4>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4698      	mov	r8, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d0e0      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000d36:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3a:	e7dd      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000d3c:	b902      	cbnz	r2, 8000d40 <__udivmoddi4+0xe8>
 8000d3e:	deff      	udf	#255	; 0xff
 8000d40:	fab2 f282 	clz	r2, r2
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f040 808f 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d4a:	1b49      	subs	r1, r1, r5
 8000d4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d50:	fa1f f885 	uxth.w	r8, r5
 8000d54:	2701      	movs	r7, #1
 8000d56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb08 f10c 	mul.w	r1, r8, ip
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6c:	18eb      	adds	r3, r5, r3
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4299      	cmp	r1, r3
 8000d76:	f200 80cd 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x14c>
 8000d94:	192c      	adds	r4, r5, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x14a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80b6 	bhi.w	8000f0e <__udivmoddi4+0x2b6>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e79f      	b.n	8000cee <__udivmoddi4+0x96>
 8000dae:	f1c7 0c20 	rsb	ip, r7, #32
 8000db2:	40bb      	lsls	r3, r7
 8000db4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000db8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dbc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dcc:	4325      	orrs	r5, r4
 8000dce:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd2:	0c2c      	lsrs	r4, r5, #16
 8000dd4:	fb08 3319 	mls	r3, r8, r9, r3
 8000dd8:	fa1f fa8e 	uxth.w	sl, lr
 8000ddc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de0:	fb09 f40a 	mul.w	r4, r9, sl
 8000de4:	429c      	cmp	r4, r3
 8000de6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dea:	fa00 f107 	lsl.w	r1, r0, r7
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1e 0303 	adds.w	r3, lr, r3
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000df8:	f080 8087 	bcs.w	8000f0a <__udivmoddi4+0x2b2>
 8000dfc:	429c      	cmp	r4, r3
 8000dfe:	f240 8084 	bls.w	8000f0a <__udivmoddi4+0x2b2>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4473      	add	r3, lr
 8000e08:	1b1b      	subs	r3, r3, r4
 8000e0a:	b2ad      	uxth	r5, r5
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e1c:	45a2      	cmp	sl, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1e 0404 	adds.w	r4, lr, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e28:	d26b      	bcs.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2a:	45a2      	cmp	sl, r4
 8000e2c:	d969      	bls.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4474      	add	r4, lr
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	eba4 040a 	sub.w	r4, r4, sl
 8000e3e:	454c      	cmp	r4, r9
 8000e40:	46c2      	mov	sl, r8
 8000e42:	464b      	mov	r3, r9
 8000e44:	d354      	bcc.n	8000ef0 <__udivmoddi4+0x298>
 8000e46:	d051      	beq.n	8000eec <__udivmoddi4+0x294>
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d069      	beq.n	8000f20 <__udivmoddi4+0x2c8>
 8000e4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e50:	eb64 0403 	sbc.w	r4, r4, r3
 8000e54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e58:	40fd      	lsrs	r5, r7
 8000e5a:	40fc      	lsrs	r4, r7
 8000e5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e60:	e9c6 5400 	strd	r5, r4, [r6]
 8000e64:	2700      	movs	r7, #0
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e70:	4095      	lsls	r5, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e7e:	4338      	orrs	r0, r7
 8000e80:	0c01      	lsrs	r1, r0, #16
 8000e82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e86:	fa1f f885 	uxth.w	r8, r5
 8000e8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb07 f308 	mul.w	r3, r7, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d907      	bls.n	8000eae <__udivmoddi4+0x256>
 8000e9e:	1869      	adds	r1, r5, r1
 8000ea0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ea4:	d22f      	bcs.n	8000f06 <__udivmoddi4+0x2ae>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d92d      	bls.n	8000f06 <__udivmoddi4+0x2ae>
 8000eaa:	3f02      	subs	r7, #2
 8000eac:	4429      	add	r1, r5
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	b281      	uxth	r1, r0
 8000eb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebe:	fb00 f308 	mul.w	r3, r0, r8
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x27e>
 8000ec6:	1869      	adds	r1, r5, r1
 8000ec8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ecc:	d217      	bcs.n	8000efe <__udivmoddi4+0x2a6>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d915      	bls.n	8000efe <__udivmoddi4+0x2a6>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4429      	add	r1, r5
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000edc:	e73b      	b.n	8000d56 <__udivmoddi4+0xfe>
 8000ede:	4637      	mov	r7, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e709      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee4:	4607      	mov	r7, r0
 8000ee6:	e6e7      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fb      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000eec:	4541      	cmp	r1, r8
 8000eee:	d2ab      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ef8:	3801      	subs	r0, #1
 8000efa:	4613      	mov	r3, r2
 8000efc:	e7a4      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000efe:	4660      	mov	r0, ip
 8000f00:	e7e9      	b.n	8000ed6 <__udivmoddi4+0x27e>
 8000f02:	4618      	mov	r0, r3
 8000f04:	e795      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f06:	4667      	mov	r7, ip
 8000f08:	e7d1      	b.n	8000eae <__udivmoddi4+0x256>
 8000f0a:	4681      	mov	r9, r0
 8000f0c:	e77c      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	442c      	add	r4, r5
 8000f12:	e747      	b.n	8000da4 <__udivmoddi4+0x14c>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	442b      	add	r3, r5
 8000f1a:	e72f      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	e708      	b.n	8000d32 <__udivmoddi4+0xda>
 8000f20:	4637      	mov	r7, r6
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0xa0>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <HAL_Init+0x40>)
 8000f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_Init+0x40>)
 8000f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_Init+0x40>)
 8000f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 fd49 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 f808 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5c:	f004 f804 	bl	8004f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023c00 	.word	0x40023c00

08000f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x54>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x58>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 fd61 	bl	8001a52 <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00e      	b.n	8000fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d80a      	bhi.n	8000fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa8:	f000 fd29 	bl	80019fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <HAL_InitTick+0x5c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000020 	.word	0x20000020
 8000fc4:	20000004 	.word	0x20000004
 8000fc8:	20000000 	.word	0x20000000

08000fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000004 	.word	0x20000004
 8000ff0:	20000428 	.word	0x20000428

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000428 	.word	0x20000428

0800100c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff ffee 	bl	8000ff4 <HAL_GetTick>
 8001018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001024:	d005      	beq.n	8001032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_Delay+0x40>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001032:	bf00      	nop
 8001034:	f7ff ffde 	bl	8000ff4 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8f7      	bhi.n	8001034 <HAL_Delay+0x28>
  {
  }
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000004 	.word	0x20000004

08001050 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e033      	b.n	80010ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	2b00      	cmp	r3, #0
 800106c:	d109      	bne.n	8001082 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f002 feae 	bl	8003dd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f003 0310 	and.w	r3, r3, #16
 800108a:	2b00      	cmp	r3, #0
 800108c:	d118      	bne.n	80010c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001096:	f023 0302 	bic.w	r3, r3, #2
 800109a:	f043 0202 	orr.w	r2, r3, #2
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 fad4 	bl	8001650 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f023 0303 	bic.w	r3, r3, #3
 80010b6:	f043 0201 	orr.w	r2, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
 80010be:	e001      	b.n	80010c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d101      	bne.n	80010f2 <HAL_ADC_Start+0x1a>
 80010ee:	2302      	movs	r3, #2
 80010f0:	e0a5      	b.n	800123e <HAL_ADC_Start+0x166>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b01      	cmp	r3, #1
 8001106:	d018      	beq.n	800113a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 0201 	orr.w	r2, r2, #1
 8001116:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001118:	4b4c      	ldr	r3, [pc, #304]	; (800124c <HAL_ADC_Start+0x174>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a4c      	ldr	r2, [pc, #304]	; (8001250 <HAL_ADC_Start+0x178>)
 800111e:	fba2 2303 	umull	r2, r3, r2, r3
 8001122:	0c9a      	lsrs	r2, r3, #18
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800112c:	e002      	b.n	8001134 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	3b01      	subs	r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f9      	bne.n	800112e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b01      	cmp	r3, #1
 8001146:	d179      	bne.n	800123c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001150:	f023 0301 	bic.w	r3, r3, #1
 8001154:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001166:	2b00      	cmp	r3, #0
 8001168:	d007      	beq.n	800117a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001172:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001186:	d106      	bne.n	8001196 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	f023 0206 	bic.w	r2, r3, #6
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	645a      	str	r2, [r3, #68]	; 0x44
 8001194:	e002      	b.n	800119c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <HAL_ADC_Start+0x17c>)
 80011a6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011b0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d12a      	bne.n	8001214 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a25      	ldr	r2, [pc, #148]	; (8001258 <HAL_ADC_Start+0x180>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d015      	beq.n	80011f4 <HAL_ADC_Start+0x11c>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a23      	ldr	r2, [pc, #140]	; (800125c <HAL_ADC_Start+0x184>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d105      	bne.n	80011de <HAL_ADC_Start+0x106>
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <HAL_ADC_Start+0x17c>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 031f 	and.w	r3, r3, #31
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00a      	beq.n	80011f4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <HAL_ADC_Start+0x188>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d129      	bne.n	800123c <HAL_ADC_Start+0x164>
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <HAL_ADC_Start+0x17c>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 031f 	and.w	r3, r3, #31
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d823      	bhi.n	800123c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d11c      	bne.n	800123c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	e013      	b.n	800123c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <HAL_ADC_Start+0x180>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d10e      	bne.n	800123c <HAL_ADC_Start+0x164>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d107      	bne.n	800123c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800123a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000020 	.word	0x20000020
 8001250:	431bde83 	.word	0x431bde83
 8001254:	40012300 	.word	0x40012300
 8001258:	40012000 	.word	0x40012000
 800125c:	40012100 	.word	0x40012100
 8001260:	40012200 	.word	0x40012200

08001264 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_ADC_Stop+0x16>
 8001276:	2302      	movs	r3, #2
 8001278:	e021      	b.n	80012be <HAL_ADC_Stop+0x5a>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 0201 	bic.w	r2, r2, #1
 8001290:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b00      	cmp	r3, #0
 800129e:	d109      	bne.n	80012b4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012a8:	f023 0301 	bic.w	r3, r3, #1
 80012ac:	f043 0201 	orr.w	r2, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e6:	d113      	bne.n	8001310 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012f6:	d10b      	bne.n	8001310 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	f043 0220 	orr.w	r2, r3, #32
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e05c      	b.n	80013ca <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001310:	f7ff fe70 	bl	8000ff4 <HAL_GetTick>
 8001314:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001316:	e01a      	b.n	800134e <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800131e:	d016      	beq.n	800134e <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <HAL_ADC_PollForConversion+0x6c>
 8001326:	f7ff fe65 	bl	8000ff4 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d20b      	bcs.n	800134e <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f043 0204 	orr.w	r2, r3, #4
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e03d      	b.n	80013ca <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b02      	cmp	r3, #2
 800135a:	d1dd      	bne.n	8001318 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f06f 0212 	mvn.w	r2, #18
 8001364:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d123      	bne.n	80013c8 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001384:	2b00      	cmp	r3, #0
 8001386:	d11f      	bne.n	80013c8 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001392:	2b00      	cmp	r3, #0
 8001394:	d006      	beq.n	80013a4 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d111      	bne.n	80013c8 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d105      	bne.n	80013c8 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	f043 0201 	orr.w	r2, r3, #1
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001400:	2b01      	cmp	r3, #1
 8001402:	d101      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x1c>
 8001404:	2302      	movs	r3, #2
 8001406:	e113      	b.n	8001630 <HAL_ADC_ConfigChannel+0x244>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b09      	cmp	r3, #9
 8001416:	d925      	bls.n	8001464 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68d9      	ldr	r1, [r3, #12]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	b29b      	uxth	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	4613      	mov	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	3b1e      	subs	r3, #30
 800142e:	2207      	movs	r2, #7
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43da      	mvns	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	400a      	ands	r2, r1
 800143c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68d9      	ldr	r1, [r3, #12]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	4603      	mov	r3, r0
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4403      	add	r3, r0
 8001456:	3b1e      	subs	r3, #30
 8001458:	409a      	lsls	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	e022      	b.n	80014aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6919      	ldr	r1, [r3, #16]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	b29b      	uxth	r3, r3
 8001470:	461a      	mov	r2, r3
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	2207      	movs	r2, #7
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	400a      	ands	r2, r1
 8001486:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6919      	ldr	r1, [r3, #16]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	4603      	mov	r3, r0
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4403      	add	r3, r0
 80014a0:	409a      	lsls	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d824      	bhi.n	80014fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	3b05      	subs	r3, #5
 80014c4:	221f      	movs	r2, #31
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43da      	mvns	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	400a      	ands	r2, r1
 80014d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	4618      	mov	r0, r3
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	3b05      	subs	r3, #5
 80014ee:	fa00 f203 	lsl.w	r2, r0, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	635a      	str	r2, [r3, #52]	; 0x34
 80014fa:	e04c      	b.n	8001596 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b0c      	cmp	r3, #12
 8001502:	d824      	bhi.n	800154e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	3b23      	subs	r3, #35	; 0x23
 8001516:	221f      	movs	r2, #31
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43da      	mvns	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	400a      	ands	r2, r1
 8001524:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b29b      	uxth	r3, r3
 8001532:	4618      	mov	r0, r3
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	3b23      	subs	r3, #35	; 0x23
 8001540:	fa00 f203 	lsl.w	r2, r0, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	631a      	str	r2, [r3, #48]	; 0x30
 800154c:	e023      	b.n	8001596 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	3b41      	subs	r3, #65	; 0x41
 8001560:	221f      	movs	r2, #31
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43da      	mvns	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	400a      	ands	r2, r1
 800156e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	b29b      	uxth	r3, r3
 800157c:	4618      	mov	r0, r3
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	3b41      	subs	r3, #65	; 0x41
 800158a:	fa00 f203 	lsl.w	r2, r0, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001596:	4b29      	ldr	r3, [pc, #164]	; (800163c <HAL_ADC_ConfigChannel+0x250>)
 8001598:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a28      	ldr	r2, [pc, #160]	; (8001640 <HAL_ADC_ConfigChannel+0x254>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d10f      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x1d8>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b12      	cmp	r3, #18
 80015aa:	d10b      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a1d      	ldr	r2, [pc, #116]	; (8001640 <HAL_ADC_ConfigChannel+0x254>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d12b      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x23a>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <HAL_ADC_ConfigChannel+0x258>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d003      	beq.n	80015e0 <HAL_ADC_ConfigChannel+0x1f4>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b11      	cmp	r3, #17
 80015de:	d122      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a11      	ldr	r2, [pc, #68]	; (8001644 <HAL_ADC_ConfigChannel+0x258>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d111      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_ADC_ConfigChannel+0x25c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a11      	ldr	r2, [pc, #68]	; (800164c <HAL_ADC_ConfigChannel+0x260>)
 8001608:	fba2 2303 	umull	r2, r3, r2, r3
 800160c:	0c9a      	lsrs	r2, r3, #18
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001618:	e002      	b.n	8001620 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	3b01      	subs	r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f9      	bne.n	800161a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	40012300 	.word	0x40012300
 8001640:	40012000 	.word	0x40012000
 8001644:	10000012 	.word	0x10000012
 8001648:	20000020 	.word	0x20000020
 800164c:	431bde83 	.word	0x431bde83

08001650 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001658:	4b79      	ldr	r3, [pc, #484]	; (8001840 <ADC_Init+0x1f0>)
 800165a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	431a      	orrs	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001684:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6859      	ldr	r1, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	021a      	lsls	r2, r3, #8
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6859      	ldr	r1, [r3, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6899      	ldr	r1, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	4a58      	ldr	r2, [pc, #352]	; (8001844 <ADC_Init+0x1f4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d022      	beq.n	800172e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6899      	ldr	r1, [r3, #8]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001718:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6899      	ldr	r1, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	e00f      	b.n	800174e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800173c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800174c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0202 	bic.w	r2, r2, #2
 800175c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6899      	ldr	r1, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7e1b      	ldrb	r3, [r3, #24]
 8001768:	005a      	lsls	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d01b      	beq.n	80017b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800178a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800179a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6859      	ldr	r1, [r3, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	3b01      	subs	r3, #1
 80017a8:	035a      	lsls	r2, r3, #13
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	e007      	b.n	80017c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	3b01      	subs	r3, #1
 80017e0:	051a      	lsls	r2, r3, #20
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6899      	ldr	r1, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001806:	025a      	lsls	r2, r3, #9
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800181e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6899      	ldr	r1, [r3, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	029a      	lsls	r2, r3, #10
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	609a      	str	r2, [r3, #8]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	40012300 	.word	0x40012300
 8001844:	0f000001 	.word	0x0f000001

08001848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001864:	4013      	ands	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187a:	4a04      	ldr	r2, [pc, #16]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	60d3      	str	r3, [r2, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	f003 0307 	and.w	r3, r3, #7
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	db0b      	blt.n	80018d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	4907      	ldr	r1, [pc, #28]	; (80018e4 <__NVIC_EnableIRQ+0x38>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	2001      	movs	r0, #1
 80018ce:	fa00 f202 	lsl.w	r2, r0, r2
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000e100 	.word	0xe000e100

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	; (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	; 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b4:	d301      	bcc.n	80019ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00f      	b.n	80019da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <SysTick_Config+0x40>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c2:	210f      	movs	r1, #15
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019c8:	f7ff ff8e 	bl	80018e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <SysTick_Config+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <SysTick_Config+0x40>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff29 	bl	8001848 <__NVIC_SetPriorityGrouping>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a10:	f7ff ff3e 	bl	8001890 <__NVIC_GetPriorityGrouping>
 8001a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	6978      	ldr	r0, [r7, #20]
 8001a1c:	f7ff ff8e 	bl	800193c <NVIC_EncodePriority>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff5d 	bl	80018e8 <__NVIC_SetPriority>
}
 8001a2e:	bf00      	nop
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff31 	bl	80018ac <__NVIC_EnableIRQ>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ffa2 	bl	80019a4 <SysTick_Config>
 8001a60:	4603      	mov	r3, r0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	e165      	b.n	8001d54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a88:	2201      	movs	r2, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	f040 8154 	bne.w	8001d4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x4a>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b12      	cmp	r3, #18
 8001ab4:	d123      	bne.n	8001afe <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	08da      	lsrs	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3208      	adds	r2, #8
 8001abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	220f      	movs	r2, #15
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	08da      	lsrs	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3208      	adds	r2, #8
 8001af8:	69b9      	ldr	r1, [r7, #24]
 8001afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	2203      	movs	r2, #3
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0203 	and.w	r2, r3, #3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d00b      	beq.n	8001b52 <HAL_GPIO_Init+0xe6>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d007      	beq.n	8001b52 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b46:	2b11      	cmp	r3, #17
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b12      	cmp	r3, #18
 8001b50:	d130      	bne.n	8001bb4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b88:	2201      	movs	r2, #1
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 0201 	and.w	r2, r3, #1
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80ae 	beq.w	8001d4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b5c      	ldr	r3, [pc, #368]	; (8001d68 <HAL_GPIO_Init+0x2fc>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a5b      	ldr	r2, [pc, #364]	; (8001d68 <HAL_GPIO_Init+0x2fc>)
 8001bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b59      	ldr	r3, [pc, #356]	; (8001d68 <HAL_GPIO_Init+0x2fc>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c0e:	4a57      	ldr	r2, [pc, #348]	; (8001d6c <HAL_GPIO_Init+0x300>)
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	089b      	lsrs	r3, r3, #2
 8001c14:	3302      	adds	r3, #2
 8001c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	220f      	movs	r2, #15
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4e      	ldr	r2, [pc, #312]	; (8001d70 <HAL_GPIO_Init+0x304>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d025      	beq.n	8001c86 <HAL_GPIO_Init+0x21a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4d      	ldr	r2, [pc, #308]	; (8001d74 <HAL_GPIO_Init+0x308>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d01f      	beq.n	8001c82 <HAL_GPIO_Init+0x216>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4c      	ldr	r2, [pc, #304]	; (8001d78 <HAL_GPIO_Init+0x30c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d019      	beq.n	8001c7e <HAL_GPIO_Init+0x212>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4b      	ldr	r2, [pc, #300]	; (8001d7c <HAL_GPIO_Init+0x310>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <HAL_GPIO_Init+0x20e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4a      	ldr	r2, [pc, #296]	; (8001d80 <HAL_GPIO_Init+0x314>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00d      	beq.n	8001c76 <HAL_GPIO_Init+0x20a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a49      	ldr	r2, [pc, #292]	; (8001d84 <HAL_GPIO_Init+0x318>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d007      	beq.n	8001c72 <HAL_GPIO_Init+0x206>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a48      	ldr	r2, [pc, #288]	; (8001d88 <HAL_GPIO_Init+0x31c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <HAL_GPIO_Init+0x202>
 8001c6a:	2306      	movs	r3, #6
 8001c6c:	e00c      	b.n	8001c88 <HAL_GPIO_Init+0x21c>
 8001c6e:	2307      	movs	r3, #7
 8001c70:	e00a      	b.n	8001c88 <HAL_GPIO_Init+0x21c>
 8001c72:	2305      	movs	r3, #5
 8001c74:	e008      	b.n	8001c88 <HAL_GPIO_Init+0x21c>
 8001c76:	2304      	movs	r3, #4
 8001c78:	e006      	b.n	8001c88 <HAL_GPIO_Init+0x21c>
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e004      	b.n	8001c88 <HAL_GPIO_Init+0x21c>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e002      	b.n	8001c88 <HAL_GPIO_Init+0x21c>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_GPIO_Init+0x21c>
 8001c86:	2300      	movs	r3, #0
 8001c88:	69fa      	ldr	r2, [r7, #28]
 8001c8a:	f002 0203 	and.w	r2, r2, #3
 8001c8e:	0092      	lsls	r2, r2, #2
 8001c90:	4093      	lsls	r3, r2
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c98:	4934      	ldr	r1, [pc, #208]	; (8001d6c <HAL_GPIO_Init+0x300>)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca6:	4b39      	ldr	r3, [pc, #228]	; (8001d8c <HAL_GPIO_Init+0x320>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cca:	4a30      	ldr	r2, [pc, #192]	; (8001d8c <HAL_GPIO_Init+0x320>)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cd0:	4b2e      	ldr	r3, [pc, #184]	; (8001d8c <HAL_GPIO_Init+0x320>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cf4:	4a25      	ldr	r2, [pc, #148]	; (8001d8c <HAL_GPIO_Init+0x320>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cfa:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_GPIO_Init+0x320>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d1e:	4a1b      	ldr	r2, [pc, #108]	; (8001d8c <HAL_GPIO_Init+0x320>)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_GPIO_Init+0x320>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d48:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <HAL_GPIO_Init+0x320>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3301      	adds	r3, #1
 8001d52:	61fb      	str	r3, [r7, #28]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	2b0f      	cmp	r3, #15
 8001d58:	f67f ae96 	bls.w	8001a88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	3724      	adds	r7, #36	; 0x24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40013800 	.word	0x40013800
 8001d70:	40020000 	.word	0x40020000
 8001d74:	40020400 	.word	0x40020400
 8001d78:	40020800 	.word	0x40020800
 8001d7c:	40020c00 	.word	0x40020c00
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40021400 	.word	0x40021400
 8001d88:	40021800 	.word	0x40021800
 8001d8c:	40013c00 	.word	0x40013c00

08001d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da0:	787b      	ldrb	r3, [r7, #1]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dac:	e003      	b.n	8001db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dae:	887b      	ldrh	r3, [r7, #2]
 8001db0:	041a      	lsls	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	619a      	str	r2, [r3, #24]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dd0:	695a      	ldr	r2, [r3, #20]
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d006      	beq.n	8001de8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dda:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 fca6 	bl	8004734 <HAL_GPIO_EXTI_Callback>
  }
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40013c00 	.word	0x40013c00

08001df4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e10f      	b.n	8002026 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f002 f956 	bl	80040cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2224      	movs	r2, #36	; 0x24
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0201 	bic.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e38:	f000 f9f2 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 8001e3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4a7b      	ldr	r2, [pc, #492]	; (8002030 <HAL_I2C_Init+0x23c>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d807      	bhi.n	8001e58 <HAL_I2C_Init+0x64>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4a7a      	ldr	r2, [pc, #488]	; (8002034 <HAL_I2C_Init+0x240>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	bf94      	ite	ls
 8001e50:	2301      	movls	r3, #1
 8001e52:	2300      	movhi	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	e006      	b.n	8001e66 <HAL_I2C_Init+0x72>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4a77      	ldr	r2, [pc, #476]	; (8002038 <HAL_I2C_Init+0x244>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	bf94      	ite	ls
 8001e60:	2301      	movls	r3, #1
 8001e62:	2300      	movhi	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0db      	b.n	8002026 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4a72      	ldr	r2, [pc, #456]	; (800203c <HAL_I2C_Init+0x248>)
 8001e72:	fba2 2303 	umull	r2, r3, r2, r3
 8001e76:	0c9b      	lsrs	r3, r3, #18
 8001e78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	4a64      	ldr	r2, [pc, #400]	; (8002030 <HAL_I2C_Init+0x23c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d802      	bhi.n	8001ea8 <HAL_I2C_Init+0xb4>
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	e009      	b.n	8001ebc <HAL_I2C_Init+0xc8>
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001eae:	fb02 f303 	mul.w	r3, r2, r3
 8001eb2:	4a63      	ldr	r2, [pc, #396]	; (8002040 <HAL_I2C_Init+0x24c>)
 8001eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb8:	099b      	lsrs	r3, r3, #6
 8001eba:	3301      	adds	r3, #1
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ece:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4956      	ldr	r1, [pc, #344]	; (8002030 <HAL_I2C_Init+0x23c>)
 8001ed8:	428b      	cmp	r3, r1
 8001eda:	d80d      	bhi.n	8001ef8 <HAL_I2C_Init+0x104>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1e59      	subs	r1, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eea:	3301      	adds	r3, #1
 8001eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	bf38      	it	cc
 8001ef4:	2304      	movcc	r3, #4
 8001ef6:	e04f      	b.n	8001f98 <HAL_I2C_Init+0x1a4>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d111      	bne.n	8001f24 <HAL_I2C_Init+0x130>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1e58      	subs	r0, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6859      	ldr	r1, [r3, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	440b      	add	r3, r1
 8001f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f12:	3301      	adds	r3, #1
 8001f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bf0c      	ite	eq
 8001f1c:	2301      	moveq	r3, #1
 8001f1e:	2300      	movne	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	e012      	b.n	8001f4a <HAL_I2C_Init+0x156>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1e58      	subs	r0, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6859      	ldr	r1, [r3, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	0099      	lsls	r1, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf0c      	ite	eq
 8001f44:	2301      	moveq	r3, #1
 8001f46:	2300      	movne	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_I2C_Init+0x15e>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e022      	b.n	8001f98 <HAL_I2C_Init+0x1a4>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10e      	bne.n	8001f78 <HAL_I2C_Init+0x184>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1e58      	subs	r0, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6859      	ldr	r1, [r3, #4]
 8001f62:	460b      	mov	r3, r1
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	440b      	add	r3, r1
 8001f68:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f76:	e00f      	b.n	8001f98 <HAL_I2C_Init+0x1a4>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1e58      	subs	r0, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6859      	ldr	r1, [r3, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	0099      	lsls	r1, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f8e:	3301      	adds	r3, #1
 8001f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	6809      	ldr	r1, [r1, #0]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69da      	ldr	r2, [r3, #28]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6911      	ldr	r1, [r2, #16]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68d2      	ldr	r2, [r2, #12]
 8001fd2:	4311      	orrs	r1, r2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2220      	movs	r2, #32
 8002012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	000186a0 	.word	0x000186a0
 8002034:	001e847f 	.word	0x001e847f
 8002038:	003d08ff 	.word	0x003d08ff
 800203c:	431bde83 	.word	0x431bde83
 8002040:	10624dd3 	.word	0x10624dd3

08002044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0ca      	b.n	80021ee <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002058:	4b67      	ldr	r3, [pc, #412]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d90c      	bls.n	8002080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b64      	ldr	r3, [pc, #400]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800206e:	4b62      	ldr	r3, [pc, #392]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0b6      	b.n	80021ee <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d020      	beq.n	80020ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002098:	4b58      	ldr	r3, [pc, #352]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4a57      	ldr	r2, [pc, #348]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 800209e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b0:	4b52      	ldr	r3, [pc, #328]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	4a51      	ldr	r2, [pc, #324]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 80020b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020bc:	4b4f      	ldr	r3, [pc, #316]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	494c      	ldr	r1, [pc, #304]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d044      	beq.n	8002164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e2:	4b46      	ldr	r3, [pc, #280]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d119      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e07d      	b.n	80021ee <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d003      	beq.n	8002102 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002102:	4b3e      	ldr	r3, [pc, #248]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d109      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e06d      	b.n	80021ee <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002112:	4b3a      	ldr	r3, [pc, #232]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e065      	b.n	80021ee <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002122:	4b36      	ldr	r3, [pc, #216]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f023 0203 	bic.w	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4933      	ldr	r1, [pc, #204]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 8002130:	4313      	orrs	r3, r2
 8002132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002134:	f7fe ff5e 	bl	8000ff4 <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	e00a      	b.n	8002152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213c:	f7fe ff5a 	bl	8000ff4 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f241 3288 	movw	r2, #5000	; 0x1388
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e04d      	b.n	80021ee <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	4b2a      	ldr	r3, [pc, #168]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 020c 	and.w	r2, r3, #12
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	429a      	cmp	r2, r3
 8002162:	d1eb      	bne.n	800213c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002164:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 030f 	and.w	r3, r3, #15
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d20c      	bcs.n	800218c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e030      	b.n	80021ee <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002198:	4b18      	ldr	r3, [pc, #96]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4915      	ldr	r1, [pc, #84]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d009      	beq.n	80021ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021b6:	4b11      	ldr	r3, [pc, #68]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	490d      	ldr	r1, [pc, #52]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ca:	f000 f83d 	bl	8002248 <HAL_RCC_GetSysClockFreq>
 80021ce:	4601      	mov	r1, r0
 80021d0:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	4a09      	ldr	r2, [pc, #36]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	5cd3      	ldrb	r3, [r2, r3]
 80021de:	fa21 f303 	lsr.w	r3, r1, r3
 80021e2:	4a08      	ldr	r2, [pc, #32]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80021e6:	2000      	movs	r0, #0
 80021e8:	f7fe fec0 	bl	8000f6c <HAL_InitTick>

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023c00 	.word	0x40023c00
 80021fc:	40023800 	.word	0x40023800
 8002200:	0800786c 	.word	0x0800786c
 8002204:	20000020 	.word	0x20000020

08002208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_RCC_GetHCLKFreq+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000020 	.word	0x20000020

08002220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002224:	f7ff fff0 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 8002228:	4601      	mov	r1, r0
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	0a9b      	lsrs	r3, r3, #10
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	4a03      	ldr	r2, [pc, #12]	; (8002244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002236:	5cd3      	ldrb	r3, [r2, r3]
 8002238:	fa21 f303 	lsr.w	r3, r1, r3
}
 800223c:	4618      	mov	r0, r3
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40023800 	.word	0x40023800
 8002244:	0800787c 	.word	0x0800787c

08002248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002262:	4b9f      	ldr	r3, [pc, #636]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b0c      	cmp	r3, #12
 800226c:	f200 8130 	bhi.w	80024d0 <HAL_RCC_GetSysClockFreq+0x288>
 8002270:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <HAL_RCC_GetSysClockFreq+0x30>)
 8002272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002276:	bf00      	nop
 8002278:	080022ad 	.word	0x080022ad
 800227c:	080024d1 	.word	0x080024d1
 8002280:	080024d1 	.word	0x080024d1
 8002284:	080024d1 	.word	0x080024d1
 8002288:	080022b3 	.word	0x080022b3
 800228c:	080024d1 	.word	0x080024d1
 8002290:	080024d1 	.word	0x080024d1
 8002294:	080024d1 	.word	0x080024d1
 8002298:	080022b9 	.word	0x080022b9
 800229c:	080024d1 	.word	0x080024d1
 80022a0:	080024d1 	.word	0x080024d1
 80022a4:	080024d1 	.word	0x080024d1
 80022a8:	080023c7 	.word	0x080023c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022ac:	4b8d      	ldr	r3, [pc, #564]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x29c>)
 80022ae:	613b      	str	r3, [r7, #16]
       break;
 80022b0:	e111      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022b2:	4b8d      	ldr	r3, [pc, #564]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80022b4:	613b      	str	r3, [r7, #16]
      break;
 80022b6:	e10e      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022b8:	4b89      	ldr	r3, [pc, #548]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x298>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022c0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022c2:	4b87      	ldr	r3, [pc, #540]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x298>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d023      	beq.n	8002316 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ce:	4b84      	ldr	r3, [pc, #528]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x298>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	099b      	lsrs	r3, r3, #6
 80022d4:	f04f 0400 	mov.w	r4, #0
 80022d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	ea03 0501 	and.w	r5, r3, r1
 80022e4:	ea04 0602 	and.w	r6, r4, r2
 80022e8:	4a7f      	ldr	r2, [pc, #508]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80022ea:	fb02 f106 	mul.w	r1, r2, r6
 80022ee:	2200      	movs	r2, #0
 80022f0:	fb02 f205 	mul.w	r2, r2, r5
 80022f4:	440a      	add	r2, r1
 80022f6:	497c      	ldr	r1, [pc, #496]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80022f8:	fba5 0101 	umull	r0, r1, r5, r1
 80022fc:	1853      	adds	r3, r2, r1
 80022fe:	4619      	mov	r1, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f04f 0400 	mov.w	r4, #0
 8002306:	461a      	mov	r2, r3
 8002308:	4623      	mov	r3, r4
 800230a:	f7fe fc8d 	bl	8000c28 <__aeabi_uldivmod>
 800230e:	4603      	mov	r3, r0
 8002310:	460c      	mov	r4, r1
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	e049      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002316:	4b72      	ldr	r3, [pc, #456]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	099b      	lsrs	r3, r3, #6
 800231c:	f04f 0400 	mov.w	r4, #0
 8002320:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	ea03 0501 	and.w	r5, r3, r1
 800232c:	ea04 0602 	and.w	r6, r4, r2
 8002330:	4629      	mov	r1, r5
 8002332:	4632      	mov	r2, r6
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	f04f 0400 	mov.w	r4, #0
 800233c:	0154      	lsls	r4, r2, #5
 800233e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002342:	014b      	lsls	r3, r1, #5
 8002344:	4619      	mov	r1, r3
 8002346:	4622      	mov	r2, r4
 8002348:	1b49      	subs	r1, r1, r5
 800234a:	eb62 0206 	sbc.w	r2, r2, r6
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	f04f 0400 	mov.w	r4, #0
 8002356:	0194      	lsls	r4, r2, #6
 8002358:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800235c:	018b      	lsls	r3, r1, #6
 800235e:	1a5b      	subs	r3, r3, r1
 8002360:	eb64 0402 	sbc.w	r4, r4, r2
 8002364:	f04f 0100 	mov.w	r1, #0
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	00e2      	lsls	r2, r4, #3
 800236e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002372:	00d9      	lsls	r1, r3, #3
 8002374:	460b      	mov	r3, r1
 8002376:	4614      	mov	r4, r2
 8002378:	195b      	adds	r3, r3, r5
 800237a:	eb44 0406 	adc.w	r4, r4, r6
 800237e:	f04f 0100 	mov.w	r1, #0
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	02a2      	lsls	r2, r4, #10
 8002388:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800238c:	0299      	lsls	r1, r3, #10
 800238e:	460b      	mov	r3, r1
 8002390:	4614      	mov	r4, r2
 8002392:	4618      	mov	r0, r3
 8002394:	4621      	mov	r1, r4
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f04f 0400 	mov.w	r4, #0
 800239c:	461a      	mov	r2, r3
 800239e:	4623      	mov	r3, r4
 80023a0:	f7fe fc42 	bl	8000c28 <__aeabi_uldivmod>
 80023a4:	4603      	mov	r3, r0
 80023a6:	460c      	mov	r4, r1
 80023a8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023aa:	4b4d      	ldr	r3, [pc, #308]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x298>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	0c1b      	lsrs	r3, r3, #16
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	3301      	adds	r3, #1
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c2:	613b      	str	r3, [r7, #16]
      break;
 80023c4:	e087      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023c6:	4b46      	ldr	r3, [pc, #280]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x298>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023ce:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023d0:	4b43      	ldr	r3, [pc, #268]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x298>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d023      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023dc:	4b40      	ldr	r3, [pc, #256]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x298>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	099b      	lsrs	r3, r3, #6
 80023e2:	f04f 0400 	mov.w	r4, #0
 80023e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	ea03 0501 	and.w	r5, r3, r1
 80023f2:	ea04 0602 	and.w	r6, r4, r2
 80023f6:	4a3c      	ldr	r2, [pc, #240]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80023f8:	fb02 f106 	mul.w	r1, r2, r6
 80023fc:	2200      	movs	r2, #0
 80023fe:	fb02 f205 	mul.w	r2, r2, r5
 8002402:	440a      	add	r2, r1
 8002404:	4938      	ldr	r1, [pc, #224]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002406:	fba5 0101 	umull	r0, r1, r5, r1
 800240a:	1853      	adds	r3, r2, r1
 800240c:	4619      	mov	r1, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f04f 0400 	mov.w	r4, #0
 8002414:	461a      	mov	r2, r3
 8002416:	4623      	mov	r3, r4
 8002418:	f7fe fc06 	bl	8000c28 <__aeabi_uldivmod>
 800241c:	4603      	mov	r3, r0
 800241e:	460c      	mov	r4, r1
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	e049      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002424:	4b2e      	ldr	r3, [pc, #184]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	099b      	lsrs	r3, r3, #6
 800242a:	f04f 0400 	mov.w	r4, #0
 800242e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	ea03 0501 	and.w	r5, r3, r1
 800243a:	ea04 0602 	and.w	r6, r4, r2
 800243e:	4629      	mov	r1, r5
 8002440:	4632      	mov	r2, r6
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	f04f 0400 	mov.w	r4, #0
 800244a:	0154      	lsls	r4, r2, #5
 800244c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002450:	014b      	lsls	r3, r1, #5
 8002452:	4619      	mov	r1, r3
 8002454:	4622      	mov	r2, r4
 8002456:	1b49      	subs	r1, r1, r5
 8002458:	eb62 0206 	sbc.w	r2, r2, r6
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	f04f 0400 	mov.w	r4, #0
 8002464:	0194      	lsls	r4, r2, #6
 8002466:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800246a:	018b      	lsls	r3, r1, #6
 800246c:	1a5b      	subs	r3, r3, r1
 800246e:	eb64 0402 	sbc.w	r4, r4, r2
 8002472:	f04f 0100 	mov.w	r1, #0
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	00e2      	lsls	r2, r4, #3
 800247c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002480:	00d9      	lsls	r1, r3, #3
 8002482:	460b      	mov	r3, r1
 8002484:	4614      	mov	r4, r2
 8002486:	195b      	adds	r3, r3, r5
 8002488:	eb44 0406 	adc.w	r4, r4, r6
 800248c:	f04f 0100 	mov.w	r1, #0
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	02a2      	lsls	r2, r4, #10
 8002496:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800249a:	0299      	lsls	r1, r3, #10
 800249c:	460b      	mov	r3, r1
 800249e:	4614      	mov	r4, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	4621      	mov	r1, r4
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f04f 0400 	mov.w	r4, #0
 80024aa:	461a      	mov	r2, r3
 80024ac:	4623      	mov	r3, r4
 80024ae:	f7fe fbbb 	bl	8000c28 <__aeabi_uldivmod>
 80024b2:	4603      	mov	r3, r0
 80024b4:	460c      	mov	r4, r1
 80024b6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80024b8:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x298>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	0f1b      	lsrs	r3, r3, #28
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024cc:	613b      	str	r3, [r7, #16]
      break;
 80024ce:	e002      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x29c>)
 80024d2:	613b      	str	r3, [r7, #16]
      break;
 80024d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024d6:	693b      	ldr	r3, [r7, #16]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	371c      	adds	r7, #28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	00f42400 	.word	0x00f42400
 80024e8:	017d7840 	.word	0x017d7840

080024ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 8083 	beq.w	800260c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002506:	4b95      	ldr	r3, [pc, #596]	; (800275c <HAL_RCC_OscConfig+0x270>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b04      	cmp	r3, #4
 8002510:	d019      	beq.n	8002546 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002512:	4b92      	ldr	r3, [pc, #584]	; (800275c <HAL_RCC_OscConfig+0x270>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800251a:	2b08      	cmp	r3, #8
 800251c:	d106      	bne.n	800252c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800251e:	4b8f      	ldr	r3, [pc, #572]	; (800275c <HAL_RCC_OscConfig+0x270>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800252a:	d00c      	beq.n	8002546 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800252c:	4b8b      	ldr	r3, [pc, #556]	; (800275c <HAL_RCC_OscConfig+0x270>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002534:	2b0c      	cmp	r3, #12
 8002536:	d112      	bne.n	800255e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002538:	4b88      	ldr	r3, [pc, #544]	; (800275c <HAL_RCC_OscConfig+0x270>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002540:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002544:	d10b      	bne.n	800255e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002546:	4b85      	ldr	r3, [pc, #532]	; (800275c <HAL_RCC_OscConfig+0x270>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d05b      	beq.n	800260a <HAL_RCC_OscConfig+0x11e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d157      	bne.n	800260a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e216      	b.n	800298c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002566:	d106      	bne.n	8002576 <HAL_RCC_OscConfig+0x8a>
 8002568:	4b7c      	ldr	r3, [pc, #496]	; (800275c <HAL_RCC_OscConfig+0x270>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a7b      	ldr	r2, [pc, #492]	; (800275c <HAL_RCC_OscConfig+0x270>)
 800256e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	e01d      	b.n	80025b2 <HAL_RCC_OscConfig+0xc6>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800257e:	d10c      	bne.n	800259a <HAL_RCC_OscConfig+0xae>
 8002580:	4b76      	ldr	r3, [pc, #472]	; (800275c <HAL_RCC_OscConfig+0x270>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a75      	ldr	r2, [pc, #468]	; (800275c <HAL_RCC_OscConfig+0x270>)
 8002586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	4b73      	ldr	r3, [pc, #460]	; (800275c <HAL_RCC_OscConfig+0x270>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a72      	ldr	r2, [pc, #456]	; (800275c <HAL_RCC_OscConfig+0x270>)
 8002592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	e00b      	b.n	80025b2 <HAL_RCC_OscConfig+0xc6>
 800259a:	4b70      	ldr	r3, [pc, #448]	; (800275c <HAL_RCC_OscConfig+0x270>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a6f      	ldr	r2, [pc, #444]	; (800275c <HAL_RCC_OscConfig+0x270>)
 80025a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	4b6d      	ldr	r3, [pc, #436]	; (800275c <HAL_RCC_OscConfig+0x270>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a6c      	ldr	r2, [pc, #432]	; (800275c <HAL_RCC_OscConfig+0x270>)
 80025ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d013      	beq.n	80025e2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7fe fd1b 	bl	8000ff4 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c2:	f7fe fd17 	bl	8000ff4 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b64      	cmp	r3, #100	; 0x64
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e1db      	b.n	800298c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d4:	4b61      	ldr	r3, [pc, #388]	; (800275c <HAL_RCC_OscConfig+0x270>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0xd6>
 80025e0:	e014      	b.n	800260c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7fe fd07 	bl	8000ff4 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ea:	f7fe fd03 	bl	8000ff4 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b64      	cmp	r3, #100	; 0x64
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e1c7      	b.n	800298c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fc:	4b57      	ldr	r3, [pc, #348]	; (800275c <HAL_RCC_OscConfig+0x270>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f0      	bne.n	80025ea <HAL_RCC_OscConfig+0xfe>
 8002608:	e000      	b.n	800260c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d06f      	beq.n	80026f8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002618:	4b50      	ldr	r3, [pc, #320]	; (800275c <HAL_RCC_OscConfig+0x270>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 030c 	and.w	r3, r3, #12
 8002620:	2b00      	cmp	r3, #0
 8002622:	d017      	beq.n	8002654 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002624:	4b4d      	ldr	r3, [pc, #308]	; (800275c <HAL_RCC_OscConfig+0x270>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800262c:	2b08      	cmp	r3, #8
 800262e:	d105      	bne.n	800263c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002630:	4b4a      	ldr	r3, [pc, #296]	; (800275c <HAL_RCC_OscConfig+0x270>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00b      	beq.n	8002654 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800263c:	4b47      	ldr	r3, [pc, #284]	; (800275c <HAL_RCC_OscConfig+0x270>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002644:	2b0c      	cmp	r3, #12
 8002646:	d11c      	bne.n	8002682 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002648:	4b44      	ldr	r3, [pc, #272]	; (800275c <HAL_RCC_OscConfig+0x270>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d116      	bne.n	8002682 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002654:	4b41      	ldr	r3, [pc, #260]	; (800275c <HAL_RCC_OscConfig+0x270>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_RCC_OscConfig+0x180>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d001      	beq.n	800266c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e18f      	b.n	800298c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266c:	4b3b      	ldr	r3, [pc, #236]	; (800275c <HAL_RCC_OscConfig+0x270>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4938      	ldr	r1, [pc, #224]	; (800275c <HAL_RCC_OscConfig+0x270>)
 800267c:	4313      	orrs	r3, r2
 800267e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002680:	e03a      	b.n	80026f8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d020      	beq.n	80026cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800268a:	4b35      	ldr	r3, [pc, #212]	; (8002760 <HAL_RCC_OscConfig+0x274>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002690:	f7fe fcb0 	bl	8000ff4 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002698:	f7fe fcac 	bl	8000ff4 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e170      	b.n	800298c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026aa:	4b2c      	ldr	r3, [pc, #176]	; (800275c <HAL_RCC_OscConfig+0x270>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b6:	4b29      	ldr	r3, [pc, #164]	; (800275c <HAL_RCC_OscConfig+0x270>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4925      	ldr	r1, [pc, #148]	; (800275c <HAL_RCC_OscConfig+0x270>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]
 80026ca:	e015      	b.n	80026f8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026cc:	4b24      	ldr	r3, [pc, #144]	; (8002760 <HAL_RCC_OscConfig+0x274>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d2:	f7fe fc8f 	bl	8000ff4 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026da:	f7fe fc8b 	bl	8000ff4 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e14f      	b.n	800298c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <HAL_RCC_OscConfig+0x270>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f0      	bne.n	80026da <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	2b00      	cmp	r3, #0
 8002702:	d037      	beq.n	8002774 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d016      	beq.n	800273a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800270c:	4b15      	ldr	r3, [pc, #84]	; (8002764 <HAL_RCC_OscConfig+0x278>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002712:	f7fe fc6f 	bl	8000ff4 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800271a:	f7fe fc6b 	bl	8000ff4 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e12f      	b.n	800298c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_RCC_OscConfig+0x270>)
 800272e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x22e>
 8002738:	e01c      	b.n	8002774 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <HAL_RCC_OscConfig+0x278>)
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002740:	f7fe fc58 	bl	8000ff4 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002746:	e00f      	b.n	8002768 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002748:	f7fe fc54 	bl	8000ff4 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d908      	bls.n	8002768 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e118      	b.n	800298c <HAL_RCC_OscConfig+0x4a0>
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	42470000 	.word	0x42470000
 8002764:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002768:	4b8a      	ldr	r3, [pc, #552]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 800276a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1e9      	bne.n	8002748 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 8097 	beq.w	80028b0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002786:	4b83      	ldr	r3, [pc, #524]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10f      	bne.n	80027b2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	4b7f      	ldr	r3, [pc, #508]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a7e      	ldr	r2, [pc, #504]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 800279c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
 80027a2:	4b7c      	ldr	r3, [pc, #496]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027ae:	2301      	movs	r3, #1
 80027b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b2:	4b79      	ldr	r3, [pc, #484]	; (8002998 <HAL_RCC_OscConfig+0x4ac>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d118      	bne.n	80027f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027be:	4b76      	ldr	r3, [pc, #472]	; (8002998 <HAL_RCC_OscConfig+0x4ac>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a75      	ldr	r2, [pc, #468]	; (8002998 <HAL_RCC_OscConfig+0x4ac>)
 80027c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ca:	f7fe fc13 	bl	8000ff4 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d2:	f7fe fc0f 	bl	8000ff4 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e0d3      	b.n	800298c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e4:	4b6c      	ldr	r3, [pc, #432]	; (8002998 <HAL_RCC_OscConfig+0x4ac>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d106      	bne.n	8002806 <HAL_RCC_OscConfig+0x31a>
 80027f8:	4b66      	ldr	r3, [pc, #408]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	4a65      	ldr	r2, [pc, #404]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6713      	str	r3, [r2, #112]	; 0x70
 8002804:	e01c      	b.n	8002840 <HAL_RCC_OscConfig+0x354>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b05      	cmp	r3, #5
 800280c:	d10c      	bne.n	8002828 <HAL_RCC_OscConfig+0x33c>
 800280e:	4b61      	ldr	r3, [pc, #388]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002812:	4a60      	ldr	r2, [pc, #384]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 8002814:	f043 0304 	orr.w	r3, r3, #4
 8002818:	6713      	str	r3, [r2, #112]	; 0x70
 800281a:	4b5e      	ldr	r3, [pc, #376]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281e:	4a5d      	ldr	r2, [pc, #372]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6713      	str	r3, [r2, #112]	; 0x70
 8002826:	e00b      	b.n	8002840 <HAL_RCC_OscConfig+0x354>
 8002828:	4b5a      	ldr	r3, [pc, #360]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282c:	4a59      	ldr	r2, [pc, #356]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 800282e:	f023 0301 	bic.w	r3, r3, #1
 8002832:	6713      	str	r3, [r2, #112]	; 0x70
 8002834:	4b57      	ldr	r3, [pc, #348]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	4a56      	ldr	r2, [pc, #344]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 800283a:	f023 0304 	bic.w	r3, r3, #4
 800283e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d015      	beq.n	8002874 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7fe fbd4 	bl	8000ff4 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284e:	e00a      	b.n	8002866 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002850:	f7fe fbd0 	bl	8000ff4 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f241 3288 	movw	r2, #5000	; 0x1388
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e092      	b.n	800298c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002866:	4b4b      	ldr	r3, [pc, #300]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0ee      	beq.n	8002850 <HAL_RCC_OscConfig+0x364>
 8002872:	e014      	b.n	800289e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002874:	f7fe fbbe 	bl	8000ff4 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287a:	e00a      	b.n	8002892 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800287c:	f7fe fbba 	bl	8000ff4 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	f241 3288 	movw	r2, #5000	; 0x1388
 800288a:	4293      	cmp	r3, r2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e07c      	b.n	800298c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002892:	4b40      	ldr	r3, [pc, #256]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1ee      	bne.n	800287c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800289e:	7dfb      	ldrb	r3, [r7, #23]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d105      	bne.n	80028b0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a4:	4b3b      	ldr	r3, [pc, #236]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	4a3a      	ldr	r2, [pc, #232]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 80028aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d068      	beq.n	800298a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028b8:	4b36      	ldr	r3, [pc, #216]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d060      	beq.n	8002986 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d145      	bne.n	8002958 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028cc:	4b33      	ldr	r3, [pc, #204]	; (800299c <HAL_RCC_OscConfig+0x4b0>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7fe fb8f 	bl	8000ff4 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028da:	f7fe fb8b 	bl	8000ff4 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e04f      	b.n	800298c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ec:	4b29      	ldr	r3, [pc, #164]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f0      	bne.n	80028da <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69da      	ldr	r2, [r3, #28]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	019b      	lsls	r3, r3, #6
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290e:	085b      	lsrs	r3, r3, #1
 8002910:	3b01      	subs	r3, #1
 8002912:	041b      	lsls	r3, r3, #16
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	061b      	lsls	r3, r3, #24
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	071b      	lsls	r3, r3, #28
 8002924:	491b      	ldr	r1, [pc, #108]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 8002926:	4313      	orrs	r3, r2
 8002928:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800292a:	4b1c      	ldr	r3, [pc, #112]	; (800299c <HAL_RCC_OscConfig+0x4b0>)
 800292c:	2201      	movs	r2, #1
 800292e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7fe fb60 	bl	8000ff4 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002938:	f7fe fb5c 	bl	8000ff4 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e020      	b.n	800298c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294a:	4b12      	ldr	r3, [pc, #72]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0x44c>
 8002956:	e018      	b.n	800298a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002958:	4b10      	ldr	r3, [pc, #64]	; (800299c <HAL_RCC_OscConfig+0x4b0>)
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295e:	f7fe fb49 	bl	8000ff4 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002966:	f7fe fb45 	bl	8000ff4 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e009      	b.n	800298c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_RCC_OscConfig+0x4a8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f0      	bne.n	8002966 <HAL_RCC_OscConfig+0x47a>
 8002984:	e001      	b.n	800298a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40023800 	.word	0x40023800
 8002998:	40007000 	.word	0x40007000
 800299c:	42470060 	.word	0x42470060

080029a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e056      	b.n	8002a60 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d106      	bne.n	80029d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f002 fa83 	bl	8004ed8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2202      	movs	r2, #2
 80029d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029e8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	ea42 0103 	orr.w	r1, r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	0c1b      	lsrs	r3, r3, #16
 8002a30:	f003 0104 	and.w	r1, r3, #4
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	69da      	ldr	r2, [r3, #28]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	4613      	mov	r3, r2
 8002a76:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_SPI_Transmit+0x22>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e11e      	b.n	8002cc8 <HAL_SPI_Transmit+0x260>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a92:	f7fe faaf 	bl	8000ff4 <HAL_GetTick>
 8002a96:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d002      	beq.n	8002aae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002aac:	e103      	b.n	8002cb6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <HAL_SPI_Transmit+0x52>
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d102      	bne.n	8002ac0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002abe:	e0fa      	b.n	8002cb6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	88fa      	ldrh	r2, [r7, #6]
 8002ad8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	88fa      	ldrh	r2, [r7, #6]
 8002ade:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b06:	d107      	bne.n	8002b18 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b16:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b22:	2b40      	cmp	r3, #64	; 0x40
 8002b24:	d007      	beq.n	8002b36 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b3e:	d14b      	bne.n	8002bd8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <HAL_SPI_Transmit+0xe6>
 8002b48:	8afb      	ldrh	r3, [r7, #22]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d13e      	bne.n	8002bcc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	881a      	ldrh	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	1c9a      	adds	r2, r3, #2
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b72:	e02b      	b.n	8002bcc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d112      	bne.n	8002ba8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	881a      	ldrh	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	1c9a      	adds	r2, r3, #2
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ba6:	e011      	b.n	8002bcc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ba8:	f7fe fa24 	bl	8000ff4 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d803      	bhi.n	8002bc0 <HAL_SPI_Transmit+0x158>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bbe:	d102      	bne.n	8002bc6 <HAL_SPI_Transmit+0x15e>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d102      	bne.n	8002bcc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bca:	e074      	b.n	8002cb6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1ce      	bne.n	8002b74 <HAL_SPI_Transmit+0x10c>
 8002bd6:	e04c      	b.n	8002c72 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <HAL_SPI_Transmit+0x17e>
 8002be0:	8afb      	ldrh	r3, [r7, #22]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d140      	bne.n	8002c68 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	330c      	adds	r3, #12
 8002bf0:	7812      	ldrb	r2, [r2, #0]
 8002bf2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c0c:	e02c      	b.n	8002c68 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d113      	bne.n	8002c44 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	330c      	adds	r3, #12
 8002c26:	7812      	ldrb	r2, [r2, #0]
 8002c28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c42:	e011      	b.n	8002c68 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c44:	f7fe f9d6 	bl	8000ff4 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d803      	bhi.n	8002c5c <HAL_SPI_Transmit+0x1f4>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c5a:	d102      	bne.n	8002c62 <HAL_SPI_Transmit+0x1fa>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d102      	bne.n	8002c68 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c66:	e026      	b.n	8002cb6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1cd      	bne.n	8002c0e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	6839      	ldr	r1, [r7, #0]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f894 	bl	8002da4 <SPI_EndRxTxTransaction>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2220      	movs	r2, #32
 8002c86:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10a      	bne.n	8002ca6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c90:	2300      	movs	r3, #0
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	77fb      	strb	r3, [r7, #31]
 8002cb2:	e000      	b.n	8002cb6 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002cb4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3720      	adds	r7, #32
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ce0:	e04c      	b.n	8002d7c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ce8:	d048      	beq.n	8002d7c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002cea:	f7fe f983 	bl	8000ff4 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d902      	bls.n	8002d00 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d13d      	bne.n	8002d7c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d18:	d111      	bne.n	8002d3e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d22:	d004      	beq.n	8002d2e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2c:	d107      	bne.n	8002d3e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d3c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d46:	d10f      	bne.n	8002d68 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d66:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e00f      	b.n	8002d9c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4013      	ands	r3, r2
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d1a3      	bne.n	8002ce2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <SPI_EndRxTxTransaction+0x7c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a1b      	ldr	r2, [pc, #108]	; (8002e24 <SPI_EndRxTxTransaction+0x80>)
 8002db6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dba:	0d5b      	lsrs	r3, r3, #21
 8002dbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dc0:	fb02 f303 	mul.w	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dce:	d112      	bne.n	8002df6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2180      	movs	r1, #128	; 0x80
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f7ff ff78 	bl	8002cd0 <SPI_WaitFlagStateUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d016      	beq.n	8002e14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	f043 0220 	orr.w	r2, r3, #32
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e00f      	b.n	8002e16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0c:	2b80      	cmp	r3, #128	; 0x80
 8002e0e:	d0f2      	beq.n	8002df6 <SPI_EndRxTxTransaction+0x52>
 8002e10:	e000      	b.n	8002e14 <SPI_EndRxTxTransaction+0x70>
        break;
 8002e12:	bf00      	nop
  }

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000020 	.word	0x20000020
 8002e24:	165e9f81 	.word	0x165e9f81

08002e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e01d      	b.n	8002e76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f002 fa10 	bl	8005274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3304      	adds	r3, #4
 8002e64:	4619      	mov	r1, r3
 8002e66:	4610      	mov	r0, r2
 8002e68:	f000 fba6 	bl	80035b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b085      	sub	sp, #20
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0201 	orr.w	r2, r2, #1
 8002e94:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2b06      	cmp	r3, #6
 8002ea6:	d007      	beq.n	8002eb8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e01d      	b.n	8002f14 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d106      	bne.n	8002ef2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f815 	bl	8002f1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	4619      	mov	r1, r3
 8002f04:	4610      	mov	r0, r2
 8002f06:	f000 fb57 	bl	80035b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	6839      	ldr	r1, [r7, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fe22 	bl	8003b8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a15      	ldr	r2, [pc, #84]	; (8002fa4 <HAL_TIM_PWM_Start+0x74>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d004      	beq.n	8002f5c <HAL_TIM_PWM_Start+0x2c>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a14      	ldr	r2, [pc, #80]	; (8002fa8 <HAL_TIM_PWM_Start+0x78>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d101      	bne.n	8002f60 <HAL_TIM_PWM_Start+0x30>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <HAL_TIM_PWM_Start+0x32>
 8002f60:	2300      	movs	r3, #0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d007      	beq.n	8002f76 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b06      	cmp	r3, #6
 8002f86:	d007      	beq.n	8002f98 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40010000 	.word	0x40010000
 8002fa8:	40010400 	.word	0x40010400

08002fac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	6839      	ldr	r1, [r7, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fde4 	bl	8003b8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a22      	ldr	r2, [pc, #136]	; (8003054 <HAL_TIM_PWM_Stop+0xa8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <HAL_TIM_PWM_Stop+0x2c>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a21      	ldr	r2, [pc, #132]	; (8003058 <HAL_TIM_PWM_Stop+0xac>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d101      	bne.n	8002fdc <HAL_TIM_PWM_Stop+0x30>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <HAL_TIM_PWM_Stop+0x32>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d017      	beq.n	8003012 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6a1a      	ldr	r2, [r3, #32]
 8002fe8:	f241 1311 	movw	r3, #4369	; 0x1111
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10f      	bne.n	8003012 <HAL_TIM_PWM_Stop+0x66>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6a1a      	ldr	r2, [r3, #32]
 8002ff8:	f240 4344 	movw	r3, #1092	; 0x444
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d107      	bne.n	8003012 <HAL_TIM_PWM_Stop+0x66>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003010:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6a1a      	ldr	r2, [r3, #32]
 8003018:	f241 1311 	movw	r3, #4369	; 0x1111
 800301c:	4013      	ands	r3, r2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10f      	bne.n	8003042 <HAL_TIM_PWM_Stop+0x96>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6a1a      	ldr	r2, [r3, #32]
 8003028:	f240 4344 	movw	r3, #1092	; 0x444
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d107      	bne.n	8003042 <HAL_TIM_PWM_Stop+0x96>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0201 	bic.w	r2, r2, #1
 8003040:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40010000 	.word	0x40010000
 8003058:	40010400 	.word	0x40010400

0800305c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b02      	cmp	r3, #2
 8003070:	d122      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b02      	cmp	r3, #2
 800307e:	d11b      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0202 	mvn.w	r2, #2
 8003088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fa6b 	bl	800357a <HAL_TIM_IC_CaptureCallback>
 80030a4:	e005      	b.n	80030b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fa5d 	bl	8003566 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fa6e 	bl	800358e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d122      	bne.n	800310c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d11b      	bne.n	800310c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0204 	mvn.w	r2, #4
 80030dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2202      	movs	r2, #2
 80030e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fa41 	bl	800357a <HAL_TIM_IC_CaptureCallback>
 80030f8:	e005      	b.n	8003106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fa33 	bl	8003566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fa44 	bl	800358e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b08      	cmp	r3, #8
 8003118:	d122      	bne.n	8003160 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	2b08      	cmp	r3, #8
 8003126:	d11b      	bne.n	8003160 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0208 	mvn.w	r2, #8
 8003130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2204      	movs	r2, #4
 8003136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fa17 	bl	800357a <HAL_TIM_IC_CaptureCallback>
 800314c:	e005      	b.n	800315a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fa09 	bl	8003566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fa1a 	bl	800358e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b10      	cmp	r3, #16
 800316c:	d122      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b10      	cmp	r3, #16
 800317a:	d11b      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0210 	mvn.w	r2, #16
 8003184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2208      	movs	r2, #8
 800318a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f9ed 	bl	800357a <HAL_TIM_IC_CaptureCallback>
 80031a0:	e005      	b.n	80031ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f9df 	bl	8003566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f9f0 	bl	800358e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d10e      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d107      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0201 	mvn.w	r2, #1
 80031d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f001 fadc 	bl	8004798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ea:	2b80      	cmp	r3, #128	; 0x80
 80031ec:	d10e      	bne.n	800320c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f8:	2b80      	cmp	r3, #128	; 0x80
 80031fa:	d107      	bne.n	800320c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fd34 	bl	8003c74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003216:	2b40      	cmp	r3, #64	; 0x40
 8003218:	d10e      	bne.n	8003238 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003224:	2b40      	cmp	r3, #64	; 0x40
 8003226:	d107      	bne.n	8003238 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f9b5 	bl	80035a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b20      	cmp	r3, #32
 8003244:	d10e      	bne.n	8003264 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b20      	cmp	r3, #32
 8003252:	d107      	bne.n	8003264 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f06f 0220 	mvn.w	r2, #32
 800325c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fcfe 	bl	8003c60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003264:	bf00      	nop
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003282:	2302      	movs	r3, #2
 8003284:	e0b4      	b.n	80033f0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2202      	movs	r2, #2
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b0c      	cmp	r3, #12
 800329a:	f200 809f 	bhi.w	80033dc <HAL_TIM_PWM_ConfigChannel+0x170>
 800329e:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80032a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a4:	080032d9 	.word	0x080032d9
 80032a8:	080033dd 	.word	0x080033dd
 80032ac:	080033dd 	.word	0x080033dd
 80032b0:	080033dd 	.word	0x080033dd
 80032b4:	08003319 	.word	0x08003319
 80032b8:	080033dd 	.word	0x080033dd
 80032bc:	080033dd 	.word	0x080033dd
 80032c0:	080033dd 	.word	0x080033dd
 80032c4:	0800335b 	.word	0x0800335b
 80032c8:	080033dd 	.word	0x080033dd
 80032cc:	080033dd 	.word	0x080033dd
 80032d0:	080033dd 	.word	0x080033dd
 80032d4:	0800339b 	.word	0x0800339b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fa0a 	bl	80036f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0208 	orr.w	r2, r2, #8
 80032f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0204 	bic.w	r2, r2, #4
 8003302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6999      	ldr	r1, [r3, #24]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	619a      	str	r2, [r3, #24]
      break;
 8003316:	e062      	b.n	80033de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fa5a 	bl	80037d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6999      	ldr	r1, [r3, #24]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	021a      	lsls	r2, r3, #8
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	619a      	str	r2, [r3, #24]
      break;
 8003358:	e041      	b.n	80033de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	4618      	mov	r0, r3
 8003362:	f000 faaf 	bl	80038c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0208 	orr.w	r2, r2, #8
 8003374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0204 	bic.w	r2, r2, #4
 8003384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69d9      	ldr	r1, [r3, #28]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	61da      	str	r2, [r3, #28]
      break;
 8003398:	e021      	b.n	80033de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68b9      	ldr	r1, [r7, #8]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fb03 	bl	80039ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69d9      	ldr	r1, [r3, #28]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	021a      	lsls	r2, r3, #8
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	61da      	str	r2, [r3, #28]
      break;
 80033da:	e000      	b.n	80033de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80033dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_TIM_ConfigClockSource+0x18>
 800340c:	2302      	movs	r3, #2
 800340e:	e0a6      	b.n	800355e <HAL_TIM_ConfigClockSource+0x166>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800342e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003436:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b40      	cmp	r3, #64	; 0x40
 8003446:	d067      	beq.n	8003518 <HAL_TIM_ConfigClockSource+0x120>
 8003448:	2b40      	cmp	r3, #64	; 0x40
 800344a:	d80b      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x6c>
 800344c:	2b10      	cmp	r3, #16
 800344e:	d073      	beq.n	8003538 <HAL_TIM_ConfigClockSource+0x140>
 8003450:	2b10      	cmp	r3, #16
 8003452:	d802      	bhi.n	800345a <HAL_TIM_ConfigClockSource+0x62>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d06f      	beq.n	8003538 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003458:	e078      	b.n	800354c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800345a:	2b20      	cmp	r3, #32
 800345c:	d06c      	beq.n	8003538 <HAL_TIM_ConfigClockSource+0x140>
 800345e:	2b30      	cmp	r3, #48	; 0x30
 8003460:	d06a      	beq.n	8003538 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003462:	e073      	b.n	800354c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003464:	2b70      	cmp	r3, #112	; 0x70
 8003466:	d00d      	beq.n	8003484 <HAL_TIM_ConfigClockSource+0x8c>
 8003468:	2b70      	cmp	r3, #112	; 0x70
 800346a:	d804      	bhi.n	8003476 <HAL_TIM_ConfigClockSource+0x7e>
 800346c:	2b50      	cmp	r3, #80	; 0x50
 800346e:	d033      	beq.n	80034d8 <HAL_TIM_ConfigClockSource+0xe0>
 8003470:	2b60      	cmp	r3, #96	; 0x60
 8003472:	d041      	beq.n	80034f8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003474:	e06a      	b.n	800354c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800347a:	d066      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x152>
 800347c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003480:	d017      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003482:	e063      	b.n	800354c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	6899      	ldr	r1, [r3, #8]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f000 fb5a 	bl	8003b4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	609a      	str	r2, [r3, #8]
      break;
 80034b0:	e04c      	b.n	800354c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6899      	ldr	r1, [r3, #8]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f000 fb43 	bl	8003b4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034d4:	609a      	str	r2, [r3, #8]
      break;
 80034d6:	e039      	b.n	800354c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	6859      	ldr	r1, [r3, #4]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	461a      	mov	r2, r3
 80034e6:	f000 fab7 	bl	8003a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2150      	movs	r1, #80	; 0x50
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fb10 	bl	8003b16 <TIM_ITRx_SetConfig>
      break;
 80034f6:	e029      	b.n	800354c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	6859      	ldr	r1, [r3, #4]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	461a      	mov	r2, r3
 8003506:	f000 fad6 	bl	8003ab6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2160      	movs	r1, #96	; 0x60
 8003510:	4618      	mov	r0, r3
 8003512:	f000 fb00 	bl	8003b16 <TIM_ITRx_SetConfig>
      break;
 8003516:	e019      	b.n	800354c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	6859      	ldr	r1, [r3, #4]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	461a      	mov	r2, r3
 8003526:	f000 fa97 	bl	8003a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2140      	movs	r1, #64	; 0x40
 8003530:	4618      	mov	r0, r3
 8003532:	f000 faf0 	bl	8003b16 <TIM_ITRx_SetConfig>
      break;
 8003536:	e009      	b.n	800354c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4619      	mov	r1, r3
 8003542:	4610      	mov	r0, r2
 8003544:	f000 fae7 	bl	8003b16 <TIM_ITRx_SetConfig>
      break;
 8003548:	e000      	b.n	800354c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800354a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
	...

080035b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a40      	ldr	r2, [pc, #256]	; (80036cc <TIM_Base_SetConfig+0x114>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d013      	beq.n	80035f8 <TIM_Base_SetConfig+0x40>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d6:	d00f      	beq.n	80035f8 <TIM_Base_SetConfig+0x40>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a3d      	ldr	r2, [pc, #244]	; (80036d0 <TIM_Base_SetConfig+0x118>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00b      	beq.n	80035f8 <TIM_Base_SetConfig+0x40>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a3c      	ldr	r2, [pc, #240]	; (80036d4 <TIM_Base_SetConfig+0x11c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d007      	beq.n	80035f8 <TIM_Base_SetConfig+0x40>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a3b      	ldr	r2, [pc, #236]	; (80036d8 <TIM_Base_SetConfig+0x120>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d003      	beq.n	80035f8 <TIM_Base_SetConfig+0x40>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a3a      	ldr	r2, [pc, #232]	; (80036dc <TIM_Base_SetConfig+0x124>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d108      	bne.n	800360a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a2f      	ldr	r2, [pc, #188]	; (80036cc <TIM_Base_SetConfig+0x114>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d02b      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003618:	d027      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a2c      	ldr	r2, [pc, #176]	; (80036d0 <TIM_Base_SetConfig+0x118>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d023      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a2b      	ldr	r2, [pc, #172]	; (80036d4 <TIM_Base_SetConfig+0x11c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d01f      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a2a      	ldr	r2, [pc, #168]	; (80036d8 <TIM_Base_SetConfig+0x120>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d01b      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a29      	ldr	r2, [pc, #164]	; (80036dc <TIM_Base_SetConfig+0x124>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d017      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a28      	ldr	r2, [pc, #160]	; (80036e0 <TIM_Base_SetConfig+0x128>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d013      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a27      	ldr	r2, [pc, #156]	; (80036e4 <TIM_Base_SetConfig+0x12c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00f      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a26      	ldr	r2, [pc, #152]	; (80036e8 <TIM_Base_SetConfig+0x130>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00b      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a25      	ldr	r2, [pc, #148]	; (80036ec <TIM_Base_SetConfig+0x134>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d007      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a24      	ldr	r2, [pc, #144]	; (80036f0 <TIM_Base_SetConfig+0x138>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d003      	beq.n	800366a <TIM_Base_SetConfig+0xb2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a23      	ldr	r2, [pc, #140]	; (80036f4 <TIM_Base_SetConfig+0x13c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d108      	bne.n	800367c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4313      	orrs	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a0a      	ldr	r2, [pc, #40]	; (80036cc <TIM_Base_SetConfig+0x114>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d003      	beq.n	80036b0 <TIM_Base_SetConfig+0xf8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a0c      	ldr	r2, [pc, #48]	; (80036dc <TIM_Base_SetConfig+0x124>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d103      	bne.n	80036b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	615a      	str	r2, [r3, #20]
}
 80036be:	bf00      	nop
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40010000 	.word	0x40010000
 80036d0:	40000400 	.word	0x40000400
 80036d4:	40000800 	.word	0x40000800
 80036d8:	40000c00 	.word	0x40000c00
 80036dc:	40010400 	.word	0x40010400
 80036e0:	40014000 	.word	0x40014000
 80036e4:	40014400 	.word	0x40014400
 80036e8:	40014800 	.word	0x40014800
 80036ec:	40001800 	.word	0x40001800
 80036f0:	40001c00 	.word	0x40001c00
 80036f4:	40002000 	.word	0x40002000

080036f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	f023 0201 	bic.w	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0303 	bic.w	r3, r3, #3
 800372e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f023 0302 	bic.w	r3, r3, #2
 8003740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a20      	ldr	r2, [pc, #128]	; (80037d0 <TIM_OC1_SetConfig+0xd8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d003      	beq.n	800375c <TIM_OC1_SetConfig+0x64>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <TIM_OC1_SetConfig+0xdc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d10c      	bne.n	8003776 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f023 0308 	bic.w	r3, r3, #8
 8003762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f023 0304 	bic.w	r3, r3, #4
 8003774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a15      	ldr	r2, [pc, #84]	; (80037d0 <TIM_OC1_SetConfig+0xd8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d003      	beq.n	8003786 <TIM_OC1_SetConfig+0x8e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a14      	ldr	r2, [pc, #80]	; (80037d4 <TIM_OC1_SetConfig+0xdc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d111      	bne.n	80037aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800378c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	621a      	str	r2, [r3, #32]
}
 80037c4:	bf00      	nop
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	40010000 	.word	0x40010000
 80037d4:	40010400 	.word	0x40010400

080037d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	f023 0210 	bic.w	r2, r3, #16
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	021b      	lsls	r3, r3, #8
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f023 0320 	bic.w	r3, r3, #32
 8003822:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4313      	orrs	r3, r2
 800382e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a22      	ldr	r2, [pc, #136]	; (80038bc <TIM_OC2_SetConfig+0xe4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d003      	beq.n	8003840 <TIM_OC2_SetConfig+0x68>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a21      	ldr	r2, [pc, #132]	; (80038c0 <TIM_OC2_SetConfig+0xe8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d10d      	bne.n	800385c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800385a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a17      	ldr	r2, [pc, #92]	; (80038bc <TIM_OC2_SetConfig+0xe4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d003      	beq.n	800386c <TIM_OC2_SetConfig+0x94>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a16      	ldr	r2, [pc, #88]	; (80038c0 <TIM_OC2_SetConfig+0xe8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d113      	bne.n	8003894 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003872:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800387a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	621a      	str	r2, [r3, #32]
}
 80038ae:	bf00      	nop
 80038b0:	371c      	adds	r7, #28
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40010000 	.word	0x40010000
 80038c0:	40010400 	.word	0x40010400

080038c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0303 	bic.w	r3, r3, #3
 80038fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800390c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	021b      	lsls	r3, r3, #8
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a21      	ldr	r2, [pc, #132]	; (80039a4 <TIM_OC3_SetConfig+0xe0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d003      	beq.n	800392a <TIM_OC3_SetConfig+0x66>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a20      	ldr	r2, [pc, #128]	; (80039a8 <TIM_OC3_SetConfig+0xe4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d10d      	bne.n	8003946 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003930:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	021b      	lsls	r3, r3, #8
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a16      	ldr	r2, [pc, #88]	; (80039a4 <TIM_OC3_SetConfig+0xe0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d003      	beq.n	8003956 <TIM_OC3_SetConfig+0x92>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a15      	ldr	r2, [pc, #84]	; (80039a8 <TIM_OC3_SetConfig+0xe4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d113      	bne.n	800397e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800395c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	621a      	str	r2, [r3, #32]
}
 8003998:	bf00      	nop
 800399a:	371c      	adds	r7, #28
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	40010000 	.word	0x40010000
 80039a8:	40010400 	.word	0x40010400

080039ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	031b      	lsls	r3, r3, #12
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a12      	ldr	r2, [pc, #72]	; (8003a50 <TIM_OC4_SetConfig+0xa4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d003      	beq.n	8003a14 <TIM_OC4_SetConfig+0x68>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a11      	ldr	r2, [pc, #68]	; (8003a54 <TIM_OC4_SetConfig+0xa8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d109      	bne.n	8003a28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	019b      	lsls	r3, r3, #6
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	621a      	str	r2, [r3, #32]
}
 8003a42:	bf00      	nop
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40010000 	.word	0x40010000
 8003a54:	40010400 	.word	0x40010400

08003a58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f023 0201 	bic.w	r2, r3, #1
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f023 030a 	bic.w	r3, r3, #10
 8003a94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	621a      	str	r2, [r3, #32]
}
 8003aaa:	bf00      	nop
 8003aac:	371c      	adds	r7, #28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b087      	sub	sp, #28
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	f023 0210 	bic.w	r2, r3, #16
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ae0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	031b      	lsls	r3, r3, #12
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003af2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	621a      	str	r2, [r3, #32]
}
 8003b0a:	bf00      	nop
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b085      	sub	sp, #20
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f043 0307 	orr.w	r3, r3, #7
 8003b38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	609a      	str	r2, [r3, #8]
}
 8003b40:	bf00      	nop
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	021a      	lsls	r2, r3, #8
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	609a      	str	r2, [r3, #8]
}
 8003b80:	bf00      	nop
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 031f 	and.w	r3, r3, #31
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a1a      	ldr	r2, [r3, #32]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	43db      	mvns	r3, r3
 8003bae:	401a      	ands	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a1a      	ldr	r2, [r3, #32]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f003 031f 	and.w	r3, r3, #31
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	621a      	str	r2, [r3, #32]
}
 8003bca:	bf00      	nop
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b085      	sub	sp, #20
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e032      	b.n	8003c54 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c26:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8003c8e:	463b      	mov	r3, r7
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	605a      	str	r2, [r3, #4]
 8003c96:	609a      	str	r2, [r3, #8]
 8003c98:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8003c9a:	4b21      	ldr	r3, [pc, #132]	; (8003d20 <MX_ADC1_Init+0x98>)
 8003c9c:	4a21      	ldr	r2, [pc, #132]	; (8003d24 <MX_ADC1_Init+0x9c>)
 8003c9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003ca0:	4b1f      	ldr	r3, [pc, #124]	; (8003d20 <MX_ADC1_Init+0x98>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003ca6:	4b1e      	ldr	r3, [pc, #120]	; (8003d20 <MX_ADC1_Init+0x98>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003cac:	4b1c      	ldr	r3, [pc, #112]	; (8003d20 <MX_ADC1_Init+0x98>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003cb2:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <MX_ADC1_Init+0x98>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003cb8:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <MX_ADC1_Init+0x98>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003cc0:	4b17      	ldr	r3, [pc, #92]	; (8003d20 <MX_ADC1_Init+0x98>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003cc6:	4b16      	ldr	r3, [pc, #88]	; (8003d20 <MX_ADC1_Init+0x98>)
 8003cc8:	4a17      	ldr	r2, [pc, #92]	; (8003d28 <MX_ADC1_Init+0xa0>)
 8003cca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ccc:	4b14      	ldr	r3, [pc, #80]	; (8003d20 <MX_ADC1_Init+0x98>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003cd2:	4b13      	ldr	r3, [pc, #76]	; (8003d20 <MX_ADC1_Init+0x98>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003cd8:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <MX_ADC1_Init+0x98>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <MX_ADC1_Init+0x98>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ce6:	480e      	ldr	r0, [pc, #56]	; (8003d20 <MX_ADC1_Init+0x98>)
 8003ce8:	f7fd f9b2 	bl	8001050 <HAL_ADC_Init>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003cf2:	f001 f8a9 	bl	8004e48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d02:	463b      	mov	r3, r7
 8003d04:	4619      	mov	r1, r3
 8003d06:	4806      	ldr	r0, [pc, #24]	; (8003d20 <MX_ADC1_Init+0x98>)
 8003d08:	f7fd fb70 	bl	80013ec <HAL_ADC_ConfigChannel>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003d12:	f001 f899 	bl	8004e48 <Error_Handler>
  }

}
 8003d16:	bf00      	nop
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000474 	.word	0x20000474
 8003d24:	40012000 	.word	0x40012000
 8003d28:	0f000001 	.word	0x0f000001

08003d2c <MX_ADC2_Init>:

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8003d32:	463b      	mov	r3, r7
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003d3e:	4b21      	ldr	r3, [pc, #132]	; (8003dc4 <MX_ADC2_Init+0x98>)
 8003d40:	4a21      	ldr	r2, [pc, #132]	; (8003dc8 <MX_ADC2_Init+0x9c>)
 8003d42:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003d44:	4b1f      	ldr	r3, [pc, #124]	; (8003dc4 <MX_ADC2_Init+0x98>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003d4a:	4b1e      	ldr	r3, [pc, #120]	; (8003dc4 <MX_ADC2_Init+0x98>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8003d50:	4b1c      	ldr	r3, [pc, #112]	; (8003dc4 <MX_ADC2_Init+0x98>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003d56:	4b1b      	ldr	r3, [pc, #108]	; (8003dc4 <MX_ADC2_Init+0x98>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003d5c:	4b19      	ldr	r3, [pc, #100]	; (8003dc4 <MX_ADC2_Init+0x98>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003d64:	4b17      	ldr	r3, [pc, #92]	; (8003dc4 <MX_ADC2_Init+0x98>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003d6a:	4b16      	ldr	r3, [pc, #88]	; (8003dc4 <MX_ADC2_Init+0x98>)
 8003d6c:	4a17      	ldr	r2, [pc, #92]	; (8003dcc <MX_ADC2_Init+0xa0>)
 8003d6e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d70:	4b14      	ldr	r3, [pc, #80]	; (8003dc4 <MX_ADC2_Init+0x98>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8003d76:	4b13      	ldr	r3, [pc, #76]	; (8003dc4 <MX_ADC2_Init+0x98>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <MX_ADC2_Init+0x98>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d84:	4b0f      	ldr	r3, [pc, #60]	; (8003dc4 <MX_ADC2_Init+0x98>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003d8a:	480e      	ldr	r0, [pc, #56]	; (8003dc4 <MX_ADC2_Init+0x98>)
 8003d8c:	f7fd f960 	bl	8001050 <HAL_ADC_Init>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8003d96:	f001 f857 	bl	8004e48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003da6:	463b      	mov	r3, r7
 8003da8:	4619      	mov	r1, r3
 8003daa:	4806      	ldr	r0, [pc, #24]	; (8003dc4 <MX_ADC2_Init+0x98>)
 8003dac:	f7fd fb1e 	bl	80013ec <HAL_ADC_ConfigChannel>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8003db6:	f001 f847 	bl	8004e48 <Error_Handler>
  }

}
 8003dba:	bf00      	nop
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	2000042c 	.word	0x2000042c
 8003dc8:	40012100 	.word	0x40012100
 8003dcc:	0f000001 	.word	0x0f000001

08003dd0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08c      	sub	sp, #48	; 0x30
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd8:	f107 031c 	add.w	r3, r7, #28
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	605a      	str	r2, [r3, #4]
 8003de2:	609a      	str	r2, [r3, #8]
 8003de4:	60da      	str	r2, [r3, #12]
 8003de6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a2e      	ldr	r2, [pc, #184]	; (8003ea8 <HAL_ADC_MspInit+0xd8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d128      	bne.n	8003e44 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	4b2d      	ldr	r3, [pc, #180]	; (8003eac <HAL_ADC_MspInit+0xdc>)
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	4a2c      	ldr	r2, [pc, #176]	; (8003eac <HAL_ADC_MspInit+0xdc>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e00:	6453      	str	r3, [r2, #68]	; 0x44
 8003e02:	4b2a      	ldr	r3, [pc, #168]	; (8003eac <HAL_ADC_MspInit+0xdc>)
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0a:	61bb      	str	r3, [r7, #24]
 8003e0c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	4b26      	ldr	r3, [pc, #152]	; (8003eac <HAL_ADC_MspInit+0xdc>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	4a25      	ldr	r2, [pc, #148]	; (8003eac <HAL_ADC_MspInit+0xdc>)
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1e:	4b23      	ldr	r3, [pc, #140]	; (8003eac <HAL_ADC_MspInit+0xdc>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e36:	f107 031c 	add.w	r3, r7, #28
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	481c      	ldr	r0, [pc, #112]	; (8003eb0 <HAL_ADC_MspInit+0xe0>)
 8003e3e:	f7fd fe15 	bl	8001a6c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003e42:	e02c      	b.n	8003e9e <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a1a      	ldr	r2, [pc, #104]	; (8003eb4 <HAL_ADC_MspInit+0xe4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d127      	bne.n	8003e9e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	4b16      	ldr	r3, [pc, #88]	; (8003eac <HAL_ADC_MspInit+0xdc>)
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	4a15      	ldr	r2, [pc, #84]	; (8003eac <HAL_ADC_MspInit+0xdc>)
 8003e58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e5e:	4b13      	ldr	r3, [pc, #76]	; (8003eac <HAL_ADC_MspInit+0xdc>)
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <HAL_ADC_MspInit+0xdc>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	4a0e      	ldr	r2, [pc, #56]	; (8003eac <HAL_ADC_MspInit+0xdc>)
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	6313      	str	r3, [r2, #48]	; 0x30
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <HAL_ADC_MspInit+0xdc>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003e86:	2303      	movs	r3, #3
 8003e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e92:	f107 031c 	add.w	r3, r7, #28
 8003e96:	4619      	mov	r1, r3
 8003e98:	4805      	ldr	r0, [pc, #20]	; (8003eb0 <HAL_ADC_MspInit+0xe0>)
 8003e9a:	f7fd fde7 	bl	8001a6c <HAL_GPIO_Init>
}
 8003e9e:	bf00      	nop
 8003ea0:	3730      	adds	r7, #48	; 0x30
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40012000 	.word	0x40012000
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	40020000 	.word	0x40020000
 8003eb4:	40012100 	.word	0x40012100

08003eb8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b088      	sub	sp, #32
 8003ebc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ebe:	f107 030c 	add.w	r3, r7, #12
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	605a      	str	r2, [r3, #4]
 8003ec8:	609a      	str	r2, [r3, #8]
 8003eca:	60da      	str	r2, [r3, #12]
 8003ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	4b62      	ldr	r3, [pc, #392]	; (800405c <MX_GPIO_Init+0x1a4>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	4a61      	ldr	r2, [pc, #388]	; (800405c <MX_GPIO_Init+0x1a4>)
 8003ed8:	f043 0304 	orr.w	r3, r3, #4
 8003edc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ede:	4b5f      	ldr	r3, [pc, #380]	; (800405c <MX_GPIO_Init+0x1a4>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	607b      	str	r3, [r7, #4]
 8003eee:	4b5b      	ldr	r3, [pc, #364]	; (800405c <MX_GPIO_Init+0x1a4>)
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	4a5a      	ldr	r2, [pc, #360]	; (800405c <MX_GPIO_Init+0x1a4>)
 8003ef4:	f043 0301 	orr.w	r3, r3, #1
 8003ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8003efa:	4b58      	ldr	r3, [pc, #352]	; (800405c <MX_GPIO_Init+0x1a4>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	607b      	str	r3, [r7, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f06:	2300      	movs	r3, #0
 8003f08:	603b      	str	r3, [r7, #0]
 8003f0a:	4b54      	ldr	r3, [pc, #336]	; (800405c <MX_GPIO_Init+0x1a4>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	4a53      	ldr	r2, [pc, #332]	; (800405c <MX_GPIO_Init+0x1a4>)
 8003f10:	f043 0302 	orr.w	r3, r3, #2
 8003f14:	6313      	str	r3, [r2, #48]	; 0x30
 8003f16:	4b51      	ldr	r3, [pc, #324]	; (800405c <MX_GPIO_Init+0x1a4>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_Pin|LCD_RESET_Pin|LCD_A0_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8003f22:	2200      	movs	r2, #0
 8003f24:	f240 3141 	movw	r1, #833	; 0x341
 8003f28:	484d      	ldr	r0, [pc, #308]	; (8004060 <MX_GPIO_Init+0x1a8>)
 8003f2a:	f7fd ff31 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, GPIO_PIN_RESET);
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2140      	movs	r1, #64	; 0x40
 8003f32:	484c      	ldr	r0, [pc, #304]	; (8004064 <MX_GPIO_Init+0x1ac>)
 8003f34:	f7fd ff2c 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8003f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8003f46:	f107 030c 	add.w	r3, r7, #12
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4846      	ldr	r0, [pc, #280]	; (8004068 <MX_GPIO_Init+0x1b0>)
 8003f4e:	f7fd fd8d 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_RESET_Pin|LCD_A0_Pin;
 8003f52:	f240 1341 	movw	r3, #321	; 0x141
 8003f56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f64:	f107 030c 	add.w	r3, r7, #12
 8003f68:	4619      	mov	r1, r3
 8003f6a:	483d      	ldr	r0, [pc, #244]	; (8004060 <MX_GPIO_Init+0x1a8>)
 8003f6c:	f7fd fd7e 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8003f70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f76:	2301      	movs	r3, #1
 8003f78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f7e:	2302      	movs	r3, #2
 8003f80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8003f82:	f107 030c 	add.w	r3, r7, #12
 8003f86:	4619      	mov	r1, r3
 8003f88:	4835      	ldr	r0, [pc, #212]	; (8004060 <MX_GPIO_Init+0x1a8>)
 8003f8a:	f7fd fd6f 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_N_Pin;
 8003f8e:	2340      	movs	r3, #64	; 0x40
 8003f90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f92:	2301      	movs	r3, #1
 8003f94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_N_GPIO_Port, &GPIO_InitStruct);
 8003f9e:	f107 030c 	add.w	r3, r7, #12
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	482f      	ldr	r0, [pc, #188]	; (8004064 <MX_GPIO_Init+0x1ac>)
 8003fa6:	f7fd fd61 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 red */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003faa:	2310      	movs	r3, #16
 8003fac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fb6:	f107 030c 	add.w	r3, r7, #12
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4829      	ldr	r0, [pc, #164]	; (8004064 <MX_GPIO_Init+0x1ac>)
 8003fbe:	f7fd fd55 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 green*/
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003fc2:	2380      	movs	r3, #128	; 0x80
 8003fc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fce:	f107 030c 	add.w	r3, r7, #12
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4824      	ldr	r0, [pc, #144]	; (8004068 <MX_GPIO_Init+0x1b0>)
 8003fd6:	f7fd fd49 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 blue */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003fda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe8:	f107 030c 	add.w	r3, r7, #12
 8003fec:	4619      	mov	r1, r3
 8003fee:	481c      	ldr	r0, [pc, #112]	; (8004060 <MX_GPIO_Init+0x1a8>)
 8003ff0:	f7fd fd3c 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ff8:	4b1c      	ldr	r3, [pc, #112]	; (800406c <MX_GPIO_Init+0x1b4>)
 8003ffa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004000:	f107 030c 	add.w	r3, r7, #12
 8004004:	4619      	mov	r1, r3
 8004006:	4816      	ldr	r0, [pc, #88]	; (8004060 <MX_GPIO_Init+0x1a8>)
 8004008:	f7fd fd30 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 800400c:	2321      	movs	r3, #33	; 0x21
 800400e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004010:	4b16      	ldr	r3, [pc, #88]	; (800406c <MX_GPIO_Init+0x1b4>)
 8004012:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004018:	f107 030c 	add.w	r3, r7, #12
 800401c:	4619      	mov	r1, r3
 800401e:	4811      	ldr	r0, [pc, #68]	; (8004064 <MX_GPIO_Init+0x1ac>)
 8004020:	f7fd fd24 	bl	8001a6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004024:	2200      	movs	r2, #0
 8004026:	2100      	movs	r1, #0
 8004028:	2006      	movs	r0, #6
 800402a:	f7fd fce8 	bl	80019fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800402e:	2006      	movs	r0, #6
 8004030:	f7fd fd01 	bl	8001a36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004034:	2200      	movs	r2, #0
 8004036:	2100      	movs	r1, #0
 8004038:	200a      	movs	r0, #10
 800403a:	f7fd fce0 	bl	80019fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800403e:	200a      	movs	r0, #10
 8004040:	f7fd fcf9 	bl	8001a36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004044:	2200      	movs	r2, #0
 8004046:	2100      	movs	r1, #0
 8004048:	2017      	movs	r0, #23
 800404a:	f7fd fcd8 	bl	80019fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800404e:	2017      	movs	r0, #23
 8004050:	f7fd fcf1 	bl	8001a36 <HAL_NVIC_EnableIRQ>

}
 8004054:	bf00      	nop
 8004056:	3720      	adds	r7, #32
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40023800 	.word	0x40023800
 8004060:	40020000 	.word	0x40020000
 8004064:	40020400 	.word	0x40020400
 8004068:	40020800 	.word	0x40020800
 800406c:	10110000 	.word	0x10110000

08004070 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004074:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <MX_I2C1_Init+0x50>)
 8004076:	4a13      	ldr	r2, [pc, #76]	; (80040c4 <MX_I2C1_Init+0x54>)
 8004078:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800407a:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <MX_I2C1_Init+0x50>)
 800407c:	4a12      	ldr	r2, [pc, #72]	; (80040c8 <MX_I2C1_Init+0x58>)
 800407e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004080:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <MX_I2C1_Init+0x50>)
 8004082:	2200      	movs	r2, #0
 8004084:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004086:	4b0e      	ldr	r3, [pc, #56]	; (80040c0 <MX_I2C1_Init+0x50>)
 8004088:	2200      	movs	r2, #0
 800408a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800408c:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <MX_I2C1_Init+0x50>)
 800408e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004092:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004094:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <MX_I2C1_Init+0x50>)
 8004096:	2200      	movs	r2, #0
 8004098:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800409a:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <MX_I2C1_Init+0x50>)
 800409c:	2200      	movs	r2, #0
 800409e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040a0:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <MX_I2C1_Init+0x50>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040a6:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <MX_I2C1_Init+0x50>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80040ac:	4804      	ldr	r0, [pc, #16]	; (80040c0 <MX_I2C1_Init+0x50>)
 80040ae:	f7fd fea1 	bl	8001df4 <HAL_I2C_Init>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80040b8:	f000 fec6 	bl	8004e48 <Error_Handler>
  }

}
 80040bc:	bf00      	nop
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	200004bc 	.word	0x200004bc
 80040c4:	40005400 	.word	0x40005400
 80040c8:	00061a80 	.word	0x00061a80

080040cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08a      	sub	sp, #40	; 0x28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d4:	f107 0314 	add.w	r3, r7, #20
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	609a      	str	r2, [r3, #8]
 80040e0:	60da      	str	r2, [r3, #12]
 80040e2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a19      	ldr	r2, [pc, #100]	; (8004150 <HAL_I2C_MspInit+0x84>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d12c      	bne.n	8004148 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ee:	2300      	movs	r3, #0
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	4b18      	ldr	r3, [pc, #96]	; (8004154 <HAL_I2C_MspInit+0x88>)
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	4a17      	ldr	r2, [pc, #92]	; (8004154 <HAL_I2C_MspInit+0x88>)
 80040f8:	f043 0302 	orr.w	r3, r3, #2
 80040fc:	6313      	str	r3, [r2, #48]	; 0x30
 80040fe:	4b15      	ldr	r3, [pc, #84]	; (8004154 <HAL_I2C_MspInit+0x88>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	613b      	str	r3, [r7, #16]
 8004108:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800410a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800410e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004110:	2312      	movs	r3, #18
 8004112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004114:	2301      	movs	r3, #1
 8004116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004118:	2303      	movs	r3, #3
 800411a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800411c:	2304      	movs	r3, #4
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004120:	f107 0314 	add.w	r3, r7, #20
 8004124:	4619      	mov	r1, r3
 8004126:	480c      	ldr	r0, [pc, #48]	; (8004158 <HAL_I2C_MspInit+0x8c>)
 8004128:	f7fd fca0 	bl	8001a6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	4b08      	ldr	r3, [pc, #32]	; (8004154 <HAL_I2C_MspInit+0x88>)
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	4a07      	ldr	r2, [pc, #28]	; (8004154 <HAL_I2C_MspInit+0x88>)
 8004136:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800413a:	6413      	str	r3, [r2, #64]	; 0x40
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <HAL_I2C_MspInit+0x88>)
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004148:	bf00      	nop
 800414a:	3728      	adds	r7, #40	; 0x28
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40005400 	.word	0x40005400
 8004154:	40023800 	.word	0x40023800
 8004158:	40020400 	.word	0x40020400

0800415c <chipSelect>:
static ColumnBuffer displayBuffer[NUMBER_OF_ROWS];



static void chipSelect(bool isSelected)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, (GPIO_PinState) !isSelected); /* low active */
 8004166:	79fb      	ldrb	r3, [r7, #7]
 8004168:	f083 0301 	eor.w	r3, r3, #1
 800416c:	b2db      	uxtb	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	2140      	movs	r1, #64	; 0x40
 8004172:	4803      	ldr	r0, [pc, #12]	; (8004180 <chipSelect+0x24>)
 8004174:	f7fd fe0c 	bl	8001d90 <HAL_GPIO_WritePin>
}
 8004178:	bf00      	nop
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40020400 	.word	0x40020400

08004184 <registerSelect>:

static void registerSelect(lcdRegister selectedRegister)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	4603      	mov	r3, r0
 800418c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, (GPIO_PinState) selectedRegister);
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	461a      	mov	r2, r3
 8004192:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004196:	4803      	ldr	r0, [pc, #12]	; (80041a4 <registerSelect+0x20>)
 8004198:	f7fd fdfa 	bl	8001d90 <HAL_GPIO_WritePin>
}
 800419c:	bf00      	nop
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40020000 	.word	0x40020000

080041a8 <displayReset>:

static void displayReset(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
    chipSelect(INSTRUCTION_REGISTER);
 80041ac:	2000      	movs	r0, #0
 80041ae:	f7ff ffd5 	bl	800415c <chipSelect>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80041b2:	2200      	movs	r2, #0
 80041b4:	2140      	movs	r1, #64	; 0x40
 80041b6:	4808      	ldr	r0, [pc, #32]	; (80041d8 <displayReset+0x30>)
 80041b8:	f7fd fdea 	bl	8001d90 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80041bc:	2001      	movs	r0, #1
 80041be:	f7fc ff25 	bl	800100c <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 80041c2:	2201      	movs	r2, #1
 80041c4:	2140      	movs	r1, #64	; 0x40
 80041c6:	4804      	ldr	r0, [pc, #16]	; (80041d8 <displayReset+0x30>)
 80041c8:	f7fd fde2 	bl	8001d90 <HAL_GPIO_WritePin>
    chipSelect(DATA_REGISTER);
 80041cc:	2001      	movs	r0, #1
 80041ce:	f7ff ffc5 	bl	800415c <chipSelect>
}
 80041d2:	bf00      	nop
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40020000 	.word	0x40020000

080041dc <sendInstruction>:

static void sendInstruction(instruction command)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	71fb      	strb	r3, [r7, #7]
    registerSelect(INSTRUCTION_REGISTER);
 80041e6:	2000      	movs	r0, #0
 80041e8:	f7ff ffcc 	bl	8004184 <registerSelect>
    chipSelect(true);
 80041ec:	2001      	movs	r0, #1
 80041ee:	f7ff ffb5 	bl	800415c <chipSelect>
	  //$dnd (uint8_t) added
    HAL_SPI_Transmit(&hspi1, (uint8_t *) &command, 1, 1);
 80041f2:	1df9      	adds	r1, r7, #7
 80041f4:	2301      	movs	r3, #1
 80041f6:	2201      	movs	r2, #1
 80041f8:	4804      	ldr	r0, [pc, #16]	; (800420c <sendInstruction+0x30>)
 80041fa:	f7fe fc35 	bl	8002a68 <HAL_SPI_Transmit>
    chipSelect(false);
 80041fe:	2000      	movs	r0, #0
 8004200:	f7ff ffac 	bl	800415c <chipSelect>
}
 8004204:	bf00      	nop
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	200009c8 	.word	0x200009c8

08004210 <sendData>:


/*static*/ void sendData(uint8_t data)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	71fb      	strb	r3, [r7, #7]
    registerSelect(DATA_REGISTER);
 800421a:	2001      	movs	r0, #1
 800421c:	f7ff ffb2 	bl	8004184 <registerSelect>
    chipSelect(true);
 8004220:	2001      	movs	r0, #1
 8004222:	f7ff ff9b 	bl	800415c <chipSelect>
    HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 8004226:	1df9      	adds	r1, r7, #7
 8004228:	2301      	movs	r3, #1
 800422a:	2201      	movs	r2, #1
 800422c:	4804      	ldr	r0, [pc, #16]	; (8004240 <sendData+0x30>)
 800422e:	f7fe fc1b 	bl	8002a68 <HAL_SPI_Transmit>
    chipSelect(false);
 8004232:	2000      	movs	r0, #0
 8004234:	f7ff ff92 	bl	800415c <chipSelect>
}
 8004238:	bf00      	nop
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	200009c8 	.word	0x200009c8

08004244 <lcd_setContrast>:

void lcd_setContrast(uint8_t electronicVolume)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	71fb      	strb	r3, [r7, #7]
#define ELECTRONIC_VOLUME_MAXIMUM_RAITING ((uint8_t) 63)

    if (electronicVolume <= ELECTRONIC_VOLUME_MAXIMUM_RAITING) {
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	2b3f      	cmp	r3, #63	; 0x3f
 8004252:	d806      	bhi.n	8004262 <lcd_setContrast+0x1e>
        sendInstruction(ELECTRONIC_VOLUME_MODE_SET);
 8004254:	2081      	movs	r0, #129	; 0x81
 8004256:	f7ff ffc1 	bl	80041dc <sendInstruction>
			//$dnd1 added (instruction)
        sendInstruction((instruction) electronicVolume);
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff ffbd 	bl	80041dc <sendInstruction>
    }
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <lcd_init>:

void lcd_init(void)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	af00      	add	r7, sp, #0
    lcd_clear();
 800426e:	f000 f857 	bl	8004320 <lcd_clear>
    displayReset();
 8004272:	f7ff ff99 	bl	80041a8 <displayReset>

    sendInstruction(ADC_NORMAL);
 8004276:	20a0      	movs	r0, #160	; 0xa0
 8004278:	f7ff ffb0 	bl	80041dc <sendInstruction>
    sendInstruction(DISPLAY_OFF);
 800427c:	20ae      	movs	r0, #174	; 0xae
 800427e:	f7ff ffad 	bl	80041dc <sendInstruction>
    sendInstruction(COMMON_OUTPUT_MODE_REVERSE);
 8004282:	20c8      	movs	r0, #200	; 0xc8
 8004284:	f7ff ffaa 	bl	80041dc <sendInstruction>
    sendInstruction(BIAS_ONE_NINTH);
 8004288:	20a2      	movs	r0, #162	; 0xa2
 800428a:	f7ff ffa7 	bl	80041dc <sendInstruction>
    sendInstruction(POWER_CONTROL_SET_7);
 800428e:	202f      	movs	r0, #47	; 0x2f
 8004290:	f7ff ffa4 	bl	80041dc <sendInstruction>
    sendInstruction(INTERNAL_RESISTOR_RATIO_1);
 8004294:	2021      	movs	r0, #33	; 0x21
 8004296:	f7ff ffa1 	bl	80041dc <sendInstruction>
    lcd_setContrast(40);
 800429a:	2028      	movs	r0, #40	; 0x28
 800429c:	f7ff ffd2 	bl	8004244 <lcd_setContrast>
    sendInstruction(DISPLAY_ON);
 80042a0:	20af      	movs	r0, #175	; 0xaf
 80042a2:	f7ff ff9b 	bl	80041dc <sendInstruction>
}
 80042a6:	bf00      	nop
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <lcd_setPixel>:

void lcd_setPixel(uint8_t xPosition, uint8_t yPosition, bool pixelIsSet)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4603      	mov	r3, r0
 80042b4:	71fb      	strb	r3, [r7, #7]
 80042b6:	460b      	mov	r3, r1
 80042b8:	71bb      	strb	r3, [r7, #6]
 80042ba:	4613      	mov	r3, r2
 80042bc:	717b      	strb	r3, [r7, #5]
    if ((xPosition < NUMBER_OF_ROWS) && (yPosition < NUMBER_OF_COLUMNS)) {
 80042be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	db23      	blt.n	800430e <lcd_setPixel+0x62>
 80042c6:	79bb      	ldrb	r3, [r7, #6]
 80042c8:	2b1f      	cmp	r3, #31
 80042ca:	d820      	bhi.n	800430e <lcd_setPixel+0x62>
        if (pixelIsSet)
 80042cc:	797b      	ldrb	r3, [r7, #5]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00e      	beq.n	80042f0 <lcd_setPixel+0x44>
            displayBuffer[xPosition].rawData |= (1 << yPosition);
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	4a11      	ldr	r2, [pc, #68]	; (800431c <lcd_setPixel+0x70>)
 80042d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80042da:	79bb      	ldrb	r3, [r7, #6]
 80042dc:	2101      	movs	r1, #1
 80042de:	fa01 f303 	lsl.w	r3, r1, r3
 80042e2:	4619      	mov	r1, r3
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	490c      	ldr	r1, [pc, #48]	; (800431c <lcd_setPixel+0x70>)
 80042ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        else
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
    }
}
 80042ee:	e00e      	b.n	800430e <lcd_setPixel+0x62>
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	4a0a      	ldr	r2, [pc, #40]	; (800431c <lcd_setPixel+0x70>)
 80042f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80042f8:	79bb      	ldrb	r3, [r7, #6]
 80042fa:	2101      	movs	r1, #1
 80042fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	4619      	mov	r1, r3
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	400a      	ands	r2, r1
 8004308:	4904      	ldr	r1, [pc, #16]	; (800431c <lcd_setPixel+0x70>)
 800430a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	20000210 	.word	0x20000210

08004320 <lcd_clear>:

void lcd_clear(void)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 8004326:	2300      	movs	r3, #0
 8004328:	71fb      	strb	r3, [r7, #7]
 800432a:	e007      	b.n	800433c <lcd_clear+0x1c>
        displayBuffer[rowIndex].rawData = false;
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	4a08      	ldr	r2, [pc, #32]	; (8004350 <lcd_clear+0x30>)
 8004330:	2100      	movs	r1, #0
 8004332:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	3301      	adds	r3, #1
 800433a:	71fb      	strb	r3, [r7, #7]
 800433c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004340:	2b00      	cmp	r3, #0
 8004342:	daf3      	bge.n	800432c <lcd_clear+0xc>
    }
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	20000210 	.word	0x20000210

08004354 <lcd_setChar>:


void lcd_setChar(uint8_t xPosition, uint8_t yPosition, unsigned char charToSet, lcd_fontSize size, bool contrastIsInverted)
{
 8004354:	b590      	push	{r4, r7, lr}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	4604      	mov	r4, r0
 800435c:	4608      	mov	r0, r1
 800435e:	4611      	mov	r1, r2
 8004360:	461a      	mov	r2, r3
 8004362:	4623      	mov	r3, r4
 8004364:	71fb      	strb	r3, [r7, #7]
 8004366:	4603      	mov	r3, r0
 8004368:	71bb      	strb	r3, [r7, #6]
 800436a:	460b      	mov	r3, r1
 800436c:	717b      	strb	r3, [r7, #5]
 800436e:	4613      	mov	r3, r2
 8004370:	713b      	strb	r3, [r7, #4]
#define ASCII_TABLE_OFFSET ((uint8_t) 32)

    charToSet -= ASCII_TABLE_OFFSET;
 8004372:	797b      	ldrb	r3, [r7, #5]
 8004374:	3b20      	subs	r3, #32
 8004376:	717b      	strb	r3, [r7, #5]

    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 8004378:	2300      	movs	r3, #0
 800437a:	73fb      	strb	r3, [r7, #15]
 800437c:	e049      	b.n	8004412 <lcd_setChar+0xbe>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 800437e:	2300      	movs	r3, #0
 8004380:	73bb      	strb	r3, [r7, #14]
 8004382:	e03b      	b.n	80043fc <lcd_setChar+0xa8>
            if (Font_6x8_h[charToSet * fontSizes[size].height + columnCounter] & (1 << rowCounter))
 8004384:	797b      	ldrb	r3, [r7, #5]
 8004386:	793a      	ldrb	r2, [r7, #4]
 8004388:	4927      	ldr	r1, [pc, #156]	; (8004428 <lcd_setChar+0xd4>)
 800438a:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 800438e:	fb02 f203 	mul.w	r2, r2, r3
 8004392:	7bfb      	ldrb	r3, [r7, #15]
 8004394:	4413      	add	r3, r2
 8004396:	4a25      	ldr	r2, [pc, #148]	; (800442c <lcd_setChar+0xd8>)
 8004398:	5cd3      	ldrb	r3, [r2, r3]
 800439a:	461a      	mov	r2, r3
 800439c:	7bbb      	ldrb	r3, [r7, #14]
 800439e:	fa42 f303 	asr.w	r3, r2, r3
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d018      	beq.n	80043dc <lcd_setChar+0x88>
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, !contrastIsInverted);
 80043aa:	79fa      	ldrb	r2, [r7, #7]
 80043ac:	7bbb      	ldrb	r3, [r7, #14]
 80043ae:	4413      	add	r3, r2
 80043b0:	b2d8      	uxtb	r0, r3
 80043b2:	79ba      	ldrb	r2, [r7, #6]
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	4413      	add	r3, r2
 80043b8:	b2d9      	uxtb	r1, r3
 80043ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	bf14      	ite	ne
 80043c2:	2301      	movne	r3, #1
 80043c4:	2300      	moveq	r3, #0
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	f083 0301 	eor.w	r3, r3, #1
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	f7ff ff69 	bl	80042ac <lcd_setPixel>
 80043da:	e00c      	b.n	80043f6 <lcd_setChar+0xa2>
            else
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, contrastIsInverted);
 80043dc:	79fa      	ldrb	r2, [r7, #7]
 80043de:	7bbb      	ldrb	r3, [r7, #14]
 80043e0:	4413      	add	r3, r2
 80043e2:	b2d8      	uxtb	r0, r3
 80043e4:	79ba      	ldrb	r2, [r7, #6]
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	4413      	add	r3, r2
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	f897 2020 	ldrb.w	r2, [r7, #32]
 80043f0:	4619      	mov	r1, r3
 80043f2:	f7ff ff5b 	bl	80042ac <lcd_setPixel>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 80043f6:	7bbb      	ldrb	r3, [r7, #14]
 80043f8:	3301      	adds	r3, #1
 80043fa:	73bb      	strb	r3, [r7, #14]
 80043fc:	793b      	ldrb	r3, [r7, #4]
 80043fe:	4a0a      	ldr	r2, [pc, #40]	; (8004428 <lcd_setChar+0xd4>)
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	4413      	add	r3, r2
 8004404:	785b      	ldrb	r3, [r3, #1]
 8004406:	7bba      	ldrb	r2, [r7, #14]
 8004408:	429a      	cmp	r2, r3
 800440a:	d3bb      	bcc.n	8004384 <lcd_setChar+0x30>
    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	3301      	adds	r3, #1
 8004410:	73fb      	strb	r3, [r7, #15]
 8004412:	793b      	ldrb	r3, [r7, #4]
 8004414:	4a04      	ldr	r2, [pc, #16]	; (8004428 <lcd_setChar+0xd4>)
 8004416:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800441a:	7bfa      	ldrb	r2, [r7, #15]
 800441c:	429a      	cmp	r2, r3
 800441e:	d3ae      	bcc.n	800437e <lcd_setChar+0x2a>
        }
}
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	bd90      	pop	{r4, r7, pc}
 8004428:	08007868 	.word	0x08007868
 800442c:	080074e8 	.word	0x080074e8

08004430 <lcd_setString>:




void lcd_setString(uint8_t xPosition, uint8_t yPosition, char const * string, lcd_fontSize size, bool contrastIsInverted )
{
 8004430:	b590      	push	{r4, r7, lr}
 8004432:	b085      	sub	sp, #20
 8004434:	af02      	add	r7, sp, #8
 8004436:	603a      	str	r2, [r7, #0]
 8004438:	461a      	mov	r2, r3
 800443a:	4603      	mov	r3, r0
 800443c:	71fb      	strb	r3, [r7, #7]
 800443e:	460b      	mov	r3, r1
 8004440:	71bb      	strb	r3, [r7, #6]
 8004442:	4613      	mov	r3, r2
 8004444:	717b      	strb	r3, [r7, #5]
 if ((size <= LCD_FONT_8) && (size < LCD_NUMBER_OF_FONTS))
 8004446:	797b      	ldrb	r3, [r7, #5]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d11c      	bne.n	8004486 <lcd_setString+0x56>
 800444c:	797b      	ldrb	r3, [r7, #5]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d819      	bhi.n	8004486 <lcd_setString+0x56>
 //$dnd1 bug this works only for font enum = 0. No large fonts!
        for(; *string != '\0'; string++){
 8004452:	e014      	b.n	800447e <lcd_setString+0x4e>
            lcd_setChar(xPosition, yPosition, *string, size, contrastIsInverted);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781a      	ldrb	r2, [r3, #0]
 8004458:	797c      	ldrb	r4, [r7, #5]
 800445a:	79b9      	ldrb	r1, [r7, #6]
 800445c:	79f8      	ldrb	r0, [r7, #7]
 800445e:	7e3b      	ldrb	r3, [r7, #24]
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	4623      	mov	r3, r4
 8004464:	f7ff ff76 	bl	8004354 <lcd_setChar>
            xPosition += fontSizes[size].width;
 8004468:	797b      	ldrb	r3, [r7, #5]
 800446a:	4a09      	ldr	r2, [pc, #36]	; (8004490 <lcd_setString+0x60>)
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	4413      	add	r3, r2
 8004470:	785a      	ldrb	r2, [r3, #1]
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	4413      	add	r3, r2
 8004476:	71fb      	strb	r3, [r7, #7]
        for(; *string != '\0'; string++){
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	3301      	adds	r3, #1
 800447c:	603b      	str	r3, [r7, #0]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e6      	bne.n	8004454 <lcd_setString+0x24>
        }
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	bd90      	pop	{r4, r7, pc}
 800448e:	bf00      	nop
 8004490:	08007868 	.word	0x08007868

08004494 <lcd_setLine>:

// V0.4;dnd1;add;drawLine() function

void lcd_setLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t state)
{
 8004494:	b590      	push	{r4, r7, lr}
 8004496:	b08b      	sub	sp, #44	; 0x2c
 8004498:	af00      	add	r7, sp, #0
 800449a:	4604      	mov	r4, r0
 800449c:	4608      	mov	r0, r1
 800449e:	4611      	mov	r1, r2
 80044a0:	461a      	mov	r2, r3
 80044a2:	4623      	mov	r3, r4
 80044a4:	81fb      	strh	r3, [r7, #14]
 80044a6:	4603      	mov	r3, r0
 80044a8:	81bb      	strh	r3, [r7, #12]
 80044aa:	460b      	mov	r3, r1
 80044ac:	817b      	strh	r3, [r7, #10]
 80044ae:	4613      	mov	r3, r2
 80044b0:	813b      	strh	r3, [r7, #8]
	int16_t i, x[2], y[2];
	float xF, yF;

	xF = x1, x[1] = 0;
 80044b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044be:	edc7 7a08 	vstr	s15, [r7, #32]
 80044c2:	2300      	movs	r3, #0
 80044c4:	837b      	strh	r3, [r7, #26]
	yF = y1, y[1] = 0;
 80044c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80044ca:	ee07 3a90 	vmov	s15, r3
 80044ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044d2:	edc7 7a07 	vstr	s15, [r7, #28]
 80044d6:	2300      	movs	r3, #0
 80044d8:	82fb      	strh	r3, [r7, #22]

	x[0] = abs(x2-x1);
 80044da:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80044de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	bfb8      	it	lt
 80044e8:	425b      	neglt	r3, r3
 80044ea:	b21b      	sxth	r3, r3
 80044ec:	833b      	strh	r3, [r7, #24]
	y[0] = abs(y2-y1);
 80044ee:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80044f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	bfb8      	it	lt
 80044fc:	425b      	neglt	r3, r3
 80044fe:	b21b      	sxth	r3, r3
 8004500:	82bb      	strh	r3, [r7, #20]

	if(x[0]) x[1] = (x2-x1)/x[0];
 8004502:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <lcd_setLine+0x8c>
 800450a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800450e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004518:	fb93 f3f2 	sdiv	r3, r3, r2
 800451c:	b21b      	sxth	r3, r3
 800451e:	837b      	strh	r3, [r7, #26]
	if(y[0]) y[1] = (y2-y1)/y[0];
 8004520:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <lcd_setLine+0xaa>
 8004528:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800452c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004536:	fb93 f3f2 	sdiv	r3, r3, r2
 800453a:	b21b      	sxth	r3, r3
 800453c:	82fb      	strh	r3, [r7, #22]

	if(x[0] >= y[0]) {
 800453e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004542:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004546:	429a      	cmp	r2, r3
 8004548:	db5f      	blt.n	800460a <lcd_setLine+0x176>
		for(i = 0; i<x[0]; i++) {
 800454a:	2300      	movs	r3, #0
 800454c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800454e:	e055      	b.n	80045fc <lcd_setLine+0x168>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 8004550:	edd7 7a08 	vldr	s15, [r7, #32]
 8004554:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455c:	db20      	blt.n	80045a0 <lcd_setLine+0x10c>
 800455e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004562:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800456a:	db19      	blt.n	80045a0 <lcd_setLine+0x10c>
 800456c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004574:	edc7 7a01 	vstr	s15, [r7, #4]
 8004578:	793b      	ldrb	r3, [r7, #4]
 800457a:	b2d8      	uxtb	r0, r3
 800457c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004584:	edc7 7a01 	vstr	s15, [r7, #4]
 8004588:	793b      	ldrb	r3, [r7, #4]
 800458a:	b2d9      	uxtb	r1, r3
 800458c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004590:	2b00      	cmp	r3, #0
 8004592:	bf14      	ite	ne
 8004594:	2301      	movne	r3, #1
 8004596:	2300      	moveq	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	461a      	mov	r2, r3
 800459c:	f7ff fe86 	bl	80042ac <lcd_setPixel>
			xF += x[1];
 80045a0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80045a4:	ee07 3a90 	vmov	s15, r3
 80045a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045ac:	ed97 7a08 	vldr	s14, [r7, #32]
 80045b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045b4:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += ((float)y[0]/x[0])*y[1];
 80045b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80045bc:	ee07 3a90 	vmov	s15, r3
 80045c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80045c4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80045c8:	ee07 3a90 	vmov	s15, r3
 80045cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80045d8:	ee07 3a90 	vmov	s15, r3
 80045dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80045e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045ec:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<x[0]; i++) {
 80045f0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3301      	adds	r3, #1
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80045fc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004600:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8004604:	429a      	cmp	r2, r3
 8004606:	dba3      	blt.n	8004550 <lcd_setLine+0xbc>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
			xF += ((float)x[0]/y[0])*x[1];
			yF += y[1];
		}
	}
}
 8004608:	e05e      	b.n	80046c8 <lcd_setLine+0x234>
		for(i = 0; i<y[0]; i++) {
 800460a:	2300      	movs	r3, #0
 800460c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800460e:	e055      	b.n	80046bc <lcd_setLine+0x228>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 8004610:	edd7 7a08 	vldr	s15, [r7, #32]
 8004614:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461c:	db20      	blt.n	8004660 <lcd_setLine+0x1cc>
 800461e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004622:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462a:	db19      	blt.n	8004660 <lcd_setLine+0x1cc>
 800462c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004634:	edc7 7a01 	vstr	s15, [r7, #4]
 8004638:	793b      	ldrb	r3, [r7, #4]
 800463a:	b2d8      	uxtb	r0, r3
 800463c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004644:	edc7 7a01 	vstr	s15, [r7, #4]
 8004648:	793b      	ldrb	r3, [r7, #4]
 800464a:	b2d9      	uxtb	r1, r3
 800464c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004650:	2b00      	cmp	r3, #0
 8004652:	bf14      	ite	ne
 8004654:	2301      	movne	r3, #1
 8004656:	2300      	moveq	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	461a      	mov	r2, r3
 800465c:	f7ff fe26 	bl	80042ac <lcd_setPixel>
			xF += ((float)x[0]/y[0])*x[1];
 8004660:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004664:	ee07 3a90 	vmov	s15, r3
 8004668:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800466c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004670:	ee07 3a90 	vmov	s15, r3
 8004674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800467c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004680:	ee07 3a90 	vmov	s15, r3
 8004684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468c:	ed97 7a08 	vldr	s14, [r7, #32]
 8004690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004694:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += y[1];
 8004698:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800469c:	ee07 3a90 	vmov	s15, r3
 80046a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80046a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046ac:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<y[0]; i++) {
 80046b0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3301      	adds	r3, #1
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80046bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80046c0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80046c4:	429a      	cmp	r2, r3
 80046c6:	dba3      	blt.n	8004610 <lcd_setLine+0x17c>
}
 80046c8:	bf00      	nop
 80046ca:	372c      	adds	r7, #44	; 0x2c
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd90      	pop	{r4, r7, pc}

080046d0 <lcd_show>:

void lcd_show(void){
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 80046d6:	2300      	movs	r3, #0
 80046d8:	71fb      	strb	r3, [r7, #7]
 80046da:	e022      	b.n	8004722 <lcd_show+0x52>
			  //$dnd added (instruction)
        sendInstruction((instruction) (PAGE_ADDRESS_SET_0 + pageIndex));
 80046dc:	79fb      	ldrb	r3, [r7, #7]
 80046de:	3b50      	subs	r3, #80	; 0x50
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fd7a 	bl	80041dc <sendInstruction>
        sendInstruction(COLUMN_ADDRESS_SET_BIT);
 80046e8:	2010      	movs	r0, #16
 80046ea:	f7ff fd77 	bl	80041dc <sendInstruction>
        sendInstruction(BOOSTER_RATIO_SET);
 80046ee:	2000      	movs	r0, #0
 80046f0:	f7ff fd74 	bl	80041dc <sendInstruction>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 80046f4:	2300      	movs	r3, #0
 80046f6:	71bb      	strb	r3, [r7, #6]
 80046f8:	e00c      	b.n	8004714 <lcd_show+0x44>
            sendData(displayBuffer[rowIndex].pageSet[pageIndex]);
 80046fa:	79ba      	ldrb	r2, [r7, #6]
 80046fc:	79fb      	ldrb	r3, [r7, #7]
 80046fe:	490c      	ldr	r1, [pc, #48]	; (8004730 <lcd_show+0x60>)
 8004700:	0092      	lsls	r2, r2, #2
 8004702:	440a      	add	r2, r1
 8004704:	4413      	add	r3, r2
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff fd81 	bl	8004210 <sendData>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 800470e:	79bb      	ldrb	r3, [r7, #6]
 8004710:	3301      	adds	r3, #1
 8004712:	71bb      	strb	r3, [r7, #6]
 8004714:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004718:	2b00      	cmp	r3, #0
 800471a:	daee      	bge.n	80046fa <lcd_show+0x2a>
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	3301      	adds	r3, #1
 8004720:	71fb      	strb	r3, [r7, #7]
 8004722:	79fb      	ldrb	r3, [r7, #7]
 8004724:	2b03      	cmp	r3, #3
 8004726:	d9d9      	bls.n	80046dc <lcd_show+0xc>
    }
}
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000210 	.word	0x20000210

08004734 <HAL_GPIO_EXTI_Callback>:
void beat_machine();
void standard_beatroutine();
void pronounced_beatroutine();

// buttons
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	80fb      	strh	r3, [r7, #6]
	__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_Pin);
 800473e:	4a13      	ldr	r2, [pc, #76]	; (800478c <HAL_GPIO_EXTI_Callback+0x58>)
 8004740:	88fb      	ldrh	r3, [r7, #6]
 8004742:	6153      	str	r3, [r2, #20]

	// down
	if (GPIO_Pin == GPIO_PIN_0) {
 8004744:	88fb      	ldrh	r3, [r7, #6]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d104      	bne.n	8004754 <HAL_GPIO_EXTI_Callback+0x20>
		bpm -= 1;
 800474a:	4b11      	ldr	r3, [pc, #68]	; (8004790 <HAL_GPIO_EXTI_Callback+0x5c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3b01      	subs	r3, #1
 8004750:	4a0f      	ldr	r2, [pc, #60]	; (8004790 <HAL_GPIO_EXTI_Callback+0x5c>)
 8004752:	6013      	str	r3, [r2, #0]
	}

	// up
	if (GPIO_Pin == GPIO_PIN_4) {
 8004754:	88fb      	ldrh	r3, [r7, #6]
 8004756:	2b10      	cmp	r3, #16
 8004758:	d104      	bne.n	8004764 <HAL_GPIO_EXTI_Callback+0x30>
		bpm += 1;
 800475a:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <HAL_GPIO_EXTI_Callback+0x5c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3301      	adds	r3, #1
 8004760:	4a0b      	ldr	r2, [pc, #44]	; (8004790 <HAL_GPIO_EXTI_Callback+0x5c>)
 8004762:	6013      	str	r3, [r2, #0]
	}

	// center
	if (GPIO_Pin == GPIO_PIN_5) {
 8004764:	88fb      	ldrh	r3, [r7, #6]
 8004766:	2b20      	cmp	r3, #32
 8004768:	d10a      	bne.n	8004780 <HAL_GPIO_EXTI_Callback+0x4c>
		if (op_mode == PRONOUNCED){
 800476a:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <HAL_GPIO_EXTI_Callback+0x60>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d103      	bne.n	800477a <HAL_GPIO_EXTI_Callback+0x46>
			op_mode = STANDARD;
 8004772:	4b08      	ldr	r3, [pc, #32]	; (8004794 <HAL_GPIO_EXTI_Callback+0x60>)
 8004774:	2200      	movs	r2, #0
 8004776:	701a      	strb	r2, [r3, #0]
		}else{
			op_mode = PRONOUNCED;
		}
	}
}
 8004778:	e002      	b.n	8004780 <HAL_GPIO_EXTI_Callback+0x4c>
			op_mode = PRONOUNCED;
 800477a:	4b06      	ldr	r3, [pc, #24]	; (8004794 <HAL_GPIO_EXTI_Callback+0x60>)
 800477c:	2201      	movs	r2, #1
 800477e:	701a      	strb	r2, [r3, #0]
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	40013c00 	.word	0x40013c00
 8004790:	20000008 	.word	0x20000008
 8004794:	20000514 	.word	0x20000514

08004798 <HAL_TIM_PeriodElapsedCallback>:

// timer interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6){
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
	beat_machine();
 80047a0:	f000 fa24 	bl	8004bec <beat_machine>
}
 80047a4:	bf00      	nop
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	0000      	movs	r0, r0
	...

080047b0 <beep_and_blink>:

// other functions
void beep_and_blink(int duration, int pitch, float volume){
 80047b0:	b5b0      	push	{r4, r5, r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	ed87 0a01 	vstr	s0, [r7, #4]
	// calculate prescaler
	uint32_t clockspeed = 16000000;
 80047be:	4b3c      	ldr	r3, [pc, #240]	; (80048b0 <beep_and_blink+0x100>)
 80047c0:	61fb      	str	r3, [r7, #28]
	uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim2);
 80047c2:	4b3c      	ldr	r3, [pc, #240]	; (80048b4 <beep_and_blink+0x104>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	61bb      	str	r3, [r7, #24]
	uint32_t prescaler = clockspeed / (pitch * period);
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	fb02 f303 	mul.w	r3, r2, r3
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d8:	617b      	str	r3, [r7, #20]

	// calculate duty cycle
	uint32_t dc = 0;
 80047da:	2300      	movs	r3, #0
 80047dc:	613b      	str	r3, [r7, #16]
	dc = ((float)volume/(float)MAX_VOL * 0.1) * period;
 80047de:	4b36      	ldr	r3, [pc, #216]	; (80048b8 <beep_and_blink+0x108>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047ea:	ed97 7a01 	vldr	s14, [r7, #4]
 80047ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80047f2:	ee16 0a90 	vmov	r0, s13
 80047f6:	f7fb fec7 	bl	8000588 <__aeabi_f2d>
 80047fa:	a32b      	add	r3, pc, #172	; (adr r3, 80048a8 <beep_and_blink+0xf8>)
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	f7fb ff1a 	bl	8000638 <__aeabi_dmul>
 8004804:	4603      	mov	r3, r0
 8004806:	460c      	mov	r4, r1
 8004808:	4625      	mov	r5, r4
 800480a:	461c      	mov	r4, r3
 800480c:	69b8      	ldr	r0, [r7, #24]
 800480e:	f7fb fe99 	bl	8000544 <__aeabi_ui2d>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4620      	mov	r0, r4
 8004818:	4629      	mov	r1, r5
 800481a:	f7fb ff0d 	bl	8000638 <__aeabi_dmul>
 800481e:	4603      	mov	r3, r0
 8004820:	460c      	mov	r4, r1
 8004822:	4618      	mov	r0, r3
 8004824:	4621      	mov	r1, r4
 8004826:	f7fc f9df 	bl	8000be8 <__aeabi_d2uiz>
 800482a:	4603      	mov	r3, r0
 800482c:	613b      	str	r3, [r7, #16]

	// set prescaler
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800482e:	2108      	movs	r1, #8
 8004830:	4820      	ldr	r0, [pc, #128]	; (80048b4 <beep_and_blink+0x104>)
 8004832:	f7fe fbbb 	bl	8002fac <HAL_TIM_PWM_Stop>
	MX_TIM2_Init(prescaler);
 8004836:	6978      	ldr	r0, [r7, #20]
 8004838:	f000 fc6e 	bl	8005118 <MX_TIM2_Init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800483c:	2108      	movs	r1, #8
 800483e:	481d      	ldr	r0, [pc, #116]	; (80048b4 <beep_and_blink+0x104>)
 8004840:	f7fe fb76 	bl	8002f30 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, dc);
 8004844:	4b1b      	ldr	r3, [pc, #108]	; (80048b4 <beep_and_blink+0x104>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800484c:	2200      	movs	r2, #0
 800484e:	2110      	movs	r1, #16
 8004850:	481a      	ldr	r0, [pc, #104]	; (80048bc <beep_and_blink+0x10c>)
 8004852:	f7fd fa9d 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8004856:	2200      	movs	r2, #0
 8004858:	2180      	movs	r1, #128	; 0x80
 800485a:	4819      	ldr	r0, [pc, #100]	; (80048c0 <beep_and_blink+0x110>)
 800485c:	f7fd fa98 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8004860:	2200      	movs	r2, #0
 8004862:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004866:	4817      	ldr	r0, [pc, #92]	; (80048c4 <beep_and_blink+0x114>)
 8004868:	f7fd fa92 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_Delay(duration);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4618      	mov	r0, r3
 8004870:	f7fc fbcc 	bl	800100c <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8004874:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <beep_and_blink+0x104>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2200      	movs	r2, #0
 800487a:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800487c:	2201      	movs	r2, #1
 800487e:	2110      	movs	r1, #16
 8004880:	480e      	ldr	r0, [pc, #56]	; (80048bc <beep_and_blink+0x10c>)
 8004882:	f7fd fa85 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8004886:	2201      	movs	r2, #1
 8004888:	2180      	movs	r1, #128	; 0x80
 800488a:	480d      	ldr	r0, [pc, #52]	; (80048c0 <beep_and_blink+0x110>)
 800488c:	f7fd fa80 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8004890:	2201      	movs	r2, #1
 8004892:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004896:	480b      	ldr	r0, [pc, #44]	; (80048c4 <beep_and_blink+0x114>)
 8004898:	f7fd fa7a 	bl	8001d90 <HAL_GPIO_WritePin>
}
 800489c:	bf00      	nop
 800489e:	3720      	adds	r7, #32
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bdb0      	pop	{r4, r5, r7, pc}
 80048a4:	f3af 8000 	nop.w
 80048a8:	9999999a 	.word	0x9999999a
 80048ac:	3fb99999 	.word	0x3fb99999
 80048b0:	00f42400 	.word	0x00f42400
 80048b4:	20000a60 	.word	0x20000a60
 80048b8:	20000014 	.word	0x20000014
 80048bc:	40020400 	.word	0x40020400
 80048c0:	40020800 	.word	0x40020800
 80048c4:	40020000 	.word	0x40020000

080048c8 <update_volume>:

void update_volume(){
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
	// read analog signal
	HAL_ADC_Start(&hadc1);
 80048cc:	4815      	ldr	r0, [pc, #84]	; (8004924 <update_volume+0x5c>)
 80048ce:	f7fc fc03 	bl	80010d8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 80048d2:	2132      	movs	r1, #50	; 0x32
 80048d4:	4813      	ldr	r0, [pc, #76]	; (8004924 <update_volume+0x5c>)
 80048d6:	f7fc fcf8 	bl	80012ca <HAL_ADC_PollForConversion>
	pot1_raw = HAL_ADC_GetValue(&hadc1);
 80048da:	4812      	ldr	r0, [pc, #72]	; (8004924 <update_volume+0x5c>)
 80048dc:	f7fc fd79 	bl	80013d2 <HAL_ADC_GetValue>
 80048e0:	4602      	mov	r2, r0
 80048e2:	4b11      	ldr	r3, [pc, #68]	; (8004928 <update_volume+0x60>)
 80048e4:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80048e6:	480f      	ldr	r0, [pc, #60]	; (8004924 <update_volume+0x5c>)
 80048e8:	f7fc fcbc 	bl	8001264 <HAL_ADC_Stop>

	// update value
	vol = ((float)pot1_raw/(float)ADC_MAX) * (float)MAX_VOL;
 80048ec:	4b0e      	ldr	r3, [pc, #56]	; (8004928 <update_volume+0x60>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	ee07 3a90 	vmov	s15, r3
 80048f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800492c <update_volume+0x64>
 80048fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004900:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004904:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <update_volume+0x68>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	ee07 3a90 	vmov	s15, r3
 800490c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004918:	ee17 2a90 	vmov	r2, s15
 800491c:	4b05      	ldr	r3, [pc, #20]	; (8004934 <update_volume+0x6c>)
 800491e:	601a      	str	r2, [r3, #0]

}
 8004920:	bf00      	nop
 8004922:	bd80      	pop	{r7, pc}
 8004924:	20000474 	.word	0x20000474
 8004928:	20000414 	.word	0x20000414
 800492c:	00000fff 	.word	0x00000fff
 8004930:	20000014 	.word	0x20000014
 8004934:	20000410 	.word	0x20000410

08004938 <update_bpm>:

void update_bpm(){
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
	// read analog signal
	HAL_ADC_Start(&hadc2);
 800493c:	482b      	ldr	r0, [pc, #172]	; (80049ec <update_bpm+0xb4>)
 800493e:	f7fc fbcb 	bl	80010d8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 50);
 8004942:	2132      	movs	r1, #50	; 0x32
 8004944:	4829      	ldr	r0, [pc, #164]	; (80049ec <update_bpm+0xb4>)
 8004946:	f7fc fcc0 	bl	80012ca <HAL_ADC_PollForConversion>
	pot2_raw = HAL_ADC_GetValue(&hadc2);
 800494a:	4828      	ldr	r0, [pc, #160]	; (80049ec <update_bpm+0xb4>)
 800494c:	f7fc fd41 	bl	80013d2 <HAL_ADC_GetValue>
 8004950:	4602      	mov	r2, r0
 8004952:	4b27      	ldr	r3, [pc, #156]	; (80049f0 <update_bpm+0xb8>)
 8004954:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 8004956:	4825      	ldr	r0, [pc, #148]	; (80049ec <update_bpm+0xb4>)
 8004958:	f7fc fc84 	bl	8001264 <HAL_ADC_Stop>

	// update value
	bpm = MIN_BPM + (float)pot2_raw/(float)ADC_MAX * (float)(MAX_BPM - MIN_BPM);
 800495c:	4b25      	ldr	r3, [pc, #148]	; (80049f4 <update_bpm+0xbc>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	ee07 3a90 	vmov	s15, r3
 8004964:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004968:	4b21      	ldr	r3, [pc, #132]	; (80049f0 <update_bpm+0xb8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	ee07 3a90 	vmov	s15, r3
 8004970:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8004974:	eddf 7a20 	vldr	s15, [pc, #128]	; 80049f8 <update_bpm+0xc0>
 8004978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8004980:	4b1e      	ldr	r3, [pc, #120]	; (80049fc <update_bpm+0xc4>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	4b1b      	ldr	r3, [pc, #108]	; (80049f4 <update_bpm+0xbc>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800499a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800499e:	ee17 2a90 	vmov	r2, s15
 80049a2:	4b17      	ldr	r3, [pc, #92]	; (8004a00 <update_bpm+0xc8>)
 80049a4:	601a      	str	r2, [r3, #0]

	// calculate new prescaler
	ps = 16000000 / (float)((float)bpm/60 * TIM6->ARR);
 80049a6:	4b16      	ldr	r3, [pc, #88]	; (8004a00 <update_bpm+0xc8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049b2:	eddf 6a14 	vldr	s13, [pc, #80]	; 8004a04 <update_bpm+0xcc>
 80049b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80049ba:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <update_bpm+0xd0>)
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049ca:	eddf 6a10 	vldr	s13, [pc, #64]	; 8004a0c <update_bpm+0xd4>
 80049ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d6:	ee17 2a90 	vmov	r2, s15
 80049da:	4b0d      	ldr	r3, [pc, #52]	; (8004a10 <update_bpm+0xd8>)
 80049dc:	601a      	str	r2, [r3, #0]

	// adjust timer prescaler
	TIM6->PSC = (uint32_t) ps;
 80049de:	4a0a      	ldr	r2, [pc, #40]	; (8004a08 <update_bpm+0xd0>)
 80049e0:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <update_bpm+0xd8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80049e6:	bf00      	nop
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	2000042c 	.word	0x2000042c
 80049f0:	20000418 	.word	0x20000418
 80049f4:	2000000c 	.word	0x2000000c
 80049f8:	00000fff 	.word	0x00000fff
 80049fc:	20000010 	.word	0x20000010
 8004a00:	20000008 	.word	0x20000008
 8004a04:	42700000 	.word	0x42700000
 8004a08:	40001000 	.word	0x40001000
 8004a0c:	4b742400 	.word	0x4b742400
 8004a10:	20000510 	.word	0x20000510

08004a14 <update_display>:

void update_display(){
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af02      	add	r7, sp, #8
	lcd_clear();
 8004a1a:	f7ff fc81 	bl	8004320 <lcd_clear>

	// add some lines
	lcd_setLine(0,0,0,31,1);
 8004a1e:	2301      	movs	r3, #1
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	231f      	movs	r3, #31
 8004a24:	2200      	movs	r2, #0
 8004a26:	2100      	movs	r1, #0
 8004a28:	2000      	movs	r0, #0
 8004a2a:	f7ff fd33 	bl	8004494 <lcd_setLine>
	lcd_setLine(48,0,48,31,1);
 8004a2e:	2301      	movs	r3, #1
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	231f      	movs	r3, #31
 8004a34:	2230      	movs	r2, #48	; 0x30
 8004a36:	2100      	movs	r1, #0
 8004a38:	2030      	movs	r0, #48	; 0x30
 8004a3a:	f7ff fd2b 	bl	8004494 <lcd_setLine>
	lcd_setLine(127,0,127,31,1);
 8004a3e:	2301      	movs	r3, #1
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	231f      	movs	r3, #31
 8004a44:	227f      	movs	r2, #127	; 0x7f
 8004a46:	2100      	movs	r1, #0
 8004a48:	207f      	movs	r0, #127	; 0x7f
 8004a4a:	f7ff fd23 	bl	8004494 <lcd_setLine>
	lcd_setLine(0,15,127,15,1);
 8004a4e:	2301      	movs	r3, #1
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	230f      	movs	r3, #15
 8004a54:	227f      	movs	r2, #127	; 0x7f
 8004a56:	210f      	movs	r1, #15
 8004a58:	2000      	movs	r0, #0
 8004a5a:	f7ff fd1b 	bl	8004494 <lcd_setLine>

	// display volume
	sprintf((char*)vol_tbuff,"vol %d", vol);
 8004a5e:	4b55      	ldr	r3, [pc, #340]	; (8004bb4 <update_display+0x1a0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	4954      	ldr	r1, [pc, #336]	; (8004bb8 <update_display+0x1a4>)
 8004a66:	4855      	ldr	r0, [pc, #340]	; (8004bbc <update_display+0x1a8>)
 8004a68:	f001 f930 	bl	8005ccc <siprintf>
	lcd_setString(4,4,(const char*)vol_tbuff,LCD_FONT_8,false);
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	2300      	movs	r3, #0
 8004a72:	4a52      	ldr	r2, [pc, #328]	; (8004bbc <update_display+0x1a8>)
 8004a74:	2104      	movs	r1, #4
 8004a76:	2004      	movs	r0, #4
 8004a78:	f7ff fcda 	bl	8004430 <lcd_setString>

	// display bpm
	sprintf((char*)bpm_tbuff,"%d bpm", bpm);
 8004a7c:	4b50      	ldr	r3, [pc, #320]	; (8004bc0 <update_display+0x1ac>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	4950      	ldr	r1, [pc, #320]	; (8004bc4 <update_display+0x1b0>)
 8004a84:	4850      	ldr	r0, [pc, #320]	; (8004bc8 <update_display+0x1b4>)
 8004a86:	f001 f921 	bl	8005ccc <siprintf>
	lcd_setString(4,20,(const char*)bpm_tbuff, LCD_FONT_8,false);
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	2300      	movs	r3, #0
 8004a90:	4a4d      	ldr	r2, [pc, #308]	; (8004bc8 <update_display+0x1b4>)
 8004a92:	2114      	movs	r1, #20
 8004a94:	2004      	movs	r0, #4
 8004a96:	f7ff fccb 	bl	8004430 <lcd_setString>

	// display mode
	if (op_mode == STANDARD){
 8004a9a:	4b4c      	ldr	r3, [pc, #304]	; (8004bcc <update_display+0x1b8>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d105      	bne.n	8004aae <update_display+0x9a>
		sprintf((char*)mode_tbuff,"STANDARD");
 8004aa2:	4b4b      	ldr	r3, [pc, #300]	; (8004bd0 <update_display+0x1bc>)
 8004aa4:	4a4b      	ldr	r2, [pc, #300]	; (8004bd4 <update_display+0x1c0>)
 8004aa6:	ca07      	ldmia	r2, {r0, r1, r2}
 8004aa8:	c303      	stmia	r3!, {r0, r1}
 8004aaa:	701a      	strb	r2, [r3, #0]
 8004aac:	e00b      	b.n	8004ac6 <update_display+0xb2>
	}else if(op_mode == PRONOUNCED){
 8004aae:	4b47      	ldr	r3, [pc, #284]	; (8004bcc <update_display+0x1b8>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d107      	bne.n	8004ac6 <update_display+0xb2>
		sprintf((char*)mode_tbuff,"PRONOUNCED");
 8004ab6:	4b46      	ldr	r3, [pc, #280]	; (8004bd0 <update_display+0x1bc>)
 8004ab8:	4a47      	ldr	r2, [pc, #284]	; (8004bd8 <update_display+0x1c4>)
 8004aba:	ca07      	ldmia	r2, {r0, r1, r2}
 8004abc:	c303      	stmia	r3!, {r0, r1}
 8004abe:	801a      	strh	r2, [r3, #0]
 8004ac0:	3302      	adds	r3, #2
 8004ac2:	0c12      	lsrs	r2, r2, #16
 8004ac4:	701a      	strb	r2, [r3, #0]
	}
	lcd_setString(50,4,(const char*)mode_tbuff, LCD_FONT_8,false);
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	2300      	movs	r3, #0
 8004acc:	4a40      	ldr	r2, [pc, #256]	; (8004bd0 <update_display+0x1bc>)
 8004ace:	2104      	movs	r1, #4
 8004ad0:	2032      	movs	r0, #50	; 0x32
 8004ad2:	f7ff fcad 	bl	8004430 <lcd_setString>

	// display beats
	int min_dist = 55;
 8004ad6:	2337      	movs	r3, #55	; 0x37
 8004ad8:	60bb      	str	r3, [r7, #8]
	int max_dist = 140;
 8004ada:	238c      	movs	r3, #140	; 0x8c
 8004adc:	607b      	str	r3, [r7, #4]
	int pos = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	603b      	str	r3, [r7, #0]
	for (int b = 0; b < beats_per_rythm; ++b){
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	e02d      	b.n	8004b44 <update_display+0x130>
		pos = min_dist + (float)b / (float)beats_per_rythm * (max_dist - min_dist);
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	ee07 3a90 	vmov	s15, r3
 8004af8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004afc:	4b37      	ldr	r3, [pc, #220]	; (8004bdc <update_display+0x1c8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	ee07 3a90 	vmov	s15, r3
 8004b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b08:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b26:	ee17 3a90 	vmov	r3, s15
 8004b2a:	603b      	str	r3, [r7, #0]
		lcd_setString(pos, 18, "o", LCD_FONT_8,false);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	b2d8      	uxtb	r0, r3
 8004b30:	2300      	movs	r3, #0
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	2300      	movs	r3, #0
 8004b36:	4a2a      	ldr	r2, [pc, #168]	; (8004be0 <update_display+0x1cc>)
 8004b38:	2112      	movs	r1, #18
 8004b3a:	f7ff fc79 	bl	8004430 <lcd_setString>
	for (int b = 0; b < beats_per_rythm; ++b){
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3301      	adds	r3, #1
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	4b25      	ldr	r3, [pc, #148]	; (8004bdc <update_display+0x1c8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	dbcc      	blt.n	8004ae8 <update_display+0xd4>
	}

	// display beat indicator
	pos = min_dist + (float)(beat-1) / (float)beats_per_rythm * (max_dist - min_dist);
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	ee07 3a90 	vmov	s15, r3
 8004b54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b58:	4b22      	ldr	r3, [pc, #136]	; (8004be4 <update_display+0x1d0>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004b66:	4b1d      	ldr	r3, [pc, #116]	; (8004bdc <update_display+0x1c8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b72:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	ee07 3a90 	vmov	s15, r3
 8004b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b90:	ee17 3a90 	vmov	r3, s15
 8004b94:	603b      	str	r3, [r7, #0]
	lcd_setString(pos, 25, "*", LCD_FONT_8,false);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	b2d8      	uxtb	r0, r3
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	4a11      	ldr	r2, [pc, #68]	; (8004be8 <update_display+0x1d4>)
 8004ba2:	2119      	movs	r1, #25
 8004ba4:	f7ff fc44 	bl	8004430 <lcd_setString>

	lcd_show();
 8004ba8:	f7ff fd92 	bl	80046d0 <lcd_show>

}
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20000410 	.word	0x20000410
 8004bb8:	080074a8 	.word	0x080074a8
 8004bbc:	200006a8 	.word	0x200006a8
 8004bc0:	20000008 	.word	0x20000008
 8004bc4:	080074b0 	.word	0x080074b0
 8004bc8:	20000838 	.word	0x20000838
 8004bcc:	20000514 	.word	0x20000514
 8004bd0:	20000518 	.word	0x20000518
 8004bd4:	080074b8 	.word	0x080074b8
 8004bd8:	080074c4 	.word	0x080074c4
 8004bdc:	2000001c 	.word	0x2000001c
 8004be0:	080074d0 	.word	0x080074d0
 8004be4:	20000018 	.word	0x20000018
 8004be8:	080074d4 	.word	0x080074d4

08004bec <beat_machine>:

void beat_machine(){
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
	switch (op_mode){
 8004bf0:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <beat_machine+0x24>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <beat_machine+0x12>
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d003      	beq.n	8004c04 <beat_machine+0x18>

		case PRONOUNCED:
			pronounced_beatroutine();
			break;
	}
}
 8004bfc:	e005      	b.n	8004c0a <beat_machine+0x1e>
			standard_beatroutine();
 8004bfe:	f000 f809 	bl	8004c14 <standard_beatroutine>
			break;
 8004c02:	e002      	b.n	8004c0a <beat_machine+0x1e>
			pronounced_beatroutine();
 8004c04:	f000 f83e 	bl	8004c84 <pronounced_beatroutine>
			break;
 8004c08:	bf00      	nop
}
 8004c0a:	bf00      	nop
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20000514 	.word	0x20000514

08004c14 <standard_beatroutine>:

void standard_beatroutine(){
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
	int beep_time = 50;
 8004c1a:	2332      	movs	r3, #50	; 0x32
 8004c1c:	607b      	str	r3, [r7, #4]
	if (beat < beats_per_rythm){
 8004c1e:	4b16      	ldr	r3, [pc, #88]	; (8004c78 <standard_beatroutine+0x64>)
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	4b16      	ldr	r3, [pc, #88]	; (8004c7c <standard_beatroutine+0x68>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	da12      	bge.n	8004c50 <standard_beatroutine+0x3c>
		beep_and_blink(beep_time, 1000, vol);
 8004c2a:	4b15      	ldr	r3, [pc, #84]	; (8004c80 <standard_beatroutine+0x6c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	ee07 3a90 	vmov	s15, r3
 8004c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c36:	eeb0 0a67 	vmov.f32	s0, s15
 8004c3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7ff fdb6 	bl	80047b0 <beep_and_blink>
		beat += 1;
 8004c44:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <standard_beatroutine+0x64>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	4a0b      	ldr	r2, [pc, #44]	; (8004c78 <standard_beatroutine+0x64>)
 8004c4c:	6013      	str	r3, [r2, #0]
	}else{
		beep_and_blink(beep_time, 1000, vol);
		beat = 1;
	}
}
 8004c4e:	e00f      	b.n	8004c70 <standard_beatroutine+0x5c>
		beep_and_blink(beep_time, 1000, vol);
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <standard_beatroutine+0x6c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	ee07 3a90 	vmov	s15, r3
 8004c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8004c60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff fda3 	bl	80047b0 <beep_and_blink>
		beat = 1;
 8004c6a:	4b03      	ldr	r3, [pc, #12]	; (8004c78 <standard_beatroutine+0x64>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20000018 	.word	0x20000018
 8004c7c:	2000001c 	.word	0x2000001c
 8004c80:	20000410 	.word	0x20000410

08004c84 <pronounced_beatroutine>:

void pronounced_beatroutine(){
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
	int beep_time = 50;
 8004c8a:	2332      	movs	r3, #50	; 0x32
 8004c8c:	607b      	str	r3, [r7, #4]
	if (beat < beats_per_rythm){
 8004c8e:	4b16      	ldr	r3, [pc, #88]	; (8004ce8 <pronounced_beatroutine+0x64>)
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	4b16      	ldr	r3, [pc, #88]	; (8004cec <pronounced_beatroutine+0x68>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	da12      	bge.n	8004cc0 <pronounced_beatroutine+0x3c>
		beat += 1;
 8004c9a:	4b13      	ldr	r3, [pc, #76]	; (8004ce8 <pronounced_beatroutine+0x64>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	4a11      	ldr	r2, [pc, #68]	; (8004ce8 <pronounced_beatroutine+0x64>)
 8004ca2:	6013      	str	r3, [r2, #0]
		beep_and_blink(beep_time, 1000, vol);
 8004ca4:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <pronounced_beatroutine+0x6c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	ee07 3a90 	vmov	s15, r3
 8004cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8004cb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff fd79 	bl	80047b0 <beep_and_blink>
	}else{
		beat = 1;
		beep_and_blink(beep_time, 2000, vol);
	}
}
 8004cbe:	e00f      	b.n	8004ce0 <pronounced_beatroutine+0x5c>
		beat = 1;
 8004cc0:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <pronounced_beatroutine+0x64>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
		beep_and_blink(beep_time, 2000, vol);
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <pronounced_beatroutine+0x6c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8004cd6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff fd68 	bl	80047b0 <beep_and_blink>
}
 8004ce0:	bf00      	nop
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000018 	.word	0x20000018
 8004cec:	2000001c 	.word	0x2000001c
 8004cf0:	20000410 	.word	0x20000410

08004cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004cf8:	f7fc f916 	bl	8000f28 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004cfc:	f000 f844 	bl	8004d88 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004d00:	f7ff f8da 	bl	8003eb8 <MX_GPIO_Init>
	MX_ADC1_Init();
 8004d04:	f7fe ffc0 	bl	8003c88 <MX_ADC1_Init>
	MX_ADC2_Init();
 8004d08:	f7ff f810 	bl	8003d2c <MX_ADC2_Init>
	MX_SPI1_Init();
 8004d0c:	f000 f8ae 	bl	8004e6c <MX_SPI1_Init>
	MX_I2C1_Init();
 8004d10:	f7ff f9ae 	bl	8004070 <MX_I2C1_Init>
	MX_TIM2_Init(100);
 8004d14:	2064      	movs	r0, #100	; 0x64
 8004d16:	f000 f9ff 	bl	8005118 <MX_TIM2_Init>
	MX_TIM6_Init();
 8004d1a:	f000 fa75 	bl	8005208 <MX_TIM6_Init>

	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8004d1e:	2201      	movs	r2, #1
 8004d20:	2110      	movs	r1, #16
 8004d22:	4813      	ldr	r0, [pc, #76]	; (8004d70 <main+0x7c>)
 8004d24:	f7fd f834 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8004d28:	2201      	movs	r2, #1
 8004d2a:	2180      	movs	r1, #128	; 0x80
 8004d2c:	4811      	ldr	r0, [pc, #68]	; (8004d74 <main+0x80>)
 8004d2e:	f7fd f82f 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8004d32:	2201      	movs	r2, #1
 8004d34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d38:	480f      	ldr	r0, [pc, #60]	; (8004d78 <main+0x84>)
 8004d3a:	f7fd f829 	bl	8001d90 <HAL_GPIO_WritePin>

	// Initialise LCD and show "Welcome" top/left justified
	sendData(0xA5);
 8004d3e:	20a5      	movs	r0, #165	; 0xa5
 8004d40:	f7ff fa66 	bl	8004210 <sendData>
	lcd_init();
 8004d44:	f7ff fa91 	bl	800426a <lcd_init>

	// start PWM and timer interrupt
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004d48:	2108      	movs	r1, #8
 8004d4a:	480c      	ldr	r0, [pc, #48]	; (8004d7c <main+0x88>)
 8004d4c:	f7fe f8f0 	bl	8002f30 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 8004d50:	480b      	ldr	r0, [pc, #44]	; (8004d80 <main+0x8c>)
 8004d52:	f7fe f894 	bl	8002e7e <HAL_TIM_Base_Start_IT>

	op_mode = STANDARD;
 8004d56:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <main+0x90>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		update_volume();
 8004d5c:	f7ff fdb4 	bl	80048c8 <update_volume>
		update_bpm();
 8004d60:	f7ff fdea 	bl	8004938 <update_bpm>
		update_display();
 8004d64:	f7ff fe56 	bl	8004a14 <update_display>
		HAL_Delay(5);
 8004d68:	2005      	movs	r0, #5
 8004d6a:	f7fc f94f 	bl	800100c <HAL_Delay>
		update_volume();
 8004d6e:	e7f5      	b.n	8004d5c <main+0x68>
 8004d70:	40020400 	.word	0x40020400
 8004d74:	40020800 	.word	0x40020800
 8004d78:	40020000 	.word	0x40020000
 8004d7c:	20000a60 	.word	0x20000a60
 8004d80:	20000a20 	.word	0x20000a20
 8004d84:	20000514 	.word	0x20000514

08004d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b094      	sub	sp, #80	; 0x50
 8004d8c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d8e:	f107 031c 	add.w	r3, r7, #28
 8004d92:	2234      	movs	r2, #52	; 0x34
 8004d94:	2100      	movs	r1, #0
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fb34 	bl	8005404 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d9c:	f107 0308 	add.w	r3, r7, #8
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	605a      	str	r2, [r3, #4]
 8004da6:	609a      	str	r2, [r3, #8]
 8004da8:	60da      	str	r2, [r3, #12]
 8004daa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8004dac:	2300      	movs	r3, #0
 8004dae:	607b      	str	r3, [r7, #4]
 8004db0:	4b23      	ldr	r3, [pc, #140]	; (8004e40 <SystemClock_Config+0xb8>)
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	4a22      	ldr	r2, [pc, #136]	; (8004e40 <SystemClock_Config+0xb8>)
 8004db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dba:	6413      	str	r3, [r2, #64]	; 0x40
 8004dbc:	4b20      	ldr	r3, [pc, #128]	; (8004e40 <SystemClock_Config+0xb8>)
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004dc8:	2300      	movs	r3, #0
 8004dca:	603b      	str	r3, [r7, #0]
 8004dcc:	4b1d      	ldr	r3, [pc, #116]	; (8004e44 <SystemClock_Config+0xbc>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004dd4:	4a1b      	ldr	r2, [pc, #108]	; (8004e44 <SystemClock_Config+0xbc>)
 8004dd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	4b19      	ldr	r3, [pc, #100]	; (8004e44 <SystemClock_Config+0xbc>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004de4:	603b      	str	r3, [r7, #0]
 8004de6:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004de8:	2302      	movs	r3, #2
 8004dea:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004dec:	2301      	movs	r3, #1
 8004dee:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004df0:	2310      	movs	r3, #16
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004df4:	2300      	movs	r3, #0
 8004df6:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004df8:	f107 031c 	add.w	r3, r7, #28
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fd fb75 	bl	80024ec <HAL_RCC_OscConfig>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <SystemClock_Config+0x84>
	{
	Error_Handler();
 8004e08:	f000 f81e 	bl	8004e48 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e0c:	230f      	movs	r3, #15
 8004e0e:	60bb      	str	r3, [r7, #8]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004e10:	2300      	movs	r3, #0
 8004e12:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e14:	2300      	movs	r3, #0
 8004e16:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004e20:	f107 0308 	add.w	r3, r7, #8
 8004e24:	2100      	movs	r1, #0
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fd f90c 	bl	8002044 <HAL_RCC_ClockConfig>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <SystemClock_Config+0xae>
	{
	Error_Handler();
 8004e32:	f000 f809 	bl	8004e48 <Error_Handler>
	}
}
 8004e36:	bf00      	nop
 8004e38:	3750      	adds	r7, #80	; 0x50
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	40023800 	.word	0x40023800
 8004e44:	40007000 	.word	0x40007000

08004e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	lcd_setString(4,16,"	ERROR OCCURED	",LCD_FONT_8,false);
 8004e4e:	2300      	movs	r3, #0
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	2300      	movs	r3, #0
 8004e54:	4a04      	ldr	r2, [pc, #16]	; (8004e68 <Error_Handler+0x20>)
 8004e56:	2110      	movs	r1, #16
 8004e58:	2004      	movs	r0, #4
 8004e5a:	f7ff fae9 	bl	8004430 <lcd_setString>
	lcd_show();
 8004e5e:	f7ff fc37 	bl	80046d0 <lcd_show>
	/* USER CODE END Error_Handler_Debug */
}
 8004e62:	bf00      	nop
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	080074d8 	.word	0x080074d8

08004e6c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8004e70:	4b17      	ldr	r3, [pc, #92]	; (8004ed0 <MX_SPI1_Init+0x64>)
 8004e72:	4a18      	ldr	r2, [pc, #96]	; (8004ed4 <MX_SPI1_Init+0x68>)
 8004e74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004e76:	4b16      	ldr	r3, [pc, #88]	; (8004ed0 <MX_SPI1_Init+0x64>)
 8004e78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004e7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004e7e:	4b14      	ldr	r3, [pc, #80]	; (8004ed0 <MX_SPI1_Init+0x64>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e84:	4b12      	ldr	r3, [pc, #72]	; (8004ed0 <MX_SPI1_Init+0x64>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e8a:	4b11      	ldr	r3, [pc, #68]	; (8004ed0 <MX_SPI1_Init+0x64>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004e90:	4b0f      	ldr	r3, [pc, #60]	; (8004ed0 <MX_SPI1_Init+0x64>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004e96:	4b0e      	ldr	r3, [pc, #56]	; (8004ed0 <MX_SPI1_Init+0x64>)
 8004e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004e9e:	4b0c      	ldr	r3, [pc, #48]	; (8004ed0 <MX_SPI1_Init+0x64>)
 8004ea0:	2210      	movs	r2, #16
 8004ea2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ea4:	4b0a      	ldr	r3, [pc, #40]	; (8004ed0 <MX_SPI1_Init+0x64>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004eaa:	4b09      	ldr	r3, [pc, #36]	; (8004ed0 <MX_SPI1_Init+0x64>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eb0:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <MX_SPI1_Init+0x64>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <MX_SPI1_Init+0x64>)
 8004eb8:	220a      	movs	r2, #10
 8004eba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004ebc:	4804      	ldr	r0, [pc, #16]	; (8004ed0 <MX_SPI1_Init+0x64>)
 8004ebe:	f7fd fd6f 	bl	80029a0 <HAL_SPI_Init>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004ec8:	f7ff ffbe 	bl	8004e48 <Error_Handler>
  }

}
 8004ecc:	bf00      	nop
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	200009c8 	.word	0x200009c8
 8004ed4:	40013000 	.word	0x40013000

08004ed8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08a      	sub	sp, #40	; 0x28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ee0:	f107 0314 	add.w	r3, r7, #20
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	605a      	str	r2, [r3, #4]
 8004eea:	609a      	str	r2, [r3, #8]
 8004eec:	60da      	str	r2, [r3, #12]
 8004eee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a19      	ldr	r2, [pc, #100]	; (8004f5c <HAL_SPI_MspInit+0x84>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d12b      	bne.n	8004f52 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004efa:	2300      	movs	r3, #0
 8004efc:	613b      	str	r3, [r7, #16]
 8004efe:	4b18      	ldr	r3, [pc, #96]	; (8004f60 <HAL_SPI_MspInit+0x88>)
 8004f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f02:	4a17      	ldr	r2, [pc, #92]	; (8004f60 <HAL_SPI_MspInit+0x88>)
 8004f04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f08:	6453      	str	r3, [r2, #68]	; 0x44
 8004f0a:	4b15      	ldr	r3, [pc, #84]	; (8004f60 <HAL_SPI_MspInit+0x88>)
 8004f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	4b11      	ldr	r3, [pc, #68]	; (8004f60 <HAL_SPI_MspInit+0x88>)
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	4a10      	ldr	r2, [pc, #64]	; (8004f60 <HAL_SPI_MspInit+0x88>)
 8004f20:	f043 0301 	orr.w	r3, r3, #1
 8004f24:	6313      	str	r3, [r2, #48]	; 0x30
 8004f26:	4b0e      	ldr	r3, [pc, #56]	; (8004f60 <HAL_SPI_MspInit+0x88>)
 8004f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 8004f32:	23a0      	movs	r3, #160	; 0xa0
 8004f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f36:	2302      	movs	r3, #2
 8004f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004f42:	2305      	movs	r3, #5
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f46:	f107 0314 	add.w	r3, r7, #20
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4805      	ldr	r0, [pc, #20]	; (8004f64 <HAL_SPI_MspInit+0x8c>)
 8004f4e:	f7fc fd8d 	bl	8001a6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004f52:	bf00      	nop
 8004f54:	3728      	adds	r7, #40	; 0x28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40013000 	.word	0x40013000
 8004f60:	40023800 	.word	0x40023800
 8004f64:	40020000 	.word	0x40020000

08004f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f6e:	2300      	movs	r3, #0
 8004f70:	607b      	str	r3, [r7, #4]
 8004f72:	4b10      	ldr	r3, [pc, #64]	; (8004fb4 <HAL_MspInit+0x4c>)
 8004f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f76:	4a0f      	ldr	r2, [pc, #60]	; (8004fb4 <HAL_MspInit+0x4c>)
 8004f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <HAL_MspInit+0x4c>)
 8004f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f86:	607b      	str	r3, [r7, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	603b      	str	r3, [r7, #0]
 8004f8e:	4b09      	ldr	r3, [pc, #36]	; (8004fb4 <HAL_MspInit+0x4c>)
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	4a08      	ldr	r2, [pc, #32]	; (8004fb4 <HAL_MspInit+0x4c>)
 8004f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f98:	6413      	str	r3, [r2, #64]	; 0x40
 8004f9a:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <HAL_MspInit+0x4c>)
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa2:	603b      	str	r3, [r7, #0]
 8004fa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40023800 	.word	0x40023800

08004fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004fbc:	bf00      	nop
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fca:	e7fe      	b.n	8004fca <HardFault_Handler+0x4>

08004fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fd0:	e7fe      	b.n	8004fd0 <MemManage_Handler+0x4>

08004fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fd6:	e7fe      	b.n	8004fd6 <BusFault_Handler+0x4>

08004fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fdc:	e7fe      	b.n	8004fdc <UsageFault_Handler+0x4>

08004fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004fe2:	bf00      	nop
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ff0:	bf00      	nop
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ffe:	bf00      	nop
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800500c:	f7fb ffde 	bl	8000fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005010:	bf00      	nop
 8005012:	bd80      	pop	{r7, pc}

08005014 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005018:	2001      	movs	r0, #1
 800501a:	f7fc fed3 	bl	8001dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800501e:	bf00      	nop
 8005020:	bd80      	pop	{r7, pc}

08005022 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005026:	2010      	movs	r0, #16
 8005028:	f7fc fecc 	bl	8001dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800502c:	bf00      	nop
 800502e:	bd80      	pop	{r7, pc}

08005030 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005034:	2020      	movs	r0, #32
 8005036:	f7fc fec5 	bl	8001dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800503a:	bf00      	nop
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005044:	4802      	ldr	r0, [pc, #8]	; (8005050 <TIM6_DAC_IRQHandler+0x10>)
 8005046:	f7fe f809 	bl	800305c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800504a:	bf00      	nop
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20000a20 	.word	0x20000a20

08005054 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800505c:	4b11      	ldr	r3, [pc, #68]	; (80050a4 <_sbrk+0x50>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d102      	bne.n	800506a <_sbrk+0x16>
		heap_end = &end;
 8005064:	4b0f      	ldr	r3, [pc, #60]	; (80050a4 <_sbrk+0x50>)
 8005066:	4a10      	ldr	r2, [pc, #64]	; (80050a8 <_sbrk+0x54>)
 8005068:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800506a:	4b0e      	ldr	r3, [pc, #56]	; (80050a4 <_sbrk+0x50>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005070:	4b0c      	ldr	r3, [pc, #48]	; (80050a4 <_sbrk+0x50>)
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4413      	add	r3, r2
 8005078:	466a      	mov	r2, sp
 800507a:	4293      	cmp	r3, r2
 800507c:	d907      	bls.n	800508e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800507e:	f000 f997 	bl	80053b0 <__errno>
 8005082:	4602      	mov	r2, r0
 8005084:	230c      	movs	r3, #12
 8005086:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800508c:	e006      	b.n	800509c <_sbrk+0x48>
	}

	heap_end += incr;
 800508e:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <_sbrk+0x50>)
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4413      	add	r3, r2
 8005096:	4a03      	ldr	r2, [pc, #12]	; (80050a4 <_sbrk+0x50>)
 8005098:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800509a:	68fb      	ldr	r3, [r7, #12]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	2000041c 	.word	0x2000041c
 80050a8:	20000aa8 	.word	0x20000aa8

080050ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050b0:	4b16      	ldr	r3, [pc, #88]	; (800510c <SystemInit+0x60>)
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b6:	4a15      	ldr	r2, [pc, #84]	; (800510c <SystemInit+0x60>)
 80050b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80050c0:	4b13      	ldr	r3, [pc, #76]	; (8005110 <SystemInit+0x64>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a12      	ldr	r2, [pc, #72]	; (8005110 <SystemInit+0x64>)
 80050c6:	f043 0301 	orr.w	r3, r3, #1
 80050ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80050cc:	4b10      	ldr	r3, [pc, #64]	; (8005110 <SystemInit+0x64>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80050d2:	4b0f      	ldr	r3, [pc, #60]	; (8005110 <SystemInit+0x64>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a0e      	ldr	r2, [pc, #56]	; (8005110 <SystemInit+0x64>)
 80050d8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80050dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80050e2:	4b0b      	ldr	r3, [pc, #44]	; (8005110 <SystemInit+0x64>)
 80050e4:	4a0b      	ldr	r2, [pc, #44]	; (8005114 <SystemInit+0x68>)
 80050e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80050e8:	4b09      	ldr	r3, [pc, #36]	; (8005110 <SystemInit+0x64>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a08      	ldr	r2, [pc, #32]	; (8005110 <SystemInit+0x64>)
 80050ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80050f4:	4b06      	ldr	r3, [pc, #24]	; (8005110 <SystemInit+0x64>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80050fa:	4b04      	ldr	r3, [pc, #16]	; (800510c <SystemInit+0x60>)
 80050fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005100:	609a      	str	r2, [r3, #8]
#endif
}
 8005102:	bf00      	nop
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	e000ed00 	.word	0xe000ed00
 8005110:	40023800 	.word	0x40023800
 8005114:	24003010 	.word	0x24003010

08005118 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM2_Init(uint32_t prescaler)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b090      	sub	sp, #64	; 0x40
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005120:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	605a      	str	r2, [r3, #4]
 800512a:	609a      	str	r2, [r3, #8]
 800512c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800512e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005132:	2200      	movs	r2, #0
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005138:	f107 030c 	add.w	r3, r7, #12
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	605a      	str	r2, [r3, #4]
 8005142:	609a      	str	r2, [r3, #8]
 8005144:	60da      	str	r2, [r3, #12]
 8005146:	611a      	str	r2, [r3, #16]
 8005148:	615a      	str	r2, [r3, #20]
 800514a:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800514c:	4b2d      	ldr	r3, [pc, #180]	; (8005204 <MX_TIM2_Init+0xec>)
 800514e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005152:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = prescaler;
 8005154:	4a2b      	ldr	r2, [pc, #172]	; (8005204 <MX_TIM2_Init+0xec>)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800515a:	4b2a      	ldr	r3, [pc, #168]	; (8005204 <MX_TIM2_Init+0xec>)
 800515c:	2200      	movs	r2, #0
 800515e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 320;
 8005160:	4b28      	ldr	r3, [pc, #160]	; (8005204 <MX_TIM2_Init+0xec>)
 8005162:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005166:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005168:	4b26      	ldr	r3, [pc, #152]	; (8005204 <MX_TIM2_Init+0xec>)
 800516a:	2200      	movs	r2, #0
 800516c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800516e:	4b25      	ldr	r3, [pc, #148]	; (8005204 <MX_TIM2_Init+0xec>)
 8005170:	2200      	movs	r2, #0
 8005172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005174:	4823      	ldr	r0, [pc, #140]	; (8005204 <MX_TIM2_Init+0xec>)
 8005176:	f7fd fe57 	bl	8002e28 <HAL_TIM_Base_Init>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8005180:	f7ff fe62 	bl	8004e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005188:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800518a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800518e:	4619      	mov	r1, r3
 8005190:	481c      	ldr	r0, [pc, #112]	; (8005204 <MX_TIM2_Init+0xec>)
 8005192:	f7fe f931 	bl	80033f8 <HAL_TIM_ConfigClockSource>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800519c:	f7ff fe54 	bl	8004e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80051a0:	4818      	ldr	r0, [pc, #96]	; (8005204 <MX_TIM2_Init+0xec>)
 80051a2:	f7fd fe90 	bl	8002ec6 <HAL_TIM_PWM_Init>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80051ac:	f7ff fe4c 	bl	8004e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051b0:	2300      	movs	r3, #0
 80051b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051b4:	2300      	movs	r3, #0
 80051b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80051b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051bc:	4619      	mov	r1, r3
 80051be:	4811      	ldr	r0, [pc, #68]	; (8005204 <MX_TIM2_Init+0xec>)
 80051c0:	f7fe fd09 	bl	8003bd6 <HAL_TIMEx_MasterConfigSynchronization>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80051ca:	f7ff fe3d 	bl	8004e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80051ce:	2360      	movs	r3, #96	; 0x60
 80051d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80051d6:	2300      	movs	r3, #0
 80051d8:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80051da:	2300      	movs	r3, #0
 80051dc:	61fb      	str	r3, [r7, #28]

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80051de:	f107 030c 	add.w	r3, r7, #12
 80051e2:	2208      	movs	r2, #8
 80051e4:	4619      	mov	r1, r3
 80051e6:	4807      	ldr	r0, [pc, #28]	; (8005204 <MX_TIM2_Init+0xec>)
 80051e8:	f7fe f840 	bl	800326c <HAL_TIM_PWM_ConfigChannel>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 80051f2:	f7ff fe29 	bl	8004e48 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80051f6:	4803      	ldr	r0, [pc, #12]	; (8005204 <MX_TIM2_Init+0xec>)
 80051f8:	f000 f878 	bl	80052ec <HAL_TIM_MspPostInit>

}
 80051fc:	bf00      	nop
 80051fe:	3740      	adds	r7, #64	; 0x40
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	20000a60 	.word	0x20000a60

08005208 <MX_TIM6_Init>:

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800520e:	463b      	mov	r3, r7
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	605a      	str	r2, [r3, #4]

	htim6.Instance = TIM6;
 8005216:	4b15      	ldr	r3, [pc, #84]	; (800526c <MX_TIM6_Init+0x64>)
 8005218:	4a15      	ldr	r2, [pc, #84]	; (8005270 <MX_TIM6_Init+0x68>)
 800521a:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 3199;
 800521c:	4b13      	ldr	r3, [pc, #76]	; (800526c <MX_TIM6_Init+0x64>)
 800521e:	f640 427f 	movw	r2, #3199	; 0xc7f
 8005222:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005224:	4b11      	ldr	r3, [pc, #68]	; (800526c <MX_TIM6_Init+0x64>)
 8005226:	2200      	movs	r2, #0
 8005228:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 4999;
 800522a:	4b10      	ldr	r3, [pc, #64]	; (800526c <MX_TIM6_Init+0x64>)
 800522c:	f241 3287 	movw	r2, #4999	; 0x1387
 8005230:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005232:	4b0e      	ldr	r3, [pc, #56]	; (800526c <MX_TIM6_Init+0x64>)
 8005234:	2200      	movs	r2, #0
 8005236:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005238:	480c      	ldr	r0, [pc, #48]	; (800526c <MX_TIM6_Init+0x64>)
 800523a:	f7fd fdf5 	bl	8002e28 <HAL_TIM_Base_Init>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <MX_TIM6_Init+0x40>
	{
		Error_Handler();
 8005244:	f7ff fe00 	bl	8004e48 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005248:	2300      	movs	r3, #0
 800524a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800524c:	2300      	movs	r3, #0
 800524e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005250:	463b      	mov	r3, r7
 8005252:	4619      	mov	r1, r3
 8005254:	4805      	ldr	r0, [pc, #20]	; (800526c <MX_TIM6_Init+0x64>)
 8005256:	f7fe fcbe 	bl	8003bd6 <HAL_TIMEx_MasterConfigSynchronization>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <MX_TIM6_Init+0x5c>
	{
		Error_Handler();
 8005260:	f7ff fdf2 	bl	8004e48 <Error_Handler>
	}
}
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	20000a20 	.word	0x20000a20
 8005270:	40001000 	.word	0x40001000

08005274 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  if(tim_baseHandle->Instance==TIM2)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005284:	d10e      	bne.n	80052a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	4b16      	ldr	r3, [pc, #88]	; (80052e4 <HAL_TIM_Base_MspInit+0x70>)
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	4a15      	ldr	r2, [pc, #84]	; (80052e4 <HAL_TIM_Base_MspInit+0x70>)
 8005290:	f043 0301 	orr.w	r3, r3, #1
 8005294:	6413      	str	r3, [r2, #64]	; 0x40
 8005296:	4b13      	ldr	r3, [pc, #76]	; (80052e4 <HAL_TIM_Base_MspInit+0x70>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80052a2:	e01a      	b.n	80052da <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a0f      	ldr	r2, [pc, #60]	; (80052e8 <HAL_TIM_Base_MspInit+0x74>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d115      	bne.n	80052da <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80052ae:	2300      	movs	r3, #0
 80052b0:	60bb      	str	r3, [r7, #8]
 80052b2:	4b0c      	ldr	r3, [pc, #48]	; (80052e4 <HAL_TIM_Base_MspInit+0x70>)
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	4a0b      	ldr	r2, [pc, #44]	; (80052e4 <HAL_TIM_Base_MspInit+0x70>)
 80052b8:	f043 0310 	orr.w	r3, r3, #16
 80052bc:	6413      	str	r3, [r2, #64]	; 0x40
 80052be:	4b09      	ldr	r3, [pc, #36]	; (80052e4 <HAL_TIM_Base_MspInit+0x70>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f003 0310 	and.w	r3, r3, #16
 80052c6:	60bb      	str	r3, [r7, #8]
 80052c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 80052ca:	2200      	movs	r2, #0
 80052cc:	2102      	movs	r1, #2
 80052ce:	2036      	movs	r0, #54	; 0x36
 80052d0:	f7fc fb95 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80052d4:	2036      	movs	r0, #54	; 0x36
 80052d6:	f7fc fbae 	bl	8001a36 <HAL_NVIC_EnableIRQ>
}
 80052da:	bf00      	nop
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40023800 	.word	0x40023800
 80052e8:	40001000 	.word	0x40001000

080052ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052f4:	f107 030c 	add.w	r3, r7, #12
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	605a      	str	r2, [r3, #4]
 80052fe:	609a      	str	r2, [r3, #8]
 8005300:	60da      	str	r2, [r3, #12]
 8005302:	611a      	str	r2, [r3, #16]

  if(timHandle->Instance==TIM2)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530c:	d11e      	bne.n	800534c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800530e:	2300      	movs	r3, #0
 8005310:	60bb      	str	r3, [r7, #8]
 8005312:	4b10      	ldr	r3, [pc, #64]	; (8005354 <HAL_TIM_MspPostInit+0x68>)
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005316:	4a0f      	ldr	r2, [pc, #60]	; (8005354 <HAL_TIM_MspPostInit+0x68>)
 8005318:	f043 0302 	orr.w	r3, r3, #2
 800531c:	6313      	str	r3, [r2, #48]	; 0x30
 800531e:	4b0d      	ldr	r3, [pc, #52]	; (8005354 <HAL_TIM_MspPostInit+0x68>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	60bb      	str	r3, [r7, #8]
 8005328:	68bb      	ldr	r3, [r7, #8]

    /**TIM2 GPIO Configuration
    PB10    ------> TIM2_CH3
    */

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800532a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800532e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005330:	2302      	movs	r3, #2
 8005332:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005338:	2300      	movs	r3, #0
 800533a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800533c:	2301      	movs	r3, #1
 800533e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005340:	f107 030c 	add.w	r3, r7, #12
 8005344:	4619      	mov	r1, r3
 8005346:	4804      	ldr	r0, [pc, #16]	; (8005358 <HAL_TIM_MspPostInit+0x6c>)
 8005348:	f7fc fb90 	bl	8001a6c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
}
 800534c:	bf00      	nop
 800534e:	3720      	adds	r7, #32
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40023800 	.word	0x40023800
 8005358:	40020400 	.word	0x40020400

0800535c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800535c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005394 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005360:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005362:	e003      	b.n	800536c <LoopCopyDataInit>

08005364 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005364:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005366:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005368:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800536a:	3104      	adds	r1, #4

0800536c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800536c:	480b      	ldr	r0, [pc, #44]	; (800539c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800536e:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005370:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005372:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005374:	d3f6      	bcc.n	8005364 <CopyDataInit>
  ldr  r2, =_sbss
 8005376:	4a0b      	ldr	r2, [pc, #44]	; (80053a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005378:	e002      	b.n	8005380 <LoopFillZerobss>

0800537a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800537a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800537c:	f842 3b04 	str.w	r3, [r2], #4

08005380 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005380:	4b09      	ldr	r3, [pc, #36]	; (80053a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005382:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005384:	d3f9      	bcc.n	800537a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005386:	f7ff fe91 	bl	80050ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800538a:	f000 f817 	bl	80053bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800538e:	f7ff fcb1 	bl	8004cf4 <main>
  bx  lr    
 8005392:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005394:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005398:	08007af0 	.word	0x08007af0
  ldr  r0, =_sdata
 800539c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80053a0:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 80053a4:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 80053a8:	20000aa4 	.word	0x20000aa4

080053ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053ac:	e7fe      	b.n	80053ac <ADC_IRQHandler>
	...

080053b0 <__errno>:
 80053b0:	4b01      	ldr	r3, [pc, #4]	; (80053b8 <__errno+0x8>)
 80053b2:	6818      	ldr	r0, [r3, #0]
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	20000024 	.word	0x20000024

080053bc <__libc_init_array>:
 80053bc:	b570      	push	{r4, r5, r6, lr}
 80053be:	4e0d      	ldr	r6, [pc, #52]	; (80053f4 <__libc_init_array+0x38>)
 80053c0:	4c0d      	ldr	r4, [pc, #52]	; (80053f8 <__libc_init_array+0x3c>)
 80053c2:	1ba4      	subs	r4, r4, r6
 80053c4:	10a4      	asrs	r4, r4, #2
 80053c6:	2500      	movs	r5, #0
 80053c8:	42a5      	cmp	r5, r4
 80053ca:	d109      	bne.n	80053e0 <__libc_init_array+0x24>
 80053cc:	4e0b      	ldr	r6, [pc, #44]	; (80053fc <__libc_init_array+0x40>)
 80053ce:	4c0c      	ldr	r4, [pc, #48]	; (8005400 <__libc_init_array+0x44>)
 80053d0:	f002 f85e 	bl	8007490 <_init>
 80053d4:	1ba4      	subs	r4, r4, r6
 80053d6:	10a4      	asrs	r4, r4, #2
 80053d8:	2500      	movs	r5, #0
 80053da:	42a5      	cmp	r5, r4
 80053dc:	d105      	bne.n	80053ea <__libc_init_array+0x2e>
 80053de:	bd70      	pop	{r4, r5, r6, pc}
 80053e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053e4:	4798      	blx	r3
 80053e6:	3501      	adds	r5, #1
 80053e8:	e7ee      	b.n	80053c8 <__libc_init_array+0xc>
 80053ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053ee:	4798      	blx	r3
 80053f0:	3501      	adds	r5, #1
 80053f2:	e7f2      	b.n	80053da <__libc_init_array+0x1e>
 80053f4:	08007ae8 	.word	0x08007ae8
 80053f8:	08007ae8 	.word	0x08007ae8
 80053fc:	08007ae8 	.word	0x08007ae8
 8005400:	08007aec 	.word	0x08007aec

08005404 <memset>:
 8005404:	4402      	add	r2, r0
 8005406:	4603      	mov	r3, r0
 8005408:	4293      	cmp	r3, r2
 800540a:	d100      	bne.n	800540e <memset+0xa>
 800540c:	4770      	bx	lr
 800540e:	f803 1b01 	strb.w	r1, [r3], #1
 8005412:	e7f9      	b.n	8005408 <memset+0x4>

08005414 <__cvt>:
 8005414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005418:	ec55 4b10 	vmov	r4, r5, d0
 800541c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800541e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005422:	2d00      	cmp	r5, #0
 8005424:	460e      	mov	r6, r1
 8005426:	4691      	mov	r9, r2
 8005428:	4619      	mov	r1, r3
 800542a:	bfb8      	it	lt
 800542c:	4622      	movlt	r2, r4
 800542e:	462b      	mov	r3, r5
 8005430:	f027 0720 	bic.w	r7, r7, #32
 8005434:	bfbb      	ittet	lt
 8005436:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800543a:	461d      	movlt	r5, r3
 800543c:	2300      	movge	r3, #0
 800543e:	232d      	movlt	r3, #45	; 0x2d
 8005440:	bfb8      	it	lt
 8005442:	4614      	movlt	r4, r2
 8005444:	2f46      	cmp	r7, #70	; 0x46
 8005446:	700b      	strb	r3, [r1, #0]
 8005448:	d004      	beq.n	8005454 <__cvt+0x40>
 800544a:	2f45      	cmp	r7, #69	; 0x45
 800544c:	d100      	bne.n	8005450 <__cvt+0x3c>
 800544e:	3601      	adds	r6, #1
 8005450:	2102      	movs	r1, #2
 8005452:	e000      	b.n	8005456 <__cvt+0x42>
 8005454:	2103      	movs	r1, #3
 8005456:	ab03      	add	r3, sp, #12
 8005458:	9301      	str	r3, [sp, #4]
 800545a:	ab02      	add	r3, sp, #8
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	4632      	mov	r2, r6
 8005460:	4653      	mov	r3, sl
 8005462:	ec45 4b10 	vmov	d0, r4, r5
 8005466:	f000 fcdf 	bl	8005e28 <_dtoa_r>
 800546a:	2f47      	cmp	r7, #71	; 0x47
 800546c:	4680      	mov	r8, r0
 800546e:	d102      	bne.n	8005476 <__cvt+0x62>
 8005470:	f019 0f01 	tst.w	r9, #1
 8005474:	d026      	beq.n	80054c4 <__cvt+0xb0>
 8005476:	2f46      	cmp	r7, #70	; 0x46
 8005478:	eb08 0906 	add.w	r9, r8, r6
 800547c:	d111      	bne.n	80054a2 <__cvt+0x8e>
 800547e:	f898 3000 	ldrb.w	r3, [r8]
 8005482:	2b30      	cmp	r3, #48	; 0x30
 8005484:	d10a      	bne.n	800549c <__cvt+0x88>
 8005486:	2200      	movs	r2, #0
 8005488:	2300      	movs	r3, #0
 800548a:	4620      	mov	r0, r4
 800548c:	4629      	mov	r1, r5
 800548e:	f7fb fb3b 	bl	8000b08 <__aeabi_dcmpeq>
 8005492:	b918      	cbnz	r0, 800549c <__cvt+0x88>
 8005494:	f1c6 0601 	rsb	r6, r6, #1
 8005498:	f8ca 6000 	str.w	r6, [sl]
 800549c:	f8da 3000 	ldr.w	r3, [sl]
 80054a0:	4499      	add	r9, r3
 80054a2:	2200      	movs	r2, #0
 80054a4:	2300      	movs	r3, #0
 80054a6:	4620      	mov	r0, r4
 80054a8:	4629      	mov	r1, r5
 80054aa:	f7fb fb2d 	bl	8000b08 <__aeabi_dcmpeq>
 80054ae:	b938      	cbnz	r0, 80054c0 <__cvt+0xac>
 80054b0:	2230      	movs	r2, #48	; 0x30
 80054b2:	9b03      	ldr	r3, [sp, #12]
 80054b4:	454b      	cmp	r3, r9
 80054b6:	d205      	bcs.n	80054c4 <__cvt+0xb0>
 80054b8:	1c59      	adds	r1, r3, #1
 80054ba:	9103      	str	r1, [sp, #12]
 80054bc:	701a      	strb	r2, [r3, #0]
 80054be:	e7f8      	b.n	80054b2 <__cvt+0x9e>
 80054c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80054c4:	9b03      	ldr	r3, [sp, #12]
 80054c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054c8:	eba3 0308 	sub.w	r3, r3, r8
 80054cc:	4640      	mov	r0, r8
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	b004      	add	sp, #16
 80054d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080054d6 <__exponent>:
 80054d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054d8:	2900      	cmp	r1, #0
 80054da:	4604      	mov	r4, r0
 80054dc:	bfba      	itte	lt
 80054de:	4249      	neglt	r1, r1
 80054e0:	232d      	movlt	r3, #45	; 0x2d
 80054e2:	232b      	movge	r3, #43	; 0x2b
 80054e4:	2909      	cmp	r1, #9
 80054e6:	f804 2b02 	strb.w	r2, [r4], #2
 80054ea:	7043      	strb	r3, [r0, #1]
 80054ec:	dd20      	ble.n	8005530 <__exponent+0x5a>
 80054ee:	f10d 0307 	add.w	r3, sp, #7
 80054f2:	461f      	mov	r7, r3
 80054f4:	260a      	movs	r6, #10
 80054f6:	fb91 f5f6 	sdiv	r5, r1, r6
 80054fa:	fb06 1115 	mls	r1, r6, r5, r1
 80054fe:	3130      	adds	r1, #48	; 0x30
 8005500:	2d09      	cmp	r5, #9
 8005502:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005506:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800550a:	4629      	mov	r1, r5
 800550c:	dc09      	bgt.n	8005522 <__exponent+0x4c>
 800550e:	3130      	adds	r1, #48	; 0x30
 8005510:	3b02      	subs	r3, #2
 8005512:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005516:	42bb      	cmp	r3, r7
 8005518:	4622      	mov	r2, r4
 800551a:	d304      	bcc.n	8005526 <__exponent+0x50>
 800551c:	1a10      	subs	r0, r2, r0
 800551e:	b003      	add	sp, #12
 8005520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005522:	4613      	mov	r3, r2
 8005524:	e7e7      	b.n	80054f6 <__exponent+0x20>
 8005526:	f813 2b01 	ldrb.w	r2, [r3], #1
 800552a:	f804 2b01 	strb.w	r2, [r4], #1
 800552e:	e7f2      	b.n	8005516 <__exponent+0x40>
 8005530:	2330      	movs	r3, #48	; 0x30
 8005532:	4419      	add	r1, r3
 8005534:	7083      	strb	r3, [r0, #2]
 8005536:	1d02      	adds	r2, r0, #4
 8005538:	70c1      	strb	r1, [r0, #3]
 800553a:	e7ef      	b.n	800551c <__exponent+0x46>

0800553c <_printf_float>:
 800553c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005540:	b08d      	sub	sp, #52	; 0x34
 8005542:	460c      	mov	r4, r1
 8005544:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005548:	4616      	mov	r6, r2
 800554a:	461f      	mov	r7, r3
 800554c:	4605      	mov	r5, r0
 800554e:	f001 fa23 	bl	8006998 <_localeconv_r>
 8005552:	6803      	ldr	r3, [r0, #0]
 8005554:	9304      	str	r3, [sp, #16]
 8005556:	4618      	mov	r0, r3
 8005558:	f7fa fe5a 	bl	8000210 <strlen>
 800555c:	2300      	movs	r3, #0
 800555e:	930a      	str	r3, [sp, #40]	; 0x28
 8005560:	f8d8 3000 	ldr.w	r3, [r8]
 8005564:	9005      	str	r0, [sp, #20]
 8005566:	3307      	adds	r3, #7
 8005568:	f023 0307 	bic.w	r3, r3, #7
 800556c:	f103 0208 	add.w	r2, r3, #8
 8005570:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005574:	f8d4 b000 	ldr.w	fp, [r4]
 8005578:	f8c8 2000 	str.w	r2, [r8]
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005584:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005588:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800558c:	9307      	str	r3, [sp, #28]
 800558e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005596:	4ba7      	ldr	r3, [pc, #668]	; (8005834 <_printf_float+0x2f8>)
 8005598:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800559c:	f7fb fae6 	bl	8000b6c <__aeabi_dcmpun>
 80055a0:	bb70      	cbnz	r0, 8005600 <_printf_float+0xc4>
 80055a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055a6:	4ba3      	ldr	r3, [pc, #652]	; (8005834 <_printf_float+0x2f8>)
 80055a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055ac:	f7fb fac0 	bl	8000b30 <__aeabi_dcmple>
 80055b0:	bb30      	cbnz	r0, 8005600 <_printf_float+0xc4>
 80055b2:	2200      	movs	r2, #0
 80055b4:	2300      	movs	r3, #0
 80055b6:	4640      	mov	r0, r8
 80055b8:	4649      	mov	r1, r9
 80055ba:	f7fb faaf 	bl	8000b1c <__aeabi_dcmplt>
 80055be:	b110      	cbz	r0, 80055c6 <_printf_float+0x8a>
 80055c0:	232d      	movs	r3, #45	; 0x2d
 80055c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c6:	4a9c      	ldr	r2, [pc, #624]	; (8005838 <_printf_float+0x2fc>)
 80055c8:	4b9c      	ldr	r3, [pc, #624]	; (800583c <_printf_float+0x300>)
 80055ca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80055ce:	bf8c      	ite	hi
 80055d0:	4690      	movhi	r8, r2
 80055d2:	4698      	movls	r8, r3
 80055d4:	2303      	movs	r3, #3
 80055d6:	f02b 0204 	bic.w	r2, fp, #4
 80055da:	6123      	str	r3, [r4, #16]
 80055dc:	6022      	str	r2, [r4, #0]
 80055de:	f04f 0900 	mov.w	r9, #0
 80055e2:	9700      	str	r7, [sp, #0]
 80055e4:	4633      	mov	r3, r6
 80055e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80055e8:	4621      	mov	r1, r4
 80055ea:	4628      	mov	r0, r5
 80055ec:	f000 f9e6 	bl	80059bc <_printf_common>
 80055f0:	3001      	adds	r0, #1
 80055f2:	f040 808d 	bne.w	8005710 <_printf_float+0x1d4>
 80055f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055fa:	b00d      	add	sp, #52	; 0x34
 80055fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005600:	4642      	mov	r2, r8
 8005602:	464b      	mov	r3, r9
 8005604:	4640      	mov	r0, r8
 8005606:	4649      	mov	r1, r9
 8005608:	f7fb fab0 	bl	8000b6c <__aeabi_dcmpun>
 800560c:	b110      	cbz	r0, 8005614 <_printf_float+0xd8>
 800560e:	4a8c      	ldr	r2, [pc, #560]	; (8005840 <_printf_float+0x304>)
 8005610:	4b8c      	ldr	r3, [pc, #560]	; (8005844 <_printf_float+0x308>)
 8005612:	e7da      	b.n	80055ca <_printf_float+0x8e>
 8005614:	6861      	ldr	r1, [r4, #4]
 8005616:	1c4b      	adds	r3, r1, #1
 8005618:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800561c:	a80a      	add	r0, sp, #40	; 0x28
 800561e:	d13e      	bne.n	800569e <_printf_float+0x162>
 8005620:	2306      	movs	r3, #6
 8005622:	6063      	str	r3, [r4, #4]
 8005624:	2300      	movs	r3, #0
 8005626:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800562a:	ab09      	add	r3, sp, #36	; 0x24
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	ec49 8b10 	vmov	d0, r8, r9
 8005632:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005636:	6022      	str	r2, [r4, #0]
 8005638:	f8cd a004 	str.w	sl, [sp, #4]
 800563c:	6861      	ldr	r1, [r4, #4]
 800563e:	4628      	mov	r0, r5
 8005640:	f7ff fee8 	bl	8005414 <__cvt>
 8005644:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005648:	2b47      	cmp	r3, #71	; 0x47
 800564a:	4680      	mov	r8, r0
 800564c:	d109      	bne.n	8005662 <_printf_float+0x126>
 800564e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005650:	1cd8      	adds	r0, r3, #3
 8005652:	db02      	blt.n	800565a <_printf_float+0x11e>
 8005654:	6862      	ldr	r2, [r4, #4]
 8005656:	4293      	cmp	r3, r2
 8005658:	dd47      	ble.n	80056ea <_printf_float+0x1ae>
 800565a:	f1aa 0a02 	sub.w	sl, sl, #2
 800565e:	fa5f fa8a 	uxtb.w	sl, sl
 8005662:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005666:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005668:	d824      	bhi.n	80056b4 <_printf_float+0x178>
 800566a:	3901      	subs	r1, #1
 800566c:	4652      	mov	r2, sl
 800566e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005672:	9109      	str	r1, [sp, #36]	; 0x24
 8005674:	f7ff ff2f 	bl	80054d6 <__exponent>
 8005678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800567a:	1813      	adds	r3, r2, r0
 800567c:	2a01      	cmp	r2, #1
 800567e:	4681      	mov	r9, r0
 8005680:	6123      	str	r3, [r4, #16]
 8005682:	dc02      	bgt.n	800568a <_printf_float+0x14e>
 8005684:	6822      	ldr	r2, [r4, #0]
 8005686:	07d1      	lsls	r1, r2, #31
 8005688:	d501      	bpl.n	800568e <_printf_float+0x152>
 800568a:	3301      	adds	r3, #1
 800568c:	6123      	str	r3, [r4, #16]
 800568e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0a5      	beq.n	80055e2 <_printf_float+0xa6>
 8005696:	232d      	movs	r3, #45	; 0x2d
 8005698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800569c:	e7a1      	b.n	80055e2 <_printf_float+0xa6>
 800569e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80056a2:	f000 8177 	beq.w	8005994 <_printf_float+0x458>
 80056a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80056aa:	d1bb      	bne.n	8005624 <_printf_float+0xe8>
 80056ac:	2900      	cmp	r1, #0
 80056ae:	d1b9      	bne.n	8005624 <_printf_float+0xe8>
 80056b0:	2301      	movs	r3, #1
 80056b2:	e7b6      	b.n	8005622 <_printf_float+0xe6>
 80056b4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80056b8:	d119      	bne.n	80056ee <_printf_float+0x1b2>
 80056ba:	2900      	cmp	r1, #0
 80056bc:	6863      	ldr	r3, [r4, #4]
 80056be:	dd0c      	ble.n	80056da <_printf_float+0x19e>
 80056c0:	6121      	str	r1, [r4, #16]
 80056c2:	b913      	cbnz	r3, 80056ca <_printf_float+0x18e>
 80056c4:	6822      	ldr	r2, [r4, #0]
 80056c6:	07d2      	lsls	r2, r2, #31
 80056c8:	d502      	bpl.n	80056d0 <_printf_float+0x194>
 80056ca:	3301      	adds	r3, #1
 80056cc:	440b      	add	r3, r1
 80056ce:	6123      	str	r3, [r4, #16]
 80056d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d2:	65a3      	str	r3, [r4, #88]	; 0x58
 80056d4:	f04f 0900 	mov.w	r9, #0
 80056d8:	e7d9      	b.n	800568e <_printf_float+0x152>
 80056da:	b913      	cbnz	r3, 80056e2 <_printf_float+0x1a6>
 80056dc:	6822      	ldr	r2, [r4, #0]
 80056de:	07d0      	lsls	r0, r2, #31
 80056e0:	d501      	bpl.n	80056e6 <_printf_float+0x1aa>
 80056e2:	3302      	adds	r3, #2
 80056e4:	e7f3      	b.n	80056ce <_printf_float+0x192>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e7f1      	b.n	80056ce <_printf_float+0x192>
 80056ea:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80056ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80056f2:	4293      	cmp	r3, r2
 80056f4:	db05      	blt.n	8005702 <_printf_float+0x1c6>
 80056f6:	6822      	ldr	r2, [r4, #0]
 80056f8:	6123      	str	r3, [r4, #16]
 80056fa:	07d1      	lsls	r1, r2, #31
 80056fc:	d5e8      	bpl.n	80056d0 <_printf_float+0x194>
 80056fe:	3301      	adds	r3, #1
 8005700:	e7e5      	b.n	80056ce <_printf_float+0x192>
 8005702:	2b00      	cmp	r3, #0
 8005704:	bfd4      	ite	le
 8005706:	f1c3 0302 	rsble	r3, r3, #2
 800570a:	2301      	movgt	r3, #1
 800570c:	4413      	add	r3, r2
 800570e:	e7de      	b.n	80056ce <_printf_float+0x192>
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	055a      	lsls	r2, r3, #21
 8005714:	d407      	bmi.n	8005726 <_printf_float+0x1ea>
 8005716:	6923      	ldr	r3, [r4, #16]
 8005718:	4642      	mov	r2, r8
 800571a:	4631      	mov	r1, r6
 800571c:	4628      	mov	r0, r5
 800571e:	47b8      	blx	r7
 8005720:	3001      	adds	r0, #1
 8005722:	d12b      	bne.n	800577c <_printf_float+0x240>
 8005724:	e767      	b.n	80055f6 <_printf_float+0xba>
 8005726:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800572a:	f240 80dc 	bls.w	80058e6 <_printf_float+0x3aa>
 800572e:	2200      	movs	r2, #0
 8005730:	2300      	movs	r3, #0
 8005732:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005736:	f7fb f9e7 	bl	8000b08 <__aeabi_dcmpeq>
 800573a:	2800      	cmp	r0, #0
 800573c:	d033      	beq.n	80057a6 <_printf_float+0x26a>
 800573e:	2301      	movs	r3, #1
 8005740:	4a41      	ldr	r2, [pc, #260]	; (8005848 <_printf_float+0x30c>)
 8005742:	4631      	mov	r1, r6
 8005744:	4628      	mov	r0, r5
 8005746:	47b8      	blx	r7
 8005748:	3001      	adds	r0, #1
 800574a:	f43f af54 	beq.w	80055f6 <_printf_float+0xba>
 800574e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005752:	429a      	cmp	r2, r3
 8005754:	db02      	blt.n	800575c <_printf_float+0x220>
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	07d8      	lsls	r0, r3, #31
 800575a:	d50f      	bpl.n	800577c <_printf_float+0x240>
 800575c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005760:	4631      	mov	r1, r6
 8005762:	4628      	mov	r0, r5
 8005764:	47b8      	blx	r7
 8005766:	3001      	adds	r0, #1
 8005768:	f43f af45 	beq.w	80055f6 <_printf_float+0xba>
 800576c:	f04f 0800 	mov.w	r8, #0
 8005770:	f104 091a 	add.w	r9, r4, #26
 8005774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005776:	3b01      	subs	r3, #1
 8005778:	4543      	cmp	r3, r8
 800577a:	dc09      	bgt.n	8005790 <_printf_float+0x254>
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	079b      	lsls	r3, r3, #30
 8005780:	f100 8103 	bmi.w	800598a <_printf_float+0x44e>
 8005784:	68e0      	ldr	r0, [r4, #12]
 8005786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005788:	4298      	cmp	r0, r3
 800578a:	bfb8      	it	lt
 800578c:	4618      	movlt	r0, r3
 800578e:	e734      	b.n	80055fa <_printf_float+0xbe>
 8005790:	2301      	movs	r3, #1
 8005792:	464a      	mov	r2, r9
 8005794:	4631      	mov	r1, r6
 8005796:	4628      	mov	r0, r5
 8005798:	47b8      	blx	r7
 800579a:	3001      	adds	r0, #1
 800579c:	f43f af2b 	beq.w	80055f6 <_printf_float+0xba>
 80057a0:	f108 0801 	add.w	r8, r8, #1
 80057a4:	e7e6      	b.n	8005774 <_printf_float+0x238>
 80057a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	dc2b      	bgt.n	8005804 <_printf_float+0x2c8>
 80057ac:	2301      	movs	r3, #1
 80057ae:	4a26      	ldr	r2, [pc, #152]	; (8005848 <_printf_float+0x30c>)
 80057b0:	4631      	mov	r1, r6
 80057b2:	4628      	mov	r0, r5
 80057b4:	47b8      	blx	r7
 80057b6:	3001      	adds	r0, #1
 80057b8:	f43f af1d 	beq.w	80055f6 <_printf_float+0xba>
 80057bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057be:	b923      	cbnz	r3, 80057ca <_printf_float+0x28e>
 80057c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057c2:	b913      	cbnz	r3, 80057ca <_printf_float+0x28e>
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	07d9      	lsls	r1, r3, #31
 80057c8:	d5d8      	bpl.n	800577c <_printf_float+0x240>
 80057ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057ce:	4631      	mov	r1, r6
 80057d0:	4628      	mov	r0, r5
 80057d2:	47b8      	blx	r7
 80057d4:	3001      	adds	r0, #1
 80057d6:	f43f af0e 	beq.w	80055f6 <_printf_float+0xba>
 80057da:	f04f 0900 	mov.w	r9, #0
 80057de:	f104 0a1a 	add.w	sl, r4, #26
 80057e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e4:	425b      	negs	r3, r3
 80057e6:	454b      	cmp	r3, r9
 80057e8:	dc01      	bgt.n	80057ee <_printf_float+0x2b2>
 80057ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057ec:	e794      	b.n	8005718 <_printf_float+0x1dc>
 80057ee:	2301      	movs	r3, #1
 80057f0:	4652      	mov	r2, sl
 80057f2:	4631      	mov	r1, r6
 80057f4:	4628      	mov	r0, r5
 80057f6:	47b8      	blx	r7
 80057f8:	3001      	adds	r0, #1
 80057fa:	f43f aefc 	beq.w	80055f6 <_printf_float+0xba>
 80057fe:	f109 0901 	add.w	r9, r9, #1
 8005802:	e7ee      	b.n	80057e2 <_printf_float+0x2a6>
 8005804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005806:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005808:	429a      	cmp	r2, r3
 800580a:	bfa8      	it	ge
 800580c:	461a      	movge	r2, r3
 800580e:	2a00      	cmp	r2, #0
 8005810:	4691      	mov	r9, r2
 8005812:	dd07      	ble.n	8005824 <_printf_float+0x2e8>
 8005814:	4613      	mov	r3, r2
 8005816:	4631      	mov	r1, r6
 8005818:	4642      	mov	r2, r8
 800581a:	4628      	mov	r0, r5
 800581c:	47b8      	blx	r7
 800581e:	3001      	adds	r0, #1
 8005820:	f43f aee9 	beq.w	80055f6 <_printf_float+0xba>
 8005824:	f104 031a 	add.w	r3, r4, #26
 8005828:	f04f 0b00 	mov.w	fp, #0
 800582c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005830:	9306      	str	r3, [sp, #24]
 8005832:	e015      	b.n	8005860 <_printf_float+0x324>
 8005834:	7fefffff 	.word	0x7fefffff
 8005838:	08007888 	.word	0x08007888
 800583c:	08007884 	.word	0x08007884
 8005840:	08007890 	.word	0x08007890
 8005844:	0800788c 	.word	0x0800788c
 8005848:	08007894 	.word	0x08007894
 800584c:	2301      	movs	r3, #1
 800584e:	9a06      	ldr	r2, [sp, #24]
 8005850:	4631      	mov	r1, r6
 8005852:	4628      	mov	r0, r5
 8005854:	47b8      	blx	r7
 8005856:	3001      	adds	r0, #1
 8005858:	f43f aecd 	beq.w	80055f6 <_printf_float+0xba>
 800585c:	f10b 0b01 	add.w	fp, fp, #1
 8005860:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005864:	ebaa 0309 	sub.w	r3, sl, r9
 8005868:	455b      	cmp	r3, fp
 800586a:	dcef      	bgt.n	800584c <_printf_float+0x310>
 800586c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005870:	429a      	cmp	r2, r3
 8005872:	44d0      	add	r8, sl
 8005874:	db15      	blt.n	80058a2 <_printf_float+0x366>
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	07da      	lsls	r2, r3, #31
 800587a:	d412      	bmi.n	80058a2 <_printf_float+0x366>
 800587c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800587e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005880:	eba3 020a 	sub.w	r2, r3, sl
 8005884:	eba3 0a01 	sub.w	sl, r3, r1
 8005888:	4592      	cmp	sl, r2
 800588a:	bfa8      	it	ge
 800588c:	4692      	movge	sl, r2
 800588e:	f1ba 0f00 	cmp.w	sl, #0
 8005892:	dc0e      	bgt.n	80058b2 <_printf_float+0x376>
 8005894:	f04f 0800 	mov.w	r8, #0
 8005898:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800589c:	f104 091a 	add.w	r9, r4, #26
 80058a0:	e019      	b.n	80058d6 <_printf_float+0x39a>
 80058a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058a6:	4631      	mov	r1, r6
 80058a8:	4628      	mov	r0, r5
 80058aa:	47b8      	blx	r7
 80058ac:	3001      	adds	r0, #1
 80058ae:	d1e5      	bne.n	800587c <_printf_float+0x340>
 80058b0:	e6a1      	b.n	80055f6 <_printf_float+0xba>
 80058b2:	4653      	mov	r3, sl
 80058b4:	4642      	mov	r2, r8
 80058b6:	4631      	mov	r1, r6
 80058b8:	4628      	mov	r0, r5
 80058ba:	47b8      	blx	r7
 80058bc:	3001      	adds	r0, #1
 80058be:	d1e9      	bne.n	8005894 <_printf_float+0x358>
 80058c0:	e699      	b.n	80055f6 <_printf_float+0xba>
 80058c2:	2301      	movs	r3, #1
 80058c4:	464a      	mov	r2, r9
 80058c6:	4631      	mov	r1, r6
 80058c8:	4628      	mov	r0, r5
 80058ca:	47b8      	blx	r7
 80058cc:	3001      	adds	r0, #1
 80058ce:	f43f ae92 	beq.w	80055f6 <_printf_float+0xba>
 80058d2:	f108 0801 	add.w	r8, r8, #1
 80058d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058da:	1a9b      	subs	r3, r3, r2
 80058dc:	eba3 030a 	sub.w	r3, r3, sl
 80058e0:	4543      	cmp	r3, r8
 80058e2:	dcee      	bgt.n	80058c2 <_printf_float+0x386>
 80058e4:	e74a      	b.n	800577c <_printf_float+0x240>
 80058e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058e8:	2a01      	cmp	r2, #1
 80058ea:	dc01      	bgt.n	80058f0 <_printf_float+0x3b4>
 80058ec:	07db      	lsls	r3, r3, #31
 80058ee:	d53a      	bpl.n	8005966 <_printf_float+0x42a>
 80058f0:	2301      	movs	r3, #1
 80058f2:	4642      	mov	r2, r8
 80058f4:	4631      	mov	r1, r6
 80058f6:	4628      	mov	r0, r5
 80058f8:	47b8      	blx	r7
 80058fa:	3001      	adds	r0, #1
 80058fc:	f43f ae7b 	beq.w	80055f6 <_printf_float+0xba>
 8005900:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005904:	4631      	mov	r1, r6
 8005906:	4628      	mov	r0, r5
 8005908:	47b8      	blx	r7
 800590a:	3001      	adds	r0, #1
 800590c:	f108 0801 	add.w	r8, r8, #1
 8005910:	f43f ae71 	beq.w	80055f6 <_printf_float+0xba>
 8005914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005916:	2200      	movs	r2, #0
 8005918:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800591c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005920:	2300      	movs	r3, #0
 8005922:	f7fb f8f1 	bl	8000b08 <__aeabi_dcmpeq>
 8005926:	b9c8      	cbnz	r0, 800595c <_printf_float+0x420>
 8005928:	4653      	mov	r3, sl
 800592a:	4642      	mov	r2, r8
 800592c:	4631      	mov	r1, r6
 800592e:	4628      	mov	r0, r5
 8005930:	47b8      	blx	r7
 8005932:	3001      	adds	r0, #1
 8005934:	d10e      	bne.n	8005954 <_printf_float+0x418>
 8005936:	e65e      	b.n	80055f6 <_printf_float+0xba>
 8005938:	2301      	movs	r3, #1
 800593a:	4652      	mov	r2, sl
 800593c:	4631      	mov	r1, r6
 800593e:	4628      	mov	r0, r5
 8005940:	47b8      	blx	r7
 8005942:	3001      	adds	r0, #1
 8005944:	f43f ae57 	beq.w	80055f6 <_printf_float+0xba>
 8005948:	f108 0801 	add.w	r8, r8, #1
 800594c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800594e:	3b01      	subs	r3, #1
 8005950:	4543      	cmp	r3, r8
 8005952:	dcf1      	bgt.n	8005938 <_printf_float+0x3fc>
 8005954:	464b      	mov	r3, r9
 8005956:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800595a:	e6de      	b.n	800571a <_printf_float+0x1de>
 800595c:	f04f 0800 	mov.w	r8, #0
 8005960:	f104 0a1a 	add.w	sl, r4, #26
 8005964:	e7f2      	b.n	800594c <_printf_float+0x410>
 8005966:	2301      	movs	r3, #1
 8005968:	e7df      	b.n	800592a <_printf_float+0x3ee>
 800596a:	2301      	movs	r3, #1
 800596c:	464a      	mov	r2, r9
 800596e:	4631      	mov	r1, r6
 8005970:	4628      	mov	r0, r5
 8005972:	47b8      	blx	r7
 8005974:	3001      	adds	r0, #1
 8005976:	f43f ae3e 	beq.w	80055f6 <_printf_float+0xba>
 800597a:	f108 0801 	add.w	r8, r8, #1
 800597e:	68e3      	ldr	r3, [r4, #12]
 8005980:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005982:	1a9b      	subs	r3, r3, r2
 8005984:	4543      	cmp	r3, r8
 8005986:	dcf0      	bgt.n	800596a <_printf_float+0x42e>
 8005988:	e6fc      	b.n	8005784 <_printf_float+0x248>
 800598a:	f04f 0800 	mov.w	r8, #0
 800598e:	f104 0919 	add.w	r9, r4, #25
 8005992:	e7f4      	b.n	800597e <_printf_float+0x442>
 8005994:	2900      	cmp	r1, #0
 8005996:	f43f ae8b 	beq.w	80056b0 <_printf_float+0x174>
 800599a:	2300      	movs	r3, #0
 800599c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80059a0:	ab09      	add	r3, sp, #36	; 0x24
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	ec49 8b10 	vmov	d0, r8, r9
 80059a8:	6022      	str	r2, [r4, #0]
 80059aa:	f8cd a004 	str.w	sl, [sp, #4]
 80059ae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80059b2:	4628      	mov	r0, r5
 80059b4:	f7ff fd2e 	bl	8005414 <__cvt>
 80059b8:	4680      	mov	r8, r0
 80059ba:	e648      	b.n	800564e <_printf_float+0x112>

080059bc <_printf_common>:
 80059bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c0:	4691      	mov	r9, r2
 80059c2:	461f      	mov	r7, r3
 80059c4:	688a      	ldr	r2, [r1, #8]
 80059c6:	690b      	ldr	r3, [r1, #16]
 80059c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059cc:	4293      	cmp	r3, r2
 80059ce:	bfb8      	it	lt
 80059d0:	4613      	movlt	r3, r2
 80059d2:	f8c9 3000 	str.w	r3, [r9]
 80059d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059da:	4606      	mov	r6, r0
 80059dc:	460c      	mov	r4, r1
 80059de:	b112      	cbz	r2, 80059e6 <_printf_common+0x2a>
 80059e0:	3301      	adds	r3, #1
 80059e2:	f8c9 3000 	str.w	r3, [r9]
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	0699      	lsls	r1, r3, #26
 80059ea:	bf42      	ittt	mi
 80059ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80059f0:	3302      	addmi	r3, #2
 80059f2:	f8c9 3000 	strmi.w	r3, [r9]
 80059f6:	6825      	ldr	r5, [r4, #0]
 80059f8:	f015 0506 	ands.w	r5, r5, #6
 80059fc:	d107      	bne.n	8005a0e <_printf_common+0x52>
 80059fe:	f104 0a19 	add.w	sl, r4, #25
 8005a02:	68e3      	ldr	r3, [r4, #12]
 8005a04:	f8d9 2000 	ldr.w	r2, [r9]
 8005a08:	1a9b      	subs	r3, r3, r2
 8005a0a:	42ab      	cmp	r3, r5
 8005a0c:	dc28      	bgt.n	8005a60 <_printf_common+0xa4>
 8005a0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005a12:	6822      	ldr	r2, [r4, #0]
 8005a14:	3300      	adds	r3, #0
 8005a16:	bf18      	it	ne
 8005a18:	2301      	movne	r3, #1
 8005a1a:	0692      	lsls	r2, r2, #26
 8005a1c:	d42d      	bmi.n	8005a7a <_printf_common+0xbe>
 8005a1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a22:	4639      	mov	r1, r7
 8005a24:	4630      	mov	r0, r6
 8005a26:	47c0      	blx	r8
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d020      	beq.n	8005a6e <_printf_common+0xb2>
 8005a2c:	6823      	ldr	r3, [r4, #0]
 8005a2e:	68e5      	ldr	r5, [r4, #12]
 8005a30:	f8d9 2000 	ldr.w	r2, [r9]
 8005a34:	f003 0306 	and.w	r3, r3, #6
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	bf08      	it	eq
 8005a3c:	1aad      	subeq	r5, r5, r2
 8005a3e:	68a3      	ldr	r3, [r4, #8]
 8005a40:	6922      	ldr	r2, [r4, #16]
 8005a42:	bf0c      	ite	eq
 8005a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a48:	2500      	movne	r5, #0
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	bfc4      	itt	gt
 8005a4e:	1a9b      	subgt	r3, r3, r2
 8005a50:	18ed      	addgt	r5, r5, r3
 8005a52:	f04f 0900 	mov.w	r9, #0
 8005a56:	341a      	adds	r4, #26
 8005a58:	454d      	cmp	r5, r9
 8005a5a:	d11a      	bne.n	8005a92 <_printf_common+0xd6>
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	e008      	b.n	8005a72 <_printf_common+0xb6>
 8005a60:	2301      	movs	r3, #1
 8005a62:	4652      	mov	r2, sl
 8005a64:	4639      	mov	r1, r7
 8005a66:	4630      	mov	r0, r6
 8005a68:	47c0      	blx	r8
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	d103      	bne.n	8005a76 <_printf_common+0xba>
 8005a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a76:	3501      	adds	r5, #1
 8005a78:	e7c3      	b.n	8005a02 <_printf_common+0x46>
 8005a7a:	18e1      	adds	r1, r4, r3
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	2030      	movs	r0, #48	; 0x30
 8005a80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a84:	4422      	add	r2, r4
 8005a86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a8e:	3302      	adds	r3, #2
 8005a90:	e7c5      	b.n	8005a1e <_printf_common+0x62>
 8005a92:	2301      	movs	r3, #1
 8005a94:	4622      	mov	r2, r4
 8005a96:	4639      	mov	r1, r7
 8005a98:	4630      	mov	r0, r6
 8005a9a:	47c0      	blx	r8
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d0e6      	beq.n	8005a6e <_printf_common+0xb2>
 8005aa0:	f109 0901 	add.w	r9, r9, #1
 8005aa4:	e7d8      	b.n	8005a58 <_printf_common+0x9c>
	...

08005aa8 <_printf_i>:
 8005aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005aac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005ab0:	460c      	mov	r4, r1
 8005ab2:	7e09      	ldrb	r1, [r1, #24]
 8005ab4:	b085      	sub	sp, #20
 8005ab6:	296e      	cmp	r1, #110	; 0x6e
 8005ab8:	4617      	mov	r7, r2
 8005aba:	4606      	mov	r6, r0
 8005abc:	4698      	mov	r8, r3
 8005abe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ac0:	f000 80b3 	beq.w	8005c2a <_printf_i+0x182>
 8005ac4:	d822      	bhi.n	8005b0c <_printf_i+0x64>
 8005ac6:	2963      	cmp	r1, #99	; 0x63
 8005ac8:	d036      	beq.n	8005b38 <_printf_i+0x90>
 8005aca:	d80a      	bhi.n	8005ae2 <_printf_i+0x3a>
 8005acc:	2900      	cmp	r1, #0
 8005ace:	f000 80b9 	beq.w	8005c44 <_printf_i+0x19c>
 8005ad2:	2958      	cmp	r1, #88	; 0x58
 8005ad4:	f000 8083 	beq.w	8005bde <_printf_i+0x136>
 8005ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005adc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005ae0:	e032      	b.n	8005b48 <_printf_i+0xa0>
 8005ae2:	2964      	cmp	r1, #100	; 0x64
 8005ae4:	d001      	beq.n	8005aea <_printf_i+0x42>
 8005ae6:	2969      	cmp	r1, #105	; 0x69
 8005ae8:	d1f6      	bne.n	8005ad8 <_printf_i+0x30>
 8005aea:	6820      	ldr	r0, [r4, #0]
 8005aec:	6813      	ldr	r3, [r2, #0]
 8005aee:	0605      	lsls	r5, r0, #24
 8005af0:	f103 0104 	add.w	r1, r3, #4
 8005af4:	d52a      	bpl.n	8005b4c <_printf_i+0xa4>
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6011      	str	r1, [r2, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	da03      	bge.n	8005b06 <_printf_i+0x5e>
 8005afe:	222d      	movs	r2, #45	; 0x2d
 8005b00:	425b      	negs	r3, r3
 8005b02:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005b06:	486f      	ldr	r0, [pc, #444]	; (8005cc4 <_printf_i+0x21c>)
 8005b08:	220a      	movs	r2, #10
 8005b0a:	e039      	b.n	8005b80 <_printf_i+0xd8>
 8005b0c:	2973      	cmp	r1, #115	; 0x73
 8005b0e:	f000 809d 	beq.w	8005c4c <_printf_i+0x1a4>
 8005b12:	d808      	bhi.n	8005b26 <_printf_i+0x7e>
 8005b14:	296f      	cmp	r1, #111	; 0x6f
 8005b16:	d020      	beq.n	8005b5a <_printf_i+0xb2>
 8005b18:	2970      	cmp	r1, #112	; 0x70
 8005b1a:	d1dd      	bne.n	8005ad8 <_printf_i+0x30>
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	f043 0320 	orr.w	r3, r3, #32
 8005b22:	6023      	str	r3, [r4, #0]
 8005b24:	e003      	b.n	8005b2e <_printf_i+0x86>
 8005b26:	2975      	cmp	r1, #117	; 0x75
 8005b28:	d017      	beq.n	8005b5a <_printf_i+0xb2>
 8005b2a:	2978      	cmp	r1, #120	; 0x78
 8005b2c:	d1d4      	bne.n	8005ad8 <_printf_i+0x30>
 8005b2e:	2378      	movs	r3, #120	; 0x78
 8005b30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b34:	4864      	ldr	r0, [pc, #400]	; (8005cc8 <_printf_i+0x220>)
 8005b36:	e055      	b.n	8005be4 <_printf_i+0x13c>
 8005b38:	6813      	ldr	r3, [r2, #0]
 8005b3a:	1d19      	adds	r1, r3, #4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6011      	str	r1, [r2, #0]
 8005b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e08c      	b.n	8005c66 <_printf_i+0x1be>
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6011      	str	r1, [r2, #0]
 8005b50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b54:	bf18      	it	ne
 8005b56:	b21b      	sxthne	r3, r3
 8005b58:	e7cf      	b.n	8005afa <_printf_i+0x52>
 8005b5a:	6813      	ldr	r3, [r2, #0]
 8005b5c:	6825      	ldr	r5, [r4, #0]
 8005b5e:	1d18      	adds	r0, r3, #4
 8005b60:	6010      	str	r0, [r2, #0]
 8005b62:	0628      	lsls	r0, r5, #24
 8005b64:	d501      	bpl.n	8005b6a <_printf_i+0xc2>
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	e002      	b.n	8005b70 <_printf_i+0xc8>
 8005b6a:	0668      	lsls	r0, r5, #25
 8005b6c:	d5fb      	bpl.n	8005b66 <_printf_i+0xbe>
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	4854      	ldr	r0, [pc, #336]	; (8005cc4 <_printf_i+0x21c>)
 8005b72:	296f      	cmp	r1, #111	; 0x6f
 8005b74:	bf14      	ite	ne
 8005b76:	220a      	movne	r2, #10
 8005b78:	2208      	moveq	r2, #8
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b80:	6865      	ldr	r5, [r4, #4]
 8005b82:	60a5      	str	r5, [r4, #8]
 8005b84:	2d00      	cmp	r5, #0
 8005b86:	f2c0 8095 	blt.w	8005cb4 <_printf_i+0x20c>
 8005b8a:	6821      	ldr	r1, [r4, #0]
 8005b8c:	f021 0104 	bic.w	r1, r1, #4
 8005b90:	6021      	str	r1, [r4, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d13d      	bne.n	8005c12 <_printf_i+0x16a>
 8005b96:	2d00      	cmp	r5, #0
 8005b98:	f040 808e 	bne.w	8005cb8 <_printf_i+0x210>
 8005b9c:	4665      	mov	r5, ip
 8005b9e:	2a08      	cmp	r2, #8
 8005ba0:	d10b      	bne.n	8005bba <_printf_i+0x112>
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	07db      	lsls	r3, r3, #31
 8005ba6:	d508      	bpl.n	8005bba <_printf_i+0x112>
 8005ba8:	6923      	ldr	r3, [r4, #16]
 8005baa:	6862      	ldr	r2, [r4, #4]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	bfde      	ittt	le
 8005bb0:	2330      	movle	r3, #48	; 0x30
 8005bb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bb6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005bba:	ebac 0305 	sub.w	r3, ip, r5
 8005bbe:	6123      	str	r3, [r4, #16]
 8005bc0:	f8cd 8000 	str.w	r8, [sp]
 8005bc4:	463b      	mov	r3, r7
 8005bc6:	aa03      	add	r2, sp, #12
 8005bc8:	4621      	mov	r1, r4
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f7ff fef6 	bl	80059bc <_printf_common>
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d14d      	bne.n	8005c70 <_printf_i+0x1c8>
 8005bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bd8:	b005      	add	sp, #20
 8005bda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bde:	4839      	ldr	r0, [pc, #228]	; (8005cc4 <_printf_i+0x21c>)
 8005be0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005be4:	6813      	ldr	r3, [r2, #0]
 8005be6:	6821      	ldr	r1, [r4, #0]
 8005be8:	1d1d      	adds	r5, r3, #4
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6015      	str	r5, [r2, #0]
 8005bee:	060a      	lsls	r2, r1, #24
 8005bf0:	d50b      	bpl.n	8005c0a <_printf_i+0x162>
 8005bf2:	07ca      	lsls	r2, r1, #31
 8005bf4:	bf44      	itt	mi
 8005bf6:	f041 0120 	orrmi.w	r1, r1, #32
 8005bfa:	6021      	strmi	r1, [r4, #0]
 8005bfc:	b91b      	cbnz	r3, 8005c06 <_printf_i+0x15e>
 8005bfe:	6822      	ldr	r2, [r4, #0]
 8005c00:	f022 0220 	bic.w	r2, r2, #32
 8005c04:	6022      	str	r2, [r4, #0]
 8005c06:	2210      	movs	r2, #16
 8005c08:	e7b7      	b.n	8005b7a <_printf_i+0xd2>
 8005c0a:	064d      	lsls	r5, r1, #25
 8005c0c:	bf48      	it	mi
 8005c0e:	b29b      	uxthmi	r3, r3
 8005c10:	e7ef      	b.n	8005bf2 <_printf_i+0x14a>
 8005c12:	4665      	mov	r5, ip
 8005c14:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c18:	fb02 3311 	mls	r3, r2, r1, r3
 8005c1c:	5cc3      	ldrb	r3, [r0, r3]
 8005c1e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005c22:	460b      	mov	r3, r1
 8005c24:	2900      	cmp	r1, #0
 8005c26:	d1f5      	bne.n	8005c14 <_printf_i+0x16c>
 8005c28:	e7b9      	b.n	8005b9e <_printf_i+0xf6>
 8005c2a:	6813      	ldr	r3, [r2, #0]
 8005c2c:	6825      	ldr	r5, [r4, #0]
 8005c2e:	6961      	ldr	r1, [r4, #20]
 8005c30:	1d18      	adds	r0, r3, #4
 8005c32:	6010      	str	r0, [r2, #0]
 8005c34:	0628      	lsls	r0, r5, #24
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	d501      	bpl.n	8005c3e <_printf_i+0x196>
 8005c3a:	6019      	str	r1, [r3, #0]
 8005c3c:	e002      	b.n	8005c44 <_printf_i+0x19c>
 8005c3e:	066a      	lsls	r2, r5, #25
 8005c40:	d5fb      	bpl.n	8005c3a <_printf_i+0x192>
 8005c42:	8019      	strh	r1, [r3, #0]
 8005c44:	2300      	movs	r3, #0
 8005c46:	6123      	str	r3, [r4, #16]
 8005c48:	4665      	mov	r5, ip
 8005c4a:	e7b9      	b.n	8005bc0 <_printf_i+0x118>
 8005c4c:	6813      	ldr	r3, [r2, #0]
 8005c4e:	1d19      	adds	r1, r3, #4
 8005c50:	6011      	str	r1, [r2, #0]
 8005c52:	681d      	ldr	r5, [r3, #0]
 8005c54:	6862      	ldr	r2, [r4, #4]
 8005c56:	2100      	movs	r1, #0
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f7fa fae1 	bl	8000220 <memchr>
 8005c5e:	b108      	cbz	r0, 8005c64 <_printf_i+0x1bc>
 8005c60:	1b40      	subs	r0, r0, r5
 8005c62:	6060      	str	r0, [r4, #4]
 8005c64:	6863      	ldr	r3, [r4, #4]
 8005c66:	6123      	str	r3, [r4, #16]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c6e:	e7a7      	b.n	8005bc0 <_printf_i+0x118>
 8005c70:	6923      	ldr	r3, [r4, #16]
 8005c72:	462a      	mov	r2, r5
 8005c74:	4639      	mov	r1, r7
 8005c76:	4630      	mov	r0, r6
 8005c78:	47c0      	blx	r8
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	d0aa      	beq.n	8005bd4 <_printf_i+0x12c>
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	079b      	lsls	r3, r3, #30
 8005c82:	d413      	bmi.n	8005cac <_printf_i+0x204>
 8005c84:	68e0      	ldr	r0, [r4, #12]
 8005c86:	9b03      	ldr	r3, [sp, #12]
 8005c88:	4298      	cmp	r0, r3
 8005c8a:	bfb8      	it	lt
 8005c8c:	4618      	movlt	r0, r3
 8005c8e:	e7a3      	b.n	8005bd8 <_printf_i+0x130>
 8005c90:	2301      	movs	r3, #1
 8005c92:	464a      	mov	r2, r9
 8005c94:	4639      	mov	r1, r7
 8005c96:	4630      	mov	r0, r6
 8005c98:	47c0      	blx	r8
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	d09a      	beq.n	8005bd4 <_printf_i+0x12c>
 8005c9e:	3501      	adds	r5, #1
 8005ca0:	68e3      	ldr	r3, [r4, #12]
 8005ca2:	9a03      	ldr	r2, [sp, #12]
 8005ca4:	1a9b      	subs	r3, r3, r2
 8005ca6:	42ab      	cmp	r3, r5
 8005ca8:	dcf2      	bgt.n	8005c90 <_printf_i+0x1e8>
 8005caa:	e7eb      	b.n	8005c84 <_printf_i+0x1dc>
 8005cac:	2500      	movs	r5, #0
 8005cae:	f104 0919 	add.w	r9, r4, #25
 8005cb2:	e7f5      	b.n	8005ca0 <_printf_i+0x1f8>
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1ac      	bne.n	8005c12 <_printf_i+0x16a>
 8005cb8:	7803      	ldrb	r3, [r0, #0]
 8005cba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cc2:	e76c      	b.n	8005b9e <_printf_i+0xf6>
 8005cc4:	08007896 	.word	0x08007896
 8005cc8:	080078a7 	.word	0x080078a7

08005ccc <siprintf>:
 8005ccc:	b40e      	push	{r1, r2, r3}
 8005cce:	b500      	push	{lr}
 8005cd0:	b09c      	sub	sp, #112	; 0x70
 8005cd2:	ab1d      	add	r3, sp, #116	; 0x74
 8005cd4:	9002      	str	r0, [sp, #8]
 8005cd6:	9006      	str	r0, [sp, #24]
 8005cd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005cdc:	4809      	ldr	r0, [pc, #36]	; (8005d04 <siprintf+0x38>)
 8005cde:	9107      	str	r1, [sp, #28]
 8005ce0:	9104      	str	r1, [sp, #16]
 8005ce2:	4909      	ldr	r1, [pc, #36]	; (8005d08 <siprintf+0x3c>)
 8005ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ce8:	9105      	str	r1, [sp, #20]
 8005cea:	6800      	ldr	r0, [r0, #0]
 8005cec:	9301      	str	r3, [sp, #4]
 8005cee:	a902      	add	r1, sp, #8
 8005cf0:	f001 fa5e 	bl	80071b0 <_svfiprintf_r>
 8005cf4:	9b02      	ldr	r3, [sp, #8]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	701a      	strb	r2, [r3, #0]
 8005cfa:	b01c      	add	sp, #112	; 0x70
 8005cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d00:	b003      	add	sp, #12
 8005d02:	4770      	bx	lr
 8005d04:	20000024 	.word	0x20000024
 8005d08:	ffff0208 	.word	0xffff0208

08005d0c <quorem>:
 8005d0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d10:	6903      	ldr	r3, [r0, #16]
 8005d12:	690c      	ldr	r4, [r1, #16]
 8005d14:	42a3      	cmp	r3, r4
 8005d16:	4680      	mov	r8, r0
 8005d18:	f2c0 8082 	blt.w	8005e20 <quorem+0x114>
 8005d1c:	3c01      	subs	r4, #1
 8005d1e:	f101 0714 	add.w	r7, r1, #20
 8005d22:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005d26:	f100 0614 	add.w	r6, r0, #20
 8005d2a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005d2e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005d32:	eb06 030c 	add.w	r3, r6, ip
 8005d36:	3501      	adds	r5, #1
 8005d38:	eb07 090c 	add.w	r9, r7, ip
 8005d3c:	9301      	str	r3, [sp, #4]
 8005d3e:	fbb0 f5f5 	udiv	r5, r0, r5
 8005d42:	b395      	cbz	r5, 8005daa <quorem+0x9e>
 8005d44:	f04f 0a00 	mov.w	sl, #0
 8005d48:	4638      	mov	r0, r7
 8005d4a:	46b6      	mov	lr, r6
 8005d4c:	46d3      	mov	fp, sl
 8005d4e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d52:	b293      	uxth	r3, r2
 8005d54:	fb05 a303 	mla	r3, r5, r3, sl
 8005d58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	ebab 0303 	sub.w	r3, fp, r3
 8005d62:	0c12      	lsrs	r2, r2, #16
 8005d64:	f8de b000 	ldr.w	fp, [lr]
 8005d68:	fb05 a202 	mla	r2, r5, r2, sl
 8005d6c:	fa13 f38b 	uxtah	r3, r3, fp
 8005d70:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005d74:	fa1f fb82 	uxth.w	fp, r2
 8005d78:	f8de 2000 	ldr.w	r2, [lr]
 8005d7c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005d80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d8a:	4581      	cmp	r9, r0
 8005d8c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005d90:	f84e 3b04 	str.w	r3, [lr], #4
 8005d94:	d2db      	bcs.n	8005d4e <quorem+0x42>
 8005d96:	f856 300c 	ldr.w	r3, [r6, ip]
 8005d9a:	b933      	cbnz	r3, 8005daa <quorem+0x9e>
 8005d9c:	9b01      	ldr	r3, [sp, #4]
 8005d9e:	3b04      	subs	r3, #4
 8005da0:	429e      	cmp	r6, r3
 8005da2:	461a      	mov	r2, r3
 8005da4:	d330      	bcc.n	8005e08 <quorem+0xfc>
 8005da6:	f8c8 4010 	str.w	r4, [r8, #16]
 8005daa:	4640      	mov	r0, r8
 8005dac:	f001 f82a 	bl	8006e04 <__mcmp>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	db25      	blt.n	8005e00 <quorem+0xf4>
 8005db4:	3501      	adds	r5, #1
 8005db6:	4630      	mov	r0, r6
 8005db8:	f04f 0c00 	mov.w	ip, #0
 8005dbc:	f857 2b04 	ldr.w	r2, [r7], #4
 8005dc0:	f8d0 e000 	ldr.w	lr, [r0]
 8005dc4:	b293      	uxth	r3, r2
 8005dc6:	ebac 0303 	sub.w	r3, ip, r3
 8005dca:	0c12      	lsrs	r2, r2, #16
 8005dcc:	fa13 f38e 	uxtah	r3, r3, lr
 8005dd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005dd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dde:	45b9      	cmp	r9, r7
 8005de0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005de4:	f840 3b04 	str.w	r3, [r0], #4
 8005de8:	d2e8      	bcs.n	8005dbc <quorem+0xb0>
 8005dea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005dee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005df2:	b92a      	cbnz	r2, 8005e00 <quorem+0xf4>
 8005df4:	3b04      	subs	r3, #4
 8005df6:	429e      	cmp	r6, r3
 8005df8:	461a      	mov	r2, r3
 8005dfa:	d30b      	bcc.n	8005e14 <quorem+0x108>
 8005dfc:	f8c8 4010 	str.w	r4, [r8, #16]
 8005e00:	4628      	mov	r0, r5
 8005e02:	b003      	add	sp, #12
 8005e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e08:	6812      	ldr	r2, [r2, #0]
 8005e0a:	3b04      	subs	r3, #4
 8005e0c:	2a00      	cmp	r2, #0
 8005e0e:	d1ca      	bne.n	8005da6 <quorem+0x9a>
 8005e10:	3c01      	subs	r4, #1
 8005e12:	e7c5      	b.n	8005da0 <quorem+0x94>
 8005e14:	6812      	ldr	r2, [r2, #0]
 8005e16:	3b04      	subs	r3, #4
 8005e18:	2a00      	cmp	r2, #0
 8005e1a:	d1ef      	bne.n	8005dfc <quorem+0xf0>
 8005e1c:	3c01      	subs	r4, #1
 8005e1e:	e7ea      	b.n	8005df6 <quorem+0xea>
 8005e20:	2000      	movs	r0, #0
 8005e22:	e7ee      	b.n	8005e02 <quorem+0xf6>
 8005e24:	0000      	movs	r0, r0
	...

08005e28 <_dtoa_r>:
 8005e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2c:	ec57 6b10 	vmov	r6, r7, d0
 8005e30:	b097      	sub	sp, #92	; 0x5c
 8005e32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005e34:	9106      	str	r1, [sp, #24]
 8005e36:	4604      	mov	r4, r0
 8005e38:	920b      	str	r2, [sp, #44]	; 0x2c
 8005e3a:	9312      	str	r3, [sp, #72]	; 0x48
 8005e3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005e40:	e9cd 6700 	strd	r6, r7, [sp]
 8005e44:	b93d      	cbnz	r5, 8005e56 <_dtoa_r+0x2e>
 8005e46:	2010      	movs	r0, #16
 8005e48:	f000 fdb4 	bl	80069b4 <malloc>
 8005e4c:	6260      	str	r0, [r4, #36]	; 0x24
 8005e4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e52:	6005      	str	r5, [r0, #0]
 8005e54:	60c5      	str	r5, [r0, #12]
 8005e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e58:	6819      	ldr	r1, [r3, #0]
 8005e5a:	b151      	cbz	r1, 8005e72 <_dtoa_r+0x4a>
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	604a      	str	r2, [r1, #4]
 8005e60:	2301      	movs	r3, #1
 8005e62:	4093      	lsls	r3, r2
 8005e64:	608b      	str	r3, [r1, #8]
 8005e66:	4620      	mov	r0, r4
 8005e68:	f000 fdeb 	bl	8006a42 <_Bfree>
 8005e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e6e:	2200      	movs	r2, #0
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	1e3b      	subs	r3, r7, #0
 8005e74:	bfbb      	ittet	lt
 8005e76:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005e7a:	9301      	strlt	r3, [sp, #4]
 8005e7c:	2300      	movge	r3, #0
 8005e7e:	2201      	movlt	r2, #1
 8005e80:	bfac      	ite	ge
 8005e82:	f8c8 3000 	strge.w	r3, [r8]
 8005e86:	f8c8 2000 	strlt.w	r2, [r8]
 8005e8a:	4baf      	ldr	r3, [pc, #700]	; (8006148 <_dtoa_r+0x320>)
 8005e8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005e90:	ea33 0308 	bics.w	r3, r3, r8
 8005e94:	d114      	bne.n	8005ec0 <_dtoa_r+0x98>
 8005e96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e98:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	9b00      	ldr	r3, [sp, #0]
 8005ea0:	b923      	cbnz	r3, 8005eac <_dtoa_r+0x84>
 8005ea2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	f000 8542 	beq.w	8006930 <_dtoa_r+0xb08>
 8005eac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005eae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800615c <_dtoa_r+0x334>
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 8544 	beq.w	8006940 <_dtoa_r+0xb18>
 8005eb8:	f10b 0303 	add.w	r3, fp, #3
 8005ebc:	f000 bd3e 	b.w	800693c <_dtoa_r+0xb14>
 8005ec0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	4630      	mov	r0, r6
 8005eca:	4639      	mov	r1, r7
 8005ecc:	f7fa fe1c 	bl	8000b08 <__aeabi_dcmpeq>
 8005ed0:	4681      	mov	r9, r0
 8005ed2:	b168      	cbz	r0, 8005ef0 <_dtoa_r+0xc8>
 8005ed4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 8524 	beq.w	800692a <_dtoa_r+0xb02>
 8005ee2:	4b9a      	ldr	r3, [pc, #616]	; (800614c <_dtoa_r+0x324>)
 8005ee4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ee6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	f000 bd28 	b.w	8006940 <_dtoa_r+0xb18>
 8005ef0:	aa14      	add	r2, sp, #80	; 0x50
 8005ef2:	a915      	add	r1, sp, #84	; 0x54
 8005ef4:	ec47 6b10 	vmov	d0, r6, r7
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f000 fffa 	bl	8006ef2 <__d2b>
 8005efe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005f02:	9004      	str	r0, [sp, #16]
 8005f04:	2d00      	cmp	r5, #0
 8005f06:	d07c      	beq.n	8006002 <_dtoa_r+0x1da>
 8005f08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f0c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005f10:	46b2      	mov	sl, r6
 8005f12:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005f16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005f1a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005f1e:	2200      	movs	r2, #0
 8005f20:	4b8b      	ldr	r3, [pc, #556]	; (8006150 <_dtoa_r+0x328>)
 8005f22:	4650      	mov	r0, sl
 8005f24:	4659      	mov	r1, fp
 8005f26:	f7fa f9cf 	bl	80002c8 <__aeabi_dsub>
 8005f2a:	a381      	add	r3, pc, #516	; (adr r3, 8006130 <_dtoa_r+0x308>)
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	f7fa fb82 	bl	8000638 <__aeabi_dmul>
 8005f34:	a380      	add	r3, pc, #512	; (adr r3, 8006138 <_dtoa_r+0x310>)
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	f7fa f9c7 	bl	80002cc <__adddf3>
 8005f3e:	4606      	mov	r6, r0
 8005f40:	4628      	mov	r0, r5
 8005f42:	460f      	mov	r7, r1
 8005f44:	f7fa fb0e 	bl	8000564 <__aeabi_i2d>
 8005f48:	a37d      	add	r3, pc, #500	; (adr r3, 8006140 <_dtoa_r+0x318>)
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	f7fa fb73 	bl	8000638 <__aeabi_dmul>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4630      	mov	r0, r6
 8005f58:	4639      	mov	r1, r7
 8005f5a:	f7fa f9b7 	bl	80002cc <__adddf3>
 8005f5e:	4606      	mov	r6, r0
 8005f60:	460f      	mov	r7, r1
 8005f62:	f7fa fe19 	bl	8000b98 <__aeabi_d2iz>
 8005f66:	2200      	movs	r2, #0
 8005f68:	4682      	mov	sl, r0
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	4639      	mov	r1, r7
 8005f70:	f7fa fdd4 	bl	8000b1c <__aeabi_dcmplt>
 8005f74:	b148      	cbz	r0, 8005f8a <_dtoa_r+0x162>
 8005f76:	4650      	mov	r0, sl
 8005f78:	f7fa faf4 	bl	8000564 <__aeabi_i2d>
 8005f7c:	4632      	mov	r2, r6
 8005f7e:	463b      	mov	r3, r7
 8005f80:	f7fa fdc2 	bl	8000b08 <__aeabi_dcmpeq>
 8005f84:	b908      	cbnz	r0, 8005f8a <_dtoa_r+0x162>
 8005f86:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005f8a:	f1ba 0f16 	cmp.w	sl, #22
 8005f8e:	d859      	bhi.n	8006044 <_dtoa_r+0x21c>
 8005f90:	4970      	ldr	r1, [pc, #448]	; (8006154 <_dtoa_r+0x32c>)
 8005f92:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005f96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f9e:	f7fa fddb 	bl	8000b58 <__aeabi_dcmpgt>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	d050      	beq.n	8006048 <_dtoa_r+0x220>
 8005fa6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005faa:	2300      	movs	r3, #0
 8005fac:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005fb0:	1b5d      	subs	r5, r3, r5
 8005fb2:	f1b5 0801 	subs.w	r8, r5, #1
 8005fb6:	bf49      	itett	mi
 8005fb8:	f1c5 0301 	rsbmi	r3, r5, #1
 8005fbc:	2300      	movpl	r3, #0
 8005fbe:	9305      	strmi	r3, [sp, #20]
 8005fc0:	f04f 0800 	movmi.w	r8, #0
 8005fc4:	bf58      	it	pl
 8005fc6:	9305      	strpl	r3, [sp, #20]
 8005fc8:	f1ba 0f00 	cmp.w	sl, #0
 8005fcc:	db3e      	blt.n	800604c <_dtoa_r+0x224>
 8005fce:	2300      	movs	r3, #0
 8005fd0:	44d0      	add	r8, sl
 8005fd2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005fd6:	9307      	str	r3, [sp, #28]
 8005fd8:	9b06      	ldr	r3, [sp, #24]
 8005fda:	2b09      	cmp	r3, #9
 8005fdc:	f200 8090 	bhi.w	8006100 <_dtoa_r+0x2d8>
 8005fe0:	2b05      	cmp	r3, #5
 8005fe2:	bfc4      	itt	gt
 8005fe4:	3b04      	subgt	r3, #4
 8005fe6:	9306      	strgt	r3, [sp, #24]
 8005fe8:	9b06      	ldr	r3, [sp, #24]
 8005fea:	f1a3 0302 	sub.w	r3, r3, #2
 8005fee:	bfcc      	ite	gt
 8005ff0:	2500      	movgt	r5, #0
 8005ff2:	2501      	movle	r5, #1
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	f200 808f 	bhi.w	8006118 <_dtoa_r+0x2f0>
 8005ffa:	e8df f003 	tbb	[pc, r3]
 8005ffe:	7f7d      	.short	0x7f7d
 8006000:	7131      	.short	0x7131
 8006002:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006006:	441d      	add	r5, r3
 8006008:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800600c:	2820      	cmp	r0, #32
 800600e:	dd13      	ble.n	8006038 <_dtoa_r+0x210>
 8006010:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006014:	9b00      	ldr	r3, [sp, #0]
 8006016:	fa08 f800 	lsl.w	r8, r8, r0
 800601a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800601e:	fa23 f000 	lsr.w	r0, r3, r0
 8006022:	ea48 0000 	orr.w	r0, r8, r0
 8006026:	f7fa fa8d 	bl	8000544 <__aeabi_ui2d>
 800602a:	2301      	movs	r3, #1
 800602c:	4682      	mov	sl, r0
 800602e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006032:	3d01      	subs	r5, #1
 8006034:	9313      	str	r3, [sp, #76]	; 0x4c
 8006036:	e772      	b.n	8005f1e <_dtoa_r+0xf6>
 8006038:	9b00      	ldr	r3, [sp, #0]
 800603a:	f1c0 0020 	rsb	r0, r0, #32
 800603e:	fa03 f000 	lsl.w	r0, r3, r0
 8006042:	e7f0      	b.n	8006026 <_dtoa_r+0x1fe>
 8006044:	2301      	movs	r3, #1
 8006046:	e7b1      	b.n	8005fac <_dtoa_r+0x184>
 8006048:	900f      	str	r0, [sp, #60]	; 0x3c
 800604a:	e7b0      	b.n	8005fae <_dtoa_r+0x186>
 800604c:	9b05      	ldr	r3, [sp, #20]
 800604e:	eba3 030a 	sub.w	r3, r3, sl
 8006052:	9305      	str	r3, [sp, #20]
 8006054:	f1ca 0300 	rsb	r3, sl, #0
 8006058:	9307      	str	r3, [sp, #28]
 800605a:	2300      	movs	r3, #0
 800605c:	930e      	str	r3, [sp, #56]	; 0x38
 800605e:	e7bb      	b.n	8005fd8 <_dtoa_r+0x1b0>
 8006060:	2301      	movs	r3, #1
 8006062:	930a      	str	r3, [sp, #40]	; 0x28
 8006064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006066:	2b00      	cmp	r3, #0
 8006068:	dd59      	ble.n	800611e <_dtoa_r+0x2f6>
 800606a:	9302      	str	r3, [sp, #8]
 800606c:	4699      	mov	r9, r3
 800606e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006070:	2200      	movs	r2, #0
 8006072:	6072      	str	r2, [r6, #4]
 8006074:	2204      	movs	r2, #4
 8006076:	f102 0014 	add.w	r0, r2, #20
 800607a:	4298      	cmp	r0, r3
 800607c:	6871      	ldr	r1, [r6, #4]
 800607e:	d953      	bls.n	8006128 <_dtoa_r+0x300>
 8006080:	4620      	mov	r0, r4
 8006082:	f000 fcaa 	bl	80069da <_Balloc>
 8006086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006088:	6030      	str	r0, [r6, #0]
 800608a:	f1b9 0f0e 	cmp.w	r9, #14
 800608e:	f8d3 b000 	ldr.w	fp, [r3]
 8006092:	f200 80e6 	bhi.w	8006262 <_dtoa_r+0x43a>
 8006096:	2d00      	cmp	r5, #0
 8006098:	f000 80e3 	beq.w	8006262 <_dtoa_r+0x43a>
 800609c:	ed9d 7b00 	vldr	d7, [sp]
 80060a0:	f1ba 0f00 	cmp.w	sl, #0
 80060a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80060a8:	dd74      	ble.n	8006194 <_dtoa_r+0x36c>
 80060aa:	4a2a      	ldr	r2, [pc, #168]	; (8006154 <_dtoa_r+0x32c>)
 80060ac:	f00a 030f 	and.w	r3, sl, #15
 80060b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80060b4:	ed93 7b00 	vldr	d7, [r3]
 80060b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80060bc:	06f0      	lsls	r0, r6, #27
 80060be:	ed8d 7b08 	vstr	d7, [sp, #32]
 80060c2:	d565      	bpl.n	8006190 <_dtoa_r+0x368>
 80060c4:	4b24      	ldr	r3, [pc, #144]	; (8006158 <_dtoa_r+0x330>)
 80060c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060ce:	f7fa fbdd 	bl	800088c <__aeabi_ddiv>
 80060d2:	e9cd 0100 	strd	r0, r1, [sp]
 80060d6:	f006 060f 	and.w	r6, r6, #15
 80060da:	2503      	movs	r5, #3
 80060dc:	4f1e      	ldr	r7, [pc, #120]	; (8006158 <_dtoa_r+0x330>)
 80060de:	e04c      	b.n	800617a <_dtoa_r+0x352>
 80060e0:	2301      	movs	r3, #1
 80060e2:	930a      	str	r3, [sp, #40]	; 0x28
 80060e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060e6:	4453      	add	r3, sl
 80060e8:	f103 0901 	add.w	r9, r3, #1
 80060ec:	9302      	str	r3, [sp, #8]
 80060ee:	464b      	mov	r3, r9
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	bfb8      	it	lt
 80060f4:	2301      	movlt	r3, #1
 80060f6:	e7ba      	b.n	800606e <_dtoa_r+0x246>
 80060f8:	2300      	movs	r3, #0
 80060fa:	e7b2      	b.n	8006062 <_dtoa_r+0x23a>
 80060fc:	2300      	movs	r3, #0
 80060fe:	e7f0      	b.n	80060e2 <_dtoa_r+0x2ba>
 8006100:	2501      	movs	r5, #1
 8006102:	2300      	movs	r3, #0
 8006104:	9306      	str	r3, [sp, #24]
 8006106:	950a      	str	r5, [sp, #40]	; 0x28
 8006108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800610c:	9302      	str	r3, [sp, #8]
 800610e:	4699      	mov	r9, r3
 8006110:	2200      	movs	r2, #0
 8006112:	2312      	movs	r3, #18
 8006114:	920b      	str	r2, [sp, #44]	; 0x2c
 8006116:	e7aa      	b.n	800606e <_dtoa_r+0x246>
 8006118:	2301      	movs	r3, #1
 800611a:	930a      	str	r3, [sp, #40]	; 0x28
 800611c:	e7f4      	b.n	8006108 <_dtoa_r+0x2e0>
 800611e:	2301      	movs	r3, #1
 8006120:	9302      	str	r3, [sp, #8]
 8006122:	4699      	mov	r9, r3
 8006124:	461a      	mov	r2, r3
 8006126:	e7f5      	b.n	8006114 <_dtoa_r+0x2ec>
 8006128:	3101      	adds	r1, #1
 800612a:	6071      	str	r1, [r6, #4]
 800612c:	0052      	lsls	r2, r2, #1
 800612e:	e7a2      	b.n	8006076 <_dtoa_r+0x24e>
 8006130:	636f4361 	.word	0x636f4361
 8006134:	3fd287a7 	.word	0x3fd287a7
 8006138:	8b60c8b3 	.word	0x8b60c8b3
 800613c:	3fc68a28 	.word	0x3fc68a28
 8006140:	509f79fb 	.word	0x509f79fb
 8006144:	3fd34413 	.word	0x3fd34413
 8006148:	7ff00000 	.word	0x7ff00000
 800614c:	08007895 	.word	0x08007895
 8006150:	3ff80000 	.word	0x3ff80000
 8006154:	080078f0 	.word	0x080078f0
 8006158:	080078c8 	.word	0x080078c8
 800615c:	080078c1 	.word	0x080078c1
 8006160:	07f1      	lsls	r1, r6, #31
 8006162:	d508      	bpl.n	8006176 <_dtoa_r+0x34e>
 8006164:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800616c:	f7fa fa64 	bl	8000638 <__aeabi_dmul>
 8006170:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006174:	3501      	adds	r5, #1
 8006176:	1076      	asrs	r6, r6, #1
 8006178:	3708      	adds	r7, #8
 800617a:	2e00      	cmp	r6, #0
 800617c:	d1f0      	bne.n	8006160 <_dtoa_r+0x338>
 800617e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006182:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006186:	f7fa fb81 	bl	800088c <__aeabi_ddiv>
 800618a:	e9cd 0100 	strd	r0, r1, [sp]
 800618e:	e01a      	b.n	80061c6 <_dtoa_r+0x39e>
 8006190:	2502      	movs	r5, #2
 8006192:	e7a3      	b.n	80060dc <_dtoa_r+0x2b4>
 8006194:	f000 80a0 	beq.w	80062d8 <_dtoa_r+0x4b0>
 8006198:	f1ca 0600 	rsb	r6, sl, #0
 800619c:	4b9f      	ldr	r3, [pc, #636]	; (800641c <_dtoa_r+0x5f4>)
 800619e:	4fa0      	ldr	r7, [pc, #640]	; (8006420 <_dtoa_r+0x5f8>)
 80061a0:	f006 020f 	and.w	r2, r6, #15
 80061a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061b0:	f7fa fa42 	bl	8000638 <__aeabi_dmul>
 80061b4:	e9cd 0100 	strd	r0, r1, [sp]
 80061b8:	1136      	asrs	r6, r6, #4
 80061ba:	2300      	movs	r3, #0
 80061bc:	2502      	movs	r5, #2
 80061be:	2e00      	cmp	r6, #0
 80061c0:	d17f      	bne.n	80062c2 <_dtoa_r+0x49a>
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e1      	bne.n	800618a <_dtoa_r+0x362>
 80061c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 8087 	beq.w	80062dc <_dtoa_r+0x4b4>
 80061ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80061d2:	2200      	movs	r2, #0
 80061d4:	4b93      	ldr	r3, [pc, #588]	; (8006424 <_dtoa_r+0x5fc>)
 80061d6:	4630      	mov	r0, r6
 80061d8:	4639      	mov	r1, r7
 80061da:	f7fa fc9f 	bl	8000b1c <__aeabi_dcmplt>
 80061de:	2800      	cmp	r0, #0
 80061e0:	d07c      	beq.n	80062dc <_dtoa_r+0x4b4>
 80061e2:	f1b9 0f00 	cmp.w	r9, #0
 80061e6:	d079      	beq.n	80062dc <_dtoa_r+0x4b4>
 80061e8:	9b02      	ldr	r3, [sp, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	dd35      	ble.n	800625a <_dtoa_r+0x432>
 80061ee:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80061f2:	9308      	str	r3, [sp, #32]
 80061f4:	4639      	mov	r1, r7
 80061f6:	2200      	movs	r2, #0
 80061f8:	4b8b      	ldr	r3, [pc, #556]	; (8006428 <_dtoa_r+0x600>)
 80061fa:	4630      	mov	r0, r6
 80061fc:	f7fa fa1c 	bl	8000638 <__aeabi_dmul>
 8006200:	e9cd 0100 	strd	r0, r1, [sp]
 8006204:	9f02      	ldr	r7, [sp, #8]
 8006206:	3501      	adds	r5, #1
 8006208:	4628      	mov	r0, r5
 800620a:	f7fa f9ab 	bl	8000564 <__aeabi_i2d>
 800620e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006212:	f7fa fa11 	bl	8000638 <__aeabi_dmul>
 8006216:	2200      	movs	r2, #0
 8006218:	4b84      	ldr	r3, [pc, #528]	; (800642c <_dtoa_r+0x604>)
 800621a:	f7fa f857 	bl	80002cc <__adddf3>
 800621e:	4605      	mov	r5, r0
 8006220:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006224:	2f00      	cmp	r7, #0
 8006226:	d15d      	bne.n	80062e4 <_dtoa_r+0x4bc>
 8006228:	2200      	movs	r2, #0
 800622a:	4b81      	ldr	r3, [pc, #516]	; (8006430 <_dtoa_r+0x608>)
 800622c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006230:	f7fa f84a 	bl	80002c8 <__aeabi_dsub>
 8006234:	462a      	mov	r2, r5
 8006236:	4633      	mov	r3, r6
 8006238:	e9cd 0100 	strd	r0, r1, [sp]
 800623c:	f7fa fc8c 	bl	8000b58 <__aeabi_dcmpgt>
 8006240:	2800      	cmp	r0, #0
 8006242:	f040 8288 	bne.w	8006756 <_dtoa_r+0x92e>
 8006246:	462a      	mov	r2, r5
 8006248:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800624c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006250:	f7fa fc64 	bl	8000b1c <__aeabi_dcmplt>
 8006254:	2800      	cmp	r0, #0
 8006256:	f040 827c 	bne.w	8006752 <_dtoa_r+0x92a>
 800625a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800625e:	e9cd 2300 	strd	r2, r3, [sp]
 8006262:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006264:	2b00      	cmp	r3, #0
 8006266:	f2c0 8150 	blt.w	800650a <_dtoa_r+0x6e2>
 800626a:	f1ba 0f0e 	cmp.w	sl, #14
 800626e:	f300 814c 	bgt.w	800650a <_dtoa_r+0x6e2>
 8006272:	4b6a      	ldr	r3, [pc, #424]	; (800641c <_dtoa_r+0x5f4>)
 8006274:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006278:	ed93 7b00 	vldr	d7, [r3]
 800627c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800627e:	2b00      	cmp	r3, #0
 8006280:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006284:	f280 80d8 	bge.w	8006438 <_dtoa_r+0x610>
 8006288:	f1b9 0f00 	cmp.w	r9, #0
 800628c:	f300 80d4 	bgt.w	8006438 <_dtoa_r+0x610>
 8006290:	f040 825e 	bne.w	8006750 <_dtoa_r+0x928>
 8006294:	2200      	movs	r2, #0
 8006296:	4b66      	ldr	r3, [pc, #408]	; (8006430 <_dtoa_r+0x608>)
 8006298:	ec51 0b17 	vmov	r0, r1, d7
 800629c:	f7fa f9cc 	bl	8000638 <__aeabi_dmul>
 80062a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062a4:	f7fa fc4e 	bl	8000b44 <__aeabi_dcmpge>
 80062a8:	464f      	mov	r7, r9
 80062aa:	464e      	mov	r6, r9
 80062ac:	2800      	cmp	r0, #0
 80062ae:	f040 8234 	bne.w	800671a <_dtoa_r+0x8f2>
 80062b2:	2331      	movs	r3, #49	; 0x31
 80062b4:	f10b 0501 	add.w	r5, fp, #1
 80062b8:	f88b 3000 	strb.w	r3, [fp]
 80062bc:	f10a 0a01 	add.w	sl, sl, #1
 80062c0:	e22f      	b.n	8006722 <_dtoa_r+0x8fa>
 80062c2:	07f2      	lsls	r2, r6, #31
 80062c4:	d505      	bpl.n	80062d2 <_dtoa_r+0x4aa>
 80062c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062ca:	f7fa f9b5 	bl	8000638 <__aeabi_dmul>
 80062ce:	3501      	adds	r5, #1
 80062d0:	2301      	movs	r3, #1
 80062d2:	1076      	asrs	r6, r6, #1
 80062d4:	3708      	adds	r7, #8
 80062d6:	e772      	b.n	80061be <_dtoa_r+0x396>
 80062d8:	2502      	movs	r5, #2
 80062da:	e774      	b.n	80061c6 <_dtoa_r+0x39e>
 80062dc:	f8cd a020 	str.w	sl, [sp, #32]
 80062e0:	464f      	mov	r7, r9
 80062e2:	e791      	b.n	8006208 <_dtoa_r+0x3e0>
 80062e4:	4b4d      	ldr	r3, [pc, #308]	; (800641c <_dtoa_r+0x5f4>)
 80062e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80062ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d047      	beq.n	8006384 <_dtoa_r+0x55c>
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	2000      	movs	r0, #0
 80062fa:	494e      	ldr	r1, [pc, #312]	; (8006434 <_dtoa_r+0x60c>)
 80062fc:	f7fa fac6 	bl	800088c <__aeabi_ddiv>
 8006300:	462a      	mov	r2, r5
 8006302:	4633      	mov	r3, r6
 8006304:	f7f9 ffe0 	bl	80002c8 <__aeabi_dsub>
 8006308:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800630c:	465d      	mov	r5, fp
 800630e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006312:	f7fa fc41 	bl	8000b98 <__aeabi_d2iz>
 8006316:	4606      	mov	r6, r0
 8006318:	f7fa f924 	bl	8000564 <__aeabi_i2d>
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006324:	f7f9 ffd0 	bl	80002c8 <__aeabi_dsub>
 8006328:	3630      	adds	r6, #48	; 0x30
 800632a:	f805 6b01 	strb.w	r6, [r5], #1
 800632e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006332:	e9cd 0100 	strd	r0, r1, [sp]
 8006336:	f7fa fbf1 	bl	8000b1c <__aeabi_dcmplt>
 800633a:	2800      	cmp	r0, #0
 800633c:	d163      	bne.n	8006406 <_dtoa_r+0x5de>
 800633e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006342:	2000      	movs	r0, #0
 8006344:	4937      	ldr	r1, [pc, #220]	; (8006424 <_dtoa_r+0x5fc>)
 8006346:	f7f9 ffbf 	bl	80002c8 <__aeabi_dsub>
 800634a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800634e:	f7fa fbe5 	bl	8000b1c <__aeabi_dcmplt>
 8006352:	2800      	cmp	r0, #0
 8006354:	f040 80b7 	bne.w	80064c6 <_dtoa_r+0x69e>
 8006358:	eba5 030b 	sub.w	r3, r5, fp
 800635c:	429f      	cmp	r7, r3
 800635e:	f77f af7c 	ble.w	800625a <_dtoa_r+0x432>
 8006362:	2200      	movs	r2, #0
 8006364:	4b30      	ldr	r3, [pc, #192]	; (8006428 <_dtoa_r+0x600>)
 8006366:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800636a:	f7fa f965 	bl	8000638 <__aeabi_dmul>
 800636e:	2200      	movs	r2, #0
 8006370:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006374:	4b2c      	ldr	r3, [pc, #176]	; (8006428 <_dtoa_r+0x600>)
 8006376:	e9dd 0100 	ldrd	r0, r1, [sp]
 800637a:	f7fa f95d 	bl	8000638 <__aeabi_dmul>
 800637e:	e9cd 0100 	strd	r0, r1, [sp]
 8006382:	e7c4      	b.n	800630e <_dtoa_r+0x4e6>
 8006384:	462a      	mov	r2, r5
 8006386:	4633      	mov	r3, r6
 8006388:	f7fa f956 	bl	8000638 <__aeabi_dmul>
 800638c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006390:	eb0b 0507 	add.w	r5, fp, r7
 8006394:	465e      	mov	r6, fp
 8006396:	e9dd 0100 	ldrd	r0, r1, [sp]
 800639a:	f7fa fbfd 	bl	8000b98 <__aeabi_d2iz>
 800639e:	4607      	mov	r7, r0
 80063a0:	f7fa f8e0 	bl	8000564 <__aeabi_i2d>
 80063a4:	3730      	adds	r7, #48	; 0x30
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063ae:	f7f9 ff8b 	bl	80002c8 <__aeabi_dsub>
 80063b2:	f806 7b01 	strb.w	r7, [r6], #1
 80063b6:	42ae      	cmp	r6, r5
 80063b8:	e9cd 0100 	strd	r0, r1, [sp]
 80063bc:	f04f 0200 	mov.w	r2, #0
 80063c0:	d126      	bne.n	8006410 <_dtoa_r+0x5e8>
 80063c2:	4b1c      	ldr	r3, [pc, #112]	; (8006434 <_dtoa_r+0x60c>)
 80063c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063c8:	f7f9 ff80 	bl	80002cc <__adddf3>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063d4:	f7fa fbc0 	bl	8000b58 <__aeabi_dcmpgt>
 80063d8:	2800      	cmp	r0, #0
 80063da:	d174      	bne.n	80064c6 <_dtoa_r+0x69e>
 80063dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80063e0:	2000      	movs	r0, #0
 80063e2:	4914      	ldr	r1, [pc, #80]	; (8006434 <_dtoa_r+0x60c>)
 80063e4:	f7f9 ff70 	bl	80002c8 <__aeabi_dsub>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063f0:	f7fa fb94 	bl	8000b1c <__aeabi_dcmplt>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	f43f af30 	beq.w	800625a <_dtoa_r+0x432>
 80063fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063fe:	2b30      	cmp	r3, #48	; 0x30
 8006400:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006404:	d002      	beq.n	800640c <_dtoa_r+0x5e4>
 8006406:	f8dd a020 	ldr.w	sl, [sp, #32]
 800640a:	e04a      	b.n	80064a2 <_dtoa_r+0x67a>
 800640c:	4615      	mov	r5, r2
 800640e:	e7f4      	b.n	80063fa <_dtoa_r+0x5d2>
 8006410:	4b05      	ldr	r3, [pc, #20]	; (8006428 <_dtoa_r+0x600>)
 8006412:	f7fa f911 	bl	8000638 <__aeabi_dmul>
 8006416:	e9cd 0100 	strd	r0, r1, [sp]
 800641a:	e7bc      	b.n	8006396 <_dtoa_r+0x56e>
 800641c:	080078f0 	.word	0x080078f0
 8006420:	080078c8 	.word	0x080078c8
 8006424:	3ff00000 	.word	0x3ff00000
 8006428:	40240000 	.word	0x40240000
 800642c:	401c0000 	.word	0x401c0000
 8006430:	40140000 	.word	0x40140000
 8006434:	3fe00000 	.word	0x3fe00000
 8006438:	e9dd 6700 	ldrd	r6, r7, [sp]
 800643c:	465d      	mov	r5, fp
 800643e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006442:	4630      	mov	r0, r6
 8006444:	4639      	mov	r1, r7
 8006446:	f7fa fa21 	bl	800088c <__aeabi_ddiv>
 800644a:	f7fa fba5 	bl	8000b98 <__aeabi_d2iz>
 800644e:	4680      	mov	r8, r0
 8006450:	f7fa f888 	bl	8000564 <__aeabi_i2d>
 8006454:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006458:	f7fa f8ee 	bl	8000638 <__aeabi_dmul>
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	4630      	mov	r0, r6
 8006462:	4639      	mov	r1, r7
 8006464:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006468:	f7f9 ff2e 	bl	80002c8 <__aeabi_dsub>
 800646c:	f805 6b01 	strb.w	r6, [r5], #1
 8006470:	eba5 060b 	sub.w	r6, r5, fp
 8006474:	45b1      	cmp	r9, r6
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	d139      	bne.n	80064f0 <_dtoa_r+0x6c8>
 800647c:	f7f9 ff26 	bl	80002cc <__adddf3>
 8006480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006484:	4606      	mov	r6, r0
 8006486:	460f      	mov	r7, r1
 8006488:	f7fa fb66 	bl	8000b58 <__aeabi_dcmpgt>
 800648c:	b9c8      	cbnz	r0, 80064c2 <_dtoa_r+0x69a>
 800648e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006492:	4630      	mov	r0, r6
 8006494:	4639      	mov	r1, r7
 8006496:	f7fa fb37 	bl	8000b08 <__aeabi_dcmpeq>
 800649a:	b110      	cbz	r0, 80064a2 <_dtoa_r+0x67a>
 800649c:	f018 0f01 	tst.w	r8, #1
 80064a0:	d10f      	bne.n	80064c2 <_dtoa_r+0x69a>
 80064a2:	9904      	ldr	r1, [sp, #16]
 80064a4:	4620      	mov	r0, r4
 80064a6:	f000 facc 	bl	8006a42 <_Bfree>
 80064aa:	2300      	movs	r3, #0
 80064ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064ae:	702b      	strb	r3, [r5, #0]
 80064b0:	f10a 0301 	add.w	r3, sl, #1
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 8241 	beq.w	8006940 <_dtoa_r+0xb18>
 80064be:	601d      	str	r5, [r3, #0]
 80064c0:	e23e      	b.n	8006940 <_dtoa_r+0xb18>
 80064c2:	f8cd a020 	str.w	sl, [sp, #32]
 80064c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80064ca:	2a39      	cmp	r2, #57	; 0x39
 80064cc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80064d0:	d108      	bne.n	80064e4 <_dtoa_r+0x6bc>
 80064d2:	459b      	cmp	fp, r3
 80064d4:	d10a      	bne.n	80064ec <_dtoa_r+0x6c4>
 80064d6:	9b08      	ldr	r3, [sp, #32]
 80064d8:	3301      	adds	r3, #1
 80064da:	9308      	str	r3, [sp, #32]
 80064dc:	2330      	movs	r3, #48	; 0x30
 80064de:	f88b 3000 	strb.w	r3, [fp]
 80064e2:	465b      	mov	r3, fp
 80064e4:	781a      	ldrb	r2, [r3, #0]
 80064e6:	3201      	adds	r2, #1
 80064e8:	701a      	strb	r2, [r3, #0]
 80064ea:	e78c      	b.n	8006406 <_dtoa_r+0x5de>
 80064ec:	461d      	mov	r5, r3
 80064ee:	e7ea      	b.n	80064c6 <_dtoa_r+0x69e>
 80064f0:	2200      	movs	r2, #0
 80064f2:	4b9b      	ldr	r3, [pc, #620]	; (8006760 <_dtoa_r+0x938>)
 80064f4:	f7fa f8a0 	bl	8000638 <__aeabi_dmul>
 80064f8:	2200      	movs	r2, #0
 80064fa:	2300      	movs	r3, #0
 80064fc:	4606      	mov	r6, r0
 80064fe:	460f      	mov	r7, r1
 8006500:	f7fa fb02 	bl	8000b08 <__aeabi_dcmpeq>
 8006504:	2800      	cmp	r0, #0
 8006506:	d09a      	beq.n	800643e <_dtoa_r+0x616>
 8006508:	e7cb      	b.n	80064a2 <_dtoa_r+0x67a>
 800650a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800650c:	2a00      	cmp	r2, #0
 800650e:	f000 808b 	beq.w	8006628 <_dtoa_r+0x800>
 8006512:	9a06      	ldr	r2, [sp, #24]
 8006514:	2a01      	cmp	r2, #1
 8006516:	dc6e      	bgt.n	80065f6 <_dtoa_r+0x7ce>
 8006518:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800651a:	2a00      	cmp	r2, #0
 800651c:	d067      	beq.n	80065ee <_dtoa_r+0x7c6>
 800651e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006522:	9f07      	ldr	r7, [sp, #28]
 8006524:	9d05      	ldr	r5, [sp, #20]
 8006526:	9a05      	ldr	r2, [sp, #20]
 8006528:	2101      	movs	r1, #1
 800652a:	441a      	add	r2, r3
 800652c:	4620      	mov	r0, r4
 800652e:	9205      	str	r2, [sp, #20]
 8006530:	4498      	add	r8, r3
 8006532:	f000 fb26 	bl	8006b82 <__i2b>
 8006536:	4606      	mov	r6, r0
 8006538:	2d00      	cmp	r5, #0
 800653a:	dd0c      	ble.n	8006556 <_dtoa_r+0x72e>
 800653c:	f1b8 0f00 	cmp.w	r8, #0
 8006540:	dd09      	ble.n	8006556 <_dtoa_r+0x72e>
 8006542:	4545      	cmp	r5, r8
 8006544:	9a05      	ldr	r2, [sp, #20]
 8006546:	462b      	mov	r3, r5
 8006548:	bfa8      	it	ge
 800654a:	4643      	movge	r3, r8
 800654c:	1ad2      	subs	r2, r2, r3
 800654e:	9205      	str	r2, [sp, #20]
 8006550:	1aed      	subs	r5, r5, r3
 8006552:	eba8 0803 	sub.w	r8, r8, r3
 8006556:	9b07      	ldr	r3, [sp, #28]
 8006558:	b1eb      	cbz	r3, 8006596 <_dtoa_r+0x76e>
 800655a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800655c:	2b00      	cmp	r3, #0
 800655e:	d067      	beq.n	8006630 <_dtoa_r+0x808>
 8006560:	b18f      	cbz	r7, 8006586 <_dtoa_r+0x75e>
 8006562:	4631      	mov	r1, r6
 8006564:	463a      	mov	r2, r7
 8006566:	4620      	mov	r0, r4
 8006568:	f000 fbaa 	bl	8006cc0 <__pow5mult>
 800656c:	9a04      	ldr	r2, [sp, #16]
 800656e:	4601      	mov	r1, r0
 8006570:	4606      	mov	r6, r0
 8006572:	4620      	mov	r0, r4
 8006574:	f000 fb0e 	bl	8006b94 <__multiply>
 8006578:	9904      	ldr	r1, [sp, #16]
 800657a:	9008      	str	r0, [sp, #32]
 800657c:	4620      	mov	r0, r4
 800657e:	f000 fa60 	bl	8006a42 <_Bfree>
 8006582:	9b08      	ldr	r3, [sp, #32]
 8006584:	9304      	str	r3, [sp, #16]
 8006586:	9b07      	ldr	r3, [sp, #28]
 8006588:	1bda      	subs	r2, r3, r7
 800658a:	d004      	beq.n	8006596 <_dtoa_r+0x76e>
 800658c:	9904      	ldr	r1, [sp, #16]
 800658e:	4620      	mov	r0, r4
 8006590:	f000 fb96 	bl	8006cc0 <__pow5mult>
 8006594:	9004      	str	r0, [sp, #16]
 8006596:	2101      	movs	r1, #1
 8006598:	4620      	mov	r0, r4
 800659a:	f000 faf2 	bl	8006b82 <__i2b>
 800659e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065a0:	4607      	mov	r7, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 81d0 	beq.w	8006948 <_dtoa_r+0xb20>
 80065a8:	461a      	mov	r2, r3
 80065aa:	4601      	mov	r1, r0
 80065ac:	4620      	mov	r0, r4
 80065ae:	f000 fb87 	bl	8006cc0 <__pow5mult>
 80065b2:	9b06      	ldr	r3, [sp, #24]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	4607      	mov	r7, r0
 80065b8:	dc40      	bgt.n	800663c <_dtoa_r+0x814>
 80065ba:	9b00      	ldr	r3, [sp, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d139      	bne.n	8006634 <_dtoa_r+0x80c>
 80065c0:	9b01      	ldr	r3, [sp, #4]
 80065c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d136      	bne.n	8006638 <_dtoa_r+0x810>
 80065ca:	9b01      	ldr	r3, [sp, #4]
 80065cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065d0:	0d1b      	lsrs	r3, r3, #20
 80065d2:	051b      	lsls	r3, r3, #20
 80065d4:	b12b      	cbz	r3, 80065e2 <_dtoa_r+0x7ba>
 80065d6:	9b05      	ldr	r3, [sp, #20]
 80065d8:	3301      	adds	r3, #1
 80065da:	9305      	str	r3, [sp, #20]
 80065dc:	f108 0801 	add.w	r8, r8, #1
 80065e0:	2301      	movs	r3, #1
 80065e2:	9307      	str	r3, [sp, #28]
 80065e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d12a      	bne.n	8006640 <_dtoa_r+0x818>
 80065ea:	2001      	movs	r0, #1
 80065ec:	e030      	b.n	8006650 <_dtoa_r+0x828>
 80065ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80065f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80065f4:	e795      	b.n	8006522 <_dtoa_r+0x6fa>
 80065f6:	9b07      	ldr	r3, [sp, #28]
 80065f8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80065fc:	42bb      	cmp	r3, r7
 80065fe:	bfbf      	itttt	lt
 8006600:	9b07      	ldrlt	r3, [sp, #28]
 8006602:	9707      	strlt	r7, [sp, #28]
 8006604:	1afa      	sublt	r2, r7, r3
 8006606:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006608:	bfbb      	ittet	lt
 800660a:	189b      	addlt	r3, r3, r2
 800660c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800660e:	1bdf      	subge	r7, r3, r7
 8006610:	2700      	movlt	r7, #0
 8006612:	f1b9 0f00 	cmp.w	r9, #0
 8006616:	bfb5      	itete	lt
 8006618:	9b05      	ldrlt	r3, [sp, #20]
 800661a:	9d05      	ldrge	r5, [sp, #20]
 800661c:	eba3 0509 	sublt.w	r5, r3, r9
 8006620:	464b      	movge	r3, r9
 8006622:	bfb8      	it	lt
 8006624:	2300      	movlt	r3, #0
 8006626:	e77e      	b.n	8006526 <_dtoa_r+0x6fe>
 8006628:	9f07      	ldr	r7, [sp, #28]
 800662a:	9d05      	ldr	r5, [sp, #20]
 800662c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800662e:	e783      	b.n	8006538 <_dtoa_r+0x710>
 8006630:	9a07      	ldr	r2, [sp, #28]
 8006632:	e7ab      	b.n	800658c <_dtoa_r+0x764>
 8006634:	2300      	movs	r3, #0
 8006636:	e7d4      	b.n	80065e2 <_dtoa_r+0x7ba>
 8006638:	9b00      	ldr	r3, [sp, #0]
 800663a:	e7d2      	b.n	80065e2 <_dtoa_r+0x7ba>
 800663c:	2300      	movs	r3, #0
 800663e:	9307      	str	r3, [sp, #28]
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006646:	6918      	ldr	r0, [r3, #16]
 8006648:	f000 fa4d 	bl	8006ae6 <__hi0bits>
 800664c:	f1c0 0020 	rsb	r0, r0, #32
 8006650:	4440      	add	r0, r8
 8006652:	f010 001f 	ands.w	r0, r0, #31
 8006656:	d047      	beq.n	80066e8 <_dtoa_r+0x8c0>
 8006658:	f1c0 0320 	rsb	r3, r0, #32
 800665c:	2b04      	cmp	r3, #4
 800665e:	dd3b      	ble.n	80066d8 <_dtoa_r+0x8b0>
 8006660:	9b05      	ldr	r3, [sp, #20]
 8006662:	f1c0 001c 	rsb	r0, r0, #28
 8006666:	4403      	add	r3, r0
 8006668:	9305      	str	r3, [sp, #20]
 800666a:	4405      	add	r5, r0
 800666c:	4480      	add	r8, r0
 800666e:	9b05      	ldr	r3, [sp, #20]
 8006670:	2b00      	cmp	r3, #0
 8006672:	dd05      	ble.n	8006680 <_dtoa_r+0x858>
 8006674:	461a      	mov	r2, r3
 8006676:	9904      	ldr	r1, [sp, #16]
 8006678:	4620      	mov	r0, r4
 800667a:	f000 fb6f 	bl	8006d5c <__lshift>
 800667e:	9004      	str	r0, [sp, #16]
 8006680:	f1b8 0f00 	cmp.w	r8, #0
 8006684:	dd05      	ble.n	8006692 <_dtoa_r+0x86a>
 8006686:	4639      	mov	r1, r7
 8006688:	4642      	mov	r2, r8
 800668a:	4620      	mov	r0, r4
 800668c:	f000 fb66 	bl	8006d5c <__lshift>
 8006690:	4607      	mov	r7, r0
 8006692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006694:	b353      	cbz	r3, 80066ec <_dtoa_r+0x8c4>
 8006696:	4639      	mov	r1, r7
 8006698:	9804      	ldr	r0, [sp, #16]
 800669a:	f000 fbb3 	bl	8006e04 <__mcmp>
 800669e:	2800      	cmp	r0, #0
 80066a0:	da24      	bge.n	80066ec <_dtoa_r+0x8c4>
 80066a2:	2300      	movs	r3, #0
 80066a4:	220a      	movs	r2, #10
 80066a6:	9904      	ldr	r1, [sp, #16]
 80066a8:	4620      	mov	r0, r4
 80066aa:	f000 f9e1 	bl	8006a70 <__multadd>
 80066ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066b0:	9004      	str	r0, [sp, #16]
 80066b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f000 814d 	beq.w	8006956 <_dtoa_r+0xb2e>
 80066bc:	2300      	movs	r3, #0
 80066be:	4631      	mov	r1, r6
 80066c0:	220a      	movs	r2, #10
 80066c2:	4620      	mov	r0, r4
 80066c4:	f000 f9d4 	bl	8006a70 <__multadd>
 80066c8:	9b02      	ldr	r3, [sp, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	4606      	mov	r6, r0
 80066ce:	dc4f      	bgt.n	8006770 <_dtoa_r+0x948>
 80066d0:	9b06      	ldr	r3, [sp, #24]
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	dd4c      	ble.n	8006770 <_dtoa_r+0x948>
 80066d6:	e011      	b.n	80066fc <_dtoa_r+0x8d4>
 80066d8:	d0c9      	beq.n	800666e <_dtoa_r+0x846>
 80066da:	9a05      	ldr	r2, [sp, #20]
 80066dc:	331c      	adds	r3, #28
 80066de:	441a      	add	r2, r3
 80066e0:	9205      	str	r2, [sp, #20]
 80066e2:	441d      	add	r5, r3
 80066e4:	4498      	add	r8, r3
 80066e6:	e7c2      	b.n	800666e <_dtoa_r+0x846>
 80066e8:	4603      	mov	r3, r0
 80066ea:	e7f6      	b.n	80066da <_dtoa_r+0x8b2>
 80066ec:	f1b9 0f00 	cmp.w	r9, #0
 80066f0:	dc38      	bgt.n	8006764 <_dtoa_r+0x93c>
 80066f2:	9b06      	ldr	r3, [sp, #24]
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	dd35      	ble.n	8006764 <_dtoa_r+0x93c>
 80066f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80066fc:	9b02      	ldr	r3, [sp, #8]
 80066fe:	b963      	cbnz	r3, 800671a <_dtoa_r+0x8f2>
 8006700:	4639      	mov	r1, r7
 8006702:	2205      	movs	r2, #5
 8006704:	4620      	mov	r0, r4
 8006706:	f000 f9b3 	bl	8006a70 <__multadd>
 800670a:	4601      	mov	r1, r0
 800670c:	4607      	mov	r7, r0
 800670e:	9804      	ldr	r0, [sp, #16]
 8006710:	f000 fb78 	bl	8006e04 <__mcmp>
 8006714:	2800      	cmp	r0, #0
 8006716:	f73f adcc 	bgt.w	80062b2 <_dtoa_r+0x48a>
 800671a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800671c:	465d      	mov	r5, fp
 800671e:	ea6f 0a03 	mvn.w	sl, r3
 8006722:	f04f 0900 	mov.w	r9, #0
 8006726:	4639      	mov	r1, r7
 8006728:	4620      	mov	r0, r4
 800672a:	f000 f98a 	bl	8006a42 <_Bfree>
 800672e:	2e00      	cmp	r6, #0
 8006730:	f43f aeb7 	beq.w	80064a2 <_dtoa_r+0x67a>
 8006734:	f1b9 0f00 	cmp.w	r9, #0
 8006738:	d005      	beq.n	8006746 <_dtoa_r+0x91e>
 800673a:	45b1      	cmp	r9, r6
 800673c:	d003      	beq.n	8006746 <_dtoa_r+0x91e>
 800673e:	4649      	mov	r1, r9
 8006740:	4620      	mov	r0, r4
 8006742:	f000 f97e 	bl	8006a42 <_Bfree>
 8006746:	4631      	mov	r1, r6
 8006748:	4620      	mov	r0, r4
 800674a:	f000 f97a 	bl	8006a42 <_Bfree>
 800674e:	e6a8      	b.n	80064a2 <_dtoa_r+0x67a>
 8006750:	2700      	movs	r7, #0
 8006752:	463e      	mov	r6, r7
 8006754:	e7e1      	b.n	800671a <_dtoa_r+0x8f2>
 8006756:	f8dd a020 	ldr.w	sl, [sp, #32]
 800675a:	463e      	mov	r6, r7
 800675c:	e5a9      	b.n	80062b2 <_dtoa_r+0x48a>
 800675e:	bf00      	nop
 8006760:	40240000 	.word	0x40240000
 8006764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006766:	f8cd 9008 	str.w	r9, [sp, #8]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 80fa 	beq.w	8006964 <_dtoa_r+0xb3c>
 8006770:	2d00      	cmp	r5, #0
 8006772:	dd05      	ble.n	8006780 <_dtoa_r+0x958>
 8006774:	4631      	mov	r1, r6
 8006776:	462a      	mov	r2, r5
 8006778:	4620      	mov	r0, r4
 800677a:	f000 faef 	bl	8006d5c <__lshift>
 800677e:	4606      	mov	r6, r0
 8006780:	9b07      	ldr	r3, [sp, #28]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d04c      	beq.n	8006820 <_dtoa_r+0x9f8>
 8006786:	6871      	ldr	r1, [r6, #4]
 8006788:	4620      	mov	r0, r4
 800678a:	f000 f926 	bl	80069da <_Balloc>
 800678e:	6932      	ldr	r2, [r6, #16]
 8006790:	3202      	adds	r2, #2
 8006792:	4605      	mov	r5, r0
 8006794:	0092      	lsls	r2, r2, #2
 8006796:	f106 010c 	add.w	r1, r6, #12
 800679a:	300c      	adds	r0, #12
 800679c:	f000 f912 	bl	80069c4 <memcpy>
 80067a0:	2201      	movs	r2, #1
 80067a2:	4629      	mov	r1, r5
 80067a4:	4620      	mov	r0, r4
 80067a6:	f000 fad9 	bl	8006d5c <__lshift>
 80067aa:	9b00      	ldr	r3, [sp, #0]
 80067ac:	f8cd b014 	str.w	fp, [sp, #20]
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	46b1      	mov	r9, r6
 80067b6:	9307      	str	r3, [sp, #28]
 80067b8:	4606      	mov	r6, r0
 80067ba:	4639      	mov	r1, r7
 80067bc:	9804      	ldr	r0, [sp, #16]
 80067be:	f7ff faa5 	bl	8005d0c <quorem>
 80067c2:	4649      	mov	r1, r9
 80067c4:	4605      	mov	r5, r0
 80067c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80067ca:	9804      	ldr	r0, [sp, #16]
 80067cc:	f000 fb1a 	bl	8006e04 <__mcmp>
 80067d0:	4632      	mov	r2, r6
 80067d2:	9000      	str	r0, [sp, #0]
 80067d4:	4639      	mov	r1, r7
 80067d6:	4620      	mov	r0, r4
 80067d8:	f000 fb2e 	bl	8006e38 <__mdiff>
 80067dc:	68c3      	ldr	r3, [r0, #12]
 80067de:	4602      	mov	r2, r0
 80067e0:	bb03      	cbnz	r3, 8006824 <_dtoa_r+0x9fc>
 80067e2:	4601      	mov	r1, r0
 80067e4:	9008      	str	r0, [sp, #32]
 80067e6:	9804      	ldr	r0, [sp, #16]
 80067e8:	f000 fb0c 	bl	8006e04 <__mcmp>
 80067ec:	9a08      	ldr	r2, [sp, #32]
 80067ee:	4603      	mov	r3, r0
 80067f0:	4611      	mov	r1, r2
 80067f2:	4620      	mov	r0, r4
 80067f4:	9308      	str	r3, [sp, #32]
 80067f6:	f000 f924 	bl	8006a42 <_Bfree>
 80067fa:	9b08      	ldr	r3, [sp, #32]
 80067fc:	b9a3      	cbnz	r3, 8006828 <_dtoa_r+0xa00>
 80067fe:	9a06      	ldr	r2, [sp, #24]
 8006800:	b992      	cbnz	r2, 8006828 <_dtoa_r+0xa00>
 8006802:	9a07      	ldr	r2, [sp, #28]
 8006804:	b982      	cbnz	r2, 8006828 <_dtoa_r+0xa00>
 8006806:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800680a:	d029      	beq.n	8006860 <_dtoa_r+0xa38>
 800680c:	9b00      	ldr	r3, [sp, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	dd01      	ble.n	8006816 <_dtoa_r+0x9ee>
 8006812:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006816:	9b05      	ldr	r3, [sp, #20]
 8006818:	1c5d      	adds	r5, r3, #1
 800681a:	f883 8000 	strb.w	r8, [r3]
 800681e:	e782      	b.n	8006726 <_dtoa_r+0x8fe>
 8006820:	4630      	mov	r0, r6
 8006822:	e7c2      	b.n	80067aa <_dtoa_r+0x982>
 8006824:	2301      	movs	r3, #1
 8006826:	e7e3      	b.n	80067f0 <_dtoa_r+0x9c8>
 8006828:	9a00      	ldr	r2, [sp, #0]
 800682a:	2a00      	cmp	r2, #0
 800682c:	db04      	blt.n	8006838 <_dtoa_r+0xa10>
 800682e:	d125      	bne.n	800687c <_dtoa_r+0xa54>
 8006830:	9a06      	ldr	r2, [sp, #24]
 8006832:	bb1a      	cbnz	r2, 800687c <_dtoa_r+0xa54>
 8006834:	9a07      	ldr	r2, [sp, #28]
 8006836:	bb0a      	cbnz	r2, 800687c <_dtoa_r+0xa54>
 8006838:	2b00      	cmp	r3, #0
 800683a:	ddec      	ble.n	8006816 <_dtoa_r+0x9ee>
 800683c:	2201      	movs	r2, #1
 800683e:	9904      	ldr	r1, [sp, #16]
 8006840:	4620      	mov	r0, r4
 8006842:	f000 fa8b 	bl	8006d5c <__lshift>
 8006846:	4639      	mov	r1, r7
 8006848:	9004      	str	r0, [sp, #16]
 800684a:	f000 fadb 	bl	8006e04 <__mcmp>
 800684e:	2800      	cmp	r0, #0
 8006850:	dc03      	bgt.n	800685a <_dtoa_r+0xa32>
 8006852:	d1e0      	bne.n	8006816 <_dtoa_r+0x9ee>
 8006854:	f018 0f01 	tst.w	r8, #1
 8006858:	d0dd      	beq.n	8006816 <_dtoa_r+0x9ee>
 800685a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800685e:	d1d8      	bne.n	8006812 <_dtoa_r+0x9ea>
 8006860:	9b05      	ldr	r3, [sp, #20]
 8006862:	9a05      	ldr	r2, [sp, #20]
 8006864:	1c5d      	adds	r5, r3, #1
 8006866:	2339      	movs	r3, #57	; 0x39
 8006868:	7013      	strb	r3, [r2, #0]
 800686a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800686e:	2b39      	cmp	r3, #57	; 0x39
 8006870:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006874:	d04f      	beq.n	8006916 <_dtoa_r+0xaee>
 8006876:	3301      	adds	r3, #1
 8006878:	7013      	strb	r3, [r2, #0]
 800687a:	e754      	b.n	8006726 <_dtoa_r+0x8fe>
 800687c:	9a05      	ldr	r2, [sp, #20]
 800687e:	2b00      	cmp	r3, #0
 8006880:	f102 0501 	add.w	r5, r2, #1
 8006884:	dd06      	ble.n	8006894 <_dtoa_r+0xa6c>
 8006886:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800688a:	d0e9      	beq.n	8006860 <_dtoa_r+0xa38>
 800688c:	f108 0801 	add.w	r8, r8, #1
 8006890:	9b05      	ldr	r3, [sp, #20]
 8006892:	e7c2      	b.n	800681a <_dtoa_r+0x9f2>
 8006894:	9a02      	ldr	r2, [sp, #8]
 8006896:	f805 8c01 	strb.w	r8, [r5, #-1]
 800689a:	eba5 030b 	sub.w	r3, r5, fp
 800689e:	4293      	cmp	r3, r2
 80068a0:	d021      	beq.n	80068e6 <_dtoa_r+0xabe>
 80068a2:	2300      	movs	r3, #0
 80068a4:	220a      	movs	r2, #10
 80068a6:	9904      	ldr	r1, [sp, #16]
 80068a8:	4620      	mov	r0, r4
 80068aa:	f000 f8e1 	bl	8006a70 <__multadd>
 80068ae:	45b1      	cmp	r9, r6
 80068b0:	9004      	str	r0, [sp, #16]
 80068b2:	f04f 0300 	mov.w	r3, #0
 80068b6:	f04f 020a 	mov.w	r2, #10
 80068ba:	4649      	mov	r1, r9
 80068bc:	4620      	mov	r0, r4
 80068be:	d105      	bne.n	80068cc <_dtoa_r+0xaa4>
 80068c0:	f000 f8d6 	bl	8006a70 <__multadd>
 80068c4:	4681      	mov	r9, r0
 80068c6:	4606      	mov	r6, r0
 80068c8:	9505      	str	r5, [sp, #20]
 80068ca:	e776      	b.n	80067ba <_dtoa_r+0x992>
 80068cc:	f000 f8d0 	bl	8006a70 <__multadd>
 80068d0:	4631      	mov	r1, r6
 80068d2:	4681      	mov	r9, r0
 80068d4:	2300      	movs	r3, #0
 80068d6:	220a      	movs	r2, #10
 80068d8:	4620      	mov	r0, r4
 80068da:	f000 f8c9 	bl	8006a70 <__multadd>
 80068de:	4606      	mov	r6, r0
 80068e0:	e7f2      	b.n	80068c8 <_dtoa_r+0xaa0>
 80068e2:	f04f 0900 	mov.w	r9, #0
 80068e6:	2201      	movs	r2, #1
 80068e8:	9904      	ldr	r1, [sp, #16]
 80068ea:	4620      	mov	r0, r4
 80068ec:	f000 fa36 	bl	8006d5c <__lshift>
 80068f0:	4639      	mov	r1, r7
 80068f2:	9004      	str	r0, [sp, #16]
 80068f4:	f000 fa86 	bl	8006e04 <__mcmp>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	dcb6      	bgt.n	800686a <_dtoa_r+0xa42>
 80068fc:	d102      	bne.n	8006904 <_dtoa_r+0xadc>
 80068fe:	f018 0f01 	tst.w	r8, #1
 8006902:	d1b2      	bne.n	800686a <_dtoa_r+0xa42>
 8006904:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006908:	2b30      	cmp	r3, #48	; 0x30
 800690a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800690e:	f47f af0a 	bne.w	8006726 <_dtoa_r+0x8fe>
 8006912:	4615      	mov	r5, r2
 8006914:	e7f6      	b.n	8006904 <_dtoa_r+0xadc>
 8006916:	4593      	cmp	fp, r2
 8006918:	d105      	bne.n	8006926 <_dtoa_r+0xafe>
 800691a:	2331      	movs	r3, #49	; 0x31
 800691c:	f10a 0a01 	add.w	sl, sl, #1
 8006920:	f88b 3000 	strb.w	r3, [fp]
 8006924:	e6ff      	b.n	8006726 <_dtoa_r+0x8fe>
 8006926:	4615      	mov	r5, r2
 8006928:	e79f      	b.n	800686a <_dtoa_r+0xa42>
 800692a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006990 <_dtoa_r+0xb68>
 800692e:	e007      	b.n	8006940 <_dtoa_r+0xb18>
 8006930:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006932:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006994 <_dtoa_r+0xb6c>
 8006936:	b11b      	cbz	r3, 8006940 <_dtoa_r+0xb18>
 8006938:	f10b 0308 	add.w	r3, fp, #8
 800693c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	4658      	mov	r0, fp
 8006942:	b017      	add	sp, #92	; 0x5c
 8006944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006948:	9b06      	ldr	r3, [sp, #24]
 800694a:	2b01      	cmp	r3, #1
 800694c:	f77f ae35 	ble.w	80065ba <_dtoa_r+0x792>
 8006950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006952:	9307      	str	r3, [sp, #28]
 8006954:	e649      	b.n	80065ea <_dtoa_r+0x7c2>
 8006956:	9b02      	ldr	r3, [sp, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	dc03      	bgt.n	8006964 <_dtoa_r+0xb3c>
 800695c:	9b06      	ldr	r3, [sp, #24]
 800695e:	2b02      	cmp	r3, #2
 8006960:	f73f aecc 	bgt.w	80066fc <_dtoa_r+0x8d4>
 8006964:	465d      	mov	r5, fp
 8006966:	4639      	mov	r1, r7
 8006968:	9804      	ldr	r0, [sp, #16]
 800696a:	f7ff f9cf 	bl	8005d0c <quorem>
 800696e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006972:	f805 8b01 	strb.w	r8, [r5], #1
 8006976:	9a02      	ldr	r2, [sp, #8]
 8006978:	eba5 030b 	sub.w	r3, r5, fp
 800697c:	429a      	cmp	r2, r3
 800697e:	ddb0      	ble.n	80068e2 <_dtoa_r+0xaba>
 8006980:	2300      	movs	r3, #0
 8006982:	220a      	movs	r2, #10
 8006984:	9904      	ldr	r1, [sp, #16]
 8006986:	4620      	mov	r0, r4
 8006988:	f000 f872 	bl	8006a70 <__multadd>
 800698c:	9004      	str	r0, [sp, #16]
 800698e:	e7ea      	b.n	8006966 <_dtoa_r+0xb3e>
 8006990:	08007894 	.word	0x08007894
 8006994:	080078b8 	.word	0x080078b8

08006998 <_localeconv_r>:
 8006998:	4b04      	ldr	r3, [pc, #16]	; (80069ac <_localeconv_r+0x14>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6a18      	ldr	r0, [r3, #32]
 800699e:	4b04      	ldr	r3, [pc, #16]	; (80069b0 <_localeconv_r+0x18>)
 80069a0:	2800      	cmp	r0, #0
 80069a2:	bf08      	it	eq
 80069a4:	4618      	moveq	r0, r3
 80069a6:	30f0      	adds	r0, #240	; 0xf0
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	20000024 	.word	0x20000024
 80069b0:	20000088 	.word	0x20000088

080069b4 <malloc>:
 80069b4:	4b02      	ldr	r3, [pc, #8]	; (80069c0 <malloc+0xc>)
 80069b6:	4601      	mov	r1, r0
 80069b8:	6818      	ldr	r0, [r3, #0]
 80069ba:	f000 bb45 	b.w	8007048 <_malloc_r>
 80069be:	bf00      	nop
 80069c0:	20000024 	.word	0x20000024

080069c4 <memcpy>:
 80069c4:	b510      	push	{r4, lr}
 80069c6:	1e43      	subs	r3, r0, #1
 80069c8:	440a      	add	r2, r1
 80069ca:	4291      	cmp	r1, r2
 80069cc:	d100      	bne.n	80069d0 <memcpy+0xc>
 80069ce:	bd10      	pop	{r4, pc}
 80069d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069d8:	e7f7      	b.n	80069ca <memcpy+0x6>

080069da <_Balloc>:
 80069da:	b570      	push	{r4, r5, r6, lr}
 80069dc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80069de:	4604      	mov	r4, r0
 80069e0:	460e      	mov	r6, r1
 80069e2:	b93d      	cbnz	r5, 80069f4 <_Balloc+0x1a>
 80069e4:	2010      	movs	r0, #16
 80069e6:	f7ff ffe5 	bl	80069b4 <malloc>
 80069ea:	6260      	str	r0, [r4, #36]	; 0x24
 80069ec:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80069f0:	6005      	str	r5, [r0, #0]
 80069f2:	60c5      	str	r5, [r0, #12]
 80069f4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80069f6:	68eb      	ldr	r3, [r5, #12]
 80069f8:	b183      	cbz	r3, 8006a1c <_Balloc+0x42>
 80069fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006a02:	b9b8      	cbnz	r0, 8006a34 <_Balloc+0x5a>
 8006a04:	2101      	movs	r1, #1
 8006a06:	fa01 f506 	lsl.w	r5, r1, r6
 8006a0a:	1d6a      	adds	r2, r5, #5
 8006a0c:	0092      	lsls	r2, r2, #2
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f000 fabe 	bl	8006f90 <_calloc_r>
 8006a14:	b160      	cbz	r0, 8006a30 <_Balloc+0x56>
 8006a16:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006a1a:	e00e      	b.n	8006a3a <_Balloc+0x60>
 8006a1c:	2221      	movs	r2, #33	; 0x21
 8006a1e:	2104      	movs	r1, #4
 8006a20:	4620      	mov	r0, r4
 8006a22:	f000 fab5 	bl	8006f90 <_calloc_r>
 8006a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a28:	60e8      	str	r0, [r5, #12]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1e4      	bne.n	80069fa <_Balloc+0x20>
 8006a30:	2000      	movs	r0, #0
 8006a32:	bd70      	pop	{r4, r5, r6, pc}
 8006a34:	6802      	ldr	r2, [r0, #0]
 8006a36:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a40:	e7f7      	b.n	8006a32 <_Balloc+0x58>

08006a42 <_Bfree>:
 8006a42:	b570      	push	{r4, r5, r6, lr}
 8006a44:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006a46:	4606      	mov	r6, r0
 8006a48:	460d      	mov	r5, r1
 8006a4a:	b93c      	cbnz	r4, 8006a5c <_Bfree+0x1a>
 8006a4c:	2010      	movs	r0, #16
 8006a4e:	f7ff ffb1 	bl	80069b4 <malloc>
 8006a52:	6270      	str	r0, [r6, #36]	; 0x24
 8006a54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a58:	6004      	str	r4, [r0, #0]
 8006a5a:	60c4      	str	r4, [r0, #12]
 8006a5c:	b13d      	cbz	r5, 8006a6e <_Bfree+0x2c>
 8006a5e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006a60:	686a      	ldr	r2, [r5, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a68:	6029      	str	r1, [r5, #0]
 8006a6a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}

08006a70 <__multadd>:
 8006a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a74:	690d      	ldr	r5, [r1, #16]
 8006a76:	461f      	mov	r7, r3
 8006a78:	4606      	mov	r6, r0
 8006a7a:	460c      	mov	r4, r1
 8006a7c:	f101 0c14 	add.w	ip, r1, #20
 8006a80:	2300      	movs	r3, #0
 8006a82:	f8dc 0000 	ldr.w	r0, [ip]
 8006a86:	b281      	uxth	r1, r0
 8006a88:	fb02 7101 	mla	r1, r2, r1, r7
 8006a8c:	0c0f      	lsrs	r7, r1, #16
 8006a8e:	0c00      	lsrs	r0, r0, #16
 8006a90:	fb02 7000 	mla	r0, r2, r0, r7
 8006a94:	b289      	uxth	r1, r1
 8006a96:	3301      	adds	r3, #1
 8006a98:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006a9c:	429d      	cmp	r5, r3
 8006a9e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006aa2:	f84c 1b04 	str.w	r1, [ip], #4
 8006aa6:	dcec      	bgt.n	8006a82 <__multadd+0x12>
 8006aa8:	b1d7      	cbz	r7, 8006ae0 <__multadd+0x70>
 8006aaa:	68a3      	ldr	r3, [r4, #8]
 8006aac:	42ab      	cmp	r3, r5
 8006aae:	dc12      	bgt.n	8006ad6 <__multadd+0x66>
 8006ab0:	6861      	ldr	r1, [r4, #4]
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	3101      	adds	r1, #1
 8006ab6:	f7ff ff90 	bl	80069da <_Balloc>
 8006aba:	6922      	ldr	r2, [r4, #16]
 8006abc:	3202      	adds	r2, #2
 8006abe:	f104 010c 	add.w	r1, r4, #12
 8006ac2:	4680      	mov	r8, r0
 8006ac4:	0092      	lsls	r2, r2, #2
 8006ac6:	300c      	adds	r0, #12
 8006ac8:	f7ff ff7c 	bl	80069c4 <memcpy>
 8006acc:	4621      	mov	r1, r4
 8006ace:	4630      	mov	r0, r6
 8006ad0:	f7ff ffb7 	bl	8006a42 <_Bfree>
 8006ad4:	4644      	mov	r4, r8
 8006ad6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ada:	3501      	adds	r5, #1
 8006adc:	615f      	str	r7, [r3, #20]
 8006ade:	6125      	str	r5, [r4, #16]
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006ae6 <__hi0bits>:
 8006ae6:	0c02      	lsrs	r2, r0, #16
 8006ae8:	0412      	lsls	r2, r2, #16
 8006aea:	4603      	mov	r3, r0
 8006aec:	b9b2      	cbnz	r2, 8006b1c <__hi0bits+0x36>
 8006aee:	0403      	lsls	r3, r0, #16
 8006af0:	2010      	movs	r0, #16
 8006af2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006af6:	bf04      	itt	eq
 8006af8:	021b      	lsleq	r3, r3, #8
 8006afa:	3008      	addeq	r0, #8
 8006afc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006b00:	bf04      	itt	eq
 8006b02:	011b      	lsleq	r3, r3, #4
 8006b04:	3004      	addeq	r0, #4
 8006b06:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006b0a:	bf04      	itt	eq
 8006b0c:	009b      	lsleq	r3, r3, #2
 8006b0e:	3002      	addeq	r0, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	db06      	blt.n	8006b22 <__hi0bits+0x3c>
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	d503      	bpl.n	8006b20 <__hi0bits+0x3a>
 8006b18:	3001      	adds	r0, #1
 8006b1a:	4770      	bx	lr
 8006b1c:	2000      	movs	r0, #0
 8006b1e:	e7e8      	b.n	8006af2 <__hi0bits+0xc>
 8006b20:	2020      	movs	r0, #32
 8006b22:	4770      	bx	lr

08006b24 <__lo0bits>:
 8006b24:	6803      	ldr	r3, [r0, #0]
 8006b26:	f013 0207 	ands.w	r2, r3, #7
 8006b2a:	4601      	mov	r1, r0
 8006b2c:	d00b      	beq.n	8006b46 <__lo0bits+0x22>
 8006b2e:	07da      	lsls	r2, r3, #31
 8006b30:	d423      	bmi.n	8006b7a <__lo0bits+0x56>
 8006b32:	0798      	lsls	r0, r3, #30
 8006b34:	bf49      	itett	mi
 8006b36:	085b      	lsrmi	r3, r3, #1
 8006b38:	089b      	lsrpl	r3, r3, #2
 8006b3a:	2001      	movmi	r0, #1
 8006b3c:	600b      	strmi	r3, [r1, #0]
 8006b3e:	bf5c      	itt	pl
 8006b40:	600b      	strpl	r3, [r1, #0]
 8006b42:	2002      	movpl	r0, #2
 8006b44:	4770      	bx	lr
 8006b46:	b298      	uxth	r0, r3
 8006b48:	b9a8      	cbnz	r0, 8006b76 <__lo0bits+0x52>
 8006b4a:	0c1b      	lsrs	r3, r3, #16
 8006b4c:	2010      	movs	r0, #16
 8006b4e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006b52:	bf04      	itt	eq
 8006b54:	0a1b      	lsreq	r3, r3, #8
 8006b56:	3008      	addeq	r0, #8
 8006b58:	071a      	lsls	r2, r3, #28
 8006b5a:	bf04      	itt	eq
 8006b5c:	091b      	lsreq	r3, r3, #4
 8006b5e:	3004      	addeq	r0, #4
 8006b60:	079a      	lsls	r2, r3, #30
 8006b62:	bf04      	itt	eq
 8006b64:	089b      	lsreq	r3, r3, #2
 8006b66:	3002      	addeq	r0, #2
 8006b68:	07da      	lsls	r2, r3, #31
 8006b6a:	d402      	bmi.n	8006b72 <__lo0bits+0x4e>
 8006b6c:	085b      	lsrs	r3, r3, #1
 8006b6e:	d006      	beq.n	8006b7e <__lo0bits+0x5a>
 8006b70:	3001      	adds	r0, #1
 8006b72:	600b      	str	r3, [r1, #0]
 8006b74:	4770      	bx	lr
 8006b76:	4610      	mov	r0, r2
 8006b78:	e7e9      	b.n	8006b4e <__lo0bits+0x2a>
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	4770      	bx	lr
 8006b7e:	2020      	movs	r0, #32
 8006b80:	4770      	bx	lr

08006b82 <__i2b>:
 8006b82:	b510      	push	{r4, lr}
 8006b84:	460c      	mov	r4, r1
 8006b86:	2101      	movs	r1, #1
 8006b88:	f7ff ff27 	bl	80069da <_Balloc>
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	6144      	str	r4, [r0, #20]
 8006b90:	6102      	str	r2, [r0, #16]
 8006b92:	bd10      	pop	{r4, pc}

08006b94 <__multiply>:
 8006b94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b98:	4614      	mov	r4, r2
 8006b9a:	690a      	ldr	r2, [r1, #16]
 8006b9c:	6923      	ldr	r3, [r4, #16]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	bfb8      	it	lt
 8006ba2:	460b      	movlt	r3, r1
 8006ba4:	4688      	mov	r8, r1
 8006ba6:	bfbc      	itt	lt
 8006ba8:	46a0      	movlt	r8, r4
 8006baa:	461c      	movlt	r4, r3
 8006bac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006bb0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006bb4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006bb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006bbc:	eb07 0609 	add.w	r6, r7, r9
 8006bc0:	42b3      	cmp	r3, r6
 8006bc2:	bfb8      	it	lt
 8006bc4:	3101      	addlt	r1, #1
 8006bc6:	f7ff ff08 	bl	80069da <_Balloc>
 8006bca:	f100 0514 	add.w	r5, r0, #20
 8006bce:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006bd2:	462b      	mov	r3, r5
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	4573      	cmp	r3, lr
 8006bd8:	d316      	bcc.n	8006c08 <__multiply+0x74>
 8006bda:	f104 0214 	add.w	r2, r4, #20
 8006bde:	f108 0114 	add.w	r1, r8, #20
 8006be2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006be6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	9b00      	ldr	r3, [sp, #0]
 8006bee:	9201      	str	r2, [sp, #4]
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d80c      	bhi.n	8006c0e <__multiply+0x7a>
 8006bf4:	2e00      	cmp	r6, #0
 8006bf6:	dd03      	ble.n	8006c00 <__multiply+0x6c>
 8006bf8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d05d      	beq.n	8006cbc <__multiply+0x128>
 8006c00:	6106      	str	r6, [r0, #16]
 8006c02:	b003      	add	sp, #12
 8006c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c08:	f843 2b04 	str.w	r2, [r3], #4
 8006c0c:	e7e3      	b.n	8006bd6 <__multiply+0x42>
 8006c0e:	f8b2 b000 	ldrh.w	fp, [r2]
 8006c12:	f1bb 0f00 	cmp.w	fp, #0
 8006c16:	d023      	beq.n	8006c60 <__multiply+0xcc>
 8006c18:	4689      	mov	r9, r1
 8006c1a:	46ac      	mov	ip, r5
 8006c1c:	f04f 0800 	mov.w	r8, #0
 8006c20:	f859 4b04 	ldr.w	r4, [r9], #4
 8006c24:	f8dc a000 	ldr.w	sl, [ip]
 8006c28:	b2a3      	uxth	r3, r4
 8006c2a:	fa1f fa8a 	uxth.w	sl, sl
 8006c2e:	fb0b a303 	mla	r3, fp, r3, sl
 8006c32:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006c36:	f8dc 4000 	ldr.w	r4, [ip]
 8006c3a:	4443      	add	r3, r8
 8006c3c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006c40:	fb0b 840a 	mla	r4, fp, sl, r8
 8006c44:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006c48:	46e2      	mov	sl, ip
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006c50:	454f      	cmp	r7, r9
 8006c52:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006c56:	f84a 3b04 	str.w	r3, [sl], #4
 8006c5a:	d82b      	bhi.n	8006cb4 <__multiply+0x120>
 8006c5c:	f8cc 8004 	str.w	r8, [ip, #4]
 8006c60:	9b01      	ldr	r3, [sp, #4]
 8006c62:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006c66:	3204      	adds	r2, #4
 8006c68:	f1ba 0f00 	cmp.w	sl, #0
 8006c6c:	d020      	beq.n	8006cb0 <__multiply+0x11c>
 8006c6e:	682b      	ldr	r3, [r5, #0]
 8006c70:	4689      	mov	r9, r1
 8006c72:	46a8      	mov	r8, r5
 8006c74:	f04f 0b00 	mov.w	fp, #0
 8006c78:	f8b9 c000 	ldrh.w	ip, [r9]
 8006c7c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006c80:	fb0a 440c 	mla	r4, sl, ip, r4
 8006c84:	445c      	add	r4, fp
 8006c86:	46c4      	mov	ip, r8
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006c8e:	f84c 3b04 	str.w	r3, [ip], #4
 8006c92:	f859 3b04 	ldr.w	r3, [r9], #4
 8006c96:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006c9a:	0c1b      	lsrs	r3, r3, #16
 8006c9c:	fb0a b303 	mla	r3, sl, r3, fp
 8006ca0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006ca4:	454f      	cmp	r7, r9
 8006ca6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006caa:	d805      	bhi.n	8006cb8 <__multiply+0x124>
 8006cac:	f8c8 3004 	str.w	r3, [r8, #4]
 8006cb0:	3504      	adds	r5, #4
 8006cb2:	e79b      	b.n	8006bec <__multiply+0x58>
 8006cb4:	46d4      	mov	ip, sl
 8006cb6:	e7b3      	b.n	8006c20 <__multiply+0x8c>
 8006cb8:	46e0      	mov	r8, ip
 8006cba:	e7dd      	b.n	8006c78 <__multiply+0xe4>
 8006cbc:	3e01      	subs	r6, #1
 8006cbe:	e799      	b.n	8006bf4 <__multiply+0x60>

08006cc0 <__pow5mult>:
 8006cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cc4:	4615      	mov	r5, r2
 8006cc6:	f012 0203 	ands.w	r2, r2, #3
 8006cca:	4606      	mov	r6, r0
 8006ccc:	460f      	mov	r7, r1
 8006cce:	d007      	beq.n	8006ce0 <__pow5mult+0x20>
 8006cd0:	3a01      	subs	r2, #1
 8006cd2:	4c21      	ldr	r4, [pc, #132]	; (8006d58 <__pow5mult+0x98>)
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cda:	f7ff fec9 	bl	8006a70 <__multadd>
 8006cde:	4607      	mov	r7, r0
 8006ce0:	10ad      	asrs	r5, r5, #2
 8006ce2:	d035      	beq.n	8006d50 <__pow5mult+0x90>
 8006ce4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006ce6:	b93c      	cbnz	r4, 8006cf8 <__pow5mult+0x38>
 8006ce8:	2010      	movs	r0, #16
 8006cea:	f7ff fe63 	bl	80069b4 <malloc>
 8006cee:	6270      	str	r0, [r6, #36]	; 0x24
 8006cf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cf4:	6004      	str	r4, [r0, #0]
 8006cf6:	60c4      	str	r4, [r0, #12]
 8006cf8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006cfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d00:	b94c      	cbnz	r4, 8006d16 <__pow5mult+0x56>
 8006d02:	f240 2171 	movw	r1, #625	; 0x271
 8006d06:	4630      	mov	r0, r6
 8006d08:	f7ff ff3b 	bl	8006b82 <__i2b>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d12:	4604      	mov	r4, r0
 8006d14:	6003      	str	r3, [r0, #0]
 8006d16:	f04f 0800 	mov.w	r8, #0
 8006d1a:	07eb      	lsls	r3, r5, #31
 8006d1c:	d50a      	bpl.n	8006d34 <__pow5mult+0x74>
 8006d1e:	4639      	mov	r1, r7
 8006d20:	4622      	mov	r2, r4
 8006d22:	4630      	mov	r0, r6
 8006d24:	f7ff ff36 	bl	8006b94 <__multiply>
 8006d28:	4639      	mov	r1, r7
 8006d2a:	4681      	mov	r9, r0
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	f7ff fe88 	bl	8006a42 <_Bfree>
 8006d32:	464f      	mov	r7, r9
 8006d34:	106d      	asrs	r5, r5, #1
 8006d36:	d00b      	beq.n	8006d50 <__pow5mult+0x90>
 8006d38:	6820      	ldr	r0, [r4, #0]
 8006d3a:	b938      	cbnz	r0, 8006d4c <__pow5mult+0x8c>
 8006d3c:	4622      	mov	r2, r4
 8006d3e:	4621      	mov	r1, r4
 8006d40:	4630      	mov	r0, r6
 8006d42:	f7ff ff27 	bl	8006b94 <__multiply>
 8006d46:	6020      	str	r0, [r4, #0]
 8006d48:	f8c0 8000 	str.w	r8, [r0]
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	e7e4      	b.n	8006d1a <__pow5mult+0x5a>
 8006d50:	4638      	mov	r0, r7
 8006d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d56:	bf00      	nop
 8006d58:	080079b8 	.word	0x080079b8

08006d5c <__lshift>:
 8006d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d60:	460c      	mov	r4, r1
 8006d62:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d66:	6923      	ldr	r3, [r4, #16]
 8006d68:	6849      	ldr	r1, [r1, #4]
 8006d6a:	eb0a 0903 	add.w	r9, sl, r3
 8006d6e:	68a3      	ldr	r3, [r4, #8]
 8006d70:	4607      	mov	r7, r0
 8006d72:	4616      	mov	r6, r2
 8006d74:	f109 0501 	add.w	r5, r9, #1
 8006d78:	42ab      	cmp	r3, r5
 8006d7a:	db32      	blt.n	8006de2 <__lshift+0x86>
 8006d7c:	4638      	mov	r0, r7
 8006d7e:	f7ff fe2c 	bl	80069da <_Balloc>
 8006d82:	2300      	movs	r3, #0
 8006d84:	4680      	mov	r8, r0
 8006d86:	f100 0114 	add.w	r1, r0, #20
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	4553      	cmp	r3, sl
 8006d8e:	db2b      	blt.n	8006de8 <__lshift+0x8c>
 8006d90:	6920      	ldr	r0, [r4, #16]
 8006d92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d96:	f104 0314 	add.w	r3, r4, #20
 8006d9a:	f016 021f 	ands.w	r2, r6, #31
 8006d9e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006da2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006da6:	d025      	beq.n	8006df4 <__lshift+0x98>
 8006da8:	f1c2 0e20 	rsb	lr, r2, #32
 8006dac:	2000      	movs	r0, #0
 8006dae:	681e      	ldr	r6, [r3, #0]
 8006db0:	468a      	mov	sl, r1
 8006db2:	4096      	lsls	r6, r2
 8006db4:	4330      	orrs	r0, r6
 8006db6:	f84a 0b04 	str.w	r0, [sl], #4
 8006dba:	f853 0b04 	ldr.w	r0, [r3], #4
 8006dbe:	459c      	cmp	ip, r3
 8006dc0:	fa20 f00e 	lsr.w	r0, r0, lr
 8006dc4:	d814      	bhi.n	8006df0 <__lshift+0x94>
 8006dc6:	6048      	str	r0, [r1, #4]
 8006dc8:	b108      	cbz	r0, 8006dce <__lshift+0x72>
 8006dca:	f109 0502 	add.w	r5, r9, #2
 8006dce:	3d01      	subs	r5, #1
 8006dd0:	4638      	mov	r0, r7
 8006dd2:	f8c8 5010 	str.w	r5, [r8, #16]
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	f7ff fe33 	bl	8006a42 <_Bfree>
 8006ddc:	4640      	mov	r0, r8
 8006dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de2:	3101      	adds	r1, #1
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	e7c7      	b.n	8006d78 <__lshift+0x1c>
 8006de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006dec:	3301      	adds	r3, #1
 8006dee:	e7cd      	b.n	8006d8c <__lshift+0x30>
 8006df0:	4651      	mov	r1, sl
 8006df2:	e7dc      	b.n	8006dae <__lshift+0x52>
 8006df4:	3904      	subs	r1, #4
 8006df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dfa:	f841 2f04 	str.w	r2, [r1, #4]!
 8006dfe:	459c      	cmp	ip, r3
 8006e00:	d8f9      	bhi.n	8006df6 <__lshift+0x9a>
 8006e02:	e7e4      	b.n	8006dce <__lshift+0x72>

08006e04 <__mcmp>:
 8006e04:	6903      	ldr	r3, [r0, #16]
 8006e06:	690a      	ldr	r2, [r1, #16]
 8006e08:	1a9b      	subs	r3, r3, r2
 8006e0a:	b530      	push	{r4, r5, lr}
 8006e0c:	d10c      	bne.n	8006e28 <__mcmp+0x24>
 8006e0e:	0092      	lsls	r2, r2, #2
 8006e10:	3014      	adds	r0, #20
 8006e12:	3114      	adds	r1, #20
 8006e14:	1884      	adds	r4, r0, r2
 8006e16:	4411      	add	r1, r2
 8006e18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e20:	4295      	cmp	r5, r2
 8006e22:	d003      	beq.n	8006e2c <__mcmp+0x28>
 8006e24:	d305      	bcc.n	8006e32 <__mcmp+0x2e>
 8006e26:	2301      	movs	r3, #1
 8006e28:	4618      	mov	r0, r3
 8006e2a:	bd30      	pop	{r4, r5, pc}
 8006e2c:	42a0      	cmp	r0, r4
 8006e2e:	d3f3      	bcc.n	8006e18 <__mcmp+0x14>
 8006e30:	e7fa      	b.n	8006e28 <__mcmp+0x24>
 8006e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e36:	e7f7      	b.n	8006e28 <__mcmp+0x24>

08006e38 <__mdiff>:
 8006e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e3c:	460d      	mov	r5, r1
 8006e3e:	4607      	mov	r7, r0
 8006e40:	4611      	mov	r1, r2
 8006e42:	4628      	mov	r0, r5
 8006e44:	4614      	mov	r4, r2
 8006e46:	f7ff ffdd 	bl	8006e04 <__mcmp>
 8006e4a:	1e06      	subs	r6, r0, #0
 8006e4c:	d108      	bne.n	8006e60 <__mdiff+0x28>
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4638      	mov	r0, r7
 8006e52:	f7ff fdc2 	bl	80069da <_Balloc>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e60:	bfa4      	itt	ge
 8006e62:	4623      	movge	r3, r4
 8006e64:	462c      	movge	r4, r5
 8006e66:	4638      	mov	r0, r7
 8006e68:	6861      	ldr	r1, [r4, #4]
 8006e6a:	bfa6      	itte	ge
 8006e6c:	461d      	movge	r5, r3
 8006e6e:	2600      	movge	r6, #0
 8006e70:	2601      	movlt	r6, #1
 8006e72:	f7ff fdb2 	bl	80069da <_Balloc>
 8006e76:	692b      	ldr	r3, [r5, #16]
 8006e78:	60c6      	str	r6, [r0, #12]
 8006e7a:	6926      	ldr	r6, [r4, #16]
 8006e7c:	f105 0914 	add.w	r9, r5, #20
 8006e80:	f104 0214 	add.w	r2, r4, #20
 8006e84:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006e88:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006e8c:	f100 0514 	add.w	r5, r0, #20
 8006e90:	f04f 0e00 	mov.w	lr, #0
 8006e94:	f852 ab04 	ldr.w	sl, [r2], #4
 8006e98:	f859 4b04 	ldr.w	r4, [r9], #4
 8006e9c:	fa1e f18a 	uxtah	r1, lr, sl
 8006ea0:	b2a3      	uxth	r3, r4
 8006ea2:	1ac9      	subs	r1, r1, r3
 8006ea4:	0c23      	lsrs	r3, r4, #16
 8006ea6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006eaa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006eae:	b289      	uxth	r1, r1
 8006eb0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006eb4:	45c8      	cmp	r8, r9
 8006eb6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006eba:	4694      	mov	ip, r2
 8006ebc:	f845 3b04 	str.w	r3, [r5], #4
 8006ec0:	d8e8      	bhi.n	8006e94 <__mdiff+0x5c>
 8006ec2:	45bc      	cmp	ip, r7
 8006ec4:	d304      	bcc.n	8006ed0 <__mdiff+0x98>
 8006ec6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006eca:	b183      	cbz	r3, 8006eee <__mdiff+0xb6>
 8006ecc:	6106      	str	r6, [r0, #16]
 8006ece:	e7c5      	b.n	8006e5c <__mdiff+0x24>
 8006ed0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006ed4:	fa1e f381 	uxtah	r3, lr, r1
 8006ed8:	141a      	asrs	r2, r3, #16
 8006eda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ee4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006ee8:	f845 3b04 	str.w	r3, [r5], #4
 8006eec:	e7e9      	b.n	8006ec2 <__mdiff+0x8a>
 8006eee:	3e01      	subs	r6, #1
 8006ef0:	e7e9      	b.n	8006ec6 <__mdiff+0x8e>

08006ef2 <__d2b>:
 8006ef2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ef6:	460e      	mov	r6, r1
 8006ef8:	2101      	movs	r1, #1
 8006efa:	ec59 8b10 	vmov	r8, r9, d0
 8006efe:	4615      	mov	r5, r2
 8006f00:	f7ff fd6b 	bl	80069da <_Balloc>
 8006f04:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006f08:	4607      	mov	r7, r0
 8006f0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f0e:	bb34      	cbnz	r4, 8006f5e <__d2b+0x6c>
 8006f10:	9301      	str	r3, [sp, #4]
 8006f12:	f1b8 0300 	subs.w	r3, r8, #0
 8006f16:	d027      	beq.n	8006f68 <__d2b+0x76>
 8006f18:	a802      	add	r0, sp, #8
 8006f1a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006f1e:	f7ff fe01 	bl	8006b24 <__lo0bits>
 8006f22:	9900      	ldr	r1, [sp, #0]
 8006f24:	b1f0      	cbz	r0, 8006f64 <__d2b+0x72>
 8006f26:	9a01      	ldr	r2, [sp, #4]
 8006f28:	f1c0 0320 	rsb	r3, r0, #32
 8006f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f30:	430b      	orrs	r3, r1
 8006f32:	40c2      	lsrs	r2, r0
 8006f34:	617b      	str	r3, [r7, #20]
 8006f36:	9201      	str	r2, [sp, #4]
 8006f38:	9b01      	ldr	r3, [sp, #4]
 8006f3a:	61bb      	str	r3, [r7, #24]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	bf14      	ite	ne
 8006f40:	2102      	movne	r1, #2
 8006f42:	2101      	moveq	r1, #1
 8006f44:	6139      	str	r1, [r7, #16]
 8006f46:	b1c4      	cbz	r4, 8006f7a <__d2b+0x88>
 8006f48:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006f4c:	4404      	add	r4, r0
 8006f4e:	6034      	str	r4, [r6, #0]
 8006f50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f54:	6028      	str	r0, [r5, #0]
 8006f56:	4638      	mov	r0, r7
 8006f58:	b003      	add	sp, #12
 8006f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f62:	e7d5      	b.n	8006f10 <__d2b+0x1e>
 8006f64:	6179      	str	r1, [r7, #20]
 8006f66:	e7e7      	b.n	8006f38 <__d2b+0x46>
 8006f68:	a801      	add	r0, sp, #4
 8006f6a:	f7ff fddb 	bl	8006b24 <__lo0bits>
 8006f6e:	9b01      	ldr	r3, [sp, #4]
 8006f70:	617b      	str	r3, [r7, #20]
 8006f72:	2101      	movs	r1, #1
 8006f74:	6139      	str	r1, [r7, #16]
 8006f76:	3020      	adds	r0, #32
 8006f78:	e7e5      	b.n	8006f46 <__d2b+0x54>
 8006f7a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006f7e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f82:	6030      	str	r0, [r6, #0]
 8006f84:	6918      	ldr	r0, [r3, #16]
 8006f86:	f7ff fdae 	bl	8006ae6 <__hi0bits>
 8006f8a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006f8e:	e7e1      	b.n	8006f54 <__d2b+0x62>

08006f90 <_calloc_r>:
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	fb02 f401 	mul.w	r4, r2, r1
 8006f96:	4621      	mov	r1, r4
 8006f98:	f000 f856 	bl	8007048 <_malloc_r>
 8006f9c:	4605      	mov	r5, r0
 8006f9e:	b118      	cbz	r0, 8006fa8 <_calloc_r+0x18>
 8006fa0:	4622      	mov	r2, r4
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	f7fe fa2e 	bl	8005404 <memset>
 8006fa8:	4628      	mov	r0, r5
 8006faa:	bd38      	pop	{r3, r4, r5, pc}

08006fac <_free_r>:
 8006fac:	b538      	push	{r3, r4, r5, lr}
 8006fae:	4605      	mov	r5, r0
 8006fb0:	2900      	cmp	r1, #0
 8006fb2:	d045      	beq.n	8007040 <_free_r+0x94>
 8006fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fb8:	1f0c      	subs	r4, r1, #4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	bfb8      	it	lt
 8006fbe:	18e4      	addlt	r4, r4, r3
 8006fc0:	f000 fa29 	bl	8007416 <__malloc_lock>
 8006fc4:	4a1f      	ldr	r2, [pc, #124]	; (8007044 <_free_r+0x98>)
 8006fc6:	6813      	ldr	r3, [r2, #0]
 8006fc8:	4610      	mov	r0, r2
 8006fca:	b933      	cbnz	r3, 8006fda <_free_r+0x2e>
 8006fcc:	6063      	str	r3, [r4, #4]
 8006fce:	6014      	str	r4, [r2, #0]
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fd6:	f000 ba1f 	b.w	8007418 <__malloc_unlock>
 8006fda:	42a3      	cmp	r3, r4
 8006fdc:	d90c      	bls.n	8006ff8 <_free_r+0x4c>
 8006fde:	6821      	ldr	r1, [r4, #0]
 8006fe0:	1862      	adds	r2, r4, r1
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	bf04      	itt	eq
 8006fe6:	681a      	ldreq	r2, [r3, #0]
 8006fe8:	685b      	ldreq	r3, [r3, #4]
 8006fea:	6063      	str	r3, [r4, #4]
 8006fec:	bf04      	itt	eq
 8006fee:	1852      	addeq	r2, r2, r1
 8006ff0:	6022      	streq	r2, [r4, #0]
 8006ff2:	6004      	str	r4, [r0, #0]
 8006ff4:	e7ec      	b.n	8006fd0 <_free_r+0x24>
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	b10a      	cbz	r2, 8007000 <_free_r+0x54>
 8006ffc:	42a2      	cmp	r2, r4
 8006ffe:	d9fa      	bls.n	8006ff6 <_free_r+0x4a>
 8007000:	6819      	ldr	r1, [r3, #0]
 8007002:	1858      	adds	r0, r3, r1
 8007004:	42a0      	cmp	r0, r4
 8007006:	d10b      	bne.n	8007020 <_free_r+0x74>
 8007008:	6820      	ldr	r0, [r4, #0]
 800700a:	4401      	add	r1, r0
 800700c:	1858      	adds	r0, r3, r1
 800700e:	4282      	cmp	r2, r0
 8007010:	6019      	str	r1, [r3, #0]
 8007012:	d1dd      	bne.n	8006fd0 <_free_r+0x24>
 8007014:	6810      	ldr	r0, [r2, #0]
 8007016:	6852      	ldr	r2, [r2, #4]
 8007018:	605a      	str	r2, [r3, #4]
 800701a:	4401      	add	r1, r0
 800701c:	6019      	str	r1, [r3, #0]
 800701e:	e7d7      	b.n	8006fd0 <_free_r+0x24>
 8007020:	d902      	bls.n	8007028 <_free_r+0x7c>
 8007022:	230c      	movs	r3, #12
 8007024:	602b      	str	r3, [r5, #0]
 8007026:	e7d3      	b.n	8006fd0 <_free_r+0x24>
 8007028:	6820      	ldr	r0, [r4, #0]
 800702a:	1821      	adds	r1, r4, r0
 800702c:	428a      	cmp	r2, r1
 800702e:	bf04      	itt	eq
 8007030:	6811      	ldreq	r1, [r2, #0]
 8007032:	6852      	ldreq	r2, [r2, #4]
 8007034:	6062      	str	r2, [r4, #4]
 8007036:	bf04      	itt	eq
 8007038:	1809      	addeq	r1, r1, r0
 800703a:	6021      	streq	r1, [r4, #0]
 800703c:	605c      	str	r4, [r3, #4]
 800703e:	e7c7      	b.n	8006fd0 <_free_r+0x24>
 8007040:	bd38      	pop	{r3, r4, r5, pc}
 8007042:	bf00      	nop
 8007044:	20000420 	.word	0x20000420

08007048 <_malloc_r>:
 8007048:	b570      	push	{r4, r5, r6, lr}
 800704a:	1ccd      	adds	r5, r1, #3
 800704c:	f025 0503 	bic.w	r5, r5, #3
 8007050:	3508      	adds	r5, #8
 8007052:	2d0c      	cmp	r5, #12
 8007054:	bf38      	it	cc
 8007056:	250c      	movcc	r5, #12
 8007058:	2d00      	cmp	r5, #0
 800705a:	4606      	mov	r6, r0
 800705c:	db01      	blt.n	8007062 <_malloc_r+0x1a>
 800705e:	42a9      	cmp	r1, r5
 8007060:	d903      	bls.n	800706a <_malloc_r+0x22>
 8007062:	230c      	movs	r3, #12
 8007064:	6033      	str	r3, [r6, #0]
 8007066:	2000      	movs	r0, #0
 8007068:	bd70      	pop	{r4, r5, r6, pc}
 800706a:	f000 f9d4 	bl	8007416 <__malloc_lock>
 800706e:	4a21      	ldr	r2, [pc, #132]	; (80070f4 <_malloc_r+0xac>)
 8007070:	6814      	ldr	r4, [r2, #0]
 8007072:	4621      	mov	r1, r4
 8007074:	b991      	cbnz	r1, 800709c <_malloc_r+0x54>
 8007076:	4c20      	ldr	r4, [pc, #128]	; (80070f8 <_malloc_r+0xb0>)
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	b91b      	cbnz	r3, 8007084 <_malloc_r+0x3c>
 800707c:	4630      	mov	r0, r6
 800707e:	f000 f98f 	bl	80073a0 <_sbrk_r>
 8007082:	6020      	str	r0, [r4, #0]
 8007084:	4629      	mov	r1, r5
 8007086:	4630      	mov	r0, r6
 8007088:	f000 f98a 	bl	80073a0 <_sbrk_r>
 800708c:	1c43      	adds	r3, r0, #1
 800708e:	d124      	bne.n	80070da <_malloc_r+0x92>
 8007090:	230c      	movs	r3, #12
 8007092:	6033      	str	r3, [r6, #0]
 8007094:	4630      	mov	r0, r6
 8007096:	f000 f9bf 	bl	8007418 <__malloc_unlock>
 800709a:	e7e4      	b.n	8007066 <_malloc_r+0x1e>
 800709c:	680b      	ldr	r3, [r1, #0]
 800709e:	1b5b      	subs	r3, r3, r5
 80070a0:	d418      	bmi.n	80070d4 <_malloc_r+0x8c>
 80070a2:	2b0b      	cmp	r3, #11
 80070a4:	d90f      	bls.n	80070c6 <_malloc_r+0x7e>
 80070a6:	600b      	str	r3, [r1, #0]
 80070a8:	50cd      	str	r5, [r1, r3]
 80070aa:	18cc      	adds	r4, r1, r3
 80070ac:	4630      	mov	r0, r6
 80070ae:	f000 f9b3 	bl	8007418 <__malloc_unlock>
 80070b2:	f104 000b 	add.w	r0, r4, #11
 80070b6:	1d23      	adds	r3, r4, #4
 80070b8:	f020 0007 	bic.w	r0, r0, #7
 80070bc:	1ac3      	subs	r3, r0, r3
 80070be:	d0d3      	beq.n	8007068 <_malloc_r+0x20>
 80070c0:	425a      	negs	r2, r3
 80070c2:	50e2      	str	r2, [r4, r3]
 80070c4:	e7d0      	b.n	8007068 <_malloc_r+0x20>
 80070c6:	428c      	cmp	r4, r1
 80070c8:	684b      	ldr	r3, [r1, #4]
 80070ca:	bf16      	itet	ne
 80070cc:	6063      	strne	r3, [r4, #4]
 80070ce:	6013      	streq	r3, [r2, #0]
 80070d0:	460c      	movne	r4, r1
 80070d2:	e7eb      	b.n	80070ac <_malloc_r+0x64>
 80070d4:	460c      	mov	r4, r1
 80070d6:	6849      	ldr	r1, [r1, #4]
 80070d8:	e7cc      	b.n	8007074 <_malloc_r+0x2c>
 80070da:	1cc4      	adds	r4, r0, #3
 80070dc:	f024 0403 	bic.w	r4, r4, #3
 80070e0:	42a0      	cmp	r0, r4
 80070e2:	d005      	beq.n	80070f0 <_malloc_r+0xa8>
 80070e4:	1a21      	subs	r1, r4, r0
 80070e6:	4630      	mov	r0, r6
 80070e8:	f000 f95a 	bl	80073a0 <_sbrk_r>
 80070ec:	3001      	adds	r0, #1
 80070ee:	d0cf      	beq.n	8007090 <_malloc_r+0x48>
 80070f0:	6025      	str	r5, [r4, #0]
 80070f2:	e7db      	b.n	80070ac <_malloc_r+0x64>
 80070f4:	20000420 	.word	0x20000420
 80070f8:	20000424 	.word	0x20000424

080070fc <__ssputs_r>:
 80070fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007100:	688e      	ldr	r6, [r1, #8]
 8007102:	429e      	cmp	r6, r3
 8007104:	4682      	mov	sl, r0
 8007106:	460c      	mov	r4, r1
 8007108:	4690      	mov	r8, r2
 800710a:	4699      	mov	r9, r3
 800710c:	d837      	bhi.n	800717e <__ssputs_r+0x82>
 800710e:	898a      	ldrh	r2, [r1, #12]
 8007110:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007114:	d031      	beq.n	800717a <__ssputs_r+0x7e>
 8007116:	6825      	ldr	r5, [r4, #0]
 8007118:	6909      	ldr	r1, [r1, #16]
 800711a:	1a6f      	subs	r7, r5, r1
 800711c:	6965      	ldr	r5, [r4, #20]
 800711e:	2302      	movs	r3, #2
 8007120:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007124:	fb95 f5f3 	sdiv	r5, r5, r3
 8007128:	f109 0301 	add.w	r3, r9, #1
 800712c:	443b      	add	r3, r7
 800712e:	429d      	cmp	r5, r3
 8007130:	bf38      	it	cc
 8007132:	461d      	movcc	r5, r3
 8007134:	0553      	lsls	r3, r2, #21
 8007136:	d530      	bpl.n	800719a <__ssputs_r+0x9e>
 8007138:	4629      	mov	r1, r5
 800713a:	f7ff ff85 	bl	8007048 <_malloc_r>
 800713e:	4606      	mov	r6, r0
 8007140:	b950      	cbnz	r0, 8007158 <__ssputs_r+0x5c>
 8007142:	230c      	movs	r3, #12
 8007144:	f8ca 3000 	str.w	r3, [sl]
 8007148:	89a3      	ldrh	r3, [r4, #12]
 800714a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800714e:	81a3      	strh	r3, [r4, #12]
 8007150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007158:	463a      	mov	r2, r7
 800715a:	6921      	ldr	r1, [r4, #16]
 800715c:	f7ff fc32 	bl	80069c4 <memcpy>
 8007160:	89a3      	ldrh	r3, [r4, #12]
 8007162:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800716a:	81a3      	strh	r3, [r4, #12]
 800716c:	6126      	str	r6, [r4, #16]
 800716e:	6165      	str	r5, [r4, #20]
 8007170:	443e      	add	r6, r7
 8007172:	1bed      	subs	r5, r5, r7
 8007174:	6026      	str	r6, [r4, #0]
 8007176:	60a5      	str	r5, [r4, #8]
 8007178:	464e      	mov	r6, r9
 800717a:	454e      	cmp	r6, r9
 800717c:	d900      	bls.n	8007180 <__ssputs_r+0x84>
 800717e:	464e      	mov	r6, r9
 8007180:	4632      	mov	r2, r6
 8007182:	4641      	mov	r1, r8
 8007184:	6820      	ldr	r0, [r4, #0]
 8007186:	f000 f92d 	bl	80073e4 <memmove>
 800718a:	68a3      	ldr	r3, [r4, #8]
 800718c:	1b9b      	subs	r3, r3, r6
 800718e:	60a3      	str	r3, [r4, #8]
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	441e      	add	r6, r3
 8007194:	6026      	str	r6, [r4, #0]
 8007196:	2000      	movs	r0, #0
 8007198:	e7dc      	b.n	8007154 <__ssputs_r+0x58>
 800719a:	462a      	mov	r2, r5
 800719c:	f000 f93d 	bl	800741a <_realloc_r>
 80071a0:	4606      	mov	r6, r0
 80071a2:	2800      	cmp	r0, #0
 80071a4:	d1e2      	bne.n	800716c <__ssputs_r+0x70>
 80071a6:	6921      	ldr	r1, [r4, #16]
 80071a8:	4650      	mov	r0, sl
 80071aa:	f7ff feff 	bl	8006fac <_free_r>
 80071ae:	e7c8      	b.n	8007142 <__ssputs_r+0x46>

080071b0 <_svfiprintf_r>:
 80071b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b4:	461d      	mov	r5, r3
 80071b6:	898b      	ldrh	r3, [r1, #12]
 80071b8:	061f      	lsls	r7, r3, #24
 80071ba:	b09d      	sub	sp, #116	; 0x74
 80071bc:	4680      	mov	r8, r0
 80071be:	460c      	mov	r4, r1
 80071c0:	4616      	mov	r6, r2
 80071c2:	d50f      	bpl.n	80071e4 <_svfiprintf_r+0x34>
 80071c4:	690b      	ldr	r3, [r1, #16]
 80071c6:	b96b      	cbnz	r3, 80071e4 <_svfiprintf_r+0x34>
 80071c8:	2140      	movs	r1, #64	; 0x40
 80071ca:	f7ff ff3d 	bl	8007048 <_malloc_r>
 80071ce:	6020      	str	r0, [r4, #0]
 80071d0:	6120      	str	r0, [r4, #16]
 80071d2:	b928      	cbnz	r0, 80071e0 <_svfiprintf_r+0x30>
 80071d4:	230c      	movs	r3, #12
 80071d6:	f8c8 3000 	str.w	r3, [r8]
 80071da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071de:	e0c8      	b.n	8007372 <_svfiprintf_r+0x1c2>
 80071e0:	2340      	movs	r3, #64	; 0x40
 80071e2:	6163      	str	r3, [r4, #20]
 80071e4:	2300      	movs	r3, #0
 80071e6:	9309      	str	r3, [sp, #36]	; 0x24
 80071e8:	2320      	movs	r3, #32
 80071ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071ee:	2330      	movs	r3, #48	; 0x30
 80071f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071f4:	9503      	str	r5, [sp, #12]
 80071f6:	f04f 0b01 	mov.w	fp, #1
 80071fa:	4637      	mov	r7, r6
 80071fc:	463d      	mov	r5, r7
 80071fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007202:	b10b      	cbz	r3, 8007208 <_svfiprintf_r+0x58>
 8007204:	2b25      	cmp	r3, #37	; 0x25
 8007206:	d13e      	bne.n	8007286 <_svfiprintf_r+0xd6>
 8007208:	ebb7 0a06 	subs.w	sl, r7, r6
 800720c:	d00b      	beq.n	8007226 <_svfiprintf_r+0x76>
 800720e:	4653      	mov	r3, sl
 8007210:	4632      	mov	r2, r6
 8007212:	4621      	mov	r1, r4
 8007214:	4640      	mov	r0, r8
 8007216:	f7ff ff71 	bl	80070fc <__ssputs_r>
 800721a:	3001      	adds	r0, #1
 800721c:	f000 80a4 	beq.w	8007368 <_svfiprintf_r+0x1b8>
 8007220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007222:	4453      	add	r3, sl
 8007224:	9309      	str	r3, [sp, #36]	; 0x24
 8007226:	783b      	ldrb	r3, [r7, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 809d 	beq.w	8007368 <_svfiprintf_r+0x1b8>
 800722e:	2300      	movs	r3, #0
 8007230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007238:	9304      	str	r3, [sp, #16]
 800723a:	9307      	str	r3, [sp, #28]
 800723c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007240:	931a      	str	r3, [sp, #104]	; 0x68
 8007242:	462f      	mov	r7, r5
 8007244:	2205      	movs	r2, #5
 8007246:	f817 1b01 	ldrb.w	r1, [r7], #1
 800724a:	4850      	ldr	r0, [pc, #320]	; (800738c <_svfiprintf_r+0x1dc>)
 800724c:	f7f8 ffe8 	bl	8000220 <memchr>
 8007250:	9b04      	ldr	r3, [sp, #16]
 8007252:	b9d0      	cbnz	r0, 800728a <_svfiprintf_r+0xda>
 8007254:	06d9      	lsls	r1, r3, #27
 8007256:	bf44      	itt	mi
 8007258:	2220      	movmi	r2, #32
 800725a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800725e:	071a      	lsls	r2, r3, #28
 8007260:	bf44      	itt	mi
 8007262:	222b      	movmi	r2, #43	; 0x2b
 8007264:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007268:	782a      	ldrb	r2, [r5, #0]
 800726a:	2a2a      	cmp	r2, #42	; 0x2a
 800726c:	d015      	beq.n	800729a <_svfiprintf_r+0xea>
 800726e:	9a07      	ldr	r2, [sp, #28]
 8007270:	462f      	mov	r7, r5
 8007272:	2000      	movs	r0, #0
 8007274:	250a      	movs	r5, #10
 8007276:	4639      	mov	r1, r7
 8007278:	f811 3b01 	ldrb.w	r3, [r1], #1
 800727c:	3b30      	subs	r3, #48	; 0x30
 800727e:	2b09      	cmp	r3, #9
 8007280:	d94d      	bls.n	800731e <_svfiprintf_r+0x16e>
 8007282:	b1b8      	cbz	r0, 80072b4 <_svfiprintf_r+0x104>
 8007284:	e00f      	b.n	80072a6 <_svfiprintf_r+0xf6>
 8007286:	462f      	mov	r7, r5
 8007288:	e7b8      	b.n	80071fc <_svfiprintf_r+0x4c>
 800728a:	4a40      	ldr	r2, [pc, #256]	; (800738c <_svfiprintf_r+0x1dc>)
 800728c:	1a80      	subs	r0, r0, r2
 800728e:	fa0b f000 	lsl.w	r0, fp, r0
 8007292:	4318      	orrs	r0, r3
 8007294:	9004      	str	r0, [sp, #16]
 8007296:	463d      	mov	r5, r7
 8007298:	e7d3      	b.n	8007242 <_svfiprintf_r+0x92>
 800729a:	9a03      	ldr	r2, [sp, #12]
 800729c:	1d11      	adds	r1, r2, #4
 800729e:	6812      	ldr	r2, [r2, #0]
 80072a0:	9103      	str	r1, [sp, #12]
 80072a2:	2a00      	cmp	r2, #0
 80072a4:	db01      	blt.n	80072aa <_svfiprintf_r+0xfa>
 80072a6:	9207      	str	r2, [sp, #28]
 80072a8:	e004      	b.n	80072b4 <_svfiprintf_r+0x104>
 80072aa:	4252      	negs	r2, r2
 80072ac:	f043 0302 	orr.w	r3, r3, #2
 80072b0:	9207      	str	r2, [sp, #28]
 80072b2:	9304      	str	r3, [sp, #16]
 80072b4:	783b      	ldrb	r3, [r7, #0]
 80072b6:	2b2e      	cmp	r3, #46	; 0x2e
 80072b8:	d10c      	bne.n	80072d4 <_svfiprintf_r+0x124>
 80072ba:	787b      	ldrb	r3, [r7, #1]
 80072bc:	2b2a      	cmp	r3, #42	; 0x2a
 80072be:	d133      	bne.n	8007328 <_svfiprintf_r+0x178>
 80072c0:	9b03      	ldr	r3, [sp, #12]
 80072c2:	1d1a      	adds	r2, r3, #4
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	9203      	str	r2, [sp, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	bfb8      	it	lt
 80072cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80072d0:	3702      	adds	r7, #2
 80072d2:	9305      	str	r3, [sp, #20]
 80072d4:	4d2e      	ldr	r5, [pc, #184]	; (8007390 <_svfiprintf_r+0x1e0>)
 80072d6:	7839      	ldrb	r1, [r7, #0]
 80072d8:	2203      	movs	r2, #3
 80072da:	4628      	mov	r0, r5
 80072dc:	f7f8 ffa0 	bl	8000220 <memchr>
 80072e0:	b138      	cbz	r0, 80072f2 <_svfiprintf_r+0x142>
 80072e2:	2340      	movs	r3, #64	; 0x40
 80072e4:	1b40      	subs	r0, r0, r5
 80072e6:	fa03 f000 	lsl.w	r0, r3, r0
 80072ea:	9b04      	ldr	r3, [sp, #16]
 80072ec:	4303      	orrs	r3, r0
 80072ee:	3701      	adds	r7, #1
 80072f0:	9304      	str	r3, [sp, #16]
 80072f2:	7839      	ldrb	r1, [r7, #0]
 80072f4:	4827      	ldr	r0, [pc, #156]	; (8007394 <_svfiprintf_r+0x1e4>)
 80072f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072fa:	2206      	movs	r2, #6
 80072fc:	1c7e      	adds	r6, r7, #1
 80072fe:	f7f8 ff8f 	bl	8000220 <memchr>
 8007302:	2800      	cmp	r0, #0
 8007304:	d038      	beq.n	8007378 <_svfiprintf_r+0x1c8>
 8007306:	4b24      	ldr	r3, [pc, #144]	; (8007398 <_svfiprintf_r+0x1e8>)
 8007308:	bb13      	cbnz	r3, 8007350 <_svfiprintf_r+0x1a0>
 800730a:	9b03      	ldr	r3, [sp, #12]
 800730c:	3307      	adds	r3, #7
 800730e:	f023 0307 	bic.w	r3, r3, #7
 8007312:	3308      	adds	r3, #8
 8007314:	9303      	str	r3, [sp, #12]
 8007316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007318:	444b      	add	r3, r9
 800731a:	9309      	str	r3, [sp, #36]	; 0x24
 800731c:	e76d      	b.n	80071fa <_svfiprintf_r+0x4a>
 800731e:	fb05 3202 	mla	r2, r5, r2, r3
 8007322:	2001      	movs	r0, #1
 8007324:	460f      	mov	r7, r1
 8007326:	e7a6      	b.n	8007276 <_svfiprintf_r+0xc6>
 8007328:	2300      	movs	r3, #0
 800732a:	3701      	adds	r7, #1
 800732c:	9305      	str	r3, [sp, #20]
 800732e:	4619      	mov	r1, r3
 8007330:	250a      	movs	r5, #10
 8007332:	4638      	mov	r0, r7
 8007334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007338:	3a30      	subs	r2, #48	; 0x30
 800733a:	2a09      	cmp	r2, #9
 800733c:	d903      	bls.n	8007346 <_svfiprintf_r+0x196>
 800733e:	2b00      	cmp	r3, #0
 8007340:	d0c8      	beq.n	80072d4 <_svfiprintf_r+0x124>
 8007342:	9105      	str	r1, [sp, #20]
 8007344:	e7c6      	b.n	80072d4 <_svfiprintf_r+0x124>
 8007346:	fb05 2101 	mla	r1, r5, r1, r2
 800734a:	2301      	movs	r3, #1
 800734c:	4607      	mov	r7, r0
 800734e:	e7f0      	b.n	8007332 <_svfiprintf_r+0x182>
 8007350:	ab03      	add	r3, sp, #12
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	4622      	mov	r2, r4
 8007356:	4b11      	ldr	r3, [pc, #68]	; (800739c <_svfiprintf_r+0x1ec>)
 8007358:	a904      	add	r1, sp, #16
 800735a:	4640      	mov	r0, r8
 800735c:	f7fe f8ee 	bl	800553c <_printf_float>
 8007360:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007364:	4681      	mov	r9, r0
 8007366:	d1d6      	bne.n	8007316 <_svfiprintf_r+0x166>
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	065b      	lsls	r3, r3, #25
 800736c:	f53f af35 	bmi.w	80071da <_svfiprintf_r+0x2a>
 8007370:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007372:	b01d      	add	sp, #116	; 0x74
 8007374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007378:	ab03      	add	r3, sp, #12
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	4622      	mov	r2, r4
 800737e:	4b07      	ldr	r3, [pc, #28]	; (800739c <_svfiprintf_r+0x1ec>)
 8007380:	a904      	add	r1, sp, #16
 8007382:	4640      	mov	r0, r8
 8007384:	f7fe fb90 	bl	8005aa8 <_printf_i>
 8007388:	e7ea      	b.n	8007360 <_svfiprintf_r+0x1b0>
 800738a:	bf00      	nop
 800738c:	080079c4 	.word	0x080079c4
 8007390:	080079ca 	.word	0x080079ca
 8007394:	080079ce 	.word	0x080079ce
 8007398:	0800553d 	.word	0x0800553d
 800739c:	080070fd 	.word	0x080070fd

080073a0 <_sbrk_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	4c06      	ldr	r4, [pc, #24]	; (80073bc <_sbrk_r+0x1c>)
 80073a4:	2300      	movs	r3, #0
 80073a6:	4605      	mov	r5, r0
 80073a8:	4608      	mov	r0, r1
 80073aa:	6023      	str	r3, [r4, #0]
 80073ac:	f7fd fe52 	bl	8005054 <_sbrk>
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	d102      	bne.n	80073ba <_sbrk_r+0x1a>
 80073b4:	6823      	ldr	r3, [r4, #0]
 80073b6:	b103      	cbz	r3, 80073ba <_sbrk_r+0x1a>
 80073b8:	602b      	str	r3, [r5, #0]
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
 80073bc:	20000aa0 	.word	0x20000aa0

080073c0 <__ascii_mbtowc>:
 80073c0:	b082      	sub	sp, #8
 80073c2:	b901      	cbnz	r1, 80073c6 <__ascii_mbtowc+0x6>
 80073c4:	a901      	add	r1, sp, #4
 80073c6:	b142      	cbz	r2, 80073da <__ascii_mbtowc+0x1a>
 80073c8:	b14b      	cbz	r3, 80073de <__ascii_mbtowc+0x1e>
 80073ca:	7813      	ldrb	r3, [r2, #0]
 80073cc:	600b      	str	r3, [r1, #0]
 80073ce:	7812      	ldrb	r2, [r2, #0]
 80073d0:	1c10      	adds	r0, r2, #0
 80073d2:	bf18      	it	ne
 80073d4:	2001      	movne	r0, #1
 80073d6:	b002      	add	sp, #8
 80073d8:	4770      	bx	lr
 80073da:	4610      	mov	r0, r2
 80073dc:	e7fb      	b.n	80073d6 <__ascii_mbtowc+0x16>
 80073de:	f06f 0001 	mvn.w	r0, #1
 80073e2:	e7f8      	b.n	80073d6 <__ascii_mbtowc+0x16>

080073e4 <memmove>:
 80073e4:	4288      	cmp	r0, r1
 80073e6:	b510      	push	{r4, lr}
 80073e8:	eb01 0302 	add.w	r3, r1, r2
 80073ec:	d807      	bhi.n	80073fe <memmove+0x1a>
 80073ee:	1e42      	subs	r2, r0, #1
 80073f0:	4299      	cmp	r1, r3
 80073f2:	d00a      	beq.n	800740a <memmove+0x26>
 80073f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073f8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80073fc:	e7f8      	b.n	80073f0 <memmove+0xc>
 80073fe:	4283      	cmp	r3, r0
 8007400:	d9f5      	bls.n	80073ee <memmove+0xa>
 8007402:	1881      	adds	r1, r0, r2
 8007404:	1ad2      	subs	r2, r2, r3
 8007406:	42d3      	cmn	r3, r2
 8007408:	d100      	bne.n	800740c <memmove+0x28>
 800740a:	bd10      	pop	{r4, pc}
 800740c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007410:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007414:	e7f7      	b.n	8007406 <memmove+0x22>

08007416 <__malloc_lock>:
 8007416:	4770      	bx	lr

08007418 <__malloc_unlock>:
 8007418:	4770      	bx	lr

0800741a <_realloc_r>:
 800741a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741c:	4607      	mov	r7, r0
 800741e:	4614      	mov	r4, r2
 8007420:	460e      	mov	r6, r1
 8007422:	b921      	cbnz	r1, 800742e <_realloc_r+0x14>
 8007424:	4611      	mov	r1, r2
 8007426:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800742a:	f7ff be0d 	b.w	8007048 <_malloc_r>
 800742e:	b922      	cbnz	r2, 800743a <_realloc_r+0x20>
 8007430:	f7ff fdbc 	bl	8006fac <_free_r>
 8007434:	4625      	mov	r5, r4
 8007436:	4628      	mov	r0, r5
 8007438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800743a:	f000 f821 	bl	8007480 <_malloc_usable_size_r>
 800743e:	42a0      	cmp	r0, r4
 8007440:	d20f      	bcs.n	8007462 <_realloc_r+0x48>
 8007442:	4621      	mov	r1, r4
 8007444:	4638      	mov	r0, r7
 8007446:	f7ff fdff 	bl	8007048 <_malloc_r>
 800744a:	4605      	mov	r5, r0
 800744c:	2800      	cmp	r0, #0
 800744e:	d0f2      	beq.n	8007436 <_realloc_r+0x1c>
 8007450:	4631      	mov	r1, r6
 8007452:	4622      	mov	r2, r4
 8007454:	f7ff fab6 	bl	80069c4 <memcpy>
 8007458:	4631      	mov	r1, r6
 800745a:	4638      	mov	r0, r7
 800745c:	f7ff fda6 	bl	8006fac <_free_r>
 8007460:	e7e9      	b.n	8007436 <_realloc_r+0x1c>
 8007462:	4635      	mov	r5, r6
 8007464:	e7e7      	b.n	8007436 <_realloc_r+0x1c>

08007466 <__ascii_wctomb>:
 8007466:	b149      	cbz	r1, 800747c <__ascii_wctomb+0x16>
 8007468:	2aff      	cmp	r2, #255	; 0xff
 800746a:	bf85      	ittet	hi
 800746c:	238a      	movhi	r3, #138	; 0x8a
 800746e:	6003      	strhi	r3, [r0, #0]
 8007470:	700a      	strbls	r2, [r1, #0]
 8007472:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007476:	bf98      	it	ls
 8007478:	2001      	movls	r0, #1
 800747a:	4770      	bx	lr
 800747c:	4608      	mov	r0, r1
 800747e:	4770      	bx	lr

08007480 <_malloc_usable_size_r>:
 8007480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007484:	1f18      	subs	r0, r3, #4
 8007486:	2b00      	cmp	r3, #0
 8007488:	bfbc      	itt	lt
 800748a:	580b      	ldrlt	r3, [r1, r0]
 800748c:	18c0      	addlt	r0, r0, r3
 800748e:	4770      	bx	lr

08007490 <_init>:
 8007490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007492:	bf00      	nop
 8007494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007496:	bc08      	pop	{r3}
 8007498:	469e      	mov	lr, r3
 800749a:	4770      	bx	lr

0800749c <_fini>:
 800749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749e:	bf00      	nop
 80074a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074a2:	bc08      	pop	{r3}
 80074a4:	469e      	mov	lr, r3
 80074a6:	4770      	bx	lr
